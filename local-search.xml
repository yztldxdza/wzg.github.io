<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>代码随想录—数组篇</title>
    <link href="/2022/11/02/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E2%80%94%E6%95%B0%E7%BB%84%E7%AF%87/"/>
    <url>/2022/11/02/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E2%80%94%E6%95%B0%E7%BB%84%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="代码随想录—数组篇"><a href="#代码随想录—数组篇" class="headerlink" title="代码随想录—数组篇"></a>代码随想录—数组篇</h1><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><p>二分法是非常重要的基础算法，做题时注意边界的处理和循环不变量。</p><p>时间复杂度：O(logn)</p><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><p>左闭右闭区间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span> &#123;<br>        <span class="hljs-comment">// 避免当 target 小于nums[0] nums[nums.length - 1]时多次循环运算</span><br>        <span class="hljs-keyword">if</span> (target &lt; nums[<span class="hljs-number">0</span>] || target &gt; nums[nums.length - <span class="hljs-number">1</span>]) &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, right = nums.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> left + ((right - left) &gt;&gt; <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span> (nums[mid] == target)<br>                <span class="hljs-keyword">return</span> mid;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &lt; target)<br>                left = mid + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &gt; target)<br>                right = mid - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>左闭右开区间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, right = nums.length;<br>        <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> left + ((right - left) &gt;&gt; <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span> (nums[mid] == target)<br>                <span class="hljs-keyword">return</span> mid;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &lt; target)<br>                left = mid + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &gt; target)<br>                right = mid;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="相关题目"><a href="#相关题目" class="headerlink" title="相关题目"></a>相关题目</h3><h4 id="35-搜索插入位置"><a href="#35-搜索插入位置" class="headerlink" title="35. 搜索插入位置"></a><a href="https://leetcode.cn/problems/search-insert-position/">35. 搜索插入位置</a></h4><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>这道题就是在二分查找的基础上，增加了边界的思考，在二分查找结束后恰好可以把数组分为两部分：left左边的部分和right右边的部分，而且left左边的部分全部小于target，并以right结尾；right右边的部分全部大于等于target，并以left为首。所以最终答案一定在left的位置。</p><h4 id="34-在排序数组中查找元素的第一个和最后一个位置"><a href="#34-在排序数组中查找元素的第一个和最后一个位置" class="headerlink" title="34. 在排序数组中查找元素的第一个和最后一个位置"></a><a href="https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/">34. 在排序数组中查找元素的第一个和最后一个位置</a></h4><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p><a href="https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/solution/zai-pai-xu-shu-zu-zhong-cha-zhao-yuan-su-b1ox/">在排序数组中查找元素的第一个和最后一个位置 - 在排序数组中查找元素的第一个和最后一个位置 - 力扣（LeetCode）</a></p><h4 id="69-x-的平方根"><a href="#69-x-的平方根" class="headerlink" title="69. x 的平方根 "></a><a href="https://leetcode.cn/problems/sqrtx/">69. x 的平方根 </a></h4><h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>二分查找的下界为 0，上界可以粗略地设定为 x。在二分查找的每一步中，我们只需要比较中间元素mid平方与 x的大小关系，并通过比较的结果调整上下界的范围。</p><h4 id="367-有效的完全平方数"><a href="#367-有效的完全平方数" class="headerlink" title="367. 有效的完全平方数"></a><a href="https://leetcode.cn/problems/valid-perfect-square/">367. 有效的完全平方数</a></h4><h4 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h4><p>和69类似</p><h2 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h2><p>双指针法（快慢指针法）：<strong>通过一个快指针和慢指针在一个for循环下完成两个for循环的工作。</strong></p><ul><li>暴力解法时间复杂度：O(n^2)</li><li>双指针时间复杂度：O(n)</li></ul><p>双指针法（快慢指针法）在数组和链表的操作中是非常常见的，很多考察数组和链表操作的面试题，都使用双指针法。</p><h3 id="相关题目-1"><a href="#相关题目-1" class="headerlink" title="相关题目"></a>相关题目</h3><h4 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27. 移除元素"></a><a href="https://leetcode.cn/problems/remove-element/">27. 移除元素</a></h4><h4 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h4><p><a href="https://leetcode.cn/problems/remove-element/solution/yi-chu-yuan-su-by-yztldxdz-6-g1uv/">移除元素 - 移除元素 - 力扣（LeetCode）</a></p><h4 id="26-删除有序数组中的重复项"><a href="#26-删除有序数组中的重复项" class="headerlink" title="26. 删除有序数组中的重复项"></a><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array/">26. 删除有序数组中的重复项</a></h4><h4 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h4><p><a href="https://leetcode.cn/submissions/detail/217928539/">删除有序数组中的重复项 - 提交记录 - 力扣（LeetCode）</a></p><h4 id="283-移动零"><a href="#283-移动零" class="headerlink" title="283. 移动零"></a><a href="https://leetcode.cn/problems/move-zeroes/">283. 移动零</a></h4><h4 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h4><p><a href="https://leetcode.cn/problems/move-zeroes/solution/yi-dong-ling-by-yztldxdz-6-nq93/">移动零 - 移动零 - 力扣（LeetCode）</a></p><h4 id="844-比较含退格的字符串"><a href="#844-比较含退格的字符串" class="headerlink" title="844. 比较含退格的字符串"></a><a href="https://leetcode.cn/problems/backspace-string-compare/">844. 比较含退格的字符串</a></h4><h4 id="思路-7"><a href="#思路-7" class="headerlink" title="思路"></a>思路</h4><p><a href="https://leetcode.cn/problems/backspace-string-compare/solution/shuang-zhi-zhen-bi-jiao-han-tui-ge-de-zi-8fn8/">比较含退格的字符串</a></p><h4 id="977-有序数组的平方"><a href="#977-有序数组的平方" class="headerlink" title="977. 有序数组的平方"></a><a href="https://leetcode.cn/problems/squares-of-a-sorted-array/">977. 有序数组的平方</a></h4><h4 id="思路-8"><a href="#思路-8" class="headerlink" title="思路"></a>思路</h4><p><a href="https://leetcode.cn/problems/squares-of-a-sorted-array/solution/you-xu-shu-zu-de-ping-fang-by-yztldxdz-6-bbcz/">有序数组的平方 </a></p><h2 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h2><p>所谓滑动窗口，<strong>就是不断的调节子序列的起始位置和终止位置，从而得出我们要想的结果</strong>。</p><p>实现滑动窗口，主要确定如下三点：</p><ul><li>窗口内是什么？</li><li>如何移动窗口的起始位置？</li><li>如何移动窗口的结束位置？</li></ul><p><img src="https://code-thinking.cdn.bcebos.com/gifs/209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.gif"></p><h4 id="相关题目推荐"><a href="#相关题目推荐" class="headerlink" title="相关题目推荐"></a>相关题目推荐</h4><h4 id="904-水果成篮"><a href="#904-水果成篮" class="headerlink" title="904. 水果成篮"></a><a href="https://leetcode.cn/problems/fruit-into-baskets/">904. 水果成篮</a></h4><h4 id="思路-9"><a href="#思路-9" class="headerlink" title="思路"></a>思路</h4><p><a href="https://leetcode.cn/problems/fruit-into-baskets/solution/shui-guo-cheng-lan-by-yztldxdz-6-h0ow/">水果成篮</a></p><h4 id="76-最小覆盖子串"><a href="#76-最小覆盖子串" class="headerlink" title="76. 最小覆盖子串"></a><a href="https://leetcode.cn/problems/minimum-window-substring/">76. 最小覆盖子串</a></h4><h4 id="思路-10"><a href="#思路-10" class="headerlink" title="思路"></a>思路</h4><p><a href="https://leetcode.cn/problems/minimum-window-substring/solution/leetcode-76-zui-xiao-fu-gai-zi-chuan-cja-lmqz/">最小覆盖子串 </a></p><h2 id="模拟行为"><a href="#模拟行为" class="headerlink" title="模拟行为"></a>模拟行为</h2><p>模拟类的题目在数组中很常见，不涉及到什么算法，就是单纯的模拟，十分考察大家对代码的掌控能力。</p><p>在这道题目中，我们再一次介绍到了<strong>循环不变量原则</strong>，其实这也是写程序中的重要原则。</p><h3 id="相关题目-2"><a href="#相关题目-2" class="headerlink" title="相关题目"></a>相关题目</h3><h4 id="59-螺旋矩阵-II"><a href="#59-螺旋矩阵-II" class="headerlink" title="59. 螺旋矩阵 II"></a><a href="https://leetcode.cn/problems/spiral-matrix-ii/">59. 螺旋矩阵 II</a></h4><h4 id="思路-11"><a href="#思路-11" class="headerlink" title="思路"></a>思路</h4><p><a href="https://leetcode.cn/problems/spiral-matrix-ii/solution/luo-xuan-ju-zhen-ii-by-yztldxdz-6-ujjs/">螺旋矩阵 II - 螺旋矩阵 II - 力扣（LeetCode）</a></p><h4 id="54-螺旋矩阵"><a href="#54-螺旋矩阵" class="headerlink" title="54. 螺旋矩阵"></a><a href="https://leetcode.cn/problems/spiral-matrix/">54. 螺旋矩阵</a></h4><h4 id="思路-12"><a href="#思路-12" class="headerlink" title="思路"></a>思路</h4><p><a href="https://leetcode.cn/problems/spiral-matrix/solution/luo-xuan-ju-zhen-by-yztldxdz-6-csa7/">螺旋矩阵 - 螺旋矩阵 - 力扣（LeetCode）</a></p><h4 id="剑指-Offer-29-顺时针打印矩阵"><a href="#剑指-Offer-29-顺时针打印矩阵" class="headerlink" title="剑指 Offer 29. 顺时针打印矩阵"></a><a href="https://leetcode.cn/problems/shun-shi-zhen-da-yin-ju-zhen-lcof/">剑指 Offer 29. 顺时针打印矩阵</a></h4><h4 id="思路-13"><a href="#思路-13" class="headerlink" title="思路"></a>思路</h4><p>模拟边界，参考54和59</p><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/%E6%95%B0%E7%BB%84%E6%80%BB%E7%BB%93.png"></p>]]></content>
    
    
    <categories>
      
      <category>代码随想录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM上篇内存与垃圾回收-JVM与Java体系结构</title>
    <link href="/2022/11/01/JVM%E4%B8%8A%E7%AF%87%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6-JVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
    <url>/2022/11/01/JVM%E4%B8%8A%E7%AF%87%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6-JVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h4 id="什么是Java虚拟机"><a href="#什么是Java虚拟机" class="headerlink" title="什么是Java虚拟机"></a>什么是Java虚拟机</h4><ul><li>Java虚拟机是一台执行Java字节码的虚拟计算机，它拥有独立的运行机制，其运行的Java字节码也未必由Java语言编译而成。</li><li>JVM平台的各种语言可以共享Java虚拟机带来的跨平台性、优秀的垃圾回器，以及可靠的即时编译器。</li><li>Java技术的核心就是Java虚拟机（JVM，Java Virtual Machine），因为所有的Java程序都运行在Java虚拟机内部。</li></ul><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><ul><li>Java虚拟机就是二进制字节码的运行环境，负责装载字节码到其内部，解释&#x2F;编译为对应平台上的机器指令执行。每一条Java指令，Java虚拟机规范中都有详细定义，如怎么取操作数，怎么处理操作数，处理结果放在哪里。</li></ul><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>一次编译，到处运行</li><li>自动内存管理</li><li>自动垃圾回收功能</li></ul><h4 id="Java虚拟机整体架构祥图"><a href="#Java虚拟机整体架构祥图" class="headerlink" title="Java虚拟机整体架构祥图"></a>Java虚拟机整体架构祥图</h4><p><img src="http://cdn.processon.com/617677b107912943ddf963f5?e=1635157442&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:B7TAG_HN3-KtssgCt8QJ73AkF7I=" alt="img"></p><h4 id="Java代码执行过程详图"><a href="#Java代码执行过程详图" class="headerlink" title="Java代码执行过程详图"></a>Java代码执行过程详图</h4><p><img src="http://cdn.processon.com/5ed1a239e401fd0735a2f611?e=1590800457&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:fExc8EcgqNtdkFxDJEuemmIcdr0=" alt="img"></p><h4 id="汇编语言、机器语言、高级语言关系"><a href="#汇编语言、机器语言、高级语言关系" class="headerlink" title="汇编语言、机器语言、高级语言关系"></a>汇编语言、机器语言、高级语言关系</h4><p><img src="http://cdn.processon.com/5ed1a2827d9c080702835476?e=1590800530&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:PJekL3fbjdLias5PHGDRjVMhQbc=" alt="img"></p><h4 id="JVM的架构模型"><a href="#JVM的架构模型" class="headerlink" title="JVM的架构模型"></a>JVM的架构模型</h4><p>Java编译器输入的指令流基本上是一种基于<strong>栈</strong>的指令集架构，另外一种指令集架构则是基于<strong>寄存器</strong>的指令集架构。</p><p><strong>基于栈式架构的特点</strong></p><ul><li>设计和实现更简单，适用于资源受限的系统</li><li>避开了寄存器的分配难题：使用零地址指令方式分配</li><li>指令流中的指令大部分是零地址指令，其执行过程依赖于操作栈。指令集更小，编译器容易实现</li><li>不需要硬件支持，可移植性更好，更好实现跨平台</li></ul><p><strong>基于寄存器架构的特点</strong></p><ul><li>典型的应用是x86的二进制指令集：比如传统的PC以及Android的Davlik虚拟机</li><li>指令集架构则完全依赖硬件，可移植性差</li><li>性能优秀和执行更高效</li><li>花费更少的指令去完成一项操作</li><li>在大部分情况下，基于寄存器架构的指令集往往都以一地址指令、二地址指令和三地址指令为主，而基于栈式架构的指令集却是以零地址指令为主</li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>由于跨平台性的设计，Java的指令都是根据栈来设计的。不同平台CPU架构不同，所以不能设计为基于寄存器的。<strong>栈的优点是跨平台，指令集小，编译器容易实现，缺点是性能下降，实现同样的功能需要更多的指令。</strong></p><h4 id="javap-查看字节码"><a href="#javap-查看字节码" class="headerlink" title="javap 查看字节码"></a>javap 查看字节码</h4><ul><li>-v输出附加信息</li><li>-l输出行号和本地变量表</li><li>-p显示所有类和成员</li><li>-c对代码进行反汇编</li></ul><h4 id="JVM的生命周期"><a href="#JVM的生命周期" class="headerlink" title="JVM的生命周期"></a>JVM的生命周期</h4><p><strong>虚拟机的启动</strong></p><p>Java虚拟机的启动是通过引导类加载器（bootstrap class loader）创建一个初始类（initial class）来完成的，这个类是由虚拟机的具体实现指定的。</p><p><strong>虚拟机的执行</strong></p><ul><li>一个运行中的Java虚拟机有着一个清晰的任务：执行Java程序。</li><li>程序开始执行时他才运行，程序结束时他就停止。</li><li>执行一个所谓的Java程序的时候，真真正正在执行的是一个叫做Java虚拟机的进程。</li></ul><p><strong>虚拟机的退出</strong></p><p>有如下的几种情况：</p><ul><li>程序正常执行结束</li><li>程序在执行过程中遇到了异常或错误而异常终止</li><li>由于操作系统用现错误而导致Java虚拟机进程终止</li><li>某线程调用Runtime类或system类的exit方法，或Runtime类的halt方法，并且Java安全管理器也允许这次exit或halt操作。</li><li>除此之外，JNI（Java Native Interface）规范描述了用JNI Invocation API来加载或卸载 Java虚拟机时，Java虚拟机的退出情况。</li></ul><h4 id="JVM发展历程"><a href="#JVM发展历程" class="headerlink" title="JVM发展历程"></a>JVM发展历程</h4><ul><li>sun Classic VM<ul><li>世界第一款商用Java虚拟机</li><li>JDK1.4时被淘汰</li><li>只提供了解释器</li><li>如果使用JIT编译器，就需要外挂，但是JIT和解释器不能配合工作</li></ul></li><li>Exact VM<ul><li>为了解决上一个虚拟机问题，JDK1.2时，sun提供了此虚拟机</li><li>Exact Memory Management：准确式内存管理<ul><li>虚拟机知道内存中某个位置的数据是什么类型</li></ul></li><li>具有现代高性能虚拟机的雏形<ul><li>热点探测</li><li>编译器与解释器混合工作模式</li></ul></li><li>只在Solaris平台短暂使用，其他平台还是Classic vm<ul><li>英雄气短，被hotspot虚拟机替换</li></ul></li></ul></li><li>hotspot虚拟机<ul><li>最初由Longview Technologies的小公司设计，1997年被sun公司收购，2009年sun公司被甲骨文收购</li><li>JDK1.3时，HotSpot VM成为默认虚拟机</li><li>绝对市场地位，称霸武林<ul><li>JDK6,8等均默认</li></ul></li><li>HotSpot就是他的热点代码探测技术<ul><li>通过计数器找到最具编译价值代码，触发即时编译或栈上替换</li><li>通过编译器与解释器协同工作，在优化响应时间和最佳执行性能中取得平衡</li></ul></li></ul></li><li>JRockit<ul><li>BEA公司</li><li>专注服务器端应用<ul><li>不太关注程序启动速度，引起JRockit内部不包括解析器实现，全部代码靠即时编译器编译后执行</li></ul></li><li>世界上最快的JVM</li><li>全面的Java运行时解决方案组合<ul><li>JRockit Real Time提供毫秒或微秒级的JVM响应时间，适合财务、军事指挥，电信网络的需要</li><li>MissionControl服务套件，极低的开销，来监控、管理和分析生成环境中的应用程序的工具</li></ul></li><li>2008年BEA被oracle收购</li><li>JDK8中，在HOTSPOT的基础上，移植JRockit的优秀特性</li></ul></li><li>IBM J9<ul><li>全称：IBM Technology for java Virtual Machine 简称IT4J，内部代号J9</li><li>市场定位与HotSpot接近，服务器端、桌面应用，嵌入式等多用途VM</li><li>广泛应用于IBM的各种Java产品<ul><li>IBM产品结合使用性能最好</li></ul></li><li>有影响力的三大商用虚拟机之一</li><li>2017开源，OPEN J9</li></ul></li><li>KVM和CDC&#x2F;CLDC HotSpot<ul><li>JavaME产品线产品<ul><li>智能控制器、传感器、老人手机等</li></ul></li></ul></li><li>Azul VM<ul><li>与特定硬件平台绑定、软硬件配合的专有虚拟机</li><li>运行于Azul Systems公司的专有硬件Vega系统上的虚拟机</li><li>每个实例可以管理至少数十个CPU和数百GB内存的硬件资源，并提供在巨大内存范围内实现可控的GC时间的垃圾收集器，专有硬件优化的线程调度等优秀特性</li><li>2010年，发布自己的Zing JVM，可以在通用X86平台上提供接近于vega系统的特性</li></ul></li><li>Liquid VM<ul><li>BEA公司开发的，运行在自家Hypervisor系统上</li><li>不需要操作系统支持，本身实现了一个专用操作系统的必要功能，如线程调度、文件系统、网络支持等</li><li>随着JRockit虚拟机终止开发，Liquid VM项目也停止了</li></ul></li><li>Apache Harmony<ul><li>JDK1.5,1.6兼容IBM和In</li><li>tel联合开发的开源JVM，2011年退役Java</li><li>类库代码吸纳进了Android SDK</li></ul></li><li>Microsoft JVM<ul><li>只能在Windows平台运行，xp系统中不用了。</li></ul></li><li>TaobaoJVM<ul><li>基于OpenJDK开发了自己的定制版本AlibabaJDK</li><li>深度定制且开源的高性能服务器版JAVA虚拟机</li><li>GCIH：GC invisible heap，将生命周期较长的Java对象从heap中已到heap之外，并且GC不能管理GCIH内部的Java对象，以此达到降低GC的回收频率和提升GC的回收效率</li><li>GCIH中的对象还能够在多个JAVA虚拟机进程中实现共享</li><li>使用crc32指令实现JVM intrinsic降低JNI的调用开销</li><li>针对大数据场景的ZenGC</li><li>在阿里产品上性能高，硬件严重依赖intel的CPU，损失了兼容性，但是提高了性能</li><li>淘宝、天猫上线，把oracle官方JVM版本全部替换</li></ul></li><li>Dalvik VM<ul><li>谷歌开发，应用于Android系统，安卓2.2提供了JIT，发展迅猛</li><li>只能称作虚拟机，不能称作Java虚拟机，没有遵循Java虚拟机规范</li><li>不能直接执行Java的Class文件</li><li>基于寄存器架构，不是jvm的栈架构</li><li>执行的是编译后的dex文件，执行效率比较高</li><li>安卓5.0使用支持提前编译AOT的ART VM替换Dalvik VM</li></ul></li><li>Grall VM<ul><li>2018年4月，Oracle labs公开了GraalVM。</li><li>跨语言全栈虚拟机，可以作为任何语言的运行平台使用</li></ul></li></ul><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p>具体JVM的内存结构，其实取决于其实现，不同厂商的JVM，或者同一厂商发布的不同版本，都有可能存在一定差异。主要以Oracle HotSpot VM为默认虚拟机。</p>]]></content>
    
    
    <categories>
      
      <category>JVM上篇内存与垃圾回收</category>
      
    </categories>
    
    
    <tags>
      
      <tag>八股文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>尚医通总结</title>
    <link href="/2022/10/19/%E5%B0%9A%E5%8C%BB%E9%80%9A%E6%80%BB%E7%BB%93/"/>
    <url>/2022/10/19/%E5%B0%9A%E5%8C%BB%E9%80%9A%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="尚医通总结"><a href="#尚医通总结" class="headerlink" title="尚医通总结"></a>尚医通总结</h1><h4 id="感受："><a href="#感受：" class="headerlink" title="感受："></a>感受：</h4><p>前前后后花了20天终于把这个项目的整体功能跑通了，幸好之前有个备案的域名(就是这个博客)，借助它实现了阿里云的短信服务和OSS对象存储。</p><p>总体来说进度挺慢的，大部分时间都用在了修BUG上，特别是版本问题，视频教程的时间是2020年12月，我是2022年10月开始写的中间隔了一年多，很多技术的用法和一年多以前不同了，比如说微信的退款接口发生改变了等。</p><p>作为我的第一个微服务项目，我的确从里面学到了不少东西，比如第三方接口的接入一定要能看得懂官方文档。</p><h4 id="GitHub地址："><a href="#GitHub地址：" class="headerlink" title="GitHub地址："></a>GitHub地址：</h4><p>尚医通项目系统后台：<a href="https://github.com/yztldxdza/yygh_parent">yztldxdza&#x2F;yygh_parent (github.com)</a></p><p>尚医通项目用户前台：<a href="https://github.com/yztldxdza/yygh-site">yztldxdza&#x2F;yygh-site (github.com)</a></p><p>尚医通医院后台：<a href="https://github.com/yztldxdza/vue-admin">yztldxdza&#x2F;vue-admin (github.com)</a></p><h4 id="如何阅读微服务项目？"><a href="#如何阅读微服务项目？" class="headerlink" title="如何阅读微服务项目？"></a><strong>如何阅读微服务项目？</strong></h4><ol><li>了解项目业务</li><li>把项目运行起来</li><li>走完一套完整的业务流程，了解整个系统做了什么事</li><li>了解有哪些服务、以及每个服务的作用（做了什么事情）</li><li>了解服务之间是如何互相通讯的</li><li>根据需求阅读对应服务的源码细节</li></ol><h4 id="知识点："><a href="#知识点：" class="headerlink" title="知识点："></a>知识点：</h4><ol><li>基于Spring Cloud+Nacos实现项目的微服务化，划分项目为公共、用户、订单等服务，提高项目的可扩展性和容错性。</li><li>使用Spring Data注解实现自动Redis缓存，并通过自定义Redis Key Generator来根据类和方法自动生成</li><li>key,降低开发成本、避免key冲突。</li><li>使用Spring Cloud Gateway实现微服务请求转发，并在网关层全局解决跨域、用户鉴权、黑白名单、内网</li><li>服务保护等问题，降低开发成本、提高安全性。</li><li>提供Restful API供外部系统接入并上报数据，并通过API签名认证保障了接口的安全性。</li><li>使用JWT实现单点登录，并支特手机验证码、OAut2微信扫码登录，提高用户真实性和登录安全性</li><li>对接微信支付AP!实现预约付款，并通过全局唯一ⅰd以及支付&#x2F;退款记录表的设计保证了支付操作的幂等性</li><li>使用MongoDB代替MySQL存储读多写少的半结构化数据（如医院信息），实测查询性提高x%。(自己用Meter测试一下)</li><li>基于Docker快速搭建项目依赖服务（如RabbitMQ),，并通过Docker log命令查看日志，降低本地开发运维成本。</li><li>为应对流量高峰，使用RabbitMQ将下单减库存等耗时操作异步化，提升下单接口单机QPS(x至X)</li><li>使用Spring Scheduler实现定时预约提醒功能，并使用RabbitMQ实现定时服务和通知服务的解耦，提高服务可维护性。</li></ol><h4 id="使用到的注解"><a href="#使用到的注解" class="headerlink" title="使用到的注解"></a>使用到的注解</h4><h5 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h5><ul><li>@Configuration：指示一个类声明一个或多个@Bean方法，并且可以由Spring容器处理，以便在运行时为这些bean生成BeanDefinition和服务请求，常用于config配置类</li><li>@ControllerAdvice：@Controller 的增强版。@ControllerAdvice主要用来处理全局数据，一般搭配@ExceptionHandler、@ModelAttribute以及@InitBinder使用。最常见的使用场景就是全局异常处理</li><li>@RestController：等同于@Controller + @ResponseBody。首先表明了这个类是一个控制器类表示方法的返回值直接以指定的格式写入Http response body中，而不是解析为跳转路径。</li><li>格式的转换是通过HttpMessageConverter中的方法实现的，因为它是一个接口，因此由其实现类完成转换。</li><li>如果要求方法返回的是json格式数据，而不是跳转页面，可以直接在类上标注@RestController，而不用在每个方法中标注@ResponseBody，简化了开发过程。</li></ul><h5 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h5><ul><li><p>@Cacheable<br>根据方法对其返回结果进行缓存，下次请求时，如果缓存存在，则直接读取缓存数据返回；如果缓存不存在，则执行方法，并把返回的结果存入缓存中。一般用在查询方法上。<br>@CachePut<br>使用该注解标志的方法，每次都会执行，并将结果存入指定的缓存中。其他方法可以直接从响应的缓存中读取缓存数据，而不需要再去查询数据库。一般用在新增方法上。<br>@CacheEvict<br>使用该注解标志的方法，会清空指定的缓存。一般用在更新或者删除方法上</p></li><li><p>@RequestBody对应前端请求中没有{}占位符的情况<br>@PathVariable对应前端请求中有{}占位符的情况，进行值匹配</p></li><li><p>@Cacheable<br>根据方法对其返回结果进行缓存，下次请求时，如果缓存存在，则直接读取缓存数据返回；如果缓存不存在，则执行方法，并把返回的结果存入缓存中。一般用在查询方法上。</p></li><li><p>@CachePut<br>使用该注解标志的方法，每次都会执行，并将结果存入指定的缓存中。其他方法可以直接从响应的缓存中读取缓存数据，而不需要再去查询数据库。一般用在新增方法上。</p></li><li><p>@CacheEvict<br>使用该注解标志的方法，会清空指定的缓存。一般用在更新或者删除方法上<br>用于数据字典的导入</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>尚医通项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>尚医通-用户业务</title>
    <link href="/2022/10/19/%E5%B0%9A%E5%8C%BB%E9%80%9A-%E7%94%A8%E6%88%B7%E4%B8%9A%E5%8A%A1/"/>
    <url>/2022/10/19/%E5%B0%9A%E5%8C%BB%E9%80%9A-%E7%94%A8%E6%88%B7%E4%B8%9A%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="尚医通-用户业务"><a href="#尚医通-用户业务" class="headerlink" title="尚医通-用户业务"></a>尚医通-用户业务</h2><p>该业务由登录后的：实名认证和就诊人两个子业务组成</p><h4 id="位置："><a href="#位置：" class="headerlink" title="位置："></a>位置：</h4><p>service模块\service_user子模块\api包</p><h3 id="实名认证"><a href="#实名认证" class="headerlink" title="实名认证"></a>实名认证</h3><h4 id="01-用户手机号登录接口"><a href="#01-用户手机号登录接口" class="headerlink" title="01 用户手机号登录接口"></a>01 用户手机号登录接口</h4><h5 id="前端请求："><a href="#前端请求：" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;login&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理："><a href="#后端处理：" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">login</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> LoginVo loginVo)</span> &#123;<br>    Map&lt;String,Object&gt; info = userInfoService.loginUser(loginVo);<br>    <span class="hljs-keyword">return</span> Result.ok(info);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="02-用户认证接口"><a href="#02-用户认证接口" class="headerlink" title="02 用户认证接口"></a>02 用户认证接口</h4><h5 id="前端请求：-1"><a href="#前端请求：-1" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;auth/userAuth&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理：-1"><a href="#后端处理：-1" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">userAuth</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> UserAuthVo userAuthVo, HttpServletRequest request)</span> &#123;<br>    <span class="hljs-comment">//传递两个参数，第一个参数用户id，第二个参数认证数据vo对象</span><br>    userInfoService.userAuth(AuthContextHolder.getUserId(request),userAuthVo);<br>    <span class="hljs-keyword">return</span> Result.ok();<br>&#125;<br></code></pre></td></tr></table></figure><p>userAuth方法具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">userAuth</span><span class="hljs-params">(Long userId, UserAuthVo userAuthVo)</span> &#123;<br>    <span class="hljs-comment">//根据用户id查询用户信息</span><br>    <span class="hljs-type">UserInfo</span> <span class="hljs-variable">userInfo</span> <span class="hljs-operator">=</span> baseMapper.selectById(userId);<br>    <span class="hljs-comment">//设置认证信息</span><br>    <span class="hljs-comment">//认证人姓名</span><br>    userInfo.setName(userAuthVo.getName());<br>    <span class="hljs-comment">//其他认证信息</span><br>    userInfo.setCertificatesType(userAuthVo.getCertificatesType());<br>    userInfo.setCertificatesNo(userAuthVo.getCertificatesNo());<br>    userInfo.setCertificatesUrl(userAuthVo.getCertificatesUrl());<br>    userInfo.setAuthStatus(AuthStatusEnum.AUTH_RUN.getStatus());<br>    <span class="hljs-comment">//进行信息更新</span><br>    baseMapper.updateById(userInfo);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="03-获取用户id信息接口"><a href="#03-获取用户id信息接口" class="headerlink" title="03 获取用户id信息接口"></a>03 获取用户id信息接口</h4><h5 id="前端请求：-2"><a href="#前端请求：-2" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;auth/getUserInfo&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理：-2"><a href="#后端处理：-2" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">getUserInfo</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> AuthContextHolder.getUserId(request);<br>    <span class="hljs-type">UserInfo</span> <span class="hljs-variable">userInfo</span> <span class="hljs-operator">=</span> userInfoService.getById(userId);<br>    <span class="hljs-keyword">return</span> Result.ok(userInfo);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="04-用户列表（条件查询带分页）"><a href="#04-用户列表（条件查询带分页）" class="headerlink" title="04 用户列表（条件查询带分页）"></a>04 用户列表（条件查询带分页）</h4><h5 id="前端请求：-3"><a href="#前端请求：-3" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;&#123;page&#125;/&#123;limit&#125;&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理：-3"><a href="#后端处理：-3" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">list</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long page,</span><br><span class="hljs-params">                   <span class="hljs-meta">@PathVariable</span> Long limit,</span><br><span class="hljs-params">                   UserInfoQueryVo userInfoQueryVo)</span> &#123;<br>    Page&lt;UserInfo&gt; pageParam = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(page,limit);<br>    IPage&lt;UserInfo&gt; pageModel =<br>            userInfoService.selectPage(pageParam,userInfoQueryVo);<br>    <span class="hljs-keyword">return</span> Result.ok(pageModel);<br>&#125;<br></code></pre></td></tr></table></figure><p>selectPage方法具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> IPage&lt;UserInfo&gt; <span class="hljs-title function_">selectPage</span><span class="hljs-params">(Page&lt;UserInfo&gt; pageParam, UserInfoQueryVo userInfoQueryVo)</span> &#123;<br>    <span class="hljs-comment">//UserInfoQueryVo获取条件值</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> userInfoQueryVo.getKeyword(); <span class="hljs-comment">//用户名称</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">status</span> <span class="hljs-operator">=</span> userInfoQueryVo.getStatus();<span class="hljs-comment">//用户状态</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">authStatus</span> <span class="hljs-operator">=</span> userInfoQueryVo.getAuthStatus(); <span class="hljs-comment">//认证状态</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">createTimeBegin</span> <span class="hljs-operator">=</span> userInfoQueryVo.getCreateTimeBegin(); <span class="hljs-comment">//开始时间</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">createTimeEnd</span> <span class="hljs-operator">=</span> userInfoQueryVo.getCreateTimeEnd(); <span class="hljs-comment">//结束时间</span><br>    <span class="hljs-comment">//对条件值进行非空判断</span><br>    QueryWrapper&lt;UserInfo&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>    <span class="hljs-keyword">if</span>(!StringUtils.isEmpty(name)) &#123;<br>        wrapper.like(<span class="hljs-string">&quot;name&quot;</span>,name);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!StringUtils.isEmpty(status)) &#123;<br>        wrapper.eq(<span class="hljs-string">&quot;status&quot;</span>,status);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!StringUtils.isEmpty(authStatus)) &#123;<br>        wrapper.eq(<span class="hljs-string">&quot;auth_status&quot;</span>,authStatus);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!StringUtils.isEmpty(createTimeBegin)) &#123;<br>        wrapper.ge(<span class="hljs-string">&quot;create_time&quot;</span>,createTimeBegin);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!StringUtils.isEmpty(createTimeEnd)) &#123;<br>        wrapper.le(<span class="hljs-string">&quot;create_time&quot;</span>,createTimeEnd);<br>    &#125;<br>    <span class="hljs-comment">//调用mapper的方法</span><br>    IPage&lt;UserInfo&gt; pages = baseMapper.selectPage(pageParam, wrapper);<br>    <span class="hljs-comment">//编号变成对应值封装</span><br>    pages.getRecords().stream().forEach(item -&gt; &#123;<br>        <span class="hljs-built_in">this</span>.packageUserInfo(item);<br>    &#125;);<br>    <span class="hljs-keyword">return</span> pages;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="05-用户锁定"><a href="#05-用户锁定" class="headerlink" title="05 用户锁定"></a>05 用户锁定</h4><h5 id="前端请求：-4"><a href="#前端请求：-4" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;lock/&#123;userId&#125;/&#123;status&#125;&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理：-4"><a href="#后端处理：-4" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">lock</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long userId,<span class="hljs-meta">@PathVariable</span> Integer status)</span> &#123;<br>    userInfoService.lock(userId,status);<br>    <span class="hljs-keyword">return</span> Result.ok();<br>&#125;<br></code></pre></td></tr></table></figure><p>lock方法具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lock</span><span class="hljs-params">(Long userId, Integer status)</span> &#123;<br>    <span class="hljs-keyword">if</span>(status.intValue()==<span class="hljs-number">0</span> || status.intValue()==<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-type">UserInfo</span> <span class="hljs-variable">userInfo</span> <span class="hljs-operator">=</span> baseMapper.selectById(userId);<br>        userInfo.setStatus(status);<br>        baseMapper.updateById(userInfo);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="06-用户详情"><a href="#06-用户详情" class="headerlink" title="06 用户详情"></a>06 用户详情</h4><h5 id="前端请求：-5"><a href="#前端请求：-5" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;show/&#123;userId&#125;&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理：-5"><a href="#后端处理：-5" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">show</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long userId)</span> &#123;<br>    Map&lt;String,Object&gt; map = userInfoService.show(userId);<br>    <span class="hljs-keyword">return</span> Result.ok(map);<br>&#125;<br></code></pre></td></tr></table></figure><p>show方法具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title function_">show</span><span class="hljs-params">(Long userId)</span> &#123;<br>    Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-comment">//根据userid查询用户信息</span><br>    <span class="hljs-type">UserInfo</span> <span class="hljs-variable">userInfo</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.packageUserInfo(baseMapper.selectById(userId));<br>    map.put(<span class="hljs-string">&quot;userInfo&quot;</span>,userInfo);<br>    <span class="hljs-comment">//根据userid查询就诊人信息</span><br>    List&lt;Patient&gt; patientList = patientService.findAllUserId(userId);<br>    map.put(<span class="hljs-string">&quot;patientList&quot;</span>,patientList);<br>    <span class="hljs-keyword">return</span> map;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="07-认证审批"><a href="#07-认证审批" class="headerlink" title="07 认证审批"></a>07 认证审批</h4><h5 id="前端请求：-6"><a href="#前端请求：-6" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;approval/&#123;userId&#125;/&#123;authStatus&#125;&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理：-6"><a href="#后端处理：-6" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">approval</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long userId,<span class="hljs-meta">@PathVariable</span> Integer authStatus)</span> &#123;<br>    userInfoService.approval(userId,authStatus);<br>    <span class="hljs-keyword">return</span> Result.ok();<br>&#125;<br></code></pre></td></tr></table></figure><p>approval方法具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">approval</span><span class="hljs-params">(Long userId, Integer authStatus)</span> &#123;<br>    <span class="hljs-keyword">if</span>(authStatus.intValue()==<span class="hljs-number">2</span> || authStatus.intValue()==-<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-type">UserInfo</span> <span class="hljs-variable">userInfo</span> <span class="hljs-operator">=</span> baseMapper.selectById(userId);<br>        userInfo.setAuthStatus(authStatus);<br>        baseMapper.updateById(userInfo);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="就诊人管理"><a href="#就诊人管理" class="headerlink" title="就诊人管理"></a>就诊人管理</h3><h4 id="01-获取就诊人列表"><a href="#01-获取就诊人列表" class="headerlink" title="01 获取就诊人列表"></a>01 获取就诊人列表</h4><h5 id="前端请求：-7"><a href="#前端请求：-7" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;auth/findAll&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理：-7"><a href="#后端处理：-7" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">findAll</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>    <span class="hljs-comment">//获取当前登录用户id</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> AuthContextHolder.getUserId(request);<br>    List&lt;Patient&gt; list = patientService.findAllUserId(userId);<br>    <span class="hljs-keyword">return</span> Result.ok(list);<br>&#125;<br></code></pre></td></tr></table></figure><p>findAllUserId方法具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;Patient&gt; <span class="hljs-title function_">findAllUserId</span><span class="hljs-params">(Long userId)</span> &#123;<br>    <span class="hljs-comment">//根据userid查询所有就诊人信息列表</span><br>    QueryWrapper&lt;Patient&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>    wrapper.eq(<span class="hljs-string">&quot;user_id&quot;</span>,userId);<br>    List&lt;Patient&gt; patientList = baseMapper.selectList(wrapper);<br>    <span class="hljs-comment">//通过远程调用，得到编码对应具体内容，查询数据字典表内容</span><br>    patientList.stream().forEach(item -&gt; &#123;<br>        <span class="hljs-comment">//其他参数封装</span><br>        <span class="hljs-built_in">this</span>.packPatient(item);<br>    &#125;);<br>    <span class="hljs-keyword">return</span> patientList;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="02-添加就诊人"><a href="#02-添加就诊人" class="headerlink" title="02 添加就诊人"></a>02 添加就诊人</h4><h5 id="前端请求：-8"><a href="#前端请求：-8" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;auth/save&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理：-8"><a href="#后端处理：-8" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">savePatient</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Patient patient, HttpServletRequest request)</span> &#123;<br>    <span class="hljs-comment">//获取当前登录用户id</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> AuthContextHolder.getUserId(request);<br>    patient.setUserId(userId);<br>    patientService.save(patient);<br>    <span class="hljs-keyword">return</span> Result.ok();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="03-根据id获取就诊人信息"><a href="#03-根据id获取就诊人信息" class="headerlink" title="03 根据id获取就诊人信息"></a>03 根据id获取就诊人信息</h4><h5 id="前端请求：-9"><a href="#前端请求：-9" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;auth/get/&#123;id&#125;&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理：-9"><a href="#后端处理：-9" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">getPatient</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span> &#123;<br>    <span class="hljs-type">Patient</span> <span class="hljs-variable">patient</span> <span class="hljs-operator">=</span> patientService.getPatientId(id);<br>    <span class="hljs-keyword">return</span> Result.ok(patient);<br>&#125;<br></code></pre></td></tr></table></figure><p>getPatientId方法具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Patient <span class="hljs-title function_">getPatientId</span><span class="hljs-params">(Long id)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.packPatient(baseMapper.selectById(id));<br>&#125;<br></code></pre></td></tr></table></figure><p>packPatient方法具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Patient <span class="hljs-title function_">packPatient</span><span class="hljs-params">(Patient patient)</span> &#123;<br>    <span class="hljs-comment">//根据证件类型编码，获取证件类型具体指</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">certificatesTypeString</span> <span class="hljs-operator">=</span><br>            dictFeignClient.getName(DictEnum.CERTIFICATES_TYPE.getDictCode(), patient.getCertificatesType());<span class="hljs-comment">//联系人证件</span><br>    <span class="hljs-comment">//联系人证件类型</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">contactsCertificatesTypeString</span> <span class="hljs-operator">=</span><br>            dictFeignClient.getName(DictEnum.CERTIFICATES_TYPE.getDictCode(),patient.getContactsCertificatesType());<br>    <span class="hljs-comment">//省</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">provinceString</span> <span class="hljs-operator">=</span> dictFeignClient.getName(patient.getProvinceCode());<br>    <span class="hljs-comment">//市</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">cityString</span> <span class="hljs-operator">=</span> dictFeignClient.getName(patient.getCityCode());<br>    <span class="hljs-comment">//区</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">districtString</span> <span class="hljs-operator">=</span> dictFeignClient.getName(patient.getDistrictCode());<br><br>    patient.getParam().put(<span class="hljs-string">&quot;certificatesTypeString&quot;</span>, certificatesTypeString);<br>    patient.getParam().put(<span class="hljs-string">&quot;contactsCertificatesTypeString&quot;</span>, contactsCertificatesTypeString);<br>    patient.getParam().put(<span class="hljs-string">&quot;provinceString&quot;</span>, provinceString);<br>    patient.getParam().put(<span class="hljs-string">&quot;cityString&quot;</span>, cityString);<br>    patient.getParam().put(<span class="hljs-string">&quot;districtString&quot;</span>, districtString);<br>    patient.getParam().put(<span class="hljs-string">&quot;fullAddress&quot;</span>, provinceString + cityString + districtString + patient.getAddress());<br>    <span class="hljs-keyword">return</span> patient;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="04-修改就诊人"><a href="#04-修改就诊人" class="headerlink" title="04 修改就诊人"></a>04 修改就诊人</h4><h5 id="前端请求：-10"><a href="#前端请求：-10" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;auth/update&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理：-10"><a href="#后端处理：-10" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">updatePatient</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Patient patient)</span> &#123;<br>    patientService.updateById(patient);<br>    <span class="hljs-keyword">return</span> Result.ok();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="05-删除就诊人"><a href="#05-删除就诊人" class="headerlink" title="05 删除就诊人"></a>05 删除就诊人</h4><h5 id="前端请求：-11"><a href="#前端请求：-11" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@DeleteMapping(&quot;auth/remove/&#123;id&#125;&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理：-11"><a href="#后端处理：-11" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">removePatient</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span> &#123;<br>    patientService.removeById(id);<br>    <span class="hljs-keyword">return</span> Result.ok();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="06-根据就诊人id获取就诊人信息"><a href="#06-根据就诊人id获取就诊人信息" class="headerlink" title="06 根据就诊人id获取就诊人信息"></a>06 根据就诊人id获取就诊人信息</h4><h5 id="前端请求：-12"><a href="#前端请求：-12" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;inner/get/&#123;id&#125;&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理：-12"><a href="#后端处理：-12" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Patient <span class="hljs-title function_">getPatientOrder</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span> &#123;<br>    <span class="hljs-type">Patient</span> <span class="hljs-variable">patient</span> <span class="hljs-operator">=</span> patientService.getPatientId(id);<br>    <span class="hljs-keyword">return</span> patient;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>尚医通项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>尚医通-OSS存储+预约统计+定时任务</title>
    <link href="/2022/10/19/%E5%B0%9A%E5%8C%BB%E9%80%9A-OSS%E5%AD%98%E5%82%A8+%E9%A2%84%E7%BA%A6%E7%BB%9F%E8%AE%A1+%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <url>/2022/10/19/%E5%B0%9A%E5%8C%BB%E9%80%9A-OSS%E5%AD%98%E5%82%A8+%E9%A2%84%E7%BA%A6%E7%BB%9F%E8%AE%A1+%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="尚医通-OSS存储-预约统计-定时任务"><a href="#尚医通-OSS存储-预约统计-定时任务" class="headerlink" title="尚医通-OSS存储+预约统计+定时任务"></a>尚医通-OSS存储+预约统计+定时任务</h2><p>该模块需要开通阿里云的OSS服务，并在application.properties中进行配置，在本项目中主要用于用户进行实名认证时上传身份证等</p><h4 id="上传文件到阿里云oss"><a href="#上传文件到阿里云oss" class="headerlink" title="上传文件到阿里云oss"></a>上传文件到阿里云oss</h4><h5 id="前端请求："><a href="#前端请求：" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;fileUpload&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理："><a href="#后端处理：" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">fileUpload</span><span class="hljs-params">(MultipartFile file)</span> &#123;<br>    <span class="hljs-comment">//获取上传文件</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> fileService.upload(file);<br>    <span class="hljs-keyword">return</span> Result.ok(url);<br>&#125;<br></code></pre></td></tr></table></figure><p>upload方法具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">upload</span><span class="hljs-params">(MultipartFile file)</span> &#123;<br>    <span class="hljs-comment">// Endpoint以杭州为例，其它Region请按实际情况填写。</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">endpoint</span> <span class="hljs-operator">=</span> ConstantOssPropertiesUtils.EDNPOINT;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">accessKeyId</span> <span class="hljs-operator">=</span> ConstantOssPropertiesUtils.ACCESS_KEY_ID;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">accessKeySecret</span> <span class="hljs-operator">=</span> ConstantOssPropertiesUtils.SECRECT;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">bucketName</span> <span class="hljs-operator">=</span> ConstantOssPropertiesUtils.BUCKET;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 创建OSSClient实例。</span><br>        <span class="hljs-type">OSS</span> <span class="hljs-variable">ossClient</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OSSClientBuilder</span>().build(endpoint, accessKeyId, accessKeySecret);<br>        <span class="hljs-comment">// 上传文件流。</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> file.getInputStream();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> file.getOriginalFilename();<br>        <span class="hljs-comment">//生成随机唯一值，使用uuid，添加到文件名称里面</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">uuid</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString().replaceAll(<span class="hljs-string">&quot;-&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br>        fileName = uuid+fileName;<br><br>        <span class="hljs-comment">//按照当前日期，创建文件夹，上传到创建文件夹里面</span><br>        <span class="hljs-comment">//  2021/02/02/01.jpg</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">timeUrl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DateTime</span>().toString(<span class="hljs-string">&quot;yyyy/MM/dd&quot;</span>);<br>        fileName = timeUrl+<span class="hljs-string">&quot;/&quot;</span>+fileName;<br><br>        <span class="hljs-comment">//调用方法实现上传</span><br>        <span class="hljs-comment">// 1.jpg    /a/b/1.jpg</span><br>        ossClient.putObject(bucketName, fileName, inputStream);<br>        <span class="hljs-comment">// 关闭OSSClient。</span><br>        ossClient.shutdown();<br>        <span class="hljs-comment">//上传之后文件路径</span><br>       <span class="hljs-comment">// https://yygh-atguigu.oss-cn-beijing.aliyuncs.com/01.jpg</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;https://&quot;</span>+bucketName+<span class="hljs-string">&quot;.&quot;</span>+endpoint+<span class="hljs-string">&quot;/&quot;</span>+fileName;<br>        <span class="hljs-comment">//返回</span><br>        <span class="hljs-keyword">return</span> url;<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="获取预约统计数据"><a href="#获取预约统计数据" class="headerlink" title="获取预约统计数据"></a>获取预约统计数据</h4><h5 id="前端请求：-1"><a href="#前端请求：-1" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;getCountMap&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理：-1"><a href="#后端处理：-1" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">getCountMap</span><span class="hljs-params">(OrderCountQueryVo orderCountQueryVo)</span> &#123;<br>    Map&lt;String, Object&gt; countMap = orderFeignClient.getCountMap(orderCountQueryVo);<br>    <span class="hljs-keyword">return</span> Result.ok(countMap);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="每天执行就医提醒"><a href="#每天执行就医提醒" class="headerlink" title="每天执行就医提醒"></a>每天执行就医提醒</h4><h5 id="前端请求：-2"><a href="#前端请求：-2" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Scheduled(cron = &quot;0/30 * * * * ?&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理：-2"><a href="#后端处理：-2" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">taskPatient</span><span class="hljs-params">()</span> &#123;<br>    rabbitService.sendMessage(MqConst.EXCHANGE_DIRECT_TASK,MqConst.ROUTING_TASK_8,<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>尚医通项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>尚医通-订单业务</title>
    <link href="/2022/10/19/%E5%B0%9A%E5%8C%BB%E9%80%9A-%E8%AE%A2%E5%8D%95%E4%B8%9A%E5%8A%A1/"/>
    <url>/2022/10/19/%E5%B0%9A%E5%8C%BB%E9%80%9A-%E8%AE%A2%E5%8D%95%E4%B8%9A%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="尚医通-订单业务"><a href="#尚医通-订单业务" class="headerlink" title="尚医通-订单业务"></a>尚医通-订单业务</h2><p>该模块需要企业用户开通商家付款码，并设置相关证书位置</p><h5 id="位置："><a href="#位置：" class="headerlink" title="位置："></a>位置：</h5><p>service模块\service_order子模块\api包\OrderApiController.java</p><h5 id="订单表结构："><a href="#订单表结构：" class="headerlink" title="订单表结构："></a>订单表结构：</h5><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h752dyhgrsj30ud0lh48w.jpg"></p><p>下单参数：就诊人id与排班id</p><p>1、下单我们要获取就诊人信息</p><p>2、获取排班下单信息与规则信息</p><p>3、获取医院签名信息，然后通过接口去医院预约下单</p><p>4、下单成功更新排班信息与发送短信</p><h4 id="01-生成挂号订单"><a href="#01-生成挂号订单" class="headerlink" title="01 生成挂号订单"></a>01 生成挂号订单</h4><h5 id="前端请求："><a href="#前端请求：" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;auth/submitOrder/&#123;scheduleId&#125;/&#123;patientId&#125;&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理："><a href="#后端处理：" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">savaOrders</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String scheduleId,</span><br><span class="hljs-params">                         <span class="hljs-meta">@PathVariable</span> Long patientId)</span> &#123;<br>    <span class="hljs-type">Long</span> <span class="hljs-variable">orderId</span> <span class="hljs-operator">=</span> orderService.saveOrder(scheduleId,patientId);<br>    <span class="hljs-keyword">return</span> Result.ok(orderId);<br>&#125;<br></code></pre></td></tr></table></figure><p>saveOrder方法具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Long <span class="hljs-title function_">saveOrder</span><span class="hljs-params">(String scheduleId, Long patientId)</span> &#123;<br>    <span class="hljs-comment">//获取就诊人信息</span><br>    <span class="hljs-type">Patient</span> <span class="hljs-variable">patient</span> <span class="hljs-operator">=</span> patientFeignClient.getPatientOrder(patientId);<br><br>    <span class="hljs-comment">//获取排班相关信息</span><br>    <span class="hljs-type">ScheduleOrderVo</span> <span class="hljs-variable">scheduleOrderVo</span> <span class="hljs-operator">=</span> hospitalFeignClient.getScheduleOrderVo(scheduleId);<br><br>    <span class="hljs-comment">//判断当前时间是否还可以预约</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DateTime</span>(scheduleOrderVo.getStartTime()).isAfterNow()<br>            || <span class="hljs-keyword">new</span> <span class="hljs-title class_">DateTime</span>(scheduleOrderVo.getEndTime()).isBeforeNow()) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">YyghException</span>(ResultCodeEnum.TIME_NO);<br>    &#125;<br><br>    <span class="hljs-comment">//获取签名信息</span><br>    <span class="hljs-type">SignInfoVo</span> <span class="hljs-variable">signInfoVo</span> <span class="hljs-operator">=</span> hospitalFeignClient.getSignInfoVo(scheduleOrderVo.getHoscode());<br><br>    <span class="hljs-comment">//添加到订单表</span><br>    <span class="hljs-type">OrderInfo</span> <span class="hljs-variable">orderInfo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderInfo</span>();<br>    <span class="hljs-comment">//scheduleOrderVo 数据复制到 orderInfo</span><br>    BeanUtils.copyProperties(scheduleOrderVo,orderInfo);<br>    <span class="hljs-comment">//向orderInfo设置其他数据</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">outTradeNo</span> <span class="hljs-operator">=</span> System.currentTimeMillis() + <span class="hljs-string">&quot;&quot;</span>+ <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextInt(<span class="hljs-number">100</span>);<br>    orderInfo.setOutTradeNo(outTradeNo);<br>    orderInfo.setScheduleId(scheduleId);<br>    orderInfo.setUserId(patient.getUserId());<br>    orderInfo.setPatientId(patientId);<br>    orderInfo.setPatientName(patient.getName());<br>    orderInfo.setPatientPhone(patient.getPhone());<br>    orderInfo.setOrderStatus(OrderStatusEnum.UNPAID.getStatus());<br>    baseMapper.insert(orderInfo);<br><br>    <span class="hljs-comment">//调用医院接口，实现预约挂号操作</span><br>    <span class="hljs-comment">//设置调用医院接口需要参数，参数放到map集合</span><br>    Map&lt;String, Object&gt; paramMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    paramMap.put(<span class="hljs-string">&quot;hoscode&quot;</span>,orderInfo.getHoscode());<br>    paramMap.put(<span class="hljs-string">&quot;depcode&quot;</span>,orderInfo.getDepcode());<br>    paramMap.put(<span class="hljs-string">&quot;hosScheduleId&quot;</span>,orderInfo.getScheduleId());<br>    paramMap.put(<span class="hljs-string">&quot;reserveDate&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">DateTime</span>(orderInfo.getReserveDate()).toString(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>));<br>    paramMap.put(<span class="hljs-string">&quot;reserveTime&quot;</span>, orderInfo.getReserveTime());<br>    paramMap.put(<span class="hljs-string">&quot;amount&quot;</span>,orderInfo.getAmount());<br><br>    paramMap.put(<span class="hljs-string">&quot;name&quot;</span>, patient.getName());<br>    paramMap.put(<span class="hljs-string">&quot;certificatesType&quot;</span>,patient.getCertificatesType());<br>    paramMap.put(<span class="hljs-string">&quot;certificatesNo&quot;</span>, patient.getCertificatesNo());<br>    paramMap.put(<span class="hljs-string">&quot;sex&quot;</span>,patient.getSex());<br>    paramMap.put(<span class="hljs-string">&quot;birthdate&quot;</span>, patient.getBirthdate());<br>    paramMap.put(<span class="hljs-string">&quot;phone&quot;</span>,patient.getPhone());<br>    paramMap.put(<span class="hljs-string">&quot;isMarry&quot;</span>, patient.getIsMarry());<br>    paramMap.put(<span class="hljs-string">&quot;provinceCode&quot;</span>,patient.getProvinceCode());<br>    paramMap.put(<span class="hljs-string">&quot;cityCode&quot;</span>, patient.getCityCode());<br>    paramMap.put(<span class="hljs-string">&quot;districtCode&quot;</span>,patient.getDistrictCode());<br>    paramMap.put(<span class="hljs-string">&quot;address&quot;</span>,patient.getAddress());<br>    <span class="hljs-comment">//联系人</span><br>    paramMap.put(<span class="hljs-string">&quot;contactsName&quot;</span>,patient.getContactsName());<br>    paramMap.put(<span class="hljs-string">&quot;contactsCertificatesType&quot;</span>, patient.getContactsCertificatesType());<br>    paramMap.put(<span class="hljs-string">&quot;contactsCertificatesNo&quot;</span>,patient.getContactsCertificatesNo());<br>    paramMap.put(<span class="hljs-string">&quot;contactsPhone&quot;</span>,patient.getContactsPhone());<br>    paramMap.put(<span class="hljs-string">&quot;timestamp&quot;</span>, HttpRequestHelper.getTimestamp());<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">sign</span> <span class="hljs-operator">=</span> HttpRequestHelper.getSign(paramMap, signInfoVo.getSignKey());<br>    paramMap.put(<span class="hljs-string">&quot;sign&quot;</span>, sign);<br><br>    <span class="hljs-comment">//请求医院系统接口</span><br>    <span class="hljs-type">JSONObject</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> HttpRequestHelper.sendRequest(paramMap, signInfoVo.getApiUrl() + <span class="hljs-string">&quot;/order/submitOrder&quot;</span>);<br><br>    <span class="hljs-keyword">if</span>(result.getInteger(<span class="hljs-string">&quot;code&quot;</span>)==<span class="hljs-number">200</span>) &#123;<br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> result.getJSONObject(<span class="hljs-string">&quot;data&quot;</span>);<br>        <span class="hljs-comment">//预约记录唯一标识（医院预约记录主键）</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">hosRecordId</span> <span class="hljs-operator">=</span> jsonObject.getString(<span class="hljs-string">&quot;hosRecordId&quot;</span>);<br>        <span class="hljs-comment">//预约序号</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> jsonObject.getInteger(<span class="hljs-string">&quot;number&quot;</span>);;<br>        <span class="hljs-comment">//取号时间</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">fetchTime</span> <span class="hljs-operator">=</span> jsonObject.getString(<span class="hljs-string">&quot;fetchTime&quot;</span>);;<br>        <span class="hljs-comment">//取号地址</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">fetchAddress</span> <span class="hljs-operator">=</span> jsonObject.getString(<span class="hljs-string">&quot;fetchAddress&quot;</span>);;<br>        <span class="hljs-comment">//更新订单</span><br>        orderInfo.setHosRecordId(hosRecordId);<br>        orderInfo.setNumber(number);<br>        orderInfo.setFetchTime(fetchTime);<br>        orderInfo.setFetchAddress(fetchAddress);<br>        baseMapper.updateById(orderInfo);<br>        <span class="hljs-comment">//排班可预约数</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">reservedNumber</span> <span class="hljs-operator">=</span> jsonObject.getInteger(<span class="hljs-string">&quot;reservedNumber&quot;</span>);<br>        <span class="hljs-comment">//排班剩余预约数</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">availableNumber</span> <span class="hljs-operator">=</span> jsonObject.getInteger(<span class="hljs-string">&quot;availableNumber&quot;</span>);<br>        <span class="hljs-comment">//发送mq消息，号源更新和短信通知</span><br>        <span class="hljs-comment">//发送mq信息更新号源</span><br>        <span class="hljs-type">OrderMqVo</span> <span class="hljs-variable">orderMqVo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderMqVo</span>();<br>        orderMqVo.setScheduleId(scheduleId);<br>        orderMqVo.setReservedNumber(reservedNumber);<br>        orderMqVo.setAvailableNumber(availableNumber);<br>        <span class="hljs-comment">//短信提示</span><br>        <span class="hljs-type">MsmVo</span> <span class="hljs-variable">msmVo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MsmVo</span>();<br>        msmVo.setPhone(orderInfo.getPatientPhone());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">reserveDate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DateTime</span>(orderInfo.getReserveDate()).toString(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>) + (orderInfo.getReserveTime()==<span class="hljs-number">0</span> ? <span class="hljs-string">&quot;上午&quot;</span> : <span class="hljs-string">&quot;下午&quot;</span>);<br>        Map&lt;String,Object&gt; param = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String,Object&gt;()&#123;&#123;<br>            put(<span class="hljs-string">&quot;title&quot;</span>, orderInfo.getHosname()+<span class="hljs-string">&quot;|&quot;</span>+orderInfo.getDepname()+<span class="hljs-string">&quot;|&quot;</span>+orderInfo.getTitle());<br>            put(<span class="hljs-string">&quot;amount&quot;</span>, orderInfo.getAmount());<br>            put(<span class="hljs-string">&quot;reserveDate&quot;</span>, reserveDate);<br>            put(<span class="hljs-string">&quot;name&quot;</span>, orderInfo.getPatientName());<br>            put(<span class="hljs-string">&quot;quitTime&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">DateTime</span>(orderInfo.getQuitTime()).toString(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm&quot;</span>));<br>        &#125;&#125;;<br>        msmVo.setParam(param);<br>        orderMqVo.setMsmVo(msmVo);<br><br>        rabbitService.sendMessage(MqConst.EXCHANGE_DIRECT_ORDER, MqConst.ROUTING_ORDER, orderMqVo);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">YyghException</span>(result.getString(<span class="hljs-string">&quot;message&quot;</span>), ResultCodeEnum.FAIL.getCode());<br>    &#125;<br>    <span class="hljs-keyword">return</span> orderInfo.getId();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="02-根据订单id查询订单详情"><a href="#02-根据订单id查询订单详情" class="headerlink" title="02 根据订单id查询订单详情"></a>02 根据订单id查询订单详情</h4><h5 id="前端请求：-1"><a href="#前端请求：-1" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;auth/getOrders/&#123;orderId&#125;&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理：-1"><a href="#后端处理：-1" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">getOrders</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String orderId)</span> &#123;<br>    <span class="hljs-type">OrderInfo</span> <span class="hljs-variable">orderInfo</span> <span class="hljs-operator">=</span> orderService.getOrder(orderId);<br>    <span class="hljs-keyword">return</span> Result.ok(orderInfo);<br>&#125;<br></code></pre></td></tr></table></figure><p>getOrder方法具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> OrderInfo <span class="hljs-title function_">getOrder</span><span class="hljs-params">(String orderId)</span> &#123;<br>    <span class="hljs-type">OrderInfo</span> <span class="hljs-variable">orderInfo</span> <span class="hljs-operator">=</span> baseMapper.selectById(orderId);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.packOrderInfo(orderInfo);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="03-订单列表（条件查询带分页）"><a href="#03-订单列表（条件查询带分页）" class="headerlink" title="03 订单列表（条件查询带分页）"></a>03 订单列表（条件查询带分页）</h4><h5 id="前端请求：-2"><a href="#前端请求：-2" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;auth/&#123;page&#125;/&#123;limit&#125;&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理：-2"><a href="#后端处理：-2" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">list</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long page,</span><br><span class="hljs-params">                   <span class="hljs-meta">@PathVariable</span> Long limit,</span><br><span class="hljs-params">                   OrderQueryVo orderQueryVo, HttpServletRequest request)</span> &#123;<br>    <span class="hljs-comment">//设置当前用户id</span><br>    orderQueryVo.setUserId(AuthContextHolder.getUserId(request));<br>    Page&lt;OrderInfo&gt; pageParam = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(page,limit);<br>    IPage&lt;OrderInfo&gt; pageModel =<br>            orderService.selectPage(pageParam,orderQueryVo);<br>    <span class="hljs-keyword">return</span> Result.ok(pageModel);<br>&#125;<br></code></pre></td></tr></table></figure><p>selectPage方法具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> IPage&lt;OrderInfo&gt; <span class="hljs-title function_">selectPage</span><span class="hljs-params">(Page&lt;OrderInfo&gt; pageParam, OrderQueryVo orderQueryVo)</span> &#123;<br>    <span class="hljs-comment">//orderQueryVo获取条件值</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> orderQueryVo.getKeyword(); <span class="hljs-comment">//医院名称</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">patientId</span> <span class="hljs-operator">=</span> orderQueryVo.getPatientId(); <span class="hljs-comment">//就诊人名称</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">orderStatus</span> <span class="hljs-operator">=</span> orderQueryVo.getOrderStatus(); <span class="hljs-comment">//订单状态</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">reserveDate</span> <span class="hljs-operator">=</span> orderQueryVo.getReserveDate();<span class="hljs-comment">//安排时间</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">createTimeBegin</span> <span class="hljs-operator">=</span> orderQueryVo.getCreateTimeBegin();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">createTimeEnd</span> <span class="hljs-operator">=</span> orderQueryVo.getCreateTimeEnd();<br><br>    <span class="hljs-comment">//对条件值进行非空判断</span><br>    QueryWrapper&lt;OrderInfo&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>    <span class="hljs-keyword">if</span>(!StringUtils.isEmpty(name)) &#123;<br>        wrapper.like(<span class="hljs-string">&quot;hosname&quot;</span>,name);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!StringUtils.isEmpty(patientId)) &#123;<br>        wrapper.eq(<span class="hljs-string">&quot;patient_id&quot;</span>,patientId);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!StringUtils.isEmpty(orderStatus)) &#123;<br>        wrapper.eq(<span class="hljs-string">&quot;order_status&quot;</span>,orderStatus);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!StringUtils.isEmpty(reserveDate)) &#123;<br>        wrapper.ge(<span class="hljs-string">&quot;reserve_date&quot;</span>,reserveDate);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!StringUtils.isEmpty(createTimeBegin)) &#123;<br>        wrapper.ge(<span class="hljs-string">&quot;create_time&quot;</span>,createTimeBegin);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!StringUtils.isEmpty(createTimeEnd)) &#123;<br>        wrapper.le(<span class="hljs-string">&quot;create_time&quot;</span>,createTimeEnd);<br>    &#125;<br>    <span class="hljs-comment">//调用mapper的方法</span><br>    IPage&lt;OrderInfo&gt; pages = baseMapper.selectPage(pageParam, wrapper);<br>    <span class="hljs-comment">//编号变成对应值封装</span><br>    pages.getRecords().stream().forEach(item -&gt; &#123;<br>        <span class="hljs-built_in">this</span>.packOrderInfo(item);<br>    &#125;);<br>    <span class="hljs-keyword">return</span> pages;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="04-获取订单状态"><a href="#04-获取订单状态" class="headerlink" title="04 获取订单状态"></a>04 获取订单状态</h4><h5 id="前端请求：-3"><a href="#前端请求：-3" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;auth/getStatusList&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理：-3"><a href="#后端处理：-3" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">getStatusList</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> Result.ok(OrderStatusEnum.getStatusList());<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="05-取消预约"><a href="#05-取消预约" class="headerlink" title="05 取消预约"></a>05 取消预约</h4><h5 id="前端请求：-4"><a href="#前端请求：-4" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;auth/cancelOrder/&#123;orderId&#125;&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理：-4"><a href="#后端处理：-4" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">cancelOrder</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long orderId)</span> &#123;<br>    <span class="hljs-type">Boolean</span> <span class="hljs-variable">isOrder</span> <span class="hljs-operator">=</span> orderService.cancelOrder(orderId);<br>    <span class="hljs-keyword">return</span> Result.ok(isOrder);<br>&#125;<br></code></pre></td></tr></table></figure><p>cancelOrder方法具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">cancelOrder</span><span class="hljs-params">(Long orderId)</span> &#123;<br>    <span class="hljs-comment">//获取订单信息</span><br>    <span class="hljs-type">OrderInfo</span> <span class="hljs-variable">orderInfo</span> <span class="hljs-operator">=</span> baseMapper.selectById(orderId);<br>    <span class="hljs-comment">//判断是否取消</span><br>    <span class="hljs-type">DateTime</span> <span class="hljs-variable">quitTime</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DateTime</span>(orderInfo.getQuitTime());<br>    <span class="hljs-keyword">if</span>(quitTime.isBeforeNow()) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">YyghException</span>(ResultCodeEnum.CANCEL_ORDER_NO);<br>    &#125;<br>    <span class="hljs-comment">//调用医院接口实现预约取消</span><br>    <span class="hljs-type">SignInfoVo</span> <span class="hljs-variable">signInfoVo</span> <span class="hljs-operator">=</span> hospitalFeignClient.getSignInfoVo(orderInfo.getHoscode());<br>    <span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span> == signInfoVo) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">YyghException</span>(ResultCodeEnum.PARAM_ERROR);<br>    &#125;<br>    Map&lt;String, Object&gt; reqMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    reqMap.put(<span class="hljs-string">&quot;hoscode&quot;</span>,orderInfo.getHoscode());<br>    reqMap.put(<span class="hljs-string">&quot;hosRecordId&quot;</span>,orderInfo.getHosRecordId());<br>    reqMap.put(<span class="hljs-string">&quot;timestamp&quot;</span>, HttpRequestHelper.getTimestamp());<br>    <span class="hljs-type">String</span> <span class="hljs-variable">sign</span> <span class="hljs-operator">=</span> HttpRequestHelper.getSign(reqMap, signInfoVo.getSignKey());<br>    reqMap.put(<span class="hljs-string">&quot;sign&quot;</span>, sign);<br><br>    <span class="hljs-type">JSONObject</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> HttpRequestHelper.sendRequest(reqMap,<br>            signInfoVo.getApiUrl()+<span class="hljs-string">&quot;/order/updateCancelStatus&quot;</span>);<br>    <span class="hljs-comment">//根据医院接口返回数据</span><br>    <span class="hljs-keyword">if</span>(result.getInteger(<span class="hljs-string">&quot;code&quot;</span>)!=<span class="hljs-number">200</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">YyghException</span>(result.getString(<span class="hljs-string">&quot;message&quot;</span>), ResultCodeEnum.FAIL.getCode());<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//判断当前订单是否可以取消</span><br>        <span class="hljs-keyword">if</span>(orderInfo.getOrderStatus().intValue() == OrderStatusEnum.PAID.getStatus().intValue()) &#123;<br>            <span class="hljs-type">Boolean</span> <span class="hljs-variable">isRefund</span> <span class="hljs-operator">=</span> weixinService.refund(orderId);<br>            <span class="hljs-keyword">if</span>(!isRefund) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">YyghException</span>(ResultCodeEnum.CANCEL_ORDER_FAIL);<br>            &#125;<br>            <span class="hljs-comment">//更新订单状态</span><br>            orderInfo.setOrderStatus(OrderStatusEnum.CANCLE.getStatus());<br>            baseMapper.updateById(orderInfo);<br><br>            <span class="hljs-comment">//发送mq更新预约数量</span><br>            <span class="hljs-type">OrderMqVo</span> <span class="hljs-variable">orderMqVo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderMqVo</span>();<br>            orderMqVo.setScheduleId(orderInfo.getScheduleId());<br>            <span class="hljs-comment">//短信提示</span><br>            <span class="hljs-type">MsmVo</span> <span class="hljs-variable">msmVo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MsmVo</span>();<br>            msmVo.setPhone(orderInfo.getPatientPhone());<br>            <span class="hljs-type">String</span> <span class="hljs-variable">reserveDate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DateTime</span>(orderInfo.getReserveDate()).toString(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>) + (orderInfo.getReserveTime()==<span class="hljs-number">0</span> ? <span class="hljs-string">&quot;上午&quot;</span>: <span class="hljs-string">&quot;下午&quot;</span>);<br>            Map&lt;String,Object&gt; param = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String,Object&gt;()&#123;&#123;<br>                put(<span class="hljs-string">&quot;title&quot;</span>, orderInfo.getHosname()+<span class="hljs-string">&quot;|&quot;</span>+orderInfo.getDepname()+<span class="hljs-string">&quot;|&quot;</span>+orderInfo.getTitle());<br>                put(<span class="hljs-string">&quot;reserveDate&quot;</span>, reserveDate);<br>                put(<span class="hljs-string">&quot;name&quot;</span>, orderInfo.getPatientName());<br>            &#125;&#125;;<br>            msmVo.setParam(param);<br>            orderMqVo.setMsmVo(msmVo);<br>            rabbitService.sendMessage(MqConst.EXCHANGE_DIRECT_ORDER, MqConst.ROUTING_ORDER, orderMqVo);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="07-获取订单统计数据"><a href="#07-获取订单统计数据" class="headerlink" title="07 获取订单统计数据"></a>07 获取订单统计数据</h4><h5 id="前端请求：-5"><a href="#前端请求：-5" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;inner/getCountMap&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理：-5"><a href="#后端处理：-5" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title function_">getCountMap</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> OrderCountQueryVo orderCountQueryVo)</span> &#123;<br>    <span class="hljs-keyword">return</span> orderService.getCountMap(orderCountQueryVo);<br>&#125;<br></code></pre></td></tr></table></figure><p>getCountMap方法具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title function_">getCountMap</span><span class="hljs-params">(OrderCountQueryVo orderCountQueryVo)</span> &#123;<br>    <span class="hljs-comment">//调用mapper方法得到数据</span><br>    List&lt;OrderCountVo&gt; orderCountVoList = baseMapper.selectOrderCount(orderCountQueryVo);<br><br>    <span class="hljs-comment">//获取x需要数据 ，日期数据  list集合</span><br>    List&lt;String&gt; dateList = orderCountVoList.stream().map(OrderCountVo::getReserveDate).collect(Collectors.toList());<br><br>    <span class="hljs-comment">//获取y需要数据，具体数量  list集合</span><br>    List&lt;Integer&gt; countList =orderCountVoList.stream().map(OrderCountVo::getCount).collect(Collectors.toList());<br><br>    Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    map.put(<span class="hljs-string">&quot;dateList&quot;</span>,dateList);<br>    map.put(<span class="hljs-string">&quot;countList&quot;</span>,countList);<br>    <span class="hljs-keyword">return</span> map;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="微信处理"><a href="#微信处理" class="headerlink" title="微信处理"></a>微信处理</h3><p>service模块\service_order子模块\api包\WeixinController.java</p><h4 id="01-生成微信支付二维码"><a href="#01-生成微信支付二维码" class="headerlink" title="01 生成微信支付二维码"></a>01 生成微信支付二维码</h4><h5 id="前端请求：-6"><a href="#前端请求：-6" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;createNative/&#123;orderId&#125;&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理：-6"><a href="#后端处理：-6" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">createNative</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long orderId)</span> &#123;<br>    <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> weixinService.createNative(orderId);<br>    <span class="hljs-keyword">return</span> Result.ok(map);<br>&#125;<br></code></pre></td></tr></table></figure><p>createNative方法具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Map <span class="hljs-title function_">createNative</span><span class="hljs-params">(Long orderId)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//从redis获取数据</span><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">payMap</span> <span class="hljs-operator">=</span> (Map)redisTemplate.opsForValue().get(orderId.toString());<br>        <span class="hljs-keyword">if</span>(payMap != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> payMap;<br>        &#125;<br>        <span class="hljs-comment">//1 根据orderId获取订单信息</span><br>        <span class="hljs-type">OrderInfo</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> orderService.getById(orderId);<br>        <span class="hljs-comment">//2 向支付记录表添加信息</span><br>        paymentService.savePaymentInfo(order, PaymentTypeEnum.WEIXIN.getStatus());<br>        <span class="hljs-comment">//3设置参数，</span><br>        <span class="hljs-comment">//把参数转换xml格式，使用商户key进行加密</span><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">paramMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        paramMap.put(<span class="hljs-string">&quot;appid&quot;</span>, ConstantPropertiesUtils.APPID);<br>        paramMap.put(<span class="hljs-string">&quot;mch_id&quot;</span>, ConstantPropertiesUtils.PARTNER);<br>        paramMap.put(<span class="hljs-string">&quot;nonce_str&quot;</span>, WXPayUtil.generateNonceStr());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> order.getReserveDate() + <span class="hljs-string">&quot;就诊&quot;</span>+ order.getDepname();<br>        paramMap.put(<span class="hljs-string">&quot;body&quot;</span>, body);<br>        paramMap.put(<span class="hljs-string">&quot;out_trade_no&quot;</span>, order.getOutTradeNo());<br>        paramMap.put(<span class="hljs-string">&quot;total_fee&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>); <span class="hljs-comment">//为了测试，统一写成这个值</span><br>        paramMap.put(<span class="hljs-string">&quot;spbill_create_ip&quot;</span>, <span class="hljs-string">&quot;127.0.0.1&quot;</span>);<br>        paramMap.put(<span class="hljs-string">&quot;notify_url&quot;</span>, <span class="hljs-string">&quot;http://guli.shop/api/order/weixinPay/weixinNotify&quot;</span>);<br>        paramMap.put(<span class="hljs-string">&quot;trade_type&quot;</span>, <span class="hljs-string">&quot;NATIVE&quot;</span>);<br>        <span class="hljs-comment">//4 调用微信生成二维码接口,httpclient调用</span><br>        <span class="hljs-type">HttpClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpClient</span>(<span class="hljs-string">&quot;https://api.mch.weixin.qq.com/pay/unifiedorder&quot;</span>);<br>        <span class="hljs-comment">//设置map参数</span><br>        client.setXmlParam(WXPayUtil.generateSignedXml(paramMap,ConstantPropertiesUtils.PARTNERKEY));<br>        client.setHttps(<span class="hljs-literal">true</span>);<br>        client.post();<br>        <span class="hljs-comment">//5 返回相关数据</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">xml</span> <span class="hljs-operator">=</span> client.getContent();<br>        <span class="hljs-comment">//转换map集合</span><br>        Map&lt;String, String&gt; resultMap = WXPayUtil.xmlToMap(xml);<br>        System.out.println(<span class="hljs-string">&quot;resultMap:&quot;</span>+resultMap);<br>        <span class="hljs-comment">//6 封装返回结果集</span><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;orderId&quot;</span>, orderId);<br>        map.put(<span class="hljs-string">&quot;totalFee&quot;</span>, order.getAmount());<br>        map.put(<span class="hljs-string">&quot;resultCode&quot;</span>, resultMap.get(<span class="hljs-string">&quot;result_code&quot;</span>));<br>        map.put(<span class="hljs-string">&quot;codeUrl&quot;</span>, resultMap.get(<span class="hljs-string">&quot;code_url&quot;</span>)); <span class="hljs-comment">//二维码地址</span><br><br>        <span class="hljs-keyword">if</span>(resultMap.get(<span class="hljs-string">&quot;result_code&quot;</span>) != <span class="hljs-literal">null</span>) &#123;<br>            redisTemplate.opsForValue().set(orderId.toString(),map,<span class="hljs-number">120</span>, TimeUnit.MINUTES);<br>        &#125;<br>        <span class="hljs-keyword">return</span> map;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="02-查询支付状态"><a href="#02-查询支付状态" class="headerlink" title="02 查询支付状态"></a>02 查询支付状态</h4><h5 id="前端请求：-7"><a href="#前端请求：-7" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;queryPayStatus/&#123;orderId&#125;&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理：-7"><a href="#后端处理：-7" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryPayStatus</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long orderId)</span> &#123;<br>    <span class="hljs-comment">//调用微信接口实现支付状态查询</span><br>    Map&lt;String,String&gt; resultMap = weixinService.queryPayStatus(orderId);<br>    <span class="hljs-comment">//判断</span><br>    <span class="hljs-keyword">if</span>(resultMap == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> Result.fail().message(<span class="hljs-string">&quot;支付出错&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;SUCCESS&quot;</span>.equals(resultMap.get(<span class="hljs-string">&quot;trade_state&quot;</span>))) &#123; <span class="hljs-comment">//支付成功</span><br>        <span class="hljs-comment">//更新订单状态</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">out_trade_no</span> <span class="hljs-operator">=</span> resultMap.get(<span class="hljs-string">&quot;out_trade_no&quot;</span>);<span class="hljs-comment">//订单编码</span><br>        paymentService.paySuccess(out_trade_no,resultMap);<br>        <span class="hljs-keyword">return</span> Result.ok().message(<span class="hljs-string">&quot;支付成功&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> Result.ok().message(<span class="hljs-string">&quot;支付中&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>queryPayStatus方法具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Map&lt;String, String&gt; <span class="hljs-title function_">queryPayStatus</span><span class="hljs-params">(Long orderId)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//1 根据orderId获取订单信息</span><br>        <span class="hljs-type">OrderInfo</span> <span class="hljs-variable">orderInfo</span> <span class="hljs-operator">=</span> orderService.getById(orderId);<br><br>        <span class="hljs-comment">//2 封装提交参数</span><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">paramMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        paramMap.put(<span class="hljs-string">&quot;appid&quot;</span>, ConstantPropertiesUtils.APPID);<br>        paramMap.put(<span class="hljs-string">&quot;mch_id&quot;</span>, ConstantPropertiesUtils.PARTNER);<br>        paramMap.put(<span class="hljs-string">&quot;out_trade_no&quot;</span>, orderInfo.getOutTradeNo());<br>        paramMap.put(<span class="hljs-string">&quot;nonce_str&quot;</span>, WXPayUtil.generateNonceStr());<br><br>        <span class="hljs-comment">//3 设置请求内容</span><br>        <span class="hljs-type">HttpClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpClient</span>(<span class="hljs-string">&quot;https://api.mch.weixin.qq.com/pay/orderquery&quot;</span>);<br>        client.setXmlParam(WXPayUtil.generateSignedXml(paramMap,ConstantPropertiesUtils.PARTNERKEY));<br>        client.setHttps(<span class="hljs-literal">true</span>);<br>        client.post();<br><br>        <span class="hljs-comment">//4 得到微信接口返回数据</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">xml</span> <span class="hljs-operator">=</span> client.getContent();<br>        Map&lt;String, String&gt; resultMap = WXPayUtil.xmlToMap(xml);<br>        System.out.println(<span class="hljs-string">&quot;支付状态resultMap:&quot;</span>+resultMap);<br>        <span class="hljs-comment">//5 把接口数据返回</span><br>        <span class="hljs-keyword">return</span> resultMap;<br>    &#125;<span class="hljs-keyword">catch</span>(Exception e) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>尚医通项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>尚医通登录业务</title>
    <link href="/2022/10/19/%E5%B0%9A%E5%8C%BB%E9%80%9A%E7%99%BB%E5%BD%95%E4%B8%9A%E5%8A%A1/"/>
    <url>/2022/10/19/%E5%B0%9A%E5%8C%BB%E9%80%9A%E7%99%BB%E5%BD%95%E4%B8%9A%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="尚医通登录业务"><a href="#尚医通登录业务" class="headerlink" title="尚医通登录业务"></a>尚医通登录业务</h2><h3 id="基于阿里云短信登录"><a href="#基于阿里云短信登录" class="headerlink" title="基于阿里云短信登录"></a>基于阿里云短信登录</h3><h5 id="位置："><a href="#位置：" class="headerlink" title="位置："></a>位置：</h5><p>service模块\service_msm子模块\controller\MsmApiController.java</p><p>1，登录采取弹出层的形式</p><p>2，登录方式：</p><p>（1）手机号码+手机验证码</p><p>3，无注册界面，第一次登录根据手机号判断系统是否存在，如果不存在则自动注册</p><p>4，网关统一判断登录状态，如何需要登录，页面弹出登录层</p><p>5，生成验证码存入redis，登录时从redis中获取验证码进行匹配，再次发送验证码时将记录从redis中清除</p><h4 id="01-发送手机验证码"><a href="#01-发送手机验证码" class="headerlink" title="01 发送手机验证码"></a>01 发送手机验证码</h4><h5 id="前端请求："><a href="#前端请求：" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;send/&#123;phone&#125;&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理："><a href="#后端处理：" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">sendCode</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String phone)</span> &#123;<br>    <span class="hljs-comment">//从redis获取验证码，如果获取获取到，返回ok</span><br>    <span class="hljs-comment">// key 手机号  value 验证码</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> redisTemplate.opsForValue().get(phone);<br>    <span class="hljs-keyword">if</span>(!StringUtils.isEmpty(code)) &#123;<br>        <span class="hljs-keyword">return</span> Result.ok();<br>    &#125;<br>    <span class="hljs-comment">//如果从redis获取不到，</span><br>    <span class="hljs-comment">// 生成验证码，</span><br>    code = RandomUtil.getSixBitRandom();<br>    System.out.println(code);<br><br>    <span class="hljs-comment">//调用service方法，通过整合短信服务进行发送</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">isSend</span> <span class="hljs-operator">=</span> msmService.send(phone,code);<br>    <span class="hljs-comment">//生成验证码放到redis里面，设置有效时间</span><br>    <span class="hljs-keyword">if</span>(isSend) &#123;<br>            redisTemplate.opsForValue().set(phone,code,<span class="hljs-number">2</span>, TimeUnit.MINUTES);<br>            <span class="hljs-keyword">return</span> Result.ok();<br>        &#125; <br>        <span class="hljs-keyword">return</span> Result.fail().message(<span class="hljs-string">&quot;发送短信失败&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>send方法具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">send</span><span class="hljs-params">(String phone, String code)</span> &#123;<br>        <span class="hljs-comment">//判断手机号是否为空</span><br>        <span class="hljs-keyword">if</span>(StringUtils.isEmpty(phone)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-comment">//整合阿里云短信服务</span><br>        <span class="hljs-comment">//设置相关参数</span><br>        <span class="hljs-type">DefaultProfile</span> <span class="hljs-variable">profile</span> <span class="hljs-operator">=</span> DefaultProfile.<br>                getProfile(ConstantPropertiesUtils.REGION_Id,<br>                        ConstantPropertiesUtils.ACCESS_KEY_ID,<br>                        ConstantPropertiesUtils.SECRECT);<br>        <span class="hljs-type">IAcsClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultAcsClient</span>(profile);<br>        <span class="hljs-type">CommonRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonRequest</span>();<br>        request.setMethod(MethodType.POST);<br>        request.setDomain(<span class="hljs-string">&quot;dysmsapi.aliyuncs.com&quot;</span>);<br>        request.setVersion(<span class="hljs-string">&quot;2017-05-25&quot;</span>);<br>        request.setAction(<span class="hljs-string">&quot;SendSms&quot;</span>);<br><br>        <span class="hljs-comment">//手机号</span><br>        request.putQueryParameter(<span class="hljs-string">&quot;PhoneNumbers&quot;</span>, phone);<br>        <span class="hljs-comment">//签名名称</span><br>        request.putQueryParameter(<span class="hljs-string">&quot;SignName&quot;</span>, <span class="hljs-string">&quot;我的谷粒在线教育网站&quot;</span>);<br>        <span class="hljs-comment">//模板code</span><br>        request.putQueryParameter(<span class="hljs-string">&quot;TemplateCode&quot;</span>, <span class="hljs-string">&quot;SMS_180051135&quot;</span>);<br>        <span class="hljs-comment">//验证码  使用json格式   &#123;&quot;code&quot;:&quot;123456&quot;&#125;</span><br>        Map&lt;String,Object&gt; param = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        param.put(<span class="hljs-string">&quot;code&quot;</span>,code);<br>        request.putQueryParameter(<span class="hljs-string">&quot;TemplateParam&quot;</span>, JSONObject.toJSONString(param));<br><br>        <span class="hljs-comment">//调用方法进行短信发送</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">CommonResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.getCommonResponse(request);<br>            System.out.println(response.getData());<br>            <span class="hljs-keyword">return</span> response.getHttpResponse().isSuccess();<br>        &#125; <span class="hljs-keyword">catch</span> (ServerException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (ClientException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><span class="hljs-comment">//        return false;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="基于微信的二维码登录"><a href="#基于微信的二维码登录" class="headerlink" title="基于微信的二维码登录"></a>基于微信的二维码登录</h3><h5 id="位置：-1"><a href="#位置：-1" class="headerlink" title="位置："></a>位置：</h5><p>service模块\service_user子模块\api包\WeixinApiController.java</p><h4 id="01-生成微信扫描二维码"><a href="#01-生成微信扫描二维码" class="headerlink" title="01 生成微信扫描二维码"></a>01 生成微信扫描二维码</h4><h5 id="前端请求：-1"><a href="#前端请求：-1" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;getLoginParam&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理：-1"><a href="#后端处理：-1" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">genQrConnect</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;appid&quot;</span>, ConstantWxPropertiesUtils.WX_OPEN_APP_ID);<br>        map.put(<span class="hljs-string">&quot;scope&quot;</span>,<span class="hljs-string">&quot;snsapi_login&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">wxOpenRedirectUrl</span> <span class="hljs-operator">=</span> ConstantWxPropertiesUtils.WX_OPEN_REDIRECT_URL;<br>        wxOpenRedirectUrl = URLEncoder.encode(wxOpenRedirectUrl, <span class="hljs-string">&quot;utf-8&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;redirect_uri&quot;</span>,wxOpenRedirectUrl);<br>        map.put(<span class="hljs-string">&quot;state&quot;</span>,System.currentTimeMillis()+<span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-keyword">return</span> Result.ok(map);<br>    &#125; <span class="hljs-keyword">catch</span> (UnsupportedEncodingException e) &#123;<br>        e.printStackTrace();<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="02-微信扫描后回调的方法"><a href="#02-微信扫描后回调的方法" class="headerlink" title="02 微信扫描后回调的方法"></a>02 微信扫描后回调的方法</h4><h5 id="前端请求：-2"><a href="#前端请求：-2" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;callback&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理：-2"><a href="#后端处理：-2" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">callback</span><span class="hljs-params">(String code,String state)</span> &#123;<br>    <span class="hljs-comment">//第一步 获取临时票据 code</span><br>    System.out.println(<span class="hljs-string">&quot;code:&quot;</span>+code);<br>    <span class="hljs-comment">//第二步 拿着code和微信id和秘钥，请求微信固定地址 ，得到两个值</span><br>    <span class="hljs-comment">//使用code和appid以及appscrect换取access_token</span><br>    <span class="hljs-comment">//  %s   占位符</span><br>    <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">baseAccessTokenUrl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>()<br>            .append(<span class="hljs-string">&quot;https://api.weixin.qq.com/sns/oauth2/access_token&quot;</span>)<br>            .append(<span class="hljs-string">&quot;?appid=%s&quot;</span>)<br>            .append(<span class="hljs-string">&quot;&amp;secret=%s&quot;</span>)<br>            .append(<span class="hljs-string">&quot;&amp;code=%s&quot;</span>)<br>            .append(<span class="hljs-string">&quot;&amp;grant_type=authorization_code&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">accessTokenUrl</span> <span class="hljs-operator">=</span> String.format(baseAccessTokenUrl.toString(),<br>            ConstantWxPropertiesUtils.WX_OPEN_APP_ID,<br>            ConstantWxPropertiesUtils.WX_OPEN_APP_SECRET,<br>            code);<br>    <span class="hljs-comment">//使用httpclient请求这个地址</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">accesstokenInfo</span> <span class="hljs-operator">=</span> HttpClientUtils.get(accessTokenUrl);<br>        System.out.println(<span class="hljs-string">&quot;accesstokenInfo:&quot;</span>+accesstokenInfo);<br>        <span class="hljs-comment">//从返回字符串获取两个值 openid  和  access_token</span><br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> JSONObject.parseObject(accesstokenInfo);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">access_token</span> <span class="hljs-operator">=</span> jsonObject.getString(<span class="hljs-string">&quot;access_token&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">openid</span> <span class="hljs-operator">=</span> jsonObject.getString(<span class="hljs-string">&quot;openid&quot;</span>);<br><br>        <span class="hljs-comment">//判断数据库是否存在微信的扫描人信息</span><br>        <span class="hljs-comment">//根据openid判断</span><br>        <span class="hljs-type">UserInfo</span> <span class="hljs-variable">userInfo</span> <span class="hljs-operator">=</span> userInfoService.selectWxInfoOpenId(openid);<br>        <span class="hljs-keyword">if</span>(userInfo == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">//数据库不存在微信信息</span><br>            <span class="hljs-comment">//第三步 拿着openid  和  access_token请求微信地址，得到扫描人信息</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">baseUserInfoUrl</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;https://api.weixin.qq.com/sns/userinfo&quot;</span> +<br>                    <span class="hljs-string">&quot;?access_token=%s&quot;</span> +<br>                    <span class="hljs-string">&quot;&amp;openid=%s&quot;</span>;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">userInfoUrl</span> <span class="hljs-operator">=</span> String.format(baseUserInfoUrl, access_token, openid);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">resultInfo</span> <span class="hljs-operator">=</span> HttpClientUtils.get(userInfoUrl);<br>            System.out.println(<span class="hljs-string">&quot;resultInfo:&quot;</span>+resultInfo);<br>            <span class="hljs-type">JSONObject</span> <span class="hljs-variable">resultUserInfoJson</span> <span class="hljs-operator">=</span> JSONObject.parseObject(resultInfo);<br>            <span class="hljs-comment">//解析用户信息</span><br>            <span class="hljs-comment">//用户昵称</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">nickname</span> <span class="hljs-operator">=</span> resultUserInfoJson.getString(<span class="hljs-string">&quot;nickname&quot;</span>);<br>            <span class="hljs-comment">//用户头像</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">headimgurl</span> <span class="hljs-operator">=</span> resultUserInfoJson.getString(<span class="hljs-string">&quot;headimgurl&quot;</span>);<br><br>            <span class="hljs-comment">//获取扫描人信息添加数据库</span><br>            userInfo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserInfo</span>();<br>            userInfo.setNickName(nickname);<br>            userInfo.setOpenid(openid);<br>            userInfo.setStatus(<span class="hljs-number">1</span>);<br>            userInfoService.save(userInfo);<br>        &#125;<br>        <span class="hljs-comment">//返回name和token字符串</span><br>        Map&lt;String,String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> userInfo.getName();<br>        <span class="hljs-keyword">if</span>(StringUtils.isEmpty(name)) &#123;<br>            name = userInfo.getNickName();<br>        &#125;<br>        <span class="hljs-keyword">if</span>(StringUtils.isEmpty(name)) &#123;<br>            name = userInfo.getPhone();<br>        &#125;<br>        map.put(<span class="hljs-string">&quot;name&quot;</span>, name);<br><br>        <span class="hljs-comment">//判断userInfo是否有手机号，如果手机号为空，返回openid</span><br>        <span class="hljs-comment">//如果手机号不为空，返回openid值是空字符串</span><br>        <span class="hljs-comment">//前端判断：如果openid不为空，绑定手机号，如果openid为空，不需要绑定手机号</span><br>        <span class="hljs-keyword">if</span>(StringUtils.isEmpty(userInfo.getPhone())) &#123;<br>            map.put(<span class="hljs-string">&quot;openid&quot;</span>, userInfo.getOpenid());<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            map.put(<span class="hljs-string">&quot;openid&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//使用jwt生成token字符串</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> JwtHelper.createToken(userInfo.getId(), name);<br>        map.put(<span class="hljs-string">&quot;token&quot;</span>, token);<br>        <span class="hljs-comment">//跳转到前端页面</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:&quot;</span> + ConstantWxPropertiesUtils.YYGH_BASE_URL + <span class="hljs-string">&quot;/weixin/callback?token=&quot;</span>+map.get(<span class="hljs-string">&quot;token&quot;</span>)+ <span class="hljs-string">&quot;&amp;openid=&quot;</span>+map.get(<span class="hljs-string">&quot;openid&quot;</span>)+<span class="hljs-string">&quot;&amp;name=&quot;</span>+URLEncoder.encode(map.get(<span class="hljs-string">&quot;name&quot;</span>),<span class="hljs-string">&quot;utf-8&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>尚医通项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>尚医通-医院AIP业务2</title>
    <link href="/2022/10/19/%E5%B0%9A%E5%8C%BB%E9%80%9A-%E5%8C%BB%E9%99%A2AIP%E4%B8%9A%E5%8A%A12/"/>
    <url>/2022/10/19/%E5%B0%9A%E5%8C%BB%E9%80%9A-%E5%8C%BB%E9%99%A2AIP%E4%B8%9A%E5%8A%A12/</url>
    
    <content type="html"><![CDATA[<h2 id="尚医通-医院AIP业务2"><a href="#尚医通-医院AIP业务2" class="headerlink" title="尚医通-医院AIP业务2"></a>尚医通-医院AIP业务2</h2><h3 id="医院AIP业务05"><a href="#医院AIP业务05" class="headerlink" title="医院AIP业务05"></a>医院AIP业务05</h3><h5 id="位置："><a href="#位置：" class="headerlink" title="位置："></a>位置：</h5><p>controller包\ScheduleController.java</p><h4 id="01-根据医院编号-和-科室编号-，查询排班规则数据"><a href="#01-根据医院编号-和-科室编号-，查询排班规则数据" class="headerlink" title="01 根据医院编号 和 科室编号 ，查询排班规则数据"></a>01 根据医院编号 和 科室编号 ，查询排班规则数据</h4><h5 id="前端请求："><a href="#前端请求：" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;getScheduleRule/&#123;page&#125;/&#123;limit&#125;/&#123;hoscode&#125;/&#123;depcode&#125;&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理："><a href="#后端处理：" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">getScheduleRule</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-type">long</span> page,</span><br><span class="hljs-params">                              <span class="hljs-meta">@PathVariable</span> <span class="hljs-type">long</span> limit,</span><br><span class="hljs-params">                              <span class="hljs-meta">@PathVariable</span> String hoscode,</span><br><span class="hljs-params">                              <span class="hljs-meta">@PathVariable</span> String depcode)</span> &#123;<br>    Map&lt;String,Object&gt; map = scheduleService.getRuleSchedule(page,limit,hoscode,depcode);<br>    <span class="hljs-keyword">return</span> Result.ok(map);<br>&#125;<br></code></pre></td></tr></table></figure><p>getRuleSchedule方法具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title function_">getRuleSchedule</span><span class="hljs-params">(<span class="hljs-type">long</span> page, <span class="hljs-type">long</span> limit, String hoscode, String depcode)</span> &#123;<br>    <span class="hljs-comment">//1 根据医院编号 和 科室编号 查询</span><br>    <span class="hljs-type">Criteria</span> <span class="hljs-variable">criteria</span> <span class="hljs-operator">=</span> Criteria.where(<span class="hljs-string">&quot;hoscode&quot;</span>).is(hoscode).and(<span class="hljs-string">&quot;depcode&quot;</span>).is(depcode);<br><br>    <span class="hljs-comment">//2 根据工作日workDate期进行分组</span><br>    <span class="hljs-type">Aggregation</span> <span class="hljs-variable">agg</span> <span class="hljs-operator">=</span> Aggregation.newAggregation(<br>            Aggregation.match(criteria),<span class="hljs-comment">//匹配条件</span><br>            Aggregation.group(<span class="hljs-string">&quot;workDate&quot;</span>)<span class="hljs-comment">//分组字段</span><br>            .first(<span class="hljs-string">&quot;workDate&quot;</span>).as(<span class="hljs-string">&quot;workDate&quot;</span>)<br>            <span class="hljs-comment">//3 统计号源数量</span><br>            .count().as(<span class="hljs-string">&quot;docCount&quot;</span>)<br>            .sum(<span class="hljs-string">&quot;reservedNumber&quot;</span>).as(<span class="hljs-string">&quot;reservedNumber&quot;</span>)<br>            .sum(<span class="hljs-string">&quot;availableNumber&quot;</span>).as(<span class="hljs-string">&quot;availableNumber&quot;</span>),<br>            <span class="hljs-comment">//排序</span><br>            Aggregation.sort(Sort.Direction.DESC,<span class="hljs-string">&quot;workDate&quot;</span>),<br>            <span class="hljs-comment">//4 实现分页</span><br>            Aggregation.skip((page-<span class="hljs-number">1</span>)*limit),<br>            Aggregation.limit(limit)<br>    );<br>    <span class="hljs-comment">//调用方法，最终执行</span><br>    AggregationResults&lt;BookingScheduleRuleVo&gt; aggResults =<br>            mongoTemplate.aggregate(agg, Schedule.class, BookingScheduleRuleVo.class);<br>    List&lt;BookingScheduleRuleVo&gt; bookingScheduleRuleVoList = aggResults.getMappedResults();<br><br>    <span class="hljs-comment">//分组查询的总记录数</span><br>    <span class="hljs-type">Aggregation</span> <span class="hljs-variable">totalAgg</span> <span class="hljs-operator">=</span> Aggregation.newAggregation(<br>            Aggregation.match(criteria),<br>            Aggregation.group(<span class="hljs-string">&quot;workDate&quot;</span>)<br>    );<br>    AggregationResults&lt;BookingScheduleRuleVo&gt; totalAggResults =<br>            mongoTemplate.aggregate(totalAgg, Schedule.class, BookingScheduleRuleVo.class);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">total</span> <span class="hljs-operator">=</span> totalAggResults.getMappedResults().size();<br><br>    <span class="hljs-comment">//把日期对应星期获取</span><br>    <span class="hljs-keyword">for</span>(BookingScheduleRuleVo bookingScheduleRuleVo:bookingScheduleRuleVoList) &#123;<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">workDate</span> <span class="hljs-operator">=</span> bookingScheduleRuleVo.getWorkDate();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">dayOfWeek</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getDayOfWeek(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DateTime</span>(workDate));<br>        bookingScheduleRuleVo.setDayOfWeek(dayOfWeek);<br>    &#125;<br><br>    <span class="hljs-comment">//设置最终数据，进行返回</span><br>    Map&lt;String, Object&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    result.put(<span class="hljs-string">&quot;bookingScheduleRuleList&quot;</span>,bookingScheduleRuleVoList);<br>    result.put(<span class="hljs-string">&quot;total&quot;</span>,total);<br><br>    <span class="hljs-comment">//获取医院名称</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">hosName</span> <span class="hljs-operator">=</span> hospitalService.getHospName(hoscode);<br>    <span class="hljs-comment">//其他基础数据</span><br>    Map&lt;String, String&gt; baseMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    baseMap.put(<span class="hljs-string">&quot;hosname&quot;</span>,hosName);<br>    result.put(<span class="hljs-string">&quot;baseMap&quot;</span>,baseMap);<br><br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="02-根据医院编号-、科室编号和工作日期，查询排班详细信息"><a href="#02-根据医院编号-、科室编号和工作日期，查询排班详细信息" class="headerlink" title="02 根据医院编号 、科室编号和工作日期，查询排班详细信息"></a>02 根据医院编号 、科室编号和工作日期，查询排班详细信息</h4><h5 id="前端请求：-1"><a href="#前端请求：-1" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;getScheduleDetail/&#123;hoscode&#125;/&#123;depcode&#125;/&#123;workDate&#125;&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理：-1"><a href="#后端处理：-1" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">getScheduleDetail</span><span class="hljs-params">( <span class="hljs-meta">@PathVariable</span> String hoscode,</span><br><span class="hljs-params">                                 <span class="hljs-meta">@PathVariable</span> String depcode,</span><br><span class="hljs-params">                                 <span class="hljs-meta">@PathVariable</span> String workDate)</span> &#123;<br>    List&lt;Schedule&gt; list = scheduleService.getDetailSchedule(hoscode,depcode,workDate);<br>    <span class="hljs-keyword">return</span> Result.ok(list);<br>&#125;<br></code></pre></td></tr></table></figure><p>getDetailSchedule方法具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;Schedule&gt; <span class="hljs-title function_">getDetailSchedule</span><span class="hljs-params">(String hoscode, String depcode, String workDate)</span> &#123;<br>    <span class="hljs-comment">//根据参数查询mongodb</span><br>    List&lt;Schedule&gt; scheduleList =<br>            scheduleRepository.findScheduleByHoscodeAndDepcodeAndWorkDate(hoscode,depcode,<span class="hljs-keyword">new</span> <span class="hljs-title class_">DateTime</span>(workDate).toDate());<br>    <span class="hljs-comment">//把得到list集合遍历，向设置其他值：医院名称、科室名称、日期对应星期</span><br>    scheduleList.stream().forEach(item-&gt;&#123;<br>        <span class="hljs-built_in">this</span>.packageSchedule(item);<br>    &#125;);<br>    <span class="hljs-keyword">return</span> scheduleList;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="医院AIP业务06"><a href="#医院AIP业务06" class="headerlink" title="医院AIP业务06"></a>医院AIP业务06</h3><h5 id="位置：-1"><a href="#位置：-1" class="headerlink" title="位置："></a>位置：</h5><p>controller包\HospApiController.java</p><h4 id="01-查询医院列表"><a href="#01-查询医院列表" class="headerlink" title="01 查询医院列表"></a>01 查询医院列表</h4><h5 id="前端请求：-2"><a href="#前端请求：-2" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;findHospList/&#123;page&#125;/&#123;limit&#125;&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理：-2"><a href="#后端处理：-2" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">findHospList</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer page,</span><br><span class="hljs-params">                           <span class="hljs-meta">@PathVariable</span> Integer limit,</span><br><span class="hljs-params">                           HospitalQueryVo hospitalQueryVo)</span> &#123;<br>    Page&lt;Hospital&gt; hospitals = hospitalService.selectHospPage(page, limit, hospitalQueryVo);<br>    <span class="hljs-keyword">return</span> Result.ok(hospitals);<br>&#125;<br></code></pre></td></tr></table></figure><p>selectHospPage方法具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Page&lt;Hospital&gt; <span class="hljs-title function_">selectHospPage</span><span class="hljs-params">(Integer page, Integer limit, HospitalQueryVo hospitalQueryVo)</span> &#123;<br>    <span class="hljs-comment">//创建pageable对象</span><br>    <span class="hljs-type">Pageable</span> <span class="hljs-variable">pageable</span> <span class="hljs-operator">=</span> PageRequest.of(page-<span class="hljs-number">1</span>,limit);<br>    <span class="hljs-comment">//创建条件匹配器</span><br>    <span class="hljs-type">ExampleMatcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> ExampleMatcher.matching()<br>            .withStringMatcher(ExampleMatcher.StringMatcher.CONTAINING)<br>            .withIgnoreCase(<span class="hljs-literal">true</span>);<br>    <span class="hljs-comment">//hospitalSetQueryVo转换Hospital对象</span><br>    <span class="hljs-type">Hospital</span> <span class="hljs-variable">hospital</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hospital</span>();<br>    BeanUtils.copyProperties(hospitalQueryVo,hospital);<br>    <span class="hljs-comment">//创建对象</span><br>    Example&lt;Hospital&gt; example = Example.of(hospital,matcher);<br>    <span class="hljs-comment">//调用方法实现查询</span><br>    Page&lt;Hospital&gt; pages = hospitalRepository.findAll(example, pageable);<br><br>    <span class="hljs-comment">//获取查询list集合，遍历进行医院等级封装</span><br>    pages.getContent().stream().forEach(item -&gt; &#123;<br>        <span class="hljs-built_in">this</span>.setHospitalHosType(item);<br>    &#125;);<br>    <span class="hljs-keyword">return</span> pages;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="02-根据医院名称查询"><a href="#02-根据医院名称查询" class="headerlink" title="02 根据医院名称查询"></a>02 根据医院名称查询</h3><h5 id="前端请求：-3"><a href="#前端请求：-3" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;findByHosName/&#123;hosname&#125;&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理：-3"><a href="#后端处理：-3" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">findByHosName</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String hosname)</span> &#123;<br>    List&lt;Hospital&gt; list = hospitalService.findByHosname(hosname);<br>    <span class="hljs-keyword">return</span> Result.ok(list);<br>&#125;<br></code></pre></td></tr></table></figure><p>findByHosname方法具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;Hospital&gt; <span class="hljs-title function_">findByHosname</span><span class="hljs-params">(String hosname)</span> &#123;<br>    <span class="hljs-keyword">return</span> hospitalRepository.findHospitalByHosnameLike(hosname);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="03-根据医院编号获取科室"><a href="#03-根据医院编号获取科室" class="headerlink" title="03 根据医院编号获取科室"></a>03 根据医院编号获取科室</h4><h5 id="前端请求：-4"><a href="#前端请求：-4" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;department/&#123;hoscode&#125;&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理：-4"><a href="#后端处理：-4" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">index</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String hoscode)</span> &#123;<br>    List&lt;DepartmentVo&gt; list = departmentService.findDeptTree(hoscode);<br>    <span class="hljs-keyword">return</span> Result.ok(list);<br>&#125;<br></code></pre></td></tr></table></figure><p>该方法和controller包\DepartmentController.java中的getDeptList相同</p><h4 id="04-根据医院编号获取医院预约挂号详情"><a href="#04-根据医院编号获取医院预约挂号详情" class="headerlink" title="04 根据医院编号获取医院预约挂号详情"></a>04 根据医院编号获取医院预约挂号详情</h4><h5 id="前端请求：-5"><a href="#前端请求：-5" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;findHospDetail/&#123;hoscode&#125;&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理：-5"><a href="#后端处理：-5" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">item</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String hoscode)</span> &#123;<br>    Map&lt;String, Object&gt; map = hospitalService.item(hoscode);<br>    <span class="hljs-keyword">return</span> Result.ok(map);<br>&#125;<br></code></pre></td></tr></table></figure><p>iteam方法具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title function_">item</span><span class="hljs-params">(String hoscode)</span> &#123;<br>    Map&lt;String, Object&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-comment">//医院详情</span><br>    <span class="hljs-type">Hospital</span> <span class="hljs-variable">hospital</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.setHospitalHosType(<span class="hljs-built_in">this</span>.getByHoscode(hoscode));<br>    result.put(<span class="hljs-string">&quot;hospital&quot;</span>, hospital);<br>    <span class="hljs-comment">//预约规则</span><br>    result.put(<span class="hljs-string">&quot;bookingRule&quot;</span>, hospital.getBookingRule());<br>    <span class="hljs-comment">//不需要重复返回</span><br>    hospital.setBookingRule(<span class="hljs-literal">null</span>);<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="05-获取排班数据"><a href="#05-获取排班数据" class="headerlink" title="05 获取排班数据"></a>05 获取排班数据</h4><h5 id="前端请求：-6"><a href="#前端请求：-6" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;auth/findScheduleList/&#123;hoscode&#125;/&#123;depcode&#125;/&#123;workDate&#125;&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理：-6"><a href="#后端处理：-6" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">findScheduleList</span><span class="hljs-params">(</span><br><span class="hljs-params">        <span class="hljs-meta">@ApiParam(name = &quot;hoscode&quot;, value = &quot;医院code&quot;, required = true)</span></span><br><span class="hljs-params">        <span class="hljs-meta">@PathVariable</span> String hoscode,</span><br><span class="hljs-params">        <span class="hljs-meta">@ApiParam(name = &quot;depcode&quot;, value = &quot;科室code&quot;, required = true)</span></span><br><span class="hljs-params">        <span class="hljs-meta">@PathVariable</span> String depcode,</span><br><span class="hljs-params">        <span class="hljs-meta">@ApiParam(name = &quot;workDate&quot;, value = &quot;排班日期&quot;, required = true)</span></span><br><span class="hljs-params">        <span class="hljs-meta">@PathVariable</span> String workDate)</span> &#123;<br>    <span class="hljs-keyword">return</span> Result.ok(scheduleService.getDetailSchedule(hoscode, depcode, workDate));<br>&#125;<br></code></pre></td></tr></table></figure><p>getDetailSchedule：根据医院编号 、科室编号和工作日期，查询排班详细信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;Schedule&gt; <span class="hljs-title function_">getDetailSchedule</span><span class="hljs-params">(String hoscode, String depcode, String workDate)</span> &#123;<br>    <span class="hljs-comment">//根据参数查询mongodb</span><br>    List&lt;Schedule&gt; scheduleList =<br>            scheduleRepository.findScheduleByHoscodeAndDepcodeAndWorkDate(hoscode,depcode,<span class="hljs-keyword">new</span> <span class="hljs-title class_">DateTime</span>(workDate).toDate());<br>    <span class="hljs-comment">//把得到list集合遍历，向设置其他值：医院名称、科室名称、日期对应星期</span><br>    scheduleList.stream().forEach(item-&gt;&#123;<br>        <span class="hljs-built_in">this</span>.packageSchedule(item);<br>    &#125;);<br>    <span class="hljs-keyword">return</span> scheduleList;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="06-根据id获取排班数据"><a href="#06-根据id获取排班数据" class="headerlink" title="06 根据id获取排班数据"></a>06 根据id获取排班数据</h4><h5 id="前端请求：-7"><a href="#前端请求：-7" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;getSchedule/&#123;scheduleId&#125;&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理：-7"><a href="#后端处理：-7" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">getSchedule</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String scheduleId)</span> &#123;<br>    <span class="hljs-type">Schedule</span> <span class="hljs-variable">schedule</span> <span class="hljs-operator">=</span> scheduleService.getScheduleId(scheduleId);<br>    <span class="hljs-keyword">return</span> Result.ok(schedule);<br>&#125;<br></code></pre></td></tr></table></figure><p>getScheduleId方法具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Schedule <span class="hljs-title function_">getScheduleId</span><span class="hljs-params">(String scheduleId)</span> &#123;<br>    <span class="hljs-type">Schedule</span> <span class="hljs-variable">schedule</span> <span class="hljs-operator">=</span> scheduleRepository.findById(scheduleId).get();<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.packageSchedule(schedule);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="07-获取可预约排班数据"><a href="#07-获取可预约排班数据" class="headerlink" title="07 获取可预约排班数据"></a>07 获取可预约排班数据</h4><h5 id="前端请求：-8"><a href="#前端请求：-8" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;auth/getBookingScheduleRule/&#123;page&#125;/&#123;limit&#125;/&#123;hoscode&#125;/&#123;depcode&#125;&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理：-8"><a href="#后端处理：-8" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">getBookingSchedule</span><span class="hljs-params">(</span><br><span class="hljs-params">        <span class="hljs-meta">@ApiParam(name = &quot;page&quot;, value = &quot;当前页码&quot;, required = true)</span></span><br><span class="hljs-params">        <span class="hljs-meta">@PathVariable</span> Integer page,</span><br><span class="hljs-params">        <span class="hljs-meta">@ApiParam(name = &quot;limit&quot;, value = &quot;每页记录数&quot;, required = true)</span></span><br><span class="hljs-params">        <span class="hljs-meta">@PathVariable</span> Integer limit,</span><br><span class="hljs-params">        <span class="hljs-meta">@ApiParam(name = &quot;hoscode&quot;, value = &quot;医院code&quot;, required = true)</span></span><br><span class="hljs-params">        <span class="hljs-meta">@PathVariable</span> String hoscode,</span><br><span class="hljs-params">        <span class="hljs-meta">@ApiParam(name = &quot;depcode&quot;, value = &quot;科室code&quot;, required = true)</span></span><br><span class="hljs-params">        <span class="hljs-meta">@PathVariable</span> String depcode)</span> &#123;<br>    <span class="hljs-keyword">return</span> Result.ok(scheduleService.getBookingScheduleRule(page, limit, hoscode, depcode));<br>&#125;<br></code></pre></td></tr></table></figure><p>getBookingScheduleRule方法具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title function_">getBookingScheduleRule</span><span class="hljs-params">(<span class="hljs-type">int</span> page, <span class="hljs-type">int</span> limit, String hoscode, String depcode)</span> &#123;<br>    Map&lt;String,Object&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-comment">//根据医院编号获取预约规则</span><br>    <span class="hljs-type">Hospital</span> <span class="hljs-variable">hospital</span> <span class="hljs-operator">=</span> hospitalService.getByHoscode(hoscode);<br>    <span class="hljs-keyword">if</span>(hospital == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">YyghException</span>(ResultCodeEnum.DATA_ERROR);<br>    &#125;<br>    <span class="hljs-type">BookingRule</span> <span class="hljs-variable">bookingRule</span> <span class="hljs-operator">=</span> hospital.getBookingRule();<br><br>    <span class="hljs-comment">//获取可预约日期的数据（分页）</span><br>    <span class="hljs-type">IPage</span> <span class="hljs-variable">iPage</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getListDate(page,limit,bookingRule);<br>    <span class="hljs-comment">//当前可预约日期</span><br>    List&lt;Date&gt; dateList = iPage.getRecords();<br><br>    <span class="hljs-comment">//获取可预约日期里面科室的剩余预约数</span><br>    <span class="hljs-type">Criteria</span> <span class="hljs-variable">criteria</span> <span class="hljs-operator">=</span> Criteria.where(<span class="hljs-string">&quot;hoscode&quot;</span>).is(hoscode).and(<span class="hljs-string">&quot;depcode&quot;</span>).is(depcode)<br>            .and(<span class="hljs-string">&quot;workDate&quot;</span>).in(dateList);<br><br>    <span class="hljs-type">Aggregation</span> <span class="hljs-variable">agg</span> <span class="hljs-operator">=</span> Aggregation.newAggregation(<br>            Aggregation.match(criteria),<br>            Aggregation.group(<span class="hljs-string">&quot;workDate&quot;</span>).first(<span class="hljs-string">&quot;workDate&quot;</span>).as(<span class="hljs-string">&quot;workDate&quot;</span>)<br>            .count().as(<span class="hljs-string">&quot;docCount&quot;</span>)<br>            .sum(<span class="hljs-string">&quot;availableNumber&quot;</span>).as(<span class="hljs-string">&quot;availableNumber&quot;</span>)<br>            .sum(<span class="hljs-string">&quot;reservedNumber&quot;</span>).as(<span class="hljs-string">&quot;reservedNumber&quot;</span>)<br>    );<br>    AggregationResults&lt;BookingScheduleRuleVo&gt; aggregateResult =<br>            mongoTemplate.aggregate(agg, Schedule.class, BookingScheduleRuleVo.class);<br>    List&lt;BookingScheduleRuleVo&gt; scheduleVoList = aggregateResult.getMappedResults();<br><br>    <span class="hljs-comment">//合并数据  map集合 key日期  value预约规则和剩余数量等</span><br>    Map&lt;Date, BookingScheduleRuleVo&gt; scheduleVoMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-keyword">if</span>(!CollectionUtils.isEmpty(scheduleVoList)) &#123;<br>        scheduleVoMap = scheduleVoList.stream().<br>                collect(Collectors.toMap(BookingScheduleRuleVo::getWorkDate,<br>                        BookingScheduleRuleVo -&gt; BookingScheduleRuleVo));<br>    &#125;<br><br>    <span class="hljs-comment">//获取可预约排班规则</span><br>    List&lt;BookingScheduleRuleVo&gt; bookingScheduleRuleVoList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,len=dateList.size();i&lt;len;i++) &#123;<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> dateList.get(i);<br>        <span class="hljs-comment">//从map集合根据key日期获取value值</span><br>        <span class="hljs-type">BookingScheduleRuleVo</span> <span class="hljs-variable">bookingScheduleRuleVo</span> <span class="hljs-operator">=</span> scheduleVoMap.get(date);<br>        <span class="hljs-comment">//如果当天没有排班医生</span><br>        <span class="hljs-keyword">if</span>(bookingScheduleRuleVo == <span class="hljs-literal">null</span>) &#123;<br>            bookingScheduleRuleVo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BookingScheduleRuleVo</span>();<br>            <span class="hljs-comment">//就诊医生人数</span><br>            bookingScheduleRuleVo.setDocCount(<span class="hljs-number">0</span>);<br>            <span class="hljs-comment">//科室剩余预约数  -1表示无号</span><br>            bookingScheduleRuleVo.setAvailableNumber(-<span class="hljs-number">1</span>);<br>        &#125;<br>        bookingScheduleRuleVo.setWorkDate(date);<br>        bookingScheduleRuleVo.setWorkDateMd(date);<br>        <span class="hljs-comment">//计算当前预约日期对应星期</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">dayOfWeek</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getDayOfWeek(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DateTime</span>(date));<br>        bookingScheduleRuleVo.setDayOfWeek(dayOfWeek);<br><br>        <span class="hljs-comment">//最后一页最后一条记录为即将预约   状态 0：正常 1：即将放号 -1：当天已停止挂号</span><br>        <span class="hljs-keyword">if</span>(i == len-<span class="hljs-number">1</span> &amp;&amp; page == iPage.getPages()) &#123;<br>            bookingScheduleRuleVo.setStatus(<span class="hljs-number">1</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            bookingScheduleRuleVo.setStatus(<span class="hljs-number">0</span>);<br>        &#125;<br>        <span class="hljs-comment">//当天预约如果过了停号时间， 不能预约</span><br>        <span class="hljs-keyword">if</span>(i == <span class="hljs-number">0</span> &amp;&amp; page == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-type">DateTime</span> <span class="hljs-variable">stopTime</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getDateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(), bookingRule.getStopTime());<br>            <span class="hljs-keyword">if</span>(stopTime.isBeforeNow()) &#123;<br>                <span class="hljs-comment">//停止预约</span><br>                bookingScheduleRuleVo.setStatus(-<span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        bookingScheduleRuleVoList.add(bookingScheduleRuleVo);<br>    &#125;<br><br>    <span class="hljs-comment">//可预约日期规则数据</span><br>    result.put(<span class="hljs-string">&quot;bookingScheduleList&quot;</span>, bookingScheduleRuleVoList);<br>    result.put(<span class="hljs-string">&quot;total&quot;</span>, iPage.getTotal());<br><br>    <span class="hljs-comment">//其他基础数据</span><br>    Map&lt;String, String&gt; baseMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-comment">//医院名称</span><br>    baseMap.put(<span class="hljs-string">&quot;hosname&quot;</span>, hospitalService.getHospName(hoscode));<br>    <span class="hljs-comment">//科室</span><br>    <span class="hljs-type">Department</span> <span class="hljs-variable">department</span> <span class="hljs-operator">=</span>departmentService.getDepartment(hoscode, depcode);<br>    <span class="hljs-comment">//大科室名称</span><br>    baseMap.put(<span class="hljs-string">&quot;bigname&quot;</span>, department.getBigname());<br>    <span class="hljs-comment">//科室名称</span><br>    baseMap.put(<span class="hljs-string">&quot;depname&quot;</span>, department.getDepname());<br>    <span class="hljs-comment">//月</span><br>    baseMap.put(<span class="hljs-string">&quot;workDateString&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">DateTime</span>().toString(<span class="hljs-string">&quot;yyyy年MM月&quot;</span>));<br>    <span class="hljs-comment">//放号时间</span><br>    baseMap.put(<span class="hljs-string">&quot;releaseTime&quot;</span>, bookingRule.getReleaseTime());<br>    <span class="hljs-comment">//停号时间</span><br>    baseMap.put(<span class="hljs-string">&quot;stopTime&quot;</span>, bookingRule.getStopTime());<br>    result.put(<span class="hljs-string">&quot;baseMap&quot;</span>, baseMap);<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="08-根据排班id获取预约下单数据"><a href="#08-根据排班id获取预约下单数据" class="headerlink" title="08 根据排班id获取预约下单数据"></a>08 根据排班id获取预约下单数据</h4><h5 id="前端请求：-9"><a href="#前端请求：-9" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;inner/getScheduleOrderVo/&#123;scheduleId&#125;&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理：-9"><a href="#后端处理：-9" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ScheduleOrderVo <span class="hljs-title function_">getScheduleOrderVo</span><span class="hljs-params">(</span><br><span class="hljs-params">        <span class="hljs-meta">@ApiParam(name = &quot;scheduleId&quot;, value = &quot;排班id&quot;, required = true)</span></span><br><span class="hljs-params">        <span class="hljs-meta">@PathVariable(&quot;scheduleId&quot;)</span> String scheduleId)</span> &#123;<br>    <span class="hljs-keyword">return</span> scheduleService.getScheduleOrderVo(scheduleId);<br>&#125;<br></code></pre></td></tr></table></figure><p>getScheduleOrderVo方法具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ScheduleOrderVo <span class="hljs-title function_">getScheduleOrderVo</span><span class="hljs-params">(String scheduleId)</span> &#123;<br>    <span class="hljs-type">ScheduleOrderVo</span> <span class="hljs-variable">scheduleOrderVo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScheduleOrderVo</span>();<br>    <span class="hljs-comment">//获取排班信息</span><br>    <span class="hljs-type">Schedule</span> <span class="hljs-variable">schedule</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getScheduleId(scheduleId);<br>    <span class="hljs-keyword">if</span>(schedule == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">YyghException</span>(ResultCodeEnum.PARAM_ERROR);<br>    &#125;<br>    <span class="hljs-comment">//获取预约规则信息</span><br>    <span class="hljs-type">Hospital</span> <span class="hljs-variable">hospital</span> <span class="hljs-operator">=</span> hospitalService.getByHoscode(schedule.getHoscode());<br>    <span class="hljs-keyword">if</span>(hospital == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">YyghException</span>(ResultCodeEnum.PARAM_ERROR);<br>    &#125;<br>    <span class="hljs-type">BookingRule</span> <span class="hljs-variable">bookingRule</span> <span class="hljs-operator">=</span> hospital.getBookingRule();<br>    <span class="hljs-keyword">if</span>(bookingRule == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">YyghException</span>(ResultCodeEnum.PARAM_ERROR);<br>    &#125;<br><br>    <span class="hljs-comment">//把获取数据设置到scheduleOrderVo</span><br>    scheduleOrderVo.setHoscode(schedule.getHoscode());<br>    scheduleOrderVo.setHosname(hospitalService.getHospName(schedule.getHoscode()));<br>    scheduleOrderVo.setDepcode(schedule.getDepcode());<br>    scheduleOrderVo.setDepname(departmentService.getDepName(schedule.getHoscode(), schedule.getDepcode()));<br>    scheduleOrderVo.setHosScheduleId(schedule.getHosScheduleId());<br>    scheduleOrderVo.setAvailableNumber(schedule.getAvailableNumber());<br>    scheduleOrderVo.setTitle(schedule.getTitle());<br>    scheduleOrderVo.setReserveDate(schedule.getWorkDate());<br>    scheduleOrderVo.setReserveTime(schedule.getWorkTime());<br>    scheduleOrderVo.setAmount(schedule.getAmount());<br><br>    <span class="hljs-comment">//退号截止天数（如：就诊前一天为-1，当天为0）</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">quitDay</span> <span class="hljs-operator">=</span> bookingRule.getQuitDay();<br>    <span class="hljs-type">DateTime</span> <span class="hljs-variable">quitTime</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getDateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DateTime</span>(schedule.getWorkDate()).plusDays(quitDay).toDate(), bookingRule.getQuitTime());<br>    scheduleOrderVo.setQuitTime(quitTime.toDate());<br><br>    <span class="hljs-comment">//预约开始时间</span><br>    <span class="hljs-type">DateTime</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getDateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(), bookingRule.getReleaseTime());<br>    scheduleOrderVo.setStartTime(startTime.toDate());<br><br>    <span class="hljs-comment">//预约截止时间</span><br>    <span class="hljs-type">DateTime</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getDateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DateTime</span>().plusDays(bookingRule.getCycle()).toDate(), bookingRule.getStopTime());<br>    scheduleOrderVo.setEndTime(endTime.toDate());<br><br>    <span class="hljs-comment">//当天停止挂号时间</span><br>    <span class="hljs-type">DateTime</span> <span class="hljs-variable">stopTime</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getDateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(), bookingRule.getStopTime());<br>    scheduleOrderVo.setStartTime(startTime.toDate());<br>    <span class="hljs-keyword">return</span> scheduleOrderVo;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="09-获取医院签名信息"><a href="#09-获取医院签名信息" class="headerlink" title="09 获取医院签名信息"></a>09 获取医院签名信息</h4><h5 id="前端请求：-10"><a href="#前端请求：-10" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;inner/getSignInfoVo/&#123;hoscode&#125;&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理：-10"><a href="#后端处理：-10" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> SignInfoVo <span class="hljs-title function_">getSignInfoVo</span><span class="hljs-params">(</span><br><span class="hljs-params">        <span class="hljs-meta">@ApiParam(name = &quot;hoscode&quot;, value = &quot;医院code&quot;, required = true)</span></span><br><span class="hljs-params">        <span class="hljs-meta">@PathVariable(&quot;hoscode&quot;)</span> String hoscode)</span> &#123;<br>    <span class="hljs-keyword">return</span> hospitalSetService.getSignInfoVo(hoscode);<br>&#125;<br></code></pre></td></tr></table></figure><p>getSignInfoVo方法具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> SignInfoVo <span class="hljs-title function_">getSignInfoVo</span><span class="hljs-params">(String hoscode)</span> &#123;<br>    QueryWrapper&lt;HospitalSet&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>    wrapper.eq(<span class="hljs-string">&quot;hoscode&quot;</span>,hoscode);<br>    <span class="hljs-type">HospitalSet</span> <span class="hljs-variable">hospitalSet</span> <span class="hljs-operator">=</span> baseMapper.selectOne(wrapper);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span> == hospitalSet) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">YyghException</span>(ResultCodeEnum.HOSPITAL_OPEN);<br>    &#125;<br>    <span class="hljs-type">SignInfoVo</span> <span class="hljs-variable">signInfoVo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SignInfoVo</span>();<br>    signInfoVo.setApiUrl(hospitalSet.getApiUrl());<br>    signInfoVo.setSignKey(hospitalSet.getSignKey());<br>    <span class="hljs-keyword">return</span> signInfoVo;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>尚医通项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>尚医通-数据字典业务</title>
    <link href="/2022/10/19/%E5%B0%9A%E5%8C%BB%E9%80%9A-%E6%95%B0%E6%8D%AE%E5%AD%97%E5%85%B8%E4%B8%9A%E5%8A%A1/"/>
    <url>/2022/10/19/%E5%B0%9A%E5%8C%BB%E9%80%9A-%E6%95%B0%E6%8D%AE%E5%AD%97%E5%85%B8%E4%B8%9A%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="尚医通-数据字典业务"><a href="#尚医通-数据字典业务" class="headerlink" title="尚医通-数据字典业务"></a>尚医通-数据字典业务</h2><p><strong>service模块\service_cmn子模块</strong></p><p>数据字典就是管理系统常用的分类数据或者一些固定数据，例如：省市区三级联动数据、民族数据、行业数据、学历数据等，由于该系统大量使用这种数据，所以我们要做一个数据管理方便管理系统数据，一般系统基本都会做数据管理。</p><p>数据字典是树形展示，由于数据众多，我们使用“树形数据与懒加载”的方式展现数据列表，其他就是对数据的新增、修改与删除操作。</p><p><strong>操作的是yygh_cmn库下的dict表</strong></p><h5 id="页面效果"><a href="#页面效果" class="headerlink" title="页面效果"></a>页面效果</h5><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h74kjjrdgbj30vr0gpjvh.jpg"></p><h5 id="表设计"><a href="#表设计" class="headerlink" title="表设计"></a>表设计</h5><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h74kk8vew1j30ds09uq4d.jpg"></p><h3 id="数据字典01"><a href="#数据字典01" class="headerlink" title="数据字典01"></a>数据字典01</h3><h5 id="位置："><a href="#位置：" class="headerlink" title="位置："></a>位置：</h5><p>controller包\DictController.java</p><h4 id="01-根据数据id查询子数据列表"><a href="#01-根据数据id查询子数据列表" class="headerlink" title="01 根据数据id查询子数据列表"></a>01 根据数据id查询子数据列表</h4><h5 id="前端请求："><a href="#前端请求：" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;findChildData/&#123;id&#125;&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理："><a href="#后端处理：" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">findChildData</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span> &#123;<br>        List&lt;Dict&gt; list = dictService.findChlidData(id);<br>        <span class="hljs-keyword">return</span> Result.ok(list);<br>&#125;<br></code></pre></td></tr></table></figure><p>findChlidData方法具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;Dict&gt; <span class="hljs-title function_">findChlidData</span><span class="hljs-params">(Long id)</span> &#123;<br>        <span class="hljs-comment">//创建QueryWrapper对象用于mybatisplus操作</span><br>        QueryWrapper&lt;Dict&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>        wrapper.eq(<span class="hljs-string">&quot;parent_id&quot;</span>,id);<br>        <span class="hljs-comment">//调用封装好的方法，这里根据父类id查询到子列表</span><br>        List&lt;Dict&gt; dictList = baseMapper.selectList(wrapper);<br>        <span class="hljs-comment">//向list集合每个dict对象中设置hasChildren</span><br>        <span class="hljs-keyword">for</span> (Dict dict:dictList) &#123;<br>            <span class="hljs-type">Long</span> <span class="hljs-variable">dictId</span> <span class="hljs-operator">=</span> dict.getId();<br>            <span class="hljs-comment">//判断下面还有没有子节点</span><br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">isChild</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.isChildren(dictId);<br>            dict.setHasChildren(isChild);<br>        &#125;<br>        <span class="hljs-keyword">return</span> dictList;<br>&#125;<br></code></pre></td></tr></table></figure><p>isChildren方法具体实现，判断id下面是否有子节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isChildren</span><span class="hljs-params">(Long id)</span> &#123;<br>        QueryWrapper&lt;Dict&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>        wrapper.eq(<span class="hljs-string">&quot;parent_id&quot;</span>,id);<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> baseMapper.selectCount(wrapper);<br>        <span class="hljs-comment">// 1&gt;0</span><br>        <span class="hljs-keyword">return</span> count&gt;<span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="02-导出数据字典接口"><a href="#02-导出数据字典接口" class="headerlink" title="02 导出数据字典接口"></a>02 导出数据字典接口</h4><h5 id="前端请求：-1"><a href="#前端请求：-1" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;exportData&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理：-1"><a href="#后端处理：-1" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exportDict</span><span class="hljs-params">(HttpServletResponse response)</span> &#123;<br>        dictService.exportDictData(response);<br>&#125;<br></code></pre></td></tr></table></figure><p>exportDictData方法具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exportDictData</span><span class="hljs-params">(HttpServletResponse response)</span> &#123;<br>        <span class="hljs-comment">//设置下载信息</span><br>        response.setContentType(<span class="hljs-string">&quot;application/vnd.ms-excel&quot;</span>);<br>        response.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;dict&quot;</span>;<br>        response.setHeader(<span class="hljs-string">&quot;Content-disposition&quot;</span>, <span class="hljs-string">&quot;attachment;filename=&quot;</span>+ fileName + <span class="hljs-string">&quot;.xlsx&quot;</span>);<br>        <span class="hljs-comment">//查询数据库</span><br>        List&lt;Dict&gt; dictList = baseMapper.selectList(<span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">//Dict -- DictEeVo</span><br>        List&lt;DictEeVo&gt; dictVoList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(Dict dict:dictList) &#123;<br>            <span class="hljs-type">DictEeVo</span> <span class="hljs-variable">dictEeVo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DictEeVo</span>();<br>            BeanUtils.copyProperties(dict,dictEeVo);<br>            dictVoList.add(dictEeVo);<br>        &#125;<br>        <span class="hljs-comment">//调用方法进行写操作</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            EasyExcel.write(response.getOutputStream(), DictEeVo.class).sheet(<span class="hljs-string">&quot;dict&quot;</span>)<br>                    .doWrite(dictVoList);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="03-导入数据字典"><a href="#03-导入数据字典" class="headerlink" title="03 导入数据字典"></a>03 导入数据字典</h4><h5 id="前端请求：-2"><a href="#前端请求：-2" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;importData&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理：-2"><a href="#后端处理：-2" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">importDict</span><span class="hljs-params">(MultipartFile file)</span> &#123;<br>        dictService.importDictData(file);<br>        <span class="hljs-keyword">return</span> Result.ok();<br>&#125;<br></code></pre></td></tr></table></figure><p>importDictData方法的具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">importDictData</span><span class="hljs-params">(MultipartFile file)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            EasyExcel.read(file.getInputStream(),DictEeVo.class,<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">DictListener</span>(baseMapper)).sheet().doRead();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="数据字典02"><a href="#数据字典02" class="headerlink" title="数据字典02"></a>数据字典02</h3><h5 id="位置：-1"><a href="#位置：-1" class="headerlink" title="位置："></a>位置：</h5><p>controller包\DictController.java</p><h4 id="01-根据dictcode和value查询单个字典"><a href="#01-根据dictcode和value查询单个字典" class="headerlink" title="01 根据dictcode和value查询单个字典"></a>01 根据dictcode和value查询单个字典</h4><h5 id="前端请求：-3"><a href="#前端请求：-3" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;getName/&#123;dictCode&#125;/&#123;value&#125;&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理：-3"><a href="#后端处理：-3" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String dictCode,</span><br><span class="hljs-params">                          <span class="hljs-meta">@PathVariable</span> String value)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">dictName</span> <span class="hljs-operator">=</span> dictService.getDictName(dictCode,value);<br>        <span class="hljs-keyword">return</span> dictName;<br>&#125;<br></code></pre></td></tr></table></figure><p>getDictName方法具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDictName</span><span class="hljs-params">(String dictCode, String value)</span> &#123;<br>        <span class="hljs-comment">//如果dictCode为空，直接根据value查询</span><br>        <span class="hljs-keyword">if</span>(StringUtils.isEmpty(dictCode)) &#123;<br>            QueryWrapper&lt;Dict&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>            wrapper.eq(<span class="hljs-string">&quot;value&quot;</span>,value);<br>            <span class="hljs-type">Dict</span> <span class="hljs-variable">dict</span> <span class="hljs-operator">=</span> baseMapper.selectOne(wrapper);<br>            <span class="hljs-keyword">return</span> dict.getName();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//如果dictCode不为空，根据dictCode和value查询</span><br>            <span class="hljs-type">Dict</span> <span class="hljs-variable">codeDict</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getDictByDictCode(dictCode);<br>            <span class="hljs-type">Long</span> <span class="hljs-variable">parent_id</span> <span class="hljs-operator">=</span> codeDict.getId();<br>            <span class="hljs-comment">//根据parent_id和value进行查询</span><br>            <span class="hljs-type">Dict</span> <span class="hljs-variable">finalDict</span> <span class="hljs-operator">=</span> baseMapper.selectOne(<span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;Dict&gt;()<br>                    .eq(<span class="hljs-string">&quot;parent_id&quot;</span>, parent_id)<br>                    .eq(<span class="hljs-string">&quot;value&quot;</span>, value));<br>            <span class="hljs-keyword">return</span> finalDict.getName();<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="02-根据value查询查询单个字典"><a href="#02-根据value查询查询单个字典" class="headerlink" title="02 根据value查询查询单个字典"></a>02 根据value查询查询单个字典</h4><h5 id="前端请求：-4"><a href="#前端请求：-4" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;getName/&#123;value&#125;&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理：-4"><a href="#后端处理：-4" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String value)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">dictName</span> <span class="hljs-operator">=</span> dictService.getDictName(<span class="hljs-string">&quot;&quot;</span>,value);<br>        <span class="hljs-keyword">return</span> dictName;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="03-根据dictCode获取下级节点"><a href="#03-根据dictCode获取下级节点" class="headerlink" title="03 根据dictCode获取下级节点"></a>03 根据dictCode获取下级节点</h4><p>前端请求：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;findByDictCode/&#123;dictCode&#125;&quot;)</span><br></code></pre></td></tr></table></figure><p>后端处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">findByDictCode</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String dictCode)</span> &#123;<br>        List&lt;Dict&gt; list = dictService.findByDictCode(dictCode);<br>        <span class="hljs-keyword">return</span> Result.ok(list);<br>&#125;<br></code></pre></td></tr></table></figure><p>findByDictCode方法具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;Dict&gt; <span class="hljs-title function_">findByDictCode</span><span class="hljs-params">(String dictCode)</span> &#123;<br>        <span class="hljs-comment">//根据dictcode获取对应id</span><br>        <span class="hljs-type">Dict</span> <span class="hljs-variable">dict</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getDictByDictCode(dictCode);<br>        <span class="hljs-comment">//根据id获取子节点</span><br>        List&lt;Dict&gt; chlidData = <span class="hljs-built_in">this</span>.findChlidData(dict.getId());<br>        <span class="hljs-keyword">return</span> chlidData;<br>&#125;<br></code></pre></td></tr></table></figure><p>getDictByDictCode方法具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Dict <span class="hljs-title function_">getDictByDictCode</span><span class="hljs-params">(String dictCode)</span> &#123;<br>        QueryWrapper&lt;Dict&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>        wrapper.eq(<span class="hljs-string">&quot;dict_code&quot;</span>,dictCode);<br>        <span class="hljs-type">Dict</span> <span class="hljs-variable">codeDict</span> <span class="hljs-operator">=</span> baseMapper.selectOne(wrapper);<br>        <span class="hljs-keyword">return</span> codeDict;<br>&#125;<br></code></pre></td></tr></table></figure><p>findChlidData方法具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;Dict&gt; <span class="hljs-title function_">findChlidData</span><span class="hljs-params">(Long id)</span> &#123;<br>        <span class="hljs-comment">//创建QueryWrapper对象用于mybatisplus操作</span><br>        QueryWrapper&lt;Dict&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>        wrapper.eq(<span class="hljs-string">&quot;parent_id&quot;</span>,id);<br>        <span class="hljs-comment">//调用封装好的方法，这里根据父类id查询到子列表</span><br>        List&lt;Dict&gt; dictList = baseMapper.selectList(wrapper);<br>        <span class="hljs-comment">//向list集合每个dict对象中设置hasChildren</span><br>        <span class="hljs-keyword">for</span> (Dict dict:dictList) &#123;<br>            <span class="hljs-type">Long</span> <span class="hljs-variable">dictId</span> <span class="hljs-operator">=</span> dict.getId();<br>            <span class="hljs-comment">//判断下面还有没有子节点</span><br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">isChild</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.isChildren(dictId);<br>            dict.setHasChildren(isChild);<br>        &#125;<br>        <span class="hljs-keyword">return</span> dictList;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>尚医通项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>尚医通-医院AIP业务1</title>
    <link href="/2022/10/19/%E5%B0%9A%E5%8C%BB%E9%80%9A-%E5%8C%BB%E9%99%A2AIP%E4%B8%9A%E5%8A%A11/"/>
    <url>/2022/10/19/%E5%B0%9A%E5%8C%BB%E9%80%9A-%E5%8C%BB%E9%99%A2AIP%E4%B8%9A%E5%8A%A11/</url>
    
    <content type="html"><![CDATA[<h1 id="尚医通-医院AIP业务1"><a href="#尚医通-医院AIP业务1" class="headerlink" title="尚医通-医院AIP业务1"></a>尚医通-医院AIP业务1</h1><h3 id="service模块-service-hosp子模块"><a href="#service模块-service-hosp子模块" class="headerlink" title="service模块\service_hosp子模块"></a>service模块\service_hosp子模块</h3><p>医院设置主要是用来保存开通医院的一些基本信息，每个医院一条信息，保存了医院编号（平台分配，全局唯一）和接口调用相关的签名key等信息，是整个流程的第一步，只有开通了医院设置信息，才可以上传医院相关信息。</p><p>我们所开发的功能就是基于单表的一个CRUD、锁定&#x2F;解锁和发送签名信息这些基本功能。</p><p><strong>查询的表为yygh_hosp库下的hospital_set</strong></p><h5 id="表结构："><a href="#表结构：" class="headerlink" title="表结构："></a>表结构：</h5><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h73xe7grgrj30rb0b2djx.jpg"></p><h3 id="医院AIP业务01"><a href="#医院AIP业务01" class="headerlink" title="医院AIP业务01"></a>医院AIP业务01</h3><h5 id="位置："><a href="#位置：" class="headerlink" title="位置："></a>位置：</h5><p>controller包\HospitalSetController.java</p><h4 id="01-查询医院设置表所有信息"><a href="#01-查询医院设置表所有信息" class="headerlink" title="01 查询医院设置表所有信息"></a>01 查询医院设置表所有信息</h4><h5 id="前端请求："><a href="#前端请求：" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;findAll&quot;)</span><br></code></pre></td></tr></table></figure><p>前提：首先该类注入了hospitalSetService接口，该接口继承了IService接口，可以使用mybatisplus包中封装好的方法</p><h5 id="后端处理："><a href="#后端处理：" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">findAllHospitalSet</span><span class="hljs-params">()</span> &#123;<br>        List&lt;HospitalSet&gt; list = hospitalSetService.list();<br>        <span class="hljs-keyword">return</span> Result.ok(list);<br>&#125;<br></code></pre></td></tr></table></figure><p>直接调用已封装好方法得到医院设置的list集合，并通过同一返回规范生成json返回list集合。</p><h4 id="02-逻辑删除医院设置"><a href="#02-逻辑删除医院设置" class="headerlink" title="02 逻辑删除医院设置"></a>02 逻辑删除医院设置</h4><p>所谓逻辑删除并不是把数据从表中移除而是把is_deleted字段设为0</p><h5 id="前端请求：-1"><a href="#前端请求：-1" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@DeleteMapping(&quot;&#123;id&#125;&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理：-1"><a href="#后端处理：-1" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">removeHospSet</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> hospitalSetService.removeById(id);<br>        <span class="hljs-keyword">if</span>(flag) &#123;<br>            <span class="hljs-keyword">return</span> Result.ok();<br>        &#125; <br>        <span class="hljs-keyword">return</span> Result.fail();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="03-条件查询带分页"><a href="#03-条件查询带分页" class="headerlink" title="03 条件查询带分页"></a>03 条件查询带分页</h4><h5 id="前端请求：-2"><a href="#前端请求：-2" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;findPageHospSet/&#123;current&#125;/&#123;limit&#125;&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理：-2"><a href="#后端处理：-2" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">findPageHospSet</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-type">long</span> current,</span><br><span class="hljs-params">                                  <span class="hljs-meta">@PathVariable</span> <span class="hljs-type">long</span> limit,</span><br><span class="hljs-params">                                  <span class="hljs-meta">@RequestBody(required = false)</span> HospitalSetQueryVo hospitalSetQueryVo)</span> &#123;<br>        <span class="hljs-comment">//创建page对象，传递当前页，每页记录数</span><br>        Page&lt;HospitalSet&gt; page = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(current,limit);<br>        <span class="hljs-comment">//构建条件,queryWrapper是mybatis plus中实现查询的对象封装操作类</span><br>        QueryWrapper&lt;HospitalSet&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">hosname</span> <span class="hljs-operator">=</span> hospitalSetQueryVo.getHosname();<span class="hljs-comment">//医院名称</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">hoscode</span> <span class="hljs-operator">=</span> hospitalSetQueryVo.getHoscode();<span class="hljs-comment">//医院编号</span><br>        <span class="hljs-comment">//考虑医院名称或医院编号为空的情况</span><br>        <span class="hljs-keyword">if</span>(!StringUtils.isEmpty(hosname)) &#123;<br>            wrapper.like(<span class="hljs-string">&quot;hosname&quot;</span>,hospitalSetQueryVo.getHosname());<br>        &#125;<br>        <span class="hljs-keyword">if</span>(!StringUtils.isEmpty(hoscode)) &#123;<br>            wrapper.eq(<span class="hljs-string">&quot;hoscode&quot;</span>,hospitalSetQueryVo.getHoscode());<br>        &#125;<br>    <br>        <span class="hljs-comment">//调用方法实现分页查询</span><br>        IPage&lt;HospitalSet&gt; pageHospitalSet = hospitalSetService.page(page, wrapper);<br>    <br>        <span class="hljs-comment">//返回结果</span><br>        <span class="hljs-keyword">return</span> Result.ok(pageHospitalSet);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="04-添加医院设置"><a href="#04-添加医院设置" class="headerlink" title="04 添加医院设置"></a>04 添加医院设置</h4><h5 id="前端请求：-3"><a href="#前端请求：-3" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;saveHospitalSet&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理：-3"><a href="#后端处理：-3" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">saveHospitalSet</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> HospitalSet hospitalSet)</span> &#123;<br>        <span class="hljs-comment">//设置状态 1 使用 0 不能使用</span><br>        hospitalSet.setStatus(<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">//签名秘钥</span><br>        <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        hospitalSet.setSignKey(MD5.encrypt(System.currentTimeMillis()+<span class="hljs-string">&quot;&quot;</span>+random.nextInt(<span class="hljs-number">1000</span>)));<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">save</span> <span class="hljs-operator">=</span> hospitalSetService.save(hospitalSet);<br>        <span class="hljs-keyword">if</span>(save) &#123;<br>            <span class="hljs-keyword">return</span> Result.ok();<br>        &#125;<br>        <span class="hljs-keyword">return</span> Result.fail();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="05-根据id获取医院设置"><a href="#05-根据id获取医院设置" class="headerlink" title="05 根据id获取医院设置"></a>05 根据id获取医院设置</h4><h5 id="前端发请求："><a href="#前端发请求：" class="headerlink" title="前端发请求："></a>前端发请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;getHospSet/&#123;id&#125;&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理：-4"><a href="#后端处理：-4" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">getHospSet</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span> &#123;<br>        <span class="hljs-type">HospitalSet</span> <span class="hljs-variable">hospitalSet</span> <span class="hljs-operator">=</span> hospitalSetService.getById(id);<br>        <span class="hljs-keyword">return</span> Result.ok(hospitalSet);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="06-修改医院设置"><a href="#06-修改医院设置" class="headerlink" title="06 修改医院设置"></a>06 修改医院设置</h4><h5 id="前端请求：-4"><a href="#前端请求：-4" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;updateHospitalSet&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理：-5"><a href="#后端处理：-5" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">updateHospitalSet</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> HospitalSet hospitalSet)</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> hospitalSetService.updateById(hospitalSet);<br>        <span class="hljs-keyword">if</span>(flag) &#123;<br>            <span class="hljs-keyword">return</span> Result.ok();<br>        &#125;<br>        <span class="hljs-keyword">return</span> Result.fail();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="07-批量删除医院设置"><a href="#07-批量删除医院设置" class="headerlink" title="07 批量删除医院设置"></a>07 批量删除医院设置</h4><h5 id="前端请求：-5"><a href="#前端请求：-5" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@DeleteMapping(&quot;batchRemove&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理：-6"><a href="#后端处理：-6" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">batchRemoveHospitalSet</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> List&lt;Long&gt; idList)</span> &#123;<br>        hospitalSetService.removeByIds(idList);<br>        <span class="hljs-keyword">return</span> Result.ok();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="08-医院设置锁定和解锁"><a href="#08-医院设置锁定和解锁" class="headerlink" title="08 医院设置锁定和解锁"></a>08 医院设置锁定和解锁</h4><h5 id="前端请求：-6"><a href="#前端请求：-6" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PutMapping(&quot;lockHospitalSet/&#123;id&#125;/&#123;status&#125;&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理：-7"><a href="#后端处理：-7" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">lockHospitalSet</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id,</span><br><span class="hljs-params">                                  <span class="hljs-meta">@PathVariable</span> Integer status)</span> &#123;<br>        <span class="hljs-comment">//根据id查询医院设置信息</span><br>        <span class="hljs-type">HospitalSet</span> <span class="hljs-variable">hospitalSet</span> <span class="hljs-operator">=</span> hospitalSetService.getById(id);<br>        <span class="hljs-comment">//设置状态</span><br>        hospitalSet.setStatus(status);<br>        <span class="hljs-comment">//调用方法</span><br>        hospitalSetService.updateById(hospitalSet);<br>        <span class="hljs-keyword">return</span> Result.ok();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="09-发送签名秘钥"><a href="#09-发送签名秘钥" class="headerlink" title="09 发送签名秘钥"></a>09 发送签名秘钥</h4><p>暂时没用上，说是短信服务会用但也没用上</p><h3 id="医院AIP业务02"><a href="#医院AIP业务02" class="headerlink" title="医院AIP业务02"></a>医院AIP业务02</h3><h5 id="位置：-1"><a href="#位置：-1" class="headerlink" title="位置："></a>位置：</h5><p>controller包\api包\ApiController.java</p><h4 id="01-上传医院"><a href="#01-上传医院" class="headerlink" title="01 上传医院"></a>01 上传医院</h4><p>上传后的数据存储在mongodb中</p><h5 id="前端请求：-7"><a href="#前端请求：-7" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;saveHospital&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理：-8"><a href="#后端处理：-8" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">saveHosp</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>        <span class="hljs-comment">//获取传递过来医院信息</span><br>        Map&lt;String, String[]&gt; requestMap = request.getParameterMap();<br>        Map&lt;String, Object&gt; paramMap = HttpRequestHelper.switchMap(requestMap);<br><br>        <span class="hljs-comment">//1 获取医院系统传递过来的签名,签名进行MD5加密</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">hospSign</span> <span class="hljs-operator">=</span> (String)paramMap.get(<span class="hljs-string">&quot;sign&quot;</span>);<br><br>        <span class="hljs-comment">//2 根据传递过来医院编码，查询数据库，查询签名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">hoscode</span> <span class="hljs-operator">=</span> (String)paramMap.get(<span class="hljs-string">&quot;hoscode&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">signKey</span> <span class="hljs-operator">=</span> hospitalSetService.getSignKey(hoscode);<br><br>        <span class="hljs-comment">//3 把数据库查询签名进行MD5加密</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">signKeyMd5</span> <span class="hljs-operator">=</span> MD5.encrypt(signKey);<br><br>        <span class="hljs-comment">//4 判断签名是否一致</span><br>        <span class="hljs-keyword">if</span>(!hospSign.equals(signKeyMd5)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">YyghException</span>(ResultCodeEnum.SIGN_ERROR);<br>        &#125;<br><br>        <span class="hljs-comment">//传输过程中“+”转换为了“ ”，因此我们要转换回来</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">logoData</span> <span class="hljs-operator">=</span> (String)paramMap.get(<span class="hljs-string">&quot;logoData&quot;</span>);<br>        logoData = logoData.replaceAll(<span class="hljs-string">&quot; &quot;</span>,<span class="hljs-string">&quot;+&quot;</span>);<br>        paramMap.put(<span class="hljs-string">&quot;logoData&quot;</span>,logoData);<br><br>        hospitalService.save(paramMap);<br>        <span class="hljs-keyword">return</span> Result.ok();<br>&#125;<br></code></pre></td></tr></table></figure><p>save方法具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">(Map&lt;String, Object&gt; paramMap)</span> &#123;<br>        <span class="hljs-comment">//把参数map集合转换对象 Hospital</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">mapString</span> <span class="hljs-operator">=</span> JSONObject.toJSONString(paramMap);<br>        <span class="hljs-type">Hospital</span> <span class="hljs-variable">hospital</span> <span class="hljs-operator">=</span> JSONObject.parseObject(mapString, Hospital.class);<br><br>        <span class="hljs-comment">//判断是否存在数据</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">hoscode</span> <span class="hljs-operator">=</span> hospital.getHoscode();<br>        <span class="hljs-type">Hospital</span> <span class="hljs-variable">hospitalExist</span> <span class="hljs-operator">=</span> hospitalRepository.getHospitalByHoscode(hoscode);<br><br>        <span class="hljs-comment">//如果存在，进行修改</span><br>        <span class="hljs-keyword">if</span>(hospitalExist != <span class="hljs-literal">null</span>) &#123;<br>            hospital.setStatus(hospitalExist.getStatus());<br>            hospital.setCreateTime(hospitalExist.getCreateTime());<br>            hospital.setUpdateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>            hospital.setIsDeleted(<span class="hljs-number">0</span>);<br>            hospitalRepository.save(hospital);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//如果不存在，进行添加</span><br>            hospital.setStatus(<span class="hljs-number">0</span>);<br>            hospital.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>            hospital.setUpdateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>            hospital.setIsDeleted(<span class="hljs-number">0</span>);<br>            hospitalRepository.save(hospital);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="02-查询医院"><a href="#02-查询医院" class="headerlink" title="02 查询医院"></a>02 查询医院</h4><h5 id="前端请求：-8"><a href="#前端请求：-8" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;hospital/show&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理：-9"><a href="#后端处理：-9" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">getHospital</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>        <span class="hljs-comment">//1 获取传递过来医院信息</span><br>        Map&lt;String, String[]&gt; requestMap = request.getParameterMap();<br>        Map&lt;String, Object&gt; paramMap = HttpRequestHelper.switchMap(requestMap);<br>        <span class="hljs-comment">//获取医院编号</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">hoscode</span> <span class="hljs-operator">=</span> (String)paramMap.get(<span class="hljs-string">&quot;hoscode&quot;</span>);<br>        <span class="hljs-comment">//获取医院签名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">hospSign</span> <span class="hljs-operator">=</span> (String)paramMap.get(<span class="hljs-string">&quot;sign&quot;</span>);<br><br>        <span class="hljs-comment">//2 根据传递过来医院编号，查询数据库中是否存在签名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">signKey</span> <span class="hljs-operator">=</span> hospitalSetService.getSignKey(hoscode);<br><br>        <span class="hljs-comment">//3 把数据库查询签名进行MD5加密</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">signKeyMd5</span> <span class="hljs-operator">=</span> MD5.encrypt(signKey);<br><br>        <span class="hljs-comment">//4 判断签名是否一致</span><br>        <span class="hljs-keyword">if</span>(!hospSign.equals(signKeyMd5)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">YyghException</span>(ResultCodeEnum.SIGN_ERROR);<br>        &#125;<br><br>        <span class="hljs-type">Hospital</span> <span class="hljs-variable">hospital</span> <span class="hljs-operator">=</span> hospitalService.getByHoscode(hoscode);<br>        <span class="hljs-keyword">return</span> Result.ok(hospital);<br>&#125;<br></code></pre></td></tr></table></figure><p>getByHoscode方法具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Hospital <span class="hljs-title function_">getByHoscode</span><span class="hljs-params">(String hoscode)</span> &#123;<br>    <span class="hljs-type">Hospital</span> <span class="hljs-variable">hospital</span> <span class="hljs-operator">=</span> hospitalRepository.getHospitalByHoscode(hoscode);<br>    <span class="hljs-keyword">return</span> hospital;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>所用到的加密方法在common模块\service_util子模块\helper包\HttpRequestHelper.java</strong></p><h4 id="03-上传科室"><a href="#03-上传科室" class="headerlink" title="03 上传科室"></a>03 上传科室</h4><h5 id="前端请求：-9"><a href="#前端请求：-9" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;saveDepartment&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理：-10"><a href="#后端处理：-10" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">saveDepartment</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>        <span class="hljs-comment">//获取传递过来科室信息</span><br>        Map&lt;String, String[]&gt; requestMap = request.getParameterMap();<br>        Map&lt;String, Object&gt; paramMap = HttpRequestHelper.switchMap(requestMap);<br><br>        <span class="hljs-comment">//获取医院编号</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">hoscode</span> <span class="hljs-operator">=</span> (String)paramMap.get(<span class="hljs-string">&quot;hoscode&quot;</span>);<br>        <span class="hljs-comment">//获取医院签名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">hospSign</span> <span class="hljs-operator">=</span> (String)paramMap.get(<span class="hljs-string">&quot;sign&quot;</span>);<br><br>        <span class="hljs-comment">//2 根据传递过来医院编码，查询数据库中是否存在签名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">signKey</span> <span class="hljs-operator">=</span> hospitalSetService.getSignKey(hoscode);<br><br>        <span class="hljs-comment">//3 把数据库查询签名进行MD5加密</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">signKeyMd5</span> <span class="hljs-operator">=</span> MD5.encrypt(signKey);<br><br>        <span class="hljs-comment">//4 判断签名是否一致</span><br>        <span class="hljs-keyword">if</span>(!hospSign.equals(signKeyMd5)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">YyghException</span>(ResultCodeEnum.SIGN_ERROR);<br>        &#125;<br><br>        <span class="hljs-comment">//调用service的方法</span><br>        departmentService.save(paramMap);<br>        <span class="hljs-keyword">return</span> Result.ok();<br>&#125;<br></code></pre></td></tr></table></figure><p>save方法具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">(Map&lt;String, Object&gt; paramMap)</span> &#123;<br>        <span class="hljs-comment">//paramMap 转换department对象</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">paramMapString</span> <span class="hljs-operator">=</span> JSONObject.toJSONString(paramMap);<br>        <span class="hljs-type">Department</span> <span class="hljs-variable">department</span> <span class="hljs-operator">=</span> JSONObject.parseObject(paramMapString,Department.class);<br><br>        <span class="hljs-comment">//根据医院编号 和 科室编号查询</span><br>        <span class="hljs-type">Department</span> <span class="hljs-variable">departmentExist</span> <span class="hljs-operator">=</span> departmentRepository.<br>                getDepartmentByHoscodeAndDepcode(department.getHoscode(),department.getDepcode());<br>        <span class="hljs-keyword">if</span>(departmentExist!=<span class="hljs-literal">null</span>) &#123;<br>            departmentExist.setUpdateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>            departmentExist.setIsDeleted(<span class="hljs-number">0</span>);<br>            departmentRepository.save(departmentExist);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            department.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>            department.setUpdateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>            department.setIsDeleted(<span class="hljs-number">0</span>);<br>            departmentRepository.save(department);<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="04-查询科室"><a href="#04-查询科室" class="headerlink" title="04 查询科室"></a>04 查询科室</h4><h5 id="前端请求：-10"><a href="#前端请求：-10" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;department/list&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理：-11"><a href="#后端处理：-11" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">findDepartment</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>        <span class="hljs-comment">//获取传递过来科室信息</span><br>        Map&lt;String, String[]&gt; requestMap = request.getParameterMap();<br>        Map&lt;String, Object&gt; paramMap = HttpRequestHelper.switchMap(requestMap);<br><br>        <span class="hljs-comment">//医院编号</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">hoscode</span> <span class="hljs-operator">=</span> (String)paramMap.get(<span class="hljs-string">&quot;hoscode&quot;</span>);<br>        <span class="hljs-comment">//当前页 和 每页记录数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">page</span> <span class="hljs-operator">=</span> StringUtils.isEmpty(paramMap.get(<span class="hljs-string">&quot;page&quot;</span>)) ? <span class="hljs-number">1</span> : Integer.parseInt((String)paramMap.get(<span class="hljs-string">&quot;page&quot;</span>));<br>        <span class="hljs-type">int</span> <span class="hljs-variable">limit</span> <span class="hljs-operator">=</span> StringUtils.isEmpty(paramMap.get(<span class="hljs-string">&quot;limit&quot;</span>)) ? <span class="hljs-number">1</span> : Integer.parseInt((String)paramMap.get(<span class="hljs-string">&quot;limit&quot;</span>));<br><br>        <span class="hljs-comment">//根据对象进行查询，不只是查询任何的操作都是基于对象实现的</span><br>        <span class="hljs-type">DepartmentQueryVo</span> <span class="hljs-variable">departmentQueryVo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DepartmentQueryVo</span>();<br>        departmentQueryVo.setHoscode(hoscode);<br>        <span class="hljs-comment">//调用service方法</span><br>        Page&lt;Department&gt; pageModel = departmentService.findPageDepartment(page,limit,departmentQueryVo);<br>        <span class="hljs-keyword">return</span> Result.ok(pageModel);<br>&#125;<br></code></pre></td></tr></table></figure><p>findPageDepartment方法具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Page&lt;Department&gt; <span class="hljs-title function_">findPageDepartment</span><span class="hljs-params">(<span class="hljs-type">int</span> page, <span class="hljs-type">int</span> limit, DepartmentQueryVo departmentQueryVo)</span> &#123;<br>        <span class="hljs-comment">// 创建Pageable对象，设置当前页和每页记录数</span><br>        <span class="hljs-comment">//0是第一页</span><br>        <span class="hljs-type">Pageable</span> <span class="hljs-variable">pageable</span> <span class="hljs-operator">=</span> PageRequest.of(page-<span class="hljs-number">1</span>,limit);<br>        <span class="hljs-type">Department</span> <span class="hljs-variable">department</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Department</span>();<br>        BeanUtils.copyProperties(departmentQueryVo,department);<br>        department.setIsDeleted(<span class="hljs-number">0</span>);<br><br>        <span class="hljs-comment">// 创建Example对象</span><br>        <span class="hljs-type">ExampleMatcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> ExampleMatcher.matching()<br>            .withStringMatcher(ExampleMatcher.StringMatcher.CONTAINING)<br>            .withIgnoreCase(<span class="hljs-literal">true</span>);<br>        Example&lt;Department&gt; example = Example.of(department,matcher);<br><br>        Page&lt;Department&gt; all = departmentRepository.findAll(example, pageable);<br>        <span class="hljs-keyword">return</span> all;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="05-删除科室"><a href="#05-删除科室" class="headerlink" title="05 删除科室"></a>05 删除科室</h4><h5 id="前端请求：-11"><a href="#前端请求：-11" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;department/remove&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理：-12"><a href="#后端处理：-12" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">removeDepartment</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>        <span class="hljs-comment">//获取传递过来科室信息</span><br>        Map&lt;String, String[]&gt; requestMap = request.getParameterMap();<br>        Map&lt;String, Object&gt; paramMap = HttpRequestHelper.switchMap(requestMap);<br>        <span class="hljs-comment">//医院编号 和 科室编号</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">hoscode</span> <span class="hljs-operator">=</span> (String)paramMap.get(<span class="hljs-string">&quot;hoscode&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">depcode</span> <span class="hljs-operator">=</span> (String)paramMap.get(<span class="hljs-string">&quot;depcode&quot;</span>);<br>        departmentService.remove(hoscode,depcode);<br>        <span class="hljs-keyword">return</span> Result.ok();<br>&#125;<br></code></pre></td></tr></table></figure><p>remove方法具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(String hoscode, String depcode)</span> &#123;<br>        <span class="hljs-comment">//根据医院编号 和 科室编号查询</span><br>        <span class="hljs-type">Department</span> <span class="hljs-variable">department</span> <span class="hljs-operator">=</span> departmentRepository.getDepartmentByHoscodeAndDepcode(hoscode, depcode);<br>        <span class="hljs-keyword">if</span>(department != <span class="hljs-literal">null</span>) &#123;<br>            departmentRepository.deleteById(department.getId());<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="06-上传排班"><a href="#06-上传排班" class="headerlink" title="06 上传排班"></a>06 上传排班</h4><h5 id="前端请求：-12"><a href="#前端请求：-12" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;saveSchedule&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理：-13"><a href="#后端处理：-13" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">saveSchedule</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>        <span class="hljs-comment">//获取传递过来科室信息</span><br>        Map&lt;String, String[]&gt; requestMap = request.getParameterMap();<br>        Map&lt;String, Object&gt; paramMap = HttpRequestHelper.switchMap(requestMap);<br>        scheduleService.save(paramMap);<br>        <span class="hljs-keyword">return</span> Result.ok();<br>&#125;<br></code></pre></td></tr></table></figure><p>save方法具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">(Map&lt;String, Object&gt; paramMap)</span> &#123;<br>        <span class="hljs-comment">//paramMap 转换department对象</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">paramMapString</span> <span class="hljs-operator">=</span> JSONObject.toJSONString(paramMap);<br>        <span class="hljs-type">Schedule</span> <span class="hljs-variable">schedule</span> <span class="hljs-operator">=</span> JSONObject.parseObject(paramMapString,Schedule.class);<br><br>        <span class="hljs-comment">//根据医院编号 和 排班编号查询</span><br>        <span class="hljs-type">Schedule</span> <span class="hljs-variable">scheduleExist</span> <span class="hljs-operator">=</span> scheduleRepository.<br>                getScheduleByHoscodeAndHosScheduleId(schedule.getHoscode(),schedule.getHosScheduleId());<br><br>        <span class="hljs-keyword">if</span>(scheduleExist!=<span class="hljs-literal">null</span>) &#123;<br>            scheduleExist.setUpdateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>            scheduleExist.setIsDeleted(<span class="hljs-number">0</span>);<br>            scheduleExist.setStatus(<span class="hljs-number">1</span>);<br>            scheduleRepository.save(scheduleExist);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            schedule.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>            schedule.setUpdateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>            schedule.setIsDeleted(<span class="hljs-number">0</span>);<br>            schedule.setStatus(<span class="hljs-number">1</span>);<br>            scheduleRepository.save(schedule);<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="07-查询排班"><a href="#07-查询排班" class="headerlink" title="07 查询排班"></a>07 查询排班</h4><h5 id="前端请求：-13"><a href="#前端请求：-13" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;schedule/list&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理：-14"><a href="#后端处理：-14" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">findSchedule</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>        <span class="hljs-comment">//获取传递过来科室信息</span><br>        Map&lt;String, String[]&gt; requestMap = request.getParameterMap();<br>        Map&lt;String, Object&gt; paramMap = HttpRequestHelper.switchMap(requestMap);<br>        <span class="hljs-comment">//医院编号</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">hoscode</span> <span class="hljs-operator">=</span> (String)paramMap.get(<span class="hljs-string">&quot;hoscode&quot;</span>);<br>        <span class="hljs-comment">//科室编号</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">depcode</span> <span class="hljs-operator">=</span> (String)paramMap.get(<span class="hljs-string">&quot;depcode&quot;</span>);<br>        <span class="hljs-comment">//当前页 和 每页记录数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">page</span> <span class="hljs-operator">=</span> StringUtils.isEmpty(paramMap.get(<span class="hljs-string">&quot;page&quot;</span>)) ? <span class="hljs-number">1</span> : <br>                Integer.parseInt((String)paramMap.get(<span class="hljs-string">&quot;page&quot;</span>));<br>        <span class="hljs-type">int</span> <span class="hljs-variable">limit</span> <span class="hljs-operator">=</span> StringUtils.isEmpty(paramMap.get(<span class="hljs-string">&quot;limit&quot;</span>)) ? <span class="hljs-number">1</span> : <br>                Integer.parseInt((String)paramMap.get(<span class="hljs-string">&quot;limit&quot;</span>));<br><br>        <span class="hljs-type">ScheduleQueryVo</span> <span class="hljs-variable">scheduleQueryVo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScheduleQueryVo</span>();<br>        scheduleQueryVo.setHoscode(hoscode);<br>        scheduleQueryVo.setDepcode(depcode);<br>        <span class="hljs-comment">//调用service方法</span><br>        Page&lt;Schedule&gt; pageModel = scheduleService.findPageSchedule(page,limit,scheduleQueryVo);<br>        <span class="hljs-keyword">return</span> Result.ok(pageModel);<br>&#125;<br></code></pre></td></tr></table></figure><p>findPageSchedule方法具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Page&lt;Schedule&gt; <span class="hljs-title function_">findPageSchedule</span><span class="hljs-params">(<span class="hljs-type">int</span> page, <span class="hljs-type">int</span> limit, ScheduleQueryVo scheduleQueryVo)</span> &#123;<br>        <span class="hljs-comment">// 创建Pageable对象，设置当前页和每页记录数</span><br>        <span class="hljs-comment">//0是第一页</span><br>        <span class="hljs-type">Pageable</span> <span class="hljs-variable">pageable</span> <span class="hljs-operator">=</span> PageRequest.of(page-<span class="hljs-number">1</span>,limit);<br>        <span class="hljs-type">Schedule</span> <span class="hljs-variable">schedule</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Schedule</span>();<br>        BeanUtils.copyProperties(scheduleQueryVo,schedule);<br>        schedule.setIsDeleted(<span class="hljs-number">0</span>);<br>        schedule.setStatus(<span class="hljs-number">1</span>);<br><br>        <span class="hljs-comment">// 创建Example对象</span><br>        <span class="hljs-type">ExampleMatcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> ExampleMatcher.matching()<br>                .withStringMatcher(ExampleMatcher.StringMatcher.CONTAINING)<br>                .withIgnoreCase(<span class="hljs-literal">true</span>);<br>        Example&lt;Schedule&gt; example = Example.of(schedule,matcher);<br><br>        Page&lt;Schedule&gt; all = scheduleRepository.findAll(example, pageable);<br>        <span class="hljs-keyword">return</span> all;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="08-删除排班"><a href="#08-删除排班" class="headerlink" title="08 删除排班"></a>08 删除排班</h4><h5 id="前端请求：-14"><a href="#前端请求：-14" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;schedule/remove&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理：-15"><a href="#后端处理：-15" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">remove</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>        <span class="hljs-comment">//获取传递过来科室信息</span><br>        Map&lt;String, String[]&gt; requestMap = request.getParameterMap();<br>        Map&lt;String, Object&gt; paramMap = HttpRequestHelper.switchMap(requestMap);<br>        <span class="hljs-comment">//获取医院编号和排班编号</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">hoscode</span> <span class="hljs-operator">=</span> (String)paramMap.get(<span class="hljs-string">&quot;hoscode&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">hosScheduleId</span> <span class="hljs-operator">=</span> (String)paramMap.get(<span class="hljs-string">&quot;hosScheduleId&quot;</span>);<br><br>        scheduleService.remove(hoscode,hosScheduleId);<br>        <span class="hljs-keyword">return</span> Result.ok();<br>&#125;<br></code></pre></td></tr></table></figure><p>remove方法具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(String hoscode, String hosScheduleId)</span> &#123;<br>        <span class="hljs-comment">//根据医院编号和排班编号查询信息</span><br>        <span class="hljs-type">Schedule</span> <span class="hljs-variable">schedule</span> <span class="hljs-operator">=</span> scheduleRepository.getScheduleByHoscodeAndHosScheduleId(hoscode, hosScheduleId);<br>        <span class="hljs-keyword">if</span>(schedule != <span class="hljs-literal">null</span>) &#123;<br>            scheduleRepository.deleteById(schedule.getId());<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="医院AIP业务03"><a href="#医院AIP业务03" class="headerlink" title="医院AIP业务03"></a>医院AIP业务03</h3><h5 id="位置：-2"><a href="#位置：-2" class="headerlink" title="位置："></a>位置：</h5><p>controller包\HospitalController.java</p><h4 id="01-查询医院列表-条件查询分页"><a href="#01-查询医院列表-条件查询分页" class="headerlink" title="01 查询医院列表(条件查询分页)"></a>01 查询医院列表(条件查询分页)</h4><h5 id="前端请求：-15"><a href="#前端请求：-15" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;list/&#123;page&#125;/&#123;limit&#125;&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理：-16"><a href="#后端处理：-16" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">listHosp</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer page,</span><br><span class="hljs-params">                           <span class="hljs-meta">@PathVariable</span> Integer limit,</span><br><span class="hljs-params">                           HospitalQueryVo hospitalQueryVo)</span> &#123;<br>        Page&lt;Hospital&gt; pageModel = hospitalService.selectHospPage(page,limit,hospitalQueryVo);<br>        <span class="hljs-keyword">return</span> Result.ok(pageModel);<br>&#125;<br></code></pre></td></tr></table></figure><p>selectHospPage方法具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Page&lt;Hospital&gt; <span class="hljs-title function_">selectHospPage</span><span class="hljs-params">(Integer page, Integer limit, HospitalQueryVo hospitalQueryVo)</span> &#123;<br>        <span class="hljs-comment">//创建pageable对象</span><br>        <span class="hljs-type">Pageable</span> <span class="hljs-variable">pageable</span> <span class="hljs-operator">=</span> PageRequest.of(page-<span class="hljs-number">1</span>,limit);<br>        <span class="hljs-comment">//创建条件匹配器</span><br>        <span class="hljs-type">ExampleMatcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> ExampleMatcher.matching()<br>                .withStringMatcher(ExampleMatcher.StringMatcher.CONTAINING)<br>                .withIgnoreCase(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//hospitalSetQueryVo转换Hospital对象</span><br>        <span class="hljs-type">Hospital</span> <span class="hljs-variable">hospital</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hospital</span>();<br>        BeanUtils.copyProperties(hospitalQueryVo,hospital);<br>        <span class="hljs-comment">//创建对象</span><br>        Example&lt;Hospital&gt; example = Example.of(hospital,matcher);<br>        <span class="hljs-comment">//调用方法实现查询</span><br>        Page&lt;Hospital&gt; pages = hospitalRepository.findAll(example, pageable);<br><br>        <span class="hljs-comment">//获取查询list集合，遍历进行医院等级封装</span><br>        pages.getContent().stream().forEach(item -&gt; &#123;<br>            <span class="hljs-built_in">this</span>.setHospitalHosType(item);<br>        &#125;);<br>        <span class="hljs-keyword">return</span> pages;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="02-更新医院上线状态"><a href="#02-更新医院上线状态" class="headerlink" title="02 更新医院上线状态"></a>02 更新医院上线状态</h4><h5 id="前端请求：-16"><a href="#前端请求：-16" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;updateHospStatus/&#123;id&#125;/&#123;status&#125;&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理：-17"><a href="#后端处理：-17" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">updateHospStatus</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String id,<span class="hljs-meta">@PathVariable</span> Integer status)</span> &#123;<br>        hospitalService.updateStatus(id,status);<br>        <span class="hljs-keyword">return</span> Result.ok();<br>&#125;<br></code></pre></td></tr></table></figure><p>updateStatus方法具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateStatus</span><span class="hljs-params">(String id, Integer status)</span> &#123;<br>        <span class="hljs-comment">//根据id查询医院信息</span><br>        <span class="hljs-type">Hospital</span> <span class="hljs-variable">hospital</span> <span class="hljs-operator">=</span> hospitalRepository.findById(id).get();<br>        <span class="hljs-comment">//设置修改的值</span><br>        hospital.setStatus(status);<br>        hospital.setUpdateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        hospitalRepository.save(hospital);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="03-医院详情信息"><a href="#03-医院详情信息" class="headerlink" title="03 医院详情信息"></a>03 医院详情信息</h4><h5 id="前端请求：-17"><a href="#前端请求：-17" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;showHospDetail/&#123;id&#125;&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理：-18"><a href="#后端处理：-18" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">showHospDetail</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String id)</span> &#123;<br>        Map&lt;String, Object&gt; map = hospitalService.getHospById(id);<br>        <span class="hljs-keyword">return</span> Result.ok(map);<br>&#125;<br></code></pre></td></tr></table></figure><p>getHospById方法具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title function_">getHospById</span><span class="hljs-params">(String id)</span> &#123;<br>        Map&lt;String, Object&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">Hospital</span> <span class="hljs-variable">hospital</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.setHospitalHosType(hospitalRepository.findById(id).get());<br>        <span class="hljs-comment">//医院基本信息（包含医院等级）</span><br>        result.put(<span class="hljs-string">&quot;hospital&quot;</span>,hospital);<br>        <span class="hljs-comment">//单独处理更直观</span><br>        result.put(<span class="hljs-string">&quot;bookingRule&quot;</span>, hospital.getBookingRule());<br>        <span class="hljs-comment">//不需要重复返回</span><br>        hospital.setBookingRule(<span class="hljs-literal">null</span>);<br>        <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>setHospitalHosType方法：遍历医院等级进行封装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Hospital <span class="hljs-title function_">setHospitalHosType</span><span class="hljs-params">(Hospital hospital)</span> &#123;<br>        <span class="hljs-comment">//根据dictCode和value获取医院等级名称</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">hostypeString</span> <span class="hljs-operator">=</span> dictFeignClient.getName(<span class="hljs-string">&quot;Hostype&quot;</span>, hospital.getHostype());<br>        <span class="hljs-comment">//查询省 市  地区</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">provinceString</span> <span class="hljs-operator">=</span> dictFeignClient.getName(hospital.getProvinceCode());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">cityString</span> <span class="hljs-operator">=</span> dictFeignClient.getName(hospital.getCityCode());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">districtString</span> <span class="hljs-operator">=</span> dictFeignClient.getName(hospital.getDistrictCode());<br><br>        hospital.getParam().put(<span class="hljs-string">&quot;fullAddress&quot;</span>,provinceString+cityString+districtString);<br>        hospital.getParam().put(<span class="hljs-string">&quot;hostypeString&quot;</span>,hostypeString);<br>        <span class="hljs-keyword">return</span> hospital;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="医院AIP业务04"><a href="#医院AIP业务04" class="headerlink" title="医院AIP业务04"></a>医院AIP业务04</h3><h5 id="位置：-3"><a href="#位置：-3" class="headerlink" title="位置："></a>位置：</h5><p>controller包\DepartmentController.java</p><h4 id="01-根据医院编号，查询医院所有科室列表"><a href="#01-根据医院编号，查询医院所有科室列表" class="headerlink" title="01 根据医院编号，查询医院所有科室列表"></a>01 根据医院编号，查询医院所有科室列表</h4><h5 id="前端请求：-18"><a href="#前端请求：-18" class="headerlink" title="前端请求："></a>前端请求：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;getDeptList/&#123;hoscode&#125;&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="后端处理：-19"><a href="#后端处理：-19" class="headerlink" title="后端处理："></a>后端处理：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">getDeptList</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String hoscode)</span> &#123;<br>        List&lt;DepartmentVo&gt; list = departmentService.findDeptTree(hoscode);<br>        <span class="hljs-keyword">return</span> Result.ok(list);<br>&#125;<br></code></pre></td></tr></table></figure><p>findDeptTree方法具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;DepartmentVo&gt; <span class="hljs-title function_">findDeptTree</span><span class="hljs-params">(String hoscode)</span> &#123;<br>        <span class="hljs-comment">//创建list集合，用于最终数据封装</span><br>        List&lt;DepartmentVo&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>        <span class="hljs-comment">//根据医院编号，查询医院所有科室信息</span><br>        <span class="hljs-type">Department</span> <span class="hljs-variable">departmentQuery</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Department</span>();<br>        departmentQuery.setHoscode(hoscode);<br>        <span class="hljs-type">Example</span> <span class="hljs-variable">example</span> <span class="hljs-operator">=</span> Example.of(departmentQuery);<br>        <span class="hljs-comment">//所有科室列表 departmentList</span><br>        List&lt;Department&gt; departmentList = departmentRepository.findAll(example);<br><br>        <span class="hljs-comment">//根据大科室编号  bigcode 分组，获取每个大科室里面下级子科室</span><br>        Map&lt;String, List&lt;Department&gt;&gt; deparmentMap =<br>                departmentList.stream().collect(Collectors.groupingBy(Department::getBigcode));<br>        <span class="hljs-comment">//遍历map集合 deparmentMap</span><br>        <span class="hljs-keyword">for</span>(Map.Entry&lt;String,List&lt;Department&gt;&gt; entry : deparmentMap.entrySet()) &#123;<br>            <span class="hljs-comment">//大科室编号</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">bigcode</span> <span class="hljs-operator">=</span> entry.getKey();<br>            <span class="hljs-comment">//大科室编号对应的全局数据</span><br>            List&lt;Department&gt; deparment1List = entry.getValue();<br>            <span class="hljs-comment">//封装大科室</span><br>            <span class="hljs-type">DepartmentVo</span> <span class="hljs-variable">departmentVo1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DepartmentVo</span>();<br>            departmentVo1.setDepcode(bigcode);<br>            departmentVo1.setDepname(deparment1List.get(<span class="hljs-number">0</span>).getBigname());<br><br>            <span class="hljs-comment">//封装小科室</span><br>            List&lt;DepartmentVo&gt; children = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            <span class="hljs-keyword">for</span>(Department department: deparment1List) &#123;<br>                <span class="hljs-type">DepartmentVo</span> <span class="hljs-variable">departmentVo2</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">DepartmentVo</span>();<br>                departmentVo2.setDepcode(department.getDepcode());<br>                departmentVo2.setDepname(department.getDepname());<br>                <span class="hljs-comment">//封装到list集合</span><br>                children.add(departmentVo2);<br>            &#125;<br>            <span class="hljs-comment">//把小科室list集合放到大科室children里面</span><br>            departmentVo1.setChildren(children);<br>            <span class="hljs-comment">//放到最终result里面</span><br>            result.add(departmentVo1);<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>尚医通项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>尚医通概览</title>
    <link href="/2022/10/19/%E5%B0%9A%E5%8C%BB%E9%80%9A%E6%A6%82%E8%A7%88/"/>
    <url>/2022/10/19/%E5%B0%9A%E5%8C%BB%E9%80%9A%E6%A6%82%E8%A7%88/</url>
    
    <content type="html"><![CDATA[<h1 id="尚医通概览"><a href="#尚医通概览" class="headerlink" title="尚医通概览"></a>尚医通概览</h1><h3 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h3><p>医院预约挂号项目，包含三个系统：</p><ol><li>预约挂号系统前台</li><li>预约挂号系统管理员后台</li><li>外部医院管理后台(已经开发好)</li></ol><p>如图所示：</p><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h781j9u8c7j30j70gzmxu.jpg"></p><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h781jy6nsaj30wz0njgu7.jpg"></p><h3 id="项目功能"><a href="#项目功能" class="headerlink" title="项目功能"></a>项目功能</h3><h4 id="预约挂号系统前台"><a href="#预约挂号系统前台" class="headerlink" title="预约挂号系统前台"></a><strong>预约挂号系统前台</strong></h4><ul><li>登录</li><li>首页信息展示</li><li>预约挂号</li><li>支付订单</li></ul><h4 id="预约挂号系统管理员后台"><a href="#预约挂号系统管理员后台" class="headerlink" title="预约挂号系统管理员后台"></a><strong>预约挂号系统管理员后台</strong></h4><ul><li>数据字典<ul><li>easy Excel 导入导出</li></ul></li><li>医院管理</li><li>用户管理</li><li>订单（预约）管理</li><li>统计管理</li></ul><h4 id="医院接口模拟平台"><a href="#医院接口模拟平台" class="headerlink" title="医院接口模拟平台"></a><strong>医院接口模拟平台</strong></h4><p>相当于医院自己维护的系统，通过签名校验的方式调研我们提供的接口来管理医院数据。</p><h3 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h3><h4 id="前端"><a href="#前端" class="headerlink" title="前端"></a><strong>前端</strong></h4><ul><li>Vue</li><li>vue-admin-template管理员模板</li><li>ueQriously二维码生成库</li><li>babel</li><li>webpack</li><li>nuxt服务端渲染</li><li>element ui</li></ul><h4 id="后端"><a href="#后端" class="headerlink" title="后端"></a><strong>后端</strong></h4><p><strong>微服务：</strong></p><ul><li>Spring Cloud Alibaba框架</li><li>Nacos注册中心</li><li>Spring Cloud Feign远程调用</li><li>Spring Cloud Gateway微服务网关</li><li>Maven子父多模块</li><li>Docker(部署项目、安装服务)</li></ul><p><strong>数据存储：</strong></p><ul><li>MongoDB:负责存医院基本信息（性更高）</li><li>mySQL:存储用户、订单、预约等关系信息</li></ul><p><strong>中间件：</strong></p><ul><li>Redis:缓存、存储验证码</li><li>RabbitMQ:应用解耦、消息通知</li><li>Nginx:部署项目</li></ul><p><strong>工具库：</strong></p><ul><li>easy excel:读写Excel文件</li><li>Json Web Token:生成jwt token</li><li>Joda Time:日期时间操作</li></ul><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h781zexf4sj30ur0o212g.jpg"></p><p>架构中并没搭建集群，都是用的单机版</p><h3 id="项目学习"><a href="#项目学习" class="headerlink" title="项目学习"></a>项目学习</h3><h4 id="本项目重点知识"><a href="#本项目重点知识" class="headerlink" title="本项目重点知识"></a><strong>本项目重点知识</strong></h4><ol><li>微服务的思想、划分以及实现方式，以及相关技术的用法：<ul><li>注册中心</li><li>客户端调用</li><li>微服务网关</li></ul></li><li>熟悉一个完整的业务流程（信息发布&#x3D;&gt;信息展示&#x3D;&gt;购买&#x3D;&gt;下单支付&#x3D;&gt;统计管理）</li><li>登录认证机制，包括手机号登录、微信扫码登绿、OAuth、JWT等知识</li><li>如何运用合适的数据库来解决问题？比如MySQL存储关系型数据、Redis用于缓存、MongoDB存储一些非关系型的数据（提高访问速度）、RāobitMQ来实现异步通知和应用解耦。</li><li>调用第三方API来解决实际问题，比如微信接口、OSS、SMS</li><li>学习项目的目录结构及编码规范，比如通用返回对象、全局异常处理器、ContextHolder等</li></ol><h3 id="项目启动流程"><a href="#项目启动流程" class="headerlink" title="项目启动流程"></a>项目启动流程</h3><ol><li><p>启动nacos</p><p>startup.cmd -m standalone</p></li><li><p>启动docker上的rabbit，redis，MongoDB</p></li><li><p>启动后端<br>spring一键启动</p></li><li><p>启动yygh_sit，用户前台<br>选第二个dev nuxt</p></li><li><p>启动yygh_admin，管理员后台<br>选第一个start</p></li></ol><h4 id="端口分析："><a href="#端口分析：" class="headerlink" title="端口分析："></a>端口分析：</h4><ul><li>​80是服务网关</li><li>​8160是用户api接口服务</li><li>​8201是医院api接口服务</li><li>​8202是数据字典服务</li><li>​8204是短信 api接口服务</li><li>​8205是文件api接口服务</li><li>​8206是订单api接口服务</li><li>​8207是定时任务服务</li><li>​8208是统计api接口服务</li><li>​9998是接口模拟系统</li></ul><p>测试前台vue_site可以只启动：80,8160,8201,8202,8204</p><p>管理后台vue_admin可以直接运行</p><h3 id="后端微服务学习："><a href="#后端微服务学习：" class="headerlink" title="后端微服务学习："></a>后端微服务学习：</h3><p>本项目的服务划分如下：</p><ul><li>common项目公共代码</li><li>model项目数据模型层(只提供接口，便于公用)</li><li>service具体的业务逻辑（微服务）</li><li>service client服务调用客户端(只提供接口，便于公用)</li><li>service_.gateway(微服务网关)负责统一校验&#x2F;拦截、跨域、请求转发</li><li>公共服务：数据字典管理，导入导出（公共用的枚举值）</li><li>医院服务：管理医院，医院信息、排版信息、医院设置信息的增删改查</li><li>短信服务(SMS):负责发送短信验证码</li><li>用户服务：管理用户、就诊人、用户登泉</li><li>订单服务：支付订单，订单（预约）管理</li><li>存储服务：上传文件（上传用户的图片）</li><li>统计服务：分析下单情况</li><li>定时任务服务：每天8点就医提醒</li></ul><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h7834c6rncj30va0q60yh.jpg"></p><h3 id="数据库设置："><a href="#数据库设置：" class="headerlink" title="数据库设置："></a>数据库设置：</h3><ul><li><p>yygh_cnm<br>dict：组织架构表，数据字典的数据</p></li><li><p>yygh_hosp<br>hospital_set,医院列表</p></li><li><p>yygh_manage<br>hospital_set,医院设置表<br>order_info,订单表<br>schedule，医生排班表</p></li><li><p>yygh_order<br>order_info,订单表<br>payment_info,支付信息表<br>refund_info,退款信息表</p></li><li><p>yygh_user<br>patient,就诊人表<br>user_info.用户表<br>user_login_record,用户登录记录表</p></li></ul><h4 id="首先搭建父工程模块yygh-parent，该模块不需要编写代码只需要一个POM文件即可。它的作用就是一个规范，将要使用的依赖引入并指定版本号，在后续的子模块中只需要引入依赖不需要指定版本号"><a href="#首先搭建父工程模块yygh-parent，该模块不需要编写代码只需要一个POM文件即可。它的作用就是一个规范，将要使用的依赖引入并指定版本号，在后续的子模块中只需要引入依赖不需要指定版本号" class="headerlink" title="首先搭建父工程模块yygh-parent，该模块不需要编写代码只需要一个POM文件即可。它的作用就是一个规范，将要使用的依赖引入并指定版本号，在后续的子模块中只需要引入依赖不需要指定版本号"></a>首先搭建父工程模块yygh-parent，该模块不需要编写代码只需要一个POM文件即可。它的作用就是一个规范，将要使用的依赖引入并指定版本号，在后续的子模块中只需要引入依赖不需要指定版本号</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">cloud.version</span>&gt;</span>Hoxton.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">cloud.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">alibaba.version</span>&gt;</span>2.2.0.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">alibaba.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mybatis-plus.version</span>&gt;</span>3.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">mybatis-plus.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mysql.version</span>&gt;</span>5.1.46<span class="hljs-tag">&lt;/<span class="hljs-name">mysql.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">swagger.version</span>&gt;</span>2.7.0<span class="hljs-tag">&lt;/<span class="hljs-name">swagger.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">jwt.version</span>&gt;</span>0.7.0<span class="hljs-tag">&lt;/<span class="hljs-name">jwt.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">fastjson.version</span>&gt;</span>1.2.29<span class="hljs-tag">&lt;/<span class="hljs-name">fastjson.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">httpclient.version</span>&gt;</span>4.5.1<span class="hljs-tag">&lt;/<span class="hljs-name">httpclient.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">easyexcel.version</span>&gt;</span>2.2.0-beta2<span class="hljs-tag">&lt;/<span class="hljs-name">easyexcel.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aliyun.version</span>&gt;</span>4.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">aliyun.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">oss.version</span>&gt;</span>3.9.1<span class="hljs-tag">&lt;/<span class="hljs-name">oss.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">jodatime.version</span>&gt;</span>2.10.1<span class="hljs-tag">&lt;/<span class="hljs-name">jodatime.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="整体结构"><a href="#整体结构" class="headerlink" title="整体结构"></a>整体结构</h3><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h71nbf0678j309q04rwf1.jpg"></p><h3 id="common模块："><a href="#common模块：" class="headerlink" title="common模块："></a>common模块：</h3><p>将会重复使用的模块抽离出来形成一个单独模块，其他模块在使用的时候直接在POM中加入依赖即可</p><h5 id="common目录结构："><a href="#common目录结构：" class="headerlink" title="common目录结构："></a>common目录结构：</h5><p>common：公共模块父节点<br>    common-util：工具类模块，所有模块都可以依赖于它<br>    rabbit-util：rabbitmq业务封装<br>    service-util：service服务的工具包，包含service服务的公共配置类，所有service模块依赖于它</p><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h71j3pimavj307b03rt91.jpg"></p><h4 id="common-util子模块："><a href="#common-util子模块：" class="headerlink" title="common_util子模块："></a>common_util子模块：</h4><p>设置项目编码中的统一规范</p><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h71md9cnfpj308u07rmy8.jpg"></p><ul><li>GlobalExceptionHandler：默认全局异常</li><li>YyghException:自定义全局异常</li><li>JwtHelper：设置JWT的登录验证</li><li>Result：自定义返回类型</li><li>ResultCodeEnum：返回状态码，例如200成功201失败</li><li>AuthContextHolder：获取当前用户信息</li></ul><h4 id="rabbit-util子模块："><a href="#rabbit-util子模块：" class="headerlink" title="rabbit-util子模块："></a>rabbit-util子模块：</h4><p>进行rabbitmq的业务封装</p><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h71mot3ixmj3096053gm4.jpg"></p><ul><li>MQConfig：mq的配置文件，例如设置消息转换器,将消息队列中的数据转换成指定类型</li><li>MqConst：设置消息的状态码</li><li>RabbitService：消息的发送</li></ul><h4 id="service-util子模块："><a href="#service-util子模块：" class="headerlink" title="service-util子模块："></a>service-util子模块：</h4><p>service服务的工具包</p><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h71mz90k7gj308p069dgm.jpg"></p><ul><li>RedisConfig：Redis配置文件</li><li>Swagger2Config：Swagger配置文件</li><li>HttpRequestHelper：自定义service请求</li><li>HttpUtil：自定义Http请求</li><li>MD5：设置MD5加密</li></ul><h4 id="hospital-manage模块："><a href="#hospital-manage模块：" class="headerlink" title="hospital-manage模块："></a>hospital-manage模块：</h4><p>医院接口模拟端（已开发，直接使用）</p><h5 id="hospital-manage目录结构："><a href="#hospital-manage目录结构：" class="headerlink" title="hospital-manage目录结构："></a>hospital-manage目录结构：</h5><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h71newagvlj30as0b1gn5.jpg"></p><p>application.yml：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">hospital-manage</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">dev</span><br></code></pre></td></tr></table></figure><p>设置项目环境为dev</p><p>相应的就会执行application-dev.yml中的配置</p><h3 id="model模块："><a href="#model模块：" class="headerlink" title="model模块："></a>model模块：</h3><p>根据数据库中的表创建对应的实体类</p><h5 id="目录结构："><a href="#目录结构：" class="headerlink" title="目录结构："></a>目录结构：</h5><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h72g4kj5anj30af0btwff.jpg"></p><p>在实体类中添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ApiModel(description = &quot;权限&quot;)</span>在swagger中设置方法注解<br><span class="hljs-meta">@TableName(&quot;acl_permission&quot;)</span> 对应数据库中表的名称<br></code></pre></td></tr></table></figure><p>在字段上添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiModelProperty(value = &quot;所属上级&quot;)</span>对应数据库中的字段<br><span class="hljs-meta">@TableField(&quot;pid&quot;)</span>   在swagger中设置字段<br><span class="hljs-meta">@TableField(exist = false)</span>   如果该字段不存在数据库中<br></code></pre></td></tr></table></figure><p>对于使用EasyExcel要进行导入导出的数据添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ExcelProperty(value = &quot;id&quot; ,index = 0)</span>设置导出列的名称和第几列<br></code></pre></td></tr></table></figure><h3 id="Service模块："><a href="#Service模块：" class="headerlink" title="Service模块："></a>Service模块：</h3><p>api接口服务父节点</p><h5 id="目录结构：-1"><a href="#目录结构：-1" class="headerlink" title="目录结构："></a>目录结构：</h5><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h72gckosr9j307y071q3v.jpg"></p><p>service：api接口服务父节点</p><ul><li>​service-hosp：医院api接口服务</li><li>​service-cmn：数据字典服务</li><li>​service-user：用户api接口服务</li><li>​service-order：订单api接口服务</li><li>​service-oss：文件api接口服务</li><li>​service-sms：短信 api接口服务</li><li>​service-task：定时任务服务</li><li>​service-statistics：统计api接口服务</li></ul><h4 id="service-cmn子模块："><a href="#service-cmn子模块：" class="headerlink" title="service-cmn子模块："></a>service-cmn子模块：</h4><p>公共api接口服务</p><h5 id="目录结构：-2"><a href="#目录结构：-2" class="headerlink" title="目录结构："></a>目录结构：</h5><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h72ggcua4jj309c09xta2.jpg"></p><p>关于Service模块大致都是这么一个结构</p><p>首先在mapper包中创建为当前模块使用的mapper接口继承Basemapper，使用mybatisplus包中封装好的增删改查方法如果需要写其他的sql语句再在该接口中增加抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">DictMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;Dict&gt; &#123;&#125;<br></code></pre></td></tr></table></figure><p>在service包中编写业务接口并创建抽象方法、</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-symbol">DictService</span> <span class="hljs-symbol">extends</span> <span class="hljs-symbol">IService</span>&lt;<span class="hljs-symbol">Dict</span>&gt; &#123;<br>    <span class="hljs-comment">//根据数据id查询子数据列表</span><br>    List&lt;Dict&gt; findChlidData(Long id);<br>&#125;<br></code></pre></td></tr></table></figure><p>在impl中实现该接口并在实现的抽象方法中编写具体的业务逻辑，添加@service注解交给spring管理</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">@Service<br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> DictServiceImpl extends ServiceImpl&lt;DictMapper, Dict&gt; implements DictService &#123;<br><br>    //根据数据id查询子数据列表<br>    @Override<br>    //@Cacheable(<span class="hljs-keyword">value</span> = &quot;dict&quot;,keyGenerator = &quot;keyGenerator&quot;)<br>    <span class="hljs-built_in">public</span> List&lt;Dict&gt; findChlidData(Long id) &#123;<br>        QueryWrapper&lt;Dict&gt; <span class="hljs-keyword">wrapper</span> = <span class="hljs-built_in">new</span> QueryWrapper&lt;&gt;();<br>        <span class="hljs-keyword">wrapper</span>.eq(&quot;parent_id&quot;,id);<br>        List&lt;Dict&gt; dictList = baseMapper.selectList(<span class="hljs-keyword">wrapper</span>);<br>        //向list集合每个dict对象中设置hasChildren<br>        <span class="hljs-keyword">for</span> (Dict dict:dictList) &#123;<br>            Long dictId = dict.getId();<br>            <span class="hljs-type">boolean</span> isChild = this.isChildren(dictId);<br>            dict.setHasChildren(isChild);<br>        &#125;<br>        <span class="hljs-keyword">return</span> dictList;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在controller包中注入sevice接口，调用service中的各种方法处理请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Api(description = &quot;数据字典接口&quot;)</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/admin/cmn/dict&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DictController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DictService dictService;<br><br>    <span class="hljs-comment">//导入数据字典</span><br>    <span class="hljs-meta">@PostMapping(&quot;importData&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">importDict</span><span class="hljs-params">(MultipartFile file)</span> &#123;<br>        dictService.importDictData(file);<br>        <span class="hljs-keyword">return</span> Result.ok();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>@Autowired为什么注入接口就可以使用其实现类？</p><p>@Autowired默认按byType(自动装配)注入：寻找实现了interface的Bean(在实现类上添加注解@Service后就相当于在xml中编写了配置),这个注解适用于只有一个Bean实现了接口的情况。</p><p>能不能直接注入接口的实现类？</p><p>开发中往往会对实现类做增强，如事务，日志等，实现增强的AOP技术是通过动态代理实现的，而spring默认是JDK动态代理，对实现类对象做增强得到的增强类与实现类是兄弟关系，所以不能用实现类接收增强类对象，只能用接口接收。如果将对象注入给实现类而非接口的话，在代理时就会报错。</p><p>可以用Cglib代理强制实现，cglib代理类和实现类之间是父子关系，自然可以用父类（实现类）去接收子类对象（代理类对象即增强类对象）。</p><p>在config包中创建配置类：对当前模块进行配置,例如设置数据库的查询分页</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//指定要变成实现类的接口所在的包，然后包下面的所有接口在编译之后都会生成相应的实现类</span><br><span class="hljs-meta">@MapperScan(&quot;com.atguigu.yygh.cmn.mapper&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CmnConfig</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 分页插件</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> PaginationInterceptor <span class="hljs-title function_">paginationInterceptor</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PaginationInterceptor</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>listener为EasyExcel的导入导出配置类</p><h3 id="service-hosp子模块："><a href="#service-hosp子模块：" class="headerlink" title="service-hosp子模块："></a>service-hosp子模块：</h3><p>医院api接口服务</p><h5 id="目录结构：-3"><a href="#目录结构：-3" class="headerlink" title="目录结构："></a>目录结构：</h5><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h72rol845uj309y05q74v.jpg"></p><p>在mapper包中除了原来的mapper接口还有xml包用于对应mapper接口</p><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h72rv671gdj308r03kjrv.jpg"></p><p>当Basemapper中方法不能满足需求时在xml中编写自己的sql语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.atguigu.yygh.hosp.mapper.HospitalSetMapper&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>repository包和mapper包类似，创建接口继承 Mongodb调用对数据库的增删改查方法，根据业务需求增加抽象方法</p><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h72s63v2dqj308902yt96.jpg"></p><p>HospitalReceiver：对rabbit消息队列进行设置</p><p>controller包：</p><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h73bk88o2wj309405igmm.jpg"></p><p>将经常使用的控制类放到api包下，处理经常发出的请求</p><h3 id="service-msm子模块："><a href="#service-msm子模块：" class="headerlink" title="service-msm子模块："></a>service-msm子模块：</h3><p>短信 api接口服务</p><h5 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构:"></a>目录结构:</h5><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h73gfzdcc8j309j09375p.jpg"></p><h3 id="service-order子模块："><a href="#service-order子模块：" class="headerlink" title="service-order子模块："></a>service-order子模块：</h3><p>订单api接口服务</p><h5 id="目录结构：-4"><a href="#目录结构：-4" class="headerlink" title="目录结构："></a>目录结构：</h5><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h73gp3dg9gj309905laai.jpg"></p><h3 id="service-oss子模块："><a href="#service-oss子模块：" class="headerlink" title="service-oss子模块："></a>service-oss子模块：</h3><p>文件api接口服务</p><h5 id="目录结构：-5"><a href="#目录结构：-5" class="headerlink" title="目录结构："></a>目录结构：</h5><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h73gqxtvy4j30a906b0to.jpg"></p><h3 id="service-statistics子模块："><a href="#service-statistics子模块：" class="headerlink" title="service-statistics子模块："></a>service-statistics子模块：</h3><p>统计api接口服务</p><h5 id="目录结构：-6"><a href="#目录结构：-6" class="headerlink" title="目录结构："></a>目录结构：</h5><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h73gt5vhmdj309v0300t4.jpg"></p><h3 id="service-task子模块："><a href="#service-task子模块：" class="headerlink" title="service-task子模块："></a>service-task子模块：</h3><p>定时任务服务</p><h5 id="目录结构：-7"><a href="#目录结构：-7" class="headerlink" title="目录结构："></a>目录结构：</h5><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h73gvmcd28j309602yaac.jpg"></p><h3 id="service-user子模块："><a href="#service-user子模块：" class="headerlink" title="service-user子模块："></a>service-user子模块：</h3><p>用户api接口服务</p><h5 id="目录结构：-8"><a href="#目录结构：-8" class="headerlink" title="目录结构："></a>目录结构：</h5><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h73gy62cvuj309w05r74q.jpg"></p><h3 id="service-client模块："><a href="#service-client模块：" class="headerlink" title="service-client模块："></a>service-client模块：</h3><p>feign服务调用父节点</p><h5 id="目录结构：-9"><a href="#目录结构：-9" class="headerlink" title="目录结构："></a>目录结构：</h5><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h73nw1j3j9j307u0473z5.jpg"></p><ul><li><p>service-cmn-client：公共api接口</p></li><li><p>service-hosp-client：医院api接口</p></li><li><p>service-order-client：订单api接口</p></li><li><p>service-user-client：用户api接口</p></li><li><p><strong>Feign是声明式Web Service客户端</strong>，<strong>它让微服务之间的调用</strong>变得更简单，<strong>类似controller调用service</strong>。SpringCloud集成了Ribbon和Eureka，可以使用Feigin提供负载均衡的http客户端</p></li><li><p>只需要创建一个接口，然后添加注解即可使用Feign</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(value = &quot;service-cmn&quot;)</span><br></code></pre></td></tr></table></figure><p>当声明FeignClient后其他微服务就可以直接注入使用该模块，使得微服务之间的调用更方便了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> DictFeignClient dictFeignClient;<br></code></pre></td></tr></table></figure><h3 id="server-gateway模块："><a href="#server-gateway模块：" class="headerlink" title="server-gateway模块："></a>server-gateway模块：</h3><p>服务网关过滤请求设置访问路由</p><h5 id="目录结构：-10"><a href="#目录结构：-10" class="headerlink" title="目录结构："></a>目录结构：</h5><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h73o494u9pj309802sglr.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>尚医通项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud学习笔记(9)</title>
    <link href="/2022/09/25/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(9)/"/>
    <url>/2022/09/25/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(9)/</url>
    
    <content type="html"><![CDATA[<h2 id="Seata处理分布式事务"><a href="#Seata处理分布式事务" class="headerlink" title="Seata处理分布式事务"></a><strong>Seata处理分布式事务</strong></h2><p> 分布式事务问题 </p><p>只要用到分布式，必然会提及分布式的事务。</p><p>在分布式之前，一切组件全都在一台机器上。</p><p>在使用分布式之后，单体应用被拆分成微服务应用，原来的三个模块被拆分成三个独立的应用，分别使用三个独立的数据源。</p><p>业务操作需要调用三个服务来完成。此时每个服务内部的数据一致性由本地事务来保证，但是全局的数据一致性问题没法保证。</p><p>用户购买商品的业务逻辑整个业务逻辑由3个微服务提供支持:</p><p>仓储服务:对给定的商品扣除仓储数量</p><p>订单服务:根据采购需求创建订单.</p><p>账户服务:从用户账户中扣除余额.</p><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h6is2qk91xj30dy0eowgv.jpg"></p><p>一句话：一次业务操作需要跨多个数据源或需要跨多个系统进行远程调用，就会产生分布式事务问题。</p><p> 一、Seata简介与安装 </p><p>Seata是一款开源的分布式事务解决方案，致力于在微服务架构下提供高性能和简单易用的分布式事务服务。  <a href="http://seata.io/zh-cn/">官网</a></p><p> 1.1 相关术语 </p><p>一个典型的分布式事务过程，可以用分布式处理过程的一ID+三组件模型来描述。</p><p>一ID（全局唯一的事务ID）：Transaction ID XID，在这个事务ID下的所有事务会被统一控制</p><p>三组件：</p><p>●Transaction Coordinator (TC)：事务协调器，维护全局事务的运行状态，负责协调并驱动全局事务的提交或回滚；（Server端，为单独服务器部署）</p><p>●Transaction Manager (TM)：事务管理器，控制全局事务的边界，负责开启一个全局事务，并最终发起全局提交或全局回滚的决议；</p><p>●Resource Manager (RM)：资源管理器，控制分支事务，负责分支注册、状态汇报，并接收事务协调器的指令，驱动分支（本地）事务的提交和回滚</p><p>●Seata分TC、TM和RM三个角色，TC（Server端）为单独服务端部署，TM和RM（Client端）由业务系统集成（微服务）。</p><p> 1.2 典型的分布式控制事务流程 </p><p>1TM 向 TC 申请开启一个全局事务，全局事务创建成功并生成一个全局唯一的 XID；</p><p>2XID 在微服务调用链路的上下文中传播；（也就是在多个TM，RM中传播）</p><p>3RM 向 TC 注册分支事务，将其纳入 XID 对应全局事务的管辖；</p><p>4TM 向 TC 发起针对 XID 的全局提交或回滚决议；</p><p>5TC 调度 XID 下管辖的全部分支事务完成提交或回滚请求。</p><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h6is39oqkrj30n80dj41r.jpg"></p><p>我们只需要使用一个<code>@GlobalTransational</code>注解在业务方法上</p><h3 id="初始化操作"><a href="#初始化操作" class="headerlink" title="初始化操作"></a>初始化操作</h3><ol><li>修改 conf&#x2F;file.conf 文件：</li></ol><blockquote><p>主要修改自定义事务组名称 + 事务日志存储模式为db + 数据库连接信息</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs ini">service &#123;<br>  <span class="hljs-comment">#transaction service group mapping</span><br>  <span class="hljs-attr">vgroup_mapping.dkf_tx_group</span> = <span class="hljs-string">&quot;fsp_tx_group&quot;</span>   <span class="hljs-comment"># 修改这里</span><br>  <span class="hljs-comment">#only support when registry.type=file, please don&#x27;t set multiple addresses</span><br>  <span class="hljs-attr">default.grouplist</span> = <span class="hljs-string">&quot;127.0.0.1:8091&quot;</span><br>  <span class="hljs-comment">#disable seata</span><br>  <span class="hljs-attr">disableGlobalTransaction</span> = <span class="hljs-literal">false</span><br>&#125;<br><br><span class="hljs-comment">## transaction log store, only used in seata-server</span><br>store &#123;<br>  <span class="hljs-comment">## store mode: file、db</span><br>  <span class="hljs-attr">mode</span> = <span class="hljs-string">&quot;db&quot;</span>   <span class="hljs-comment"># 修改这里</span><br><br>  <span class="hljs-comment">## file store property</span><br>  file &#123;<br>    <span class="hljs-comment">## store location dir</span><br>    <span class="hljs-attr">dir</span> = <span class="hljs-string">&quot;sessionStore&quot;</span><br>  &#125;<br><br>  <span class="hljs-comment">## database store property</span><br>  db &#123;<br>    <span class="hljs-comment">## the implement of javax.sql.DataSource, such as DruidDataSource(druid)/BasicDataSource(dbcp) etc.</span><br>    <span class="hljs-attr">datasource</span> = <span class="hljs-string">&quot;dbcp&quot;</span><br>    <span class="hljs-comment">## mysql/oracle/h2/oceanbase etc.</span><br>    <span class="hljs-attr">db-type</span> = <span class="hljs-string">&quot;mysql&quot;</span><br>    <span class="hljs-attr">driver-class-name</span> = <span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span><br>    <span class="hljs-attr">url</span> = <span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/seata&quot;</span><br>    <span class="hljs-attr">user</span> = <span class="hljs-string">&quot;root&quot;</span>   <span class="hljs-comment"># 修改对</span><br>    <span class="hljs-attr">password</span> = <span class="hljs-string">&quot;123&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><ol><li><p>创建名和 file.conf 指定一致的数据库。</p></li><li><p>在新建的数据库里面创建数据表，db_store.sql文件在 conf 目录下（1.0.0有坑，没有sql文件，下载0.9.0的，使用它的sql文件即可）</p></li><li><p>修改 conf&#x2F;registry.conf 文件内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">registry &#123;<br>  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa # 默认<span class="hljs-type">file</span><br>  <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;nacos&quot;</span><br><br>  nacos &#123;  # 修改nacos的端口<span class="hljs-number">8848</span><br>    serverAddr = <span class="hljs-string">&quot;localhost:8848&quot;</span><br>    namespace = <span class="hljs-string">&quot;&quot;</span><br>    cluster = <span class="hljs-string">&quot;default&quot;</span><br>  &#125;<br></code></pre></td></tr></table></figure></li><li><p>先启动 nacos Server 服务，再启动seata Server 。</p></li><li><p>启动 Seata Server 报错，在bin目录创建 &#x2F;logs&#x2F;seata_gc.log 文件。再次双击 bat文件启动。</p></li></ol><h4 id="数据库准备"><a href="#数据库准备" class="headerlink" title="数据库准备"></a>数据库准备</h4><p>这里我们会创建三个服务，一个订单服务，一个库存服务，一个账户服务。</p><p>当用户下单时，会在订单服务中创建一个订单，然后通过远程调用库存服务来扣减下单商品的库存，<br>再通过远程调用账户服务来扣减用户账户里面的余额，<br>最后在订单服务中修改订单状态为已完成。</p><p>该操作跨越三个数据库，有两次远程调用，很明显会有分布式事务问题。</p><p>创建三个数据库： <code>seata_account、seata_order、seata_storage</code></p><p>三个数据库都创建一个回滚日志表，seata&#x2F;conf&#x2F; 有相应的sql文件（1.0.0没有，依然使用0.9.0中的）。</p><p>最终效果：</p><ul><li>seata<ul><li>branch_table</li><li>global_table</li><li>lock_table</li></ul></li><li>seata_account<ul><li>t_account</li><li>undo_log</li></ul></li><li>seata_order<ul><li>t_order</li><li>undo_log</li></ul></li><li>seata_storage<ul><li>t_storage</li><li>undo_log</li></ul></li></ul><h4 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h4><blockquote><p>实现 下订单-&gt; 减库存 -&gt; 扣余额 -&gt; 改（订单）状态</p><p>需要注意的是，下面做了 seata 与 mybatis 的整合，所以注意一下，和以往的mybatis的使用不太一样。</p></blockquote><p>新建模块 alibaba-seata-order2001 ：</p><p>pom依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud2022<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.wzg.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>seata-order-service2001<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- seata --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-seata<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>seata-all<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.seata<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.seata<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>seata-all<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- springcloud alibaba nacos 依赖,Nacos Server 服务注册中心 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- open feign 服务调用 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- springboot整合Web组件 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 持久层支持 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--mysql-connector-java--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--jdbc--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- mybatis --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 日常通用jar包 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.wzg.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>api-commons<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;project.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>yml配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">2001</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">seata-order-service</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">alibaba:</span><br>      <span class="hljs-attr">seata:</span><br>        <span class="hljs-comment"># 自定义事务组，需要和当时在 seata/conf/file.conf 中的一致</span><br>        <span class="hljs-attr">tx-service-group:</span> <span class="hljs-string">fsp_tx_group</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/seata_order?useUnicode=true&amp;characterEncoding=utf-8&amp;autoReconnect=true&amp;useSSL=false&amp;useInformationSchema=false</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123</span><br><br><br><span class="hljs-comment"># 注意，这是自定义的，原来的是mapper_locations</span><br><span class="hljs-attr">mybatis:</span><br>  <span class="hljs-attr">mapperLocations:</span> <span class="hljs-string">classpath:mapper/*.xml</span><br><br><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">hystrix:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">level:</span><br>    <span class="hljs-attr">io:</span><br>      <span class="hljs-attr">seata:</span> <span class="hljs-string">info</span><br></code></pre></td></tr></table></figure><p>file.conf</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><code class="hljs java">transport &#123;<br>  # tcp udt unix-domain-<span class="hljs-type">socket</span><br>  <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;TCP&quot;</span><br>  #NIO <span class="hljs-type">NATIVE</span><br>  <span class="hljs-variable">server</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;NIO&quot;</span><br>  #enable <span class="hljs-type">heartbeat</span><br>  <span class="hljs-variable">heartbeat</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span><br>  #thread factory <span class="hljs-keyword">for</span> netty<br>  thread-factory &#123;<br>    boss-thread-prefix = <span class="hljs-string">&quot;NettyBoss&quot;</span><br>    worker-thread-prefix = <span class="hljs-string">&quot;NettyServerNIOWorker&quot;</span><br>    server-executor-thread-prefix = <span class="hljs-string">&quot;NettyServerBizHandler&quot;</span><br>    share-boss-worker = <span class="hljs-literal">false</span><br>    client-selector-thread-prefix = <span class="hljs-string">&quot;NettyClientSelector&quot;</span><br>    client-selector-thread-size = <span class="hljs-number">1</span><br>    client-worker-thread-prefix = <span class="hljs-string">&quot;NettyClientWorkerThread&quot;</span><br>    # netty boss thread size,will not be used <span class="hljs-keyword">for</span> UDT<br>    boss-thread-size = <span class="hljs-number">1</span><br>    #auto <span class="hljs-keyword">default</span> pin or <span class="hljs-number">8</span><br>    worker-thread-size = <span class="hljs-number">8</span><br>  &#125;<br>  shutdown &#123;<br>    # when destroy server, wait <span class="hljs-type">seconds</span><br>    <span class="hljs-variable">wait</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span><br>  &#125;<br>  serialization = <span class="hljs-string">&quot;seata&quot;</span><br>  compressor = <span class="hljs-string">&quot;none&quot;</span><br>&#125;<br><br>service &#123;<br><br>  vgroup_mapping.fsp_tx_group = <span class="hljs-string">&quot;default&quot;</span><br><br>  <span class="hljs-keyword">default</span>.grouplist = <span class="hljs-string">&quot;127.0.0.1:8091&quot;</span><br>  enableDegrade = <span class="hljs-type">false</span><br>  <span class="hljs-variable">disable</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span><br>  max.commit.retry.timeout = <span class="hljs-string">&quot;-1&quot;</span><br>  max.rollback.retry.timeout = <span class="hljs-string">&quot;-1&quot;</span><br>  disableGlobalTransaction = <span class="hljs-literal">false</span><br>&#125;<br><br><br>client &#123;<br>  async.commit.buffer.limit = <span class="hljs-number">10000</span><br>  lock &#123;<br>    retry.internal = <span class="hljs-number">10</span><br>    retry.times = <span class="hljs-number">30</span><br>  &#125;<br>  report.retry.count = <span class="hljs-number">5</span><br>  tm.commit.retry.count = <span class="hljs-number">1</span><br>  tm.rollback.retry.count = <span class="hljs-number">1</span><br>&#125;<br><br>## transaction log store<br>store &#123;<br>  ## store mode: file、<span class="hljs-type">db</span><br>  <span class="hljs-variable">mode</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;db&quot;</span><br><br>  ## file store<br>  file &#123;<br>    dir = <span class="hljs-string">&quot;sessionStore&quot;</span><br><br>    # branch session size , <span class="hljs-keyword">if</span> exceeded first <span class="hljs-keyword">try</span> compress lockkey, still exceeded <span class="hljs-keyword">throws</span> exceptions<br>    max-branch-session-size = <span class="hljs-number">16384</span><br>    # globe session size , <span class="hljs-keyword">if</span> exceeded <span class="hljs-keyword">throws</span> exceptions<br>    max-global-session-size = <span class="hljs-number">512</span><br>    # file buffer size , <span class="hljs-keyword">if</span> exceeded allocate <span class="hljs-keyword">new</span> <span class="hljs-title class_">buffer</span><br>    file-write-buffer-cache-size = <span class="hljs-number">16384</span><br>    # when recover batch read size<br>    session.reload.read_size = <span class="hljs-number">100</span><br>    # async, sync<br>    flush-disk-mode = async<br>  &#125;<br><br>  ## database store<br>  db &#123;<br>    ## the implement of javax.sql.DataSource, such as <span class="hljs-title function_">DruidDataSource</span><span class="hljs-params">(druid)</span>/BasicDataSource(dbcp) etc.<br>    datasource = <span class="hljs-string">&quot;dbcp&quot;</span><br>    ## mysql/oracle/h2/oceanbase etc.<br>    db-type = <span class="hljs-string">&quot;mysql&quot;</span><br>    driver-class-name = <span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span><br>    url = <span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/seata&quot;</span><br>    user = <span class="hljs-string">&quot;root&quot;</span><br>    password = <span class="hljs-string">&quot;123&quot;</span><br>    min-conn = <span class="hljs-number">1</span><br>    max-conn = <span class="hljs-number">3</span><br>    global.table = <span class="hljs-string">&quot;global_table&quot;</span><br>    branch.table = <span class="hljs-string">&quot;branch_table&quot;</span><br>    lock-table = <span class="hljs-string">&quot;lock_table&quot;</span><br>    query-limit = <span class="hljs-number">100</span><br>  &#125;<br>&#125;<br>lock &#123;<br>  ## the lock store mode: local、<span class="hljs-type">remote</span><br>  <span class="hljs-variable">mode</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;remote&quot;</span><br><br>  local &#123;<br>    ## store locks in user<span class="hljs-string">&#x27;s database</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">  remote &#123;</span><br><span class="hljs-string">    ## store locks in the seata&#x27;</span>s server<br>  &#125;<br>&#125;<br>recovery &#123;<br>  #schedule committing retry period in milliseconds<br>  committing-retry-period = <span class="hljs-number">1000</span><br>  #schedule asyn committing retry period in milliseconds<br>  asyn-committing-retry-period = <span class="hljs-number">1000</span><br>  #schedule rollbacking retry period in milliseconds<br>  rollbacking-retry-period = <span class="hljs-number">1000</span><br>  #schedule timeout retry period in milliseconds<br>  timeout-retry-period = <span class="hljs-number">1000</span><br>&#125;<br><br>transaction &#123;<br>  undo.data.validation = <span class="hljs-literal">true</span><br>  undo.log.serialization = <span class="hljs-string">&quot;jackson&quot;</span><br>  undo.log.save.days = <span class="hljs-number">7</span><br>  #schedule delete expired undo_log in milliseconds<br>  undo.log.delete.period = <span class="hljs-number">86400000</span><br>  undo.log.table = <span class="hljs-string">&quot;undo_log&quot;</span><br>&#125;<br><br>## metrics settings<br>metrics &#123;<br>  enabled = <span class="hljs-literal">false</span><br>  registry-type = <span class="hljs-string">&quot;compact&quot;</span><br>  # multi exporters use comma divided<br>  exporter-list = <span class="hljs-string">&quot;prometheus&quot;</span><br>  exporter-prometheus-port = <span class="hljs-number">9898</span><br>&#125;<br><br>support &#123;<br>  ## spring<br>  spring &#123;<br>    # auto proxy the DataSource bean<br>    datasource.autoproxy = <span class="hljs-literal">false</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>将 seata&#x2F;conf&#x2F; 下的registry.cong 文件拷贝到 resource 目录下。</p><p>创建 domain 实体类 ： Order 和 CommonResult 两个实体类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud.daomain;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Order</span> &#123;<br>    <span class="hljs-keyword">private</span> Long id;<br><br>    <span class="hljs-keyword">private</span> Long userId;<br><br>    <span class="hljs-keyword">private</span> Long productId;<br><br>    <span class="hljs-keyword">private</span> Integer count;<br><br>    <span class="hljs-keyword">private</span> BigDecimal money;<br><br>    <span class="hljs-keyword">private</span> Integer status; <span class="hljs-comment">//订单状态：0：创建中；1：已完结</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud.daomain;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonResult</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">private</span> Integer code;<br>    <span class="hljs-keyword">private</span> String message;<br>    <span class="hljs-keyword">private</span> T data;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CommonResult</span><span class="hljs-params">(Integer code, String message)</span> &#123;<br>        <span class="hljs-built_in">this</span>(code, message, <span class="hljs-literal">null</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>dao :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud.dao;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">import</span> com.wzg.springcloud.daomain.Order;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Param;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">OrderDao</span> &#123;<br>    <span class="hljs-comment">//新建订单</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">create</span><span class="hljs-params">(Order order)</span>;<br><br>    <span class="hljs-comment">//修改订单状态，从零改为1</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;userId&quot;)</span> Long userId, <span class="hljs-meta">@Param(&quot;status&quot;)</span> Integer status)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在resource目录下创建mapper文件夹并创建OrderMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.wzg.springcloud.dao.OrderDao&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 以备后面会用到 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.wzg.springcloud.daomain.Order&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;BIGINT&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;userId&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;BIGINT&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;product_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;productId&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;BIGINT&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;count&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;count&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;money&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;money&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;DECIMAL&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;status&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;status&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;create&quot;</span> &gt;</span><br>        insert into t_order values (null, #&#123;userId&#125;, #&#123;productId&#125;, #&#123;count&#125;, #&#123;money&#125;, 0);<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;update&quot;</span>&gt;</span><br>        update t_order<br>        set status = 1<br>        where user_id = #&#123;userId&#125;<br>          and status = #&#123;status&#125;;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>service ：</p><p>三个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud.service;<br><br><span class="hljs-keyword">import</span> com.wzg.springcloud.daomain.Order;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">OrderService</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">create</span><span class="hljs-params">(Order order)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud.service;<br><br><span class="hljs-keyword">import</span> com.wzg.springcloud.daomain.CommonResult;<br><span class="hljs-keyword">import</span> org.springframework.cloud.openfeign.FeignClient;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PostMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@FeignClient(value = &quot;seata-storage-service&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StorageService</span>&#123;<br>    <span class="hljs-meta">@PostMapping(value = &quot;/storage/decrease&quot;)</span><br>    CommonResult <span class="hljs-title function_">decrease</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;productId&quot;)</span> Long productId, <span class="hljs-meta">@RequestParam(&quot;count&quot;)</span> Integer count)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud.service;<br><br><span class="hljs-keyword">import</span> com.wzg.springcloud.daomain.CommonResult;<br><span class="hljs-keyword">import</span> org.springframework.cloud.openfeign.FeignClient;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PostMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@FeignClient(value = &quot;seata-account-service&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AccountService</span>&#123;<br>    <span class="hljs-meta">@PostMapping(value = &quot;/account/decrease&quot;)</span><br>    CommonResult <span class="hljs-title function_">decrease</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;userId&quot;)</span> Long userId, <span class="hljs-meta">@RequestParam(&quot;money&quot;)</span> BigDecimal money)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>一个实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud.service.iml;<br><br><span class="hljs-keyword">import</span> com.wzg.springcloud.dao.OrderDao;<br><span class="hljs-keyword">import</span> com.wzg.springcloud.daomain.Order;<br><span class="hljs-keyword">import</span> com.wzg.springcloud.service.AccountService;<br><span class="hljs-keyword">import</span> com.wzg.springcloud.service.OrderService;<br><span class="hljs-keyword">import</span> com.wzg.springcloud.service.StorageService;<br><span class="hljs-keyword">import</span> io.seata.spring.annotation.GlobalTransactional;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">OrderService</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> OrderDao orderDao;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> StorageService storageService;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> AccountService accountService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建订单-&gt;调用库存服务扣减库存-&gt;调用账户服务扣减账户余额-&gt;修改订单状态</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@GlobalTransactional(name = &quot;fsp-create-order&quot;, rollbackFor = Exception.class)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">create</span><span class="hljs-params">(Order order)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;-----&gt;开始新建订单&quot;</span>);<br>        <span class="hljs-comment">//新建订单</span><br>        orderDao.create(order);<br><br>        <span class="hljs-comment">//扣减库存</span><br>        log.info(<span class="hljs-string">&quot;-----&gt;订单微服务开始调用库存，做扣减Count&quot;</span>);<br>        storageService.decrease(order.getProductId(), order.getCount());<br>        log.info(<span class="hljs-string">&quot;-----&gt;订单微服务开始调用库存，做扣减end&quot;</span>);<br><br>        <span class="hljs-comment">//扣减账户</span><br>        log.info(<span class="hljs-string">&quot;-----&gt;订单微服务开始调用账户，做扣减Money&quot;</span>);<br>        accountService.decrease(order.getUserId(), order.getMoney());<br>        log.info(<span class="hljs-string">&quot;-----&gt;订单微服务开始调用账户，做扣减end&quot;</span>);<br><br><br>        <span class="hljs-comment">//修改订单状态，从零到1代表已经完成</span><br>        log.info(<span class="hljs-string">&quot;-----&gt;修改订单状态开始&quot;</span>);<br>        orderDao.update(order.getUserId(), <span class="hljs-number">0</span>);<br>        log.info(<span class="hljs-string">&quot;-----&gt;修改订单状态结束&quot;</span>);<br><br>        log.info(<span class="hljs-string">&quot;-----&gt;下订单结束了&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud.service.iml;<br><br><span class="hljs-keyword">import</span> com.wzg.springcloud.dao.OrderDao;<br><span class="hljs-keyword">import</span> com.wzg.springcloud.daomain.Order;<br><span class="hljs-keyword">import</span> com.wzg.springcloud.service.AccountService;<br><span class="hljs-keyword">import</span> com.wzg.springcloud.service.OrderService;<br><span class="hljs-keyword">import</span> com.wzg.springcloud.service.StorageService;<br><span class="hljs-keyword">import</span> io.seata.spring.annotation.GlobalTransactional;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">OrderService</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> OrderDao orderDao;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> StorageService storageService;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> AccountService accountService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建订单-&gt;调用库存服务扣减库存-&gt;调用账户服务扣减账户余额-&gt;修改订单状态</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@GlobalTransactional(name = &quot;fsp-create-order&quot;, rollbackFor = Exception.class)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">create</span><span class="hljs-params">(Order order)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;-----&gt;开始新建订单&quot;</span>);<br>        <span class="hljs-comment">//新建订单</span><br>        orderDao.create(order);<br><br>        <span class="hljs-comment">//扣减库存</span><br>        log.info(<span class="hljs-string">&quot;-----&gt;订单微服务开始调用库存，做扣减Count&quot;</span>);<br>        storageService.decrease(order.getProductId(), order.getCount());<br>        log.info(<span class="hljs-string">&quot;-----&gt;订单微服务开始调用库存，做扣减end&quot;</span>);<br><br>        <span class="hljs-comment">//扣减账户</span><br>        log.info(<span class="hljs-string">&quot;-----&gt;订单微服务开始调用账户，做扣减Money&quot;</span>);<br>        accountService.decrease(order.getUserId(), order.getMoney());<br>        log.info(<span class="hljs-string">&quot;-----&gt;订单微服务开始调用账户，做扣减end&quot;</span>);<br><br><br>        <span class="hljs-comment">//修改订单状态，从零到1代表已经完成</span><br>        log.info(<span class="hljs-string">&quot;-----&gt;修改订单状态开始&quot;</span>);<br>        orderDao.update(order.getUserId(), <span class="hljs-number">0</span>);<br>        log.info(<span class="hljs-string">&quot;-----&gt;修改订单状态结束&quot;</span>);<br><br>        log.info(<span class="hljs-string">&quot;-----&gt;下订单结束了&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>config</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud.config;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSource;<br><span class="hljs-keyword">import</span> io.seata.rm.datasource.DataSourceProxy;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.mybatis.spring.SqlSessionFactoryBean;<br><span class="hljs-keyword">import</span> org.mybatis.spring.transaction.SpringManagedTransactionFactory;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.core.io.support.PathMatchingResourcePatternResolver;<br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataSourceProxyConfig</span> &#123;<br><br><br>    <span class="hljs-meta">@Value(&quot;$&#123;mybatis.mapperLocations&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String mapperLocations;<br><br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">druidDataSource</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>    &#125;<br><br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DataSourceProxy <span class="hljs-title function_">dataSourceProxy</span><span class="hljs-params">(DataSource dataSource)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataSourceProxy</span>(dataSource);<br>    &#125;<br><br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> SqlSessionFactory <span class="hljs-title function_">sqlSessionFactoryBean</span><span class="hljs-params">(DataSourceProxy dataSourceProxy)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">SqlSessionFactoryBean</span> <span class="hljs-variable">sqlSessionFactoryBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBean</span>();<br>        sqlSessionFactoryBean.setDataSource(dataSourceProxy);<br>        sqlSessionFactoryBean.setMapperLocations(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PathMatchingResourcePatternResolver</span>().getResources(mapperLocations));<br>        sqlSessionFactoryBean.setTransactionFactory(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringManagedTransactionFactory</span>());<br>        <span class="hljs-keyword">return</span> sqlSessionFactoryBean.getObject();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud.config;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> org.mybatis.spring.annotation.MapperScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@MapperScan(&#123;&quot;com.wzg.springcloud.dao&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBatisConfig</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>主启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;<br><span class="hljs-keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;<br><br><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-meta">@EnableFeignClients</span><br><span class="hljs-meta">@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)</span><span class="hljs-comment">//取消数据源自动创建的配置</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SeataOrderMainApp2001</span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        SpringApplication.run(SeataOrderMainApp2001.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> 启动测试 </p><p>先启动nacos-1.1.4和seata-0.9.0，再启动2001。</p><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h6is5g1r1yj30no02idgs.jpg"></p><p>仿照上面 创建 alibaba-seata-storage2002 和alibaba-seata-account2003 两个模块，唯一大的区别就是这两个不需要导入 open-feign 远程调用其它模块。</p><h3 id="Seata全局事务怎么使用"><a href="#Seata全局事务怎么使用" class="headerlink" title="Seata全局事务怎么使用"></a>Seata全局事务怎么使用</h3><p>Spring提供的本地事务：@Transactional</p><p>Seata提供的全局事务：@GlobalTransactional</p><p>SEATA的分布式交易解决方案</p><p>我们只需要使用一个</p><p>注解在业务方法上:</p><p>@GlobalTransactional</p><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h6is64dtpfj30mh0efaf2.jpg"></p><h3 id="数据库初始情况"><a href="#数据库初始情况" class="headerlink" title="数据库初始情况"></a>数据库初始情况</h3><p>下订单-&gt;减库存-&gt;扣余额-&gt;改(订单)状态</p><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h6is75s4hwj30d502ymy4.jpg"></p><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h6is7rf4b3j30bi02n74v.jpg"></p><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h6is7yldqqj30as02yaao.jpg"></p><h3 id="测试正常下单"><a href="#测试正常下单" class="headerlink" title="测试正常下单"></a>测试正常下单</h3><p>启动nacos、seata、2001、2002、2003；</p><p>测试：<a href="http://localhost:2001/order/create?userId=1&amp;productId=1&amp;count=10&amp;money=100">http://localhost:2001/order/create?userId=1&amp;productId=1&amp;count=10&amp;money=100</a></p><p> 报错  </p><p>java.sql.SQLException:Failed to fetch schema of <code>t_order</code></p><p>Connector&#x2F;J 5.0.0以后的版本有一个名为useInformationSchema的数据库连接参数，Connector&#x2F;J 在mysql8.0中默认配置连接属性useInformationSchema为true，使查询table信息时更为有效。用户依然可以配置useInformationSchema为false，但是在8.0.3及其之后的版本中，由于不能支持早期的特性，某些数据字典的查询可能会失败。</p><p>在各微服务的application.yml 文件的spring.datasource.url 后面加上&amp;useInformationSchema&#x3D;false设置useInformationSchema为false，即可解决该问题。 参考：<a href="https://www.jianshu.com/p/acc99f891e91">https://www.jianshu.com/p/acc99f891e91</a></p><p> 再次测试 </p><p>访问成功</p><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h6isbkrdivj30lf03dt9y.jpg"></p><p> 测试超时异常：不加@GlobalTransactional </p><p> AccountServiceImpl添加超时： </p><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h6isd9b92gj30k90atdl5.jpg"></p><p>我们使用的是Openfeign，默认超时时长是1s，这里我们延迟30s。</p><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h6isdorke5j30n206ddjn.jpg"></p><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h6isenjlruj30dd04amz1.jpg"></p><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h6iseszxwlj30eb04140l.jpg"></p><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h6isf2oqxmj30ei03nabp.jpg"></p><p>当库存和账户金额扣减后，订单状态并没有设置为已经完成，没有从零改为1；而且由于feign的重试机制，账户余额还有可能被多次扣减。</p><p> 测试超时异常：加@GlobalTransactional </p><p>OrderServiceImpl添加@GlobalTransactional注解，注意改注解只能用在方法上！</p><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h6isffcd92j30md03i0ul.jpg"></p><p>●name：给定全局事务实例的名称，随便取，唯一即可</p><p>●rollbackFor：当发生什么样的异常时，进行回滚</p><p>●noRollbackFor：发生什么样的异常不进行回滚。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>做好配置后，我们只需要使用一个 @GlobalTransactional(name &#x3D; “lsp-create-order”, rollbackFor &#x3D; Exception.class) 放在业务的入口，即可实现控制全局的事务。注意该注解只能放在方法上。</p><h2 id="再看TC-x2F-TM-x2F-RM三大组件"><a href="#再看TC-x2F-TM-x2F-RM三大组件" class="headerlink" title="再看TC&#x2F;TM&#x2F;RM三大组件"></a>再看TC&#x2F;TM&#x2F;RM三大组件</h2><p>TC：seata服务器； （我们电脑上启动的seata ）<br>TM：事物的发起者，业务的入口。 哪个微服务使用了@GlobalTransactional哪个就是TM<br>RM：事务的参与者，一个数据库就是一个RM。</p><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h6isfwvoitj30qo0crdis.jpg"></p><p>分布式事务的执行流程：<br>1TM 开启分布式事务（TM 向 TC 注册全局事务记录）；<br>2按业务场景，编排数据库、服务等事务内资源（RM 向 TC 汇报资源准备状态 ）；<br>3TM 结束分布式事务，事务一阶段结束（TM 通知 TC 提交&#x2F;回滚分布式事务）；<br>4TC 汇总事务信息，决定分布式事务是提交还是回滚；<br>5TC 通知所有 RM 提交&#x2F;回滚 资源，事务二阶段结束。</p><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h6isgboq4tj30kg0e9tc9.jpg"></p><h2 id="AT模式（默认）如何做到对业务的无侵入"><a href="#AT模式（默认）如何做到对业务的无侵入" class="headerlink" title="AT模式（默认）如何做到对业务的无侵入"></a>AT模式（默认）如何做到对业务的无侵入</h2><p>Seata有四大模式：AT（默认）、TCC、SAGA、XA。（阿里云上的AT叫做GTS，收费）<br><a href="http://seata.io/zh-cn/docs/dev/mode/at-mode.html">AT模式</a><br>AT模式两阶段提交协议的演变：<br>●一阶段：业务数据和回滚日志记录在同一个本地事务中提交，释放本地锁和连接资源。<br>●二阶段：<br>○提交异步化，非常快速地完成。<br>○回滚通过一阶段的回滚日志进行反向补偿（前面insert，后面回滚时就delete）。</p><p>每个数据库除了自身存储数据的表以外，都会有一个事务回滚表：undo_log<br>Seata库中存在：branch_table\global_table\lock_table\distributed_lock(高版本才有)这样一些表</p><h3 id="一阶段加载"><a href="#一阶段加载" class="headerlink" title="一阶段加载"></a><strong>一阶段加载</strong></h3><p>在一阶段，Seata 会拦截“业务 SQL”，<br>1  解析 SQL 语义，找到“业务 SQL”要更新的业务数据，在业务数据被更新前，将其保存成“before image”（前置镜像）<br>2  执行“业务 SQL”更新业务数据，在业务数据更新之后，<br>3  其保存成“after image”，最后生成行锁。<br>以上操作全部在一个数据库事务内完成，这样保证了一阶段操作的原子性。</p><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h6isgpqgdgj30q10fw46x.jpg"></p><h3 id="二阶段回滚"><a href="#二阶段回滚" class="headerlink" title="二阶段回滚"></a><strong>二阶段回滚</strong></h3><p>二阶段如果是回滚的话，Seata 就需要回滚一阶段已经执行的“业务 SQL”，还原业务数据。<br>回滚方式便是用“before image”还原业务数据；但在还原前要首先要校验脏写，对比“数据库当前业务数据”和 “after image”。如果两份数据完全一致就说明没有脏写，可以还原业务数据，如果不一致就说明有脏写，出现脏写就需要转人工处理。</p><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h6ishiziffj30q10hqqan.jpg"></p><h3 id="整体流程图"><a href="#整体流程图" class="headerlink" title="整体流程图"></a><strong>整体流程图</strong></h3><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h6ishqcfwkj30l50h077w.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>SpringCloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud学习笔记(8)</title>
    <link href="/2022/09/23/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(8)/"/>
    <url>/2022/09/23/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(8)/</url>
    
    <content type="html"><![CDATA[<h2 id="Sentinel"><a href="#Sentinel" class="headerlink" title="Sentinel"></a>Sentinel</h2><blockquote><p>sentinel在 springcloud Alibaba 中的作用是实现<code>熔断</code>和<code>限流</code>。类似于Hystrix豪猪</p></blockquote><blockquote><p>下载地址dashboard： <a href="https://github.com/alibaba/Sentinel/releases/download/1.7.1/sentinel-dashboard-1.7.1.jar">https://github.com/alibaba/Sentinel/releases/download/1.7.1/sentinel-dashboard-1.7.1.jar</a></p><p>下载jar包以后，使用【java -jar】命令启动即可。</p><p>它使用 8080 端口，用户名和密码都为 ： sentinel</p></blockquote><p>随着微服务的流行，服务和服务之间的稳定性变得越来越重要。Sentinel 以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</p><p>Sentinel 具有以下特征:</p><ul><li><strong>丰富的应用场景</strong>：Sentinel 承接了阿里巴巴近 10 年的双十一大促流量的核心场景，例如秒杀（即突发流量控制在系统容量可以承受的范围）、消息削峰填谷、集群流量控制、实时熔断下游不可用应用等。</li><li><strong>完备的实时监控</strong>：Sentinel 同时提供实时的监控功能。您可以在控制台中看到接入应用的单台机器秒级数据，甚至 500 台以下规模的集群的汇总运行情况。</li><li><strong>广泛的开源生态</strong>：Sentinel 提供开箱即用的与其它开源框架&#x2F;库的整合模块，例如与 Spring Cloud、Dubbo、gRPC 的整合。您只需要引入相应的依赖并进行简单的配置即可快速地接入 Sentinel。</li><li><strong>完善的 SPI 扩展点</strong>：Sentinel 提供简单易用、完善的 SPI 扩展接口。您可以通过实现扩展接口来快速地定制逻辑。例如定制规则管理、适配动态数据源等。</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/4afe83cd7157f9147f7aa969fdf17301.png" alt="Sentinel-features-overview"></p><p>Sentinel 分为两个部分:</p><ul><li>核心库（Java 客户端）不依赖任何框架&#x2F;库，能够运行于所有 Java 运行时环境，同时对 Dubbo &#x2F; Spring Cloud 等框架也有较好的支持。</li><li>控制台（Dashboard）基于 Spring Boot 开发，打包后可以直接运行，不需要额外的 Tomcat 等应用容器。</li></ul><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><blockquote><p>先启动nacos</p><p>新建模块 <code>alibaba-sentinel-service8401</code> ，使用nacos作为服务注册中心</p><p>Sentinel可以对service进行监控、熔断、降级</p><p>没访问时再sentinel里是看不到监控的应用的，因为是懒加载，需要访问一次</p></blockquote><p>pom依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud2022<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.wzg.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>alibaba-sentinel-service8401<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 后续做Sentinel的持久化会用到的依赖 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.csp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- sentinel  --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- springcloud alibaba nacos 依赖,Nacos Server 服务注册中心 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- springboot整合Web组件 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 日常通用jar包 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.wzg.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>api-commons<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;project.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>yml 配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8401</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">cloudalibaba-sentinel-service</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-comment"># 服务注册中心 # sentinel注册进nacos</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span><br>    <span class="hljs-attr">sentinel:</span><br>      <span class="hljs-attr">transport:</span><br>        <span class="hljs-comment"># 配置 Sentinel Dashboard 的地址</span><br>        <span class="hljs-attr">dashboard:</span> <span class="hljs-string">localhost:8080</span><br>        <span class="hljs-comment"># 默认8719 ，如果端口被占用，端口号会自动 +1，直到找到未被占用的端口，提供给 sentinel 的监控端口</span><br>        <span class="hljs-attr">port:</span> <span class="hljs-number">8719</span><br>        <br><span class="hljs-attr">management:</span><br>  <span class="hljs-attr">endpoints:</span><br>    <span class="hljs-attr">web:</span><br>      <span class="hljs-attr">exposure:</span><br>        <span class="hljs-attr">include:</span> <span class="hljs-string">&#x27;*&#x27;</span><br></code></pre></td></tr></table></figure><p>主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-meta">@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainApp8401</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(MainApp8401.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud.controller;<br><br><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.annotation.SentinelResource;<br><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.slots.block.BlockException;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FlowLimitController</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/testA&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testA</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;------testA&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/testB&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testB</span><span class="hljs-params">()</span> &#123;<br>        log.info(Thread.currentThread().getName()+<span class="hljs-string">&quot;\t&quot;</span>+<span class="hljs-string">&quot;...testB&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;------testB&quot;</span>;<br>    &#125;<br><br><br>    <span class="hljs-meta">@GetMapping(&quot;/testD&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testD</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//        try &#123; TimeUnit.SECONDS.sleep(1); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125;</span><br><span class="hljs-comment">//        log.info(&quot;testD 测试RT&quot;);</span><br><br>        log.info(<span class="hljs-string">&quot;testD 异常比例&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>/<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;------testD&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/testE&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testE</span><span class="hljs-params">()</span> &#123;<br>        log.info(<span class="hljs-string">&quot;testE 测试异常数&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>/<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;------testE 测试异常数&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/testHotKey&quot;)</span><br>    <span class="hljs-meta">@SentinelResource(value = &quot;testHotKey&quot;,blockHandler = &quot;deal_testHotKey&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testHotKey</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;p1&quot;,required = false)</span> String p1,</span><br><span class="hljs-params">                             <span class="hljs-meta">@RequestParam(value = &quot;p2&quot;,required = false)</span> String p2)</span> &#123;<br>        <span class="hljs-comment">//int age = 10/0;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;------testHotKey&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">deal_testHotKey</span> <span class="hljs-params">(String p1, String p2, BlockException exception)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;------deal_testHotKey,o(╥﹏╥)o&quot;</span>;  <span class="hljs-comment">//sentinel系统默认的提示：Blocked by Sentinel (flow limiting)</span><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package com.<span class="hljs-property">wzg</span>.<span class="hljs-property">springcloud</span>.<span class="hljs-property">controller</span>;<br><br><span class="hljs-keyword">import</span> com.<span class="hljs-property">alibaba</span>.<span class="hljs-property">csp</span>.<span class="hljs-property">sentinel</span>.<span class="hljs-property">annotation</span>.<span class="hljs-property">SentinelResource</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">alibaba</span>.<span class="hljs-property">csp</span>.<span class="hljs-property">sentinel</span>.<span class="hljs-property">slots</span>.<span class="hljs-property">block</span>.<span class="hljs-property">BlockException</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">wzg</span>.<span class="hljs-property">springcloud</span>.<span class="hljs-property">entities</span>.<span class="hljs-property">CommonResult</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">wzg</span>.<span class="hljs-property">springcloud</span>.<span class="hljs-property">entities</span>.<span class="hljs-property">Payment</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">wzg</span>.<span class="hljs-property">springcloud</span>.<span class="hljs-property">handler</span>.<span class="hljs-property">CustomerBlockHandler</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">web</span>.<span class="hljs-property">bind</span>.<span class="hljs-property">annotation</span>.<span class="hljs-property">GetMapping</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">web</span>.<span class="hljs-property">bind</span>.<span class="hljs-property">annotation</span>.<span class="hljs-property">RestController</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RateLimitController</span> &#123;<br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/byResource&quot;</span>)<br>    <span class="hljs-meta">@SentinelResource</span>(value = <span class="hljs-string">&quot;byResource&quot;</span>,blockHandler = <span class="hljs-string">&quot;handleException&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">CommonResult</span> <span class="hljs-title function_">byResource</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonResult</span>(<span class="hljs-number">200</span>,<span class="hljs-string">&quot;按资源名称限流测试OK&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Payment</span>(2020L,<span class="hljs-string">&quot;serial001&quot;</span>));<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">CommonResult</span> <span class="hljs-title function_">handleException</span>(<span class="hljs-params">BlockException exception</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonResult</span>(<span class="hljs-number">444</span>,exception.<span class="hljs-title function_">getClass</span>().<span class="hljs-title function_">getCanonicalName</span>()+<span class="hljs-string">&quot;\t 服务不可用&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/rateLimit/byUrl&quot;</span>)<br>    <span class="hljs-meta">@SentinelResource</span>(value = <span class="hljs-string">&quot;byUrl&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">CommonResult</span> <span class="hljs-title function_">byUrl</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonResult</span>(<span class="hljs-number">200</span>,<span class="hljs-string">&quot;按url限流测试OK&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Payment</span>(2020L,<span class="hljs-string">&quot;serial002&quot;</span>));<br>    &#125;<br><br><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/rateLimit/customerBlockHandler&quot;</span>)<br>    <span class="hljs-meta">@SentinelResource</span>(value = <span class="hljs-string">&quot;customerBlockHandler&quot;</span>,<br>            blockHandlerClass = <span class="hljs-title class_">CustomerBlockHandler</span>.<span class="hljs-property">class</span>,<br>            blockHandler = <span class="hljs-string">&quot;handlerException2&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">CommonResult</span> <span class="hljs-title function_">customerBlockHandler</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonResult</span>(<span class="hljs-number">200</span>,<span class="hljs-string">&quot;按客戶自定义&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Payment</span>(2020L,<span class="hljs-string">&quot;serial003&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>handler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud.handler;<br><br><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.slots.block.BlockException;<br><span class="hljs-keyword">import</span> com.wzg.springcloud.entities.CommonResult;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomerBlockHandler</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CommonResult <span class="hljs-title function_">handlerException</span><span class="hljs-params">(BlockException exception)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonResult</span>(<span class="hljs-number">4444</span>,<span class="hljs-string">&quot;按客戶自定义,global handlerException----1&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CommonResult <span class="hljs-title function_">handlerException2</span><span class="hljs-params">(BlockException exception)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonResult</span>(<span class="hljs-number">4444</span>,<span class="hljs-string">&quot;按客戶自定义,global handlerException----2&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="流控规则"><a href="#流控规则" class="headerlink" title="流控规则"></a>流控规则</h3><ul><li>资源名：唯一名称，默认请求路径</li><li>针对来源：sentinel可以针对调用者进行限流，填写微服务名，默认default（不区分来源）</li><li>阈值类型&#x2F;单机值：<ul><li>QPS（每秒钟的请求数量）：当调用该api就QPS达到阈值的时候，进行限流</li><li>线程数．当调用该api的线程数达到阈值的时候，进行限流</li></ul></li><li>是否集群：不需要集群</li><li>流控模式：<ul><li>直接：api达到限流条件时，直接限流。分为QPS和线程数</li><li>关联：当关联的资到阈值时，就限流自己。别人惹事，自己买单</li><li>链路：只记录指定链路上的流量（指定资源从入口资源进来的流量，如果达到阈值，就进行限流）【api级别的针对来源】</li></ul></li><li>流控效果：<ul><li>快速失败：直接抛异常</li><li>warm up：根据codeFactor（冷加载因子，默认3）的值，从阈值codeFactor，经过预热时长，才达到设置的QPS阈值</li></ul></li></ul><p>重要属性：</p><table><thead><tr><th>Field</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>resource</td><td>资源名，资源名是限流规则的作用对象</td><td></td></tr><tr><td>count</td><td>限流阈值</td><td></td></tr><tr><td>grade</td><td>限流阈值类型，QPS 模式（1）或并发线程数模式（0）</td><td>QPS 模式</td></tr><tr><td>limitApp</td><td>流控针对的调用来源</td><td><code>default</code>，代表不区分调用来源</td></tr><tr><td>strategy</td><td>调用关系限流策略：直接、链路、关联</td><td>根据资源本身（直接）</td></tr><tr><td>controlBehavior</td><td>流控效果（直接拒绝&#x2F;WarmUp&#x2F;匀速+排队等待），不支持按调用关系限流</td><td>直接拒绝</td></tr><tr><td>clusterMode</td><td>是否集群限流</td><td>否</td></tr></tbody></table><p>我们先只针对&#x2F;testA请求进行限制</p><p><strong>流控模式–直接</strong>：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/ed8c470859d2364e159219e3b364444f.png" alt="1597819546992"></p><blockquote><p>限流表现：当超过阀值，就会被降级。</p><p>1s内多次刷新网页，localhost:8401&#x2F;testA</p><p>返回Blocked by Sentienl(flow limiting)</p></blockquote><p><strong>流控模式–关联</strong>：</p><ul><li>当与A关联的资源B达到阀值后，就限流A自己</li><li>B惹事，A挂了。支付达到阈值，限流下单接口。B阈值达到1，A就挂</li><li>用post访问B让B忙，访问A发现挂了</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/57bc94814fa2307f6daeed7a46350dd9.png" alt="1597820015308"></p><p><strong>流控效果–预热Warm up</strong>：</p><p>访问数量慢慢升高</p><p>阈值初一coldFactor（默认3），经过预热时长后才会达到阈值。</p><p><strong>流控效果–排队等待</strong>：</p><p>匀速排队（Ru1eConstant.CONTROL_BEHAVIOR_RATE_LIMITER）方式会严格控制请求通过的间隔时间，即让请求以均匀的速度通过对应的是漏桶算法。详细文档可以参考流量控制-匀速器模式，具体的例子可以参见PaceFlowDemo</p><h3 id="熔断降级"><a href="#熔断降级" class="headerlink" title="熔断降级"></a>熔断降级</h3><p>新增降级规则：降低策略：RT</p><p>RT（平均响应时间，秒级）</p><p>平均响应时间 超出阈值 且 在时间窗口内通过的请求&gt;&#x3D;5，两个条件同时满足后触发降级</p><p>窗口期过后关闭断路器</p><p>RT最大4900（更大的需要通过-Dcsp.Sentinel.statistic.max.rt&#x3D;XXXX才能生效）</p><p>异常比例（秒级）<br>QPS&gt;&#x3D;5且异常比例（秒级统计）超过阈值时，触发降级，时间窗口结束后，关闭降级</p><p>sentinel熔断降级会在调用链路中某个资源出现不稳定状态时（例如调用超时或异常比例升高），对这个资源的调用进行限制，让请求快速失败，避免影响到其它的资源而导致级联错误。</p><p>当资源被降级后，在接下来的降级时间窗囗之内，对该资源的调用都自动熔断（默认行为是抛出DegradeException)。</p><p><strong>降级策略–RT</strong></p><p>降级策略–异常比例：</p><p>异常比例（DEGRADE-GRADE-EXCEPTION-RATIO）：当资源的每秒请求量&gt;&#x3D;5，并且每秒异常总数占通过的比值超过阈值（DegradeRule中的count）之后，资源进入降级状态，即在接下的时间窗口（DegradeRu1e中的timeWindow，，以s为单位）之内，对这个方法的调用都会自动地返回。异常b阈值范围是[0.0,l.0]，代表0％一100％。</p><p>降级测录–异常数：</p><p>异常数（DEGRADE-GRADE-EXCEPTION-COUNT）：当资源近1分钟的异常数目超过阈值之后会进行熔断。注意由于统计时间窗口是分钟级别的，若timeWindow小于60s,则结束熔断状态后仍可能再进入熔断状态。</p><p>时间窗口一定要大于等于60秒。</p><p>时间窗口结束后关闭降级</p><p>localhost:8401&#x2F;testE , 第一次访问绝对报错，因为除数不能为零，<br>我们看到error窗口，但是达到5次报错后，进入熔断后降级。</p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-0uG4jp95-1615737211171)(images\1597821618735.png)]</p><h3 id="热点Key限流"><a href="#热点Key限流" class="headerlink" title="热点Key限流"></a>热点Key限流</h3><p>何为热点？热点即经常访问的数据。很多时候我们希望统计某个热点数据中访问频次最高的TopK数据，并对其访问进行限制。比如：</p><ul><li>商品ID为参数，统计一段时间内最常购买的商品ID并进行限制</li><li>用户ID为参数，针对一段时间内频繁访问的用户ID进行限制</li></ul><p>参数限流会统计传入参数中的参数，并根据配置流阈值与模式，对包含热点参数的资源调用进行限流。热点参数限流可以看做是一种特殊的流量控制，仅对包含热点参数的资源调用生效。</p><p>controller层写一个demo:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/testhotkey&quot;)</span><br>   <span class="hljs-meta">@SentinelResource(value = &quot;testhotkey&quot;, blockHandler = &quot;deal_testhotkey&quot;)</span><br>   <span class="hljs-comment">//这个value是随意的值，并不和请求路径必须一致</span><br>   <span class="hljs-comment">//在填写热点限流的 资源名 这一项时，可以填 /testhotkey 或者是 @SentinelResource的value的值</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testHotKey</span><span class="hljs-params">(</span><br><span class="hljs-params">           <span class="hljs-meta">@RequestParam(value=&quot;p1&quot;, required = false)</span> String p1,</span><br><span class="hljs-params">           <span class="hljs-meta">@RequestParam(value = &quot;p2&quot;, required = false)</span> String p2</span><br><span class="hljs-params">   )</span>&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;testHotKey__success&quot;</span>;<br>   &#125;<br><br><span class="hljs-comment">//类似Hystrix 的兜底方法</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">deal_testhotkey</span><span class="hljs-params">(String p1, String p2, BlockException e)</span>&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;testhotkey__fail&quot;</span>; <br>   &#125;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/4cf0c88905f8a3bc4c8fe4de1552e3d6.png" alt="1597822501876"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/59c35e9cae5431ae7d9d0e52135380b3.png" alt="1597822772165"></p><p>说明：</p><p>@SentinelResource ：处理的是Sentine1控制台配置的违规情况，有blockHandler方法配置的兜底处理</p><p>@RuntimeException：int age&#x3D;10&#x2F;0，这个是java运行时报出的运行时异异常RunTimeException，@Sentine1Resource不管</p><h3 id="系统规则"><a href="#系统规则" class="headerlink" title="系统规则"></a>系统规则</h3><blockquote><p>一般配置在网关或者入口应用中，但是这个东西有点危险，不但值不合适，就相当于系统瘫痪。</p></blockquote><p>系统自适应限流</p><p>Sentinel 系统自适应限流从整体维度对应用入口流量进行控制，结合应用的 Load、CPU 使用率、总体平均 RT、入口 QPS 和并发线程数等几个维度的监控指标，通过自适应的流控策略，让系统的入口流量和系统的负载达到一个平衡，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性。</p><p>系统规则包含下面几个重要的属性：</p><table><thead><tr><th>Field</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>highestSystemLoad</td><td><code>load1</code> 触发值，用于触发自适应控制阶段</td><td>-1 (不生效)</td></tr><tr><td>avgRt</td><td>所有入口流量的平均响应时间</td><td>-1 (不生效)</td></tr><tr><td>maxThread</td><td>入口流量的最大并发数</td><td>-1 (不生效)</td></tr><tr><td>qps</td><td>所有入口资源的 QPS</td><td>-1 (不生效)</td></tr><tr><td>highestCpuUsage</td><td>当前系统的 CPU 使用率（0.0-1.0）</td><td>-1 (不生效)</td></tr></tbody></table><h3 id="SentinelResource配置"><a href="#SentinelResource配置" class="headerlink" title="@SentinelResource配置"></a>@SentinelResource配置</h3><blockquote><p>@SentinelResource 注解，主要是指定资源名（也可以用请求路径作为资源名），和指定降级处理方法的。</p></blockquote><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.annotation.SentinelResource;<br><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.slots.block.BlockException;<br><span class="hljs-keyword">import</span> com.dkf.springcloud.entities.CommonResult;<br><span class="hljs-keyword">import</span> com.dkf.springcloud.entities.Payment;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RateLimitController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/byResource&quot;)</span><span class="hljs-comment">//处理降级的方法名</span><br>    <span class="hljs-meta">@SentinelResource(value = &quot;byResource&quot;, blockHandler = &quot;handleException&quot;)</span><br>    <span class="hljs-keyword">public</span> CommonResult <span class="hljs-title function_">byResource</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonResult</span>(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;按照资源名限流测试0K&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Payment</span>(<span class="hljs-number">2020L</span>,<span class="hljs-string">&quot;serial001&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-comment">//降级方法</span><br>    <span class="hljs-keyword">public</span> CommonResult <span class="hljs-title function_">handleException</span><span class="hljs-params">(BlockException e)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonResult</span>(<span class="hljs-number">444</span>, e.getClass().getCanonicalName() + <span class="hljs-string">&quot;\t 服务不可用&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/2ce46af6ddef61d7127ad3e0aeadb206.png" alt="1597901945492"></p><p>很明显，上面虽然自定义了兜底方法，但是耦合度太高，下面要解决这个问题。</p><h4 id="自定义全局BlockHandler处理类"><a href="#自定义全局BlockHandler处理类" class="headerlink" title="自定义全局BlockHandler处理类"></a>自定义全局BlockHandler处理类</h4><p>写一个 CustomerBlockHandler 自定义限流处理类：</p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-khnkVraZ-1615737211177)(images\1597903188558.png)]</p><h3 id="整合-openfeign-服务降级"><a href="#整合-openfeign-服务降级" class="headerlink" title="整合 openfeign 服务降级"></a>整合 openfeign 服务降级</h3><h4 id="前奏"><a href="#前奏" class="headerlink" title="前奏"></a>前奏</h4><blockquote><p>之前有 open-feign 和 hystrix 的整合，现在来实现sentinel 整合 ribbon + open-feign + fallback 进行服务熔断。</p><p>新建三个模块，两个提供者 9004、9005，和一个消费者 84</p><p>目的：</p><p>fallback管运行异常<br>blockHandIer管配置违规</p><p>上面使用sentinel有一个很明显的问题，就是sentinel，对程序内部异常（各种异常，包括超时）这种捕捉，显得很乏力，它主要是针对流量控制，系统吞吐量，或者是异常比例这种，会发生降级或熔断，但是当程序内部发生异常，直接返回给用户错误页面，根本不会触发异常比例这种降级。所以才需要整合open-feign 来解决程序内部异常时，配置相应的兜底方法</p></blockquote><p>———————————————————–两个提供者模块一致，如下：</p><p>pom依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- springcloud alibaba nacos 依赖 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <br>       <span class="hljs-comment">&lt;!-- springboot整合Web组件 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>       <span class="hljs-comment">&lt;!-- 日常通用jar包 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.dkf.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud-api-commons<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;project.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>yml配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9005</span>  <span class="hljs-comment"># / 9004</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">nacos-payment-provider</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span><br><span class="hljs-attr">management:</span><br>  <span class="hljs-attr">endpoints:</span><br>    <span class="hljs-attr">web:</span><br>      <span class="hljs-attr">exposure:</span><br>        <span class="hljs-attr">include:</span> <span class="hljs-string">&#x27;*&#x27;</span><br></code></pre></td></tr></table></figure><p>主启动类只是启动，没有其它注解。</p><p>controller :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.dkf.sprIngcloud.controller;<br><br><span class="hljs-keyword">import</span> com.dkf.springcloud.entities.CommonResult;<br><span class="hljs-keyword">import</span> com.dkf.springcloud.entities.Payment;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PaymentController</span> &#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String serverPort;<br><br>    <span class="hljs-comment">//模拟sql查询</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HashMap&lt;Long, Payment&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-keyword">static</span> &#123;<br>        hashMap.put(<span class="hljs-number">1L</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Payment</span>(<span class="hljs-number">1L</span>, <span class="hljs-string">&quot;xcxcxcxcxcxcxcxcxcxcxcxcxc11111111&quot;</span>));<br>        hashMap.put(<span class="hljs-number">2L</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Payment</span>(<span class="hljs-number">2L</span>, <span class="hljs-string">&quot;xcxcxcxcggggggggg2222222222222222&quot;</span>));<br>        hashMap.put(<span class="hljs-number">3L</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Payment</span>(<span class="hljs-number">3L</span>, <span class="hljs-string">&quot;xcxcxcxccxxcxcfafdgdgdsgdsgds33333&quot;</span>));<br>    &#125;<br><br><br>    <span class="hljs-meta">@GetMapping(&quot;/payment/get/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> CommonResult <span class="hljs-title function_">paymentSql</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span>Long id)</span>&#123;<br>        <span class="hljs-type">Payment</span> <span class="hljs-variable">payment</span> <span class="hljs-operator">=</span> hashMap.get(id);<br>        <span class="hljs-type">CommonResult</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonResult</span>(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;from mysql, server port : &quot;</span> + serverPort + <span class="hljs-string">&quot; ,查询成功&quot;</span>, payment);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>—消费者：</p><p>pom依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- 后续做Sentinel的持久化会用到的依赖 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.csp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- sentinel  --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- springcloud alibaba nacos 依赖 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>       <span class="hljs-comment">&lt;!-- springboot整合Web组件 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>       <span class="hljs-comment">&lt;!-- 日常通用jar包 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.dkf.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud-api-commons<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;project.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>yml配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">84</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span><br>    <span class="hljs-attr">sentinel:</span><br>      <span class="hljs-attr">transport:</span><br>        <span class="hljs-attr">dashboard:</span> <span class="hljs-string">localhost:8080</span><br>        <span class="hljs-attr">port:</span> <span class="hljs-number">8719</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">nacos-order-consumer</span><br></code></pre></td></tr></table></figure><p>主启动类不用说了。</p><p>config类里面注入 Resttemplate：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApplicationContextConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@LoadBalanced</span><br>    <span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title function_">getRestTemplate</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>controller 层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderController</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String PAYMENT_URL=<span class="hljs-string">&quot;http://nacos-payment-provider&quot;</span>;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RestTemplate restTemplate;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/consutomer/payment/get/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> CommonResult <span class="hljs-title function_">getPayment</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span>Long id)</span>&#123;<br>        <span class="hljs-keyword">if</span>(id &gt;= <span class="hljs-number">4</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;非法参数异常...&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> restTemplate.getForObject(PAYMENT_URL + <span class="hljs-string">&quot;/payment/get/&quot;</span> + id, CommonResult.class);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面只实现了 以nacos 作为服务注册中心，消费者使用ribbon 实现负载均衡调用提供者的效果。</p><h4 id="正式"><a href="#正式" class="headerlink" title="正式"></a>正式</h4><p>只配置 fallback:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/consutomer/payment/get/&#123;id&#125;&quot;)</span><br>   <span class="hljs-meta">@SentinelResource(value = &quot;fallback&quot;, fallback = &quot;handleFallback&quot;)</span> <span class="hljs-comment">//fallback只处理业务异常</span><br>   <span class="hljs-keyword">public</span> CommonResult <span class="hljs-title function_">getPayment</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span>Long id)</span>&#123;<br>       <span class="hljs-keyword">if</span>(id &gt;= <span class="hljs-number">4</span>)&#123;<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;非法参数异常...&quot;</span>);<br>       &#125;<span class="hljs-keyword">else</span> &#123;<br>           <span class="hljs-keyword">return</span> restTemplate.getForObject(PAYMENT_URL + <span class="hljs-string">&quot;/payment/get/&quot;</span> + id, CommonResult.class);<br>       &#125;<br>   &#125;<br><br>   <span class="hljs-comment">//兜底方法</span><br>   <span class="hljs-keyword">public</span> CommonResult <span class="hljs-title function_">handleFallback</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span>Long id, Throwable e)</span>&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonResult</span>(<span class="hljs-number">414</span>, <span class="hljs-string">&quot;---非法参数异常--&quot;</span>, e);<br>   &#125;<br></code></pre></td></tr></table></figure><blockquote><p>业务异常会被 fallback 处理，返回我们自定义的提示信息，而如果给它加上流控，并触发阈值，只能返回sentinel默认的提示信息。</p></blockquote><p>只配置blockHandler:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//@SentinelResource(value = &quot;fallback&quot;, fallback = &quot;handleFallback&quot;) //fallback只处理业务异常</span><br>    <span class="hljs-meta">@GetMapping(&quot;/consutomer/payment/get/&#123;id&#125;&quot;)</span><br>    <span class="hljs-meta">@SentinelResource(value = &quot;fallback&quot;, blockHandler = &quot;handleblockHandler&quot;)</span><br>    <span class="hljs-keyword">public</span> CommonResult <span class="hljs-title function_">getPayment</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span>Long id)</span>&#123;<br>        <span class="hljs-keyword">if</span>(id &gt;= <span class="hljs-number">4</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;非法参数异常...&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> restTemplate.getForObject(PAYMENT_URL + <span class="hljs-string">&quot;/payment/get/&quot;</span> + id, CommonResult.class);<br>        &#125;<br>    &#125;<br><br><span class="hljs-comment">//    //====fallback</span><br><span class="hljs-comment">//    public CommonResult handleFallback(@PathVariable(&quot;id&quot;)Long id, Throwable e)&#123;</span><br><span class="hljs-comment">//        return new CommonResult(414, &quot;---非法参数异常--&quot;, e);</span><br><span class="hljs-comment">//    &#125;</span><br><br>    <span class="hljs-comment">//====blockHandler                                       blockHandler的方法必须有这个参数</span><br>    <span class="hljs-keyword">public</span> CommonResult <span class="hljs-title function_">handleblockHandler</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span>Long id, BlockException e)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonResult</span>(<span class="hljs-number">414</span>, <span class="hljs-string">&quot;---非法参数异常--&quot;</span>, e);<br>    &#125;<br></code></pre></td></tr></table></figure><blockquote><p>这时候的效果就是，运行异常直接报错错误页面。在sentinel上添加一个降级规则，设置2s内触发异常2次，触发阈值以后，返回的是我们自定义的 blockhanlder 方法返回的内容。</p></blockquote><p>两者都配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//@SentinelResource(value = &quot;fallback&quot;, fallback = &quot;handleFallback&quot;) //fallback只处理业务异常</span><br>  <span class="hljs-meta">@GetMapping(&quot;/consutomer/payment/get/&#123;id&#125;&quot;)</span><br>  <span class="hljs-meta">@SentinelResource(value = &quot;fallback&quot;, blockHandler = &quot;handleblockHandler&quot;, fallback = &quot;handleFallback&quot;)</span><br>  <span class="hljs-keyword">public</span> CommonResult <span class="hljs-title function_">getPayment</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span>Long id)</span>&#123;<br>      <span class="hljs-keyword">if</span>(id &gt;= <span class="hljs-number">4</span>)&#123;<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;非法参数异常...&quot;</span>);<br>      &#125;<span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-keyword">return</span> restTemplate.getForObject(PAYMENT_URL + <span class="hljs-string">&quot;/payment/get/&quot;</span> + id, CommonResult.class);<br>      &#125;<br>  &#125;<br>  <span class="hljs-comment">//====fallback</span><br>  <span class="hljs-keyword">public</span> CommonResult <span class="hljs-title function_">handleFallback</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span>Long id, Throwable e)</span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonResult</span>(<span class="hljs-number">414</span>, <span class="hljs-string">&quot;---非法参数异常--form fallback的提示&quot;</span>, e);<br>  &#125;<br><br>  <span class="hljs-comment">//====blockHandler                                       blockHandler的方法必须有这个参数</span><br>  <span class="hljs-keyword">public</span> CommonResult <span class="hljs-title function_">handleblockHandler</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span>Long id, BlockException e)</span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonResult</span>(<span class="hljs-number">414</span>, <span class="hljs-string">&quot;---非法参数异常--&quot;</span>, e);<br>  &#125;<br></code></pre></td></tr></table></figure><blockquote><p>明显两者都是有效的，可以同时配置。</p></blockquote><h4 id="全局降级"><a href="#全局降级" class="headerlink" title="全局降级"></a>全局降级</h4><blockquote><p>上面是单个进行 fallback 和 blockhandler 的测试，下面是整合 openfeign 实现把降级方法解耦。和Hystrix 几乎一摸一样！</p></blockquote><p>还是使用上面 84 这个消费者做测试：</p><ol><li>先添加open-feign依赖：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li>yml 追加如下配置：</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 激活Sentinel对Feign的支持</span><br><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">sentinel:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><ol><li>主启动类添加注解 ： @EnableFeignClients 激活open-feign</li><li>service :</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(value = &quot;nacos-payment-provider&quot;, fallback = PaymentServiceImpl.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">PaymentService</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/payment/get/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> CommonResult <span class="hljs-title function_">paymentSql</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span>Long id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>service 实现类：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PaymentServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">PaymentService</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> CommonResult <span class="hljs-title function_">paymentSql</span><span class="hljs-params">(Long id)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonResult</span>(<span class="hljs-number">414</span>, <span class="hljs-string">&quot;open-feign 整合 sentinel 实现的全局服务降级策略&quot;</span>,<span class="hljs-literal">null</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>controller 层代码没什么特殊的，和普通调用service 一样即可。</li><li>测试，关闭提供者的项目，会触发 service 实现类的方法。</li><li>总结: 这种全局熔断，是针对 “访问提供者” 这个过程的，只有访问提供者过程中发生异常才会触发降级，也就是这些降级，是给service接口上这些提供者的方法加的，以保证在远程调用时能顺利进行。而且这明显是 fallback ，而不是 blockHandler，注意区分。</li></ol><blockquote><p>fallback 和 blockHandler 肤浅的区别：</p><p>F ： 不需要指定规则，程序内部异常均可触发（超时异常需要配置超时时间）</p><p>B : 配上也没用，必须去 Sentinel 上指定规则才会被触发。</p></blockquote><h3 id="异常忽略"><a href="#异常忽略" class="headerlink" title="异常忽略"></a>异常忽略</h3><blockquote><p>这是 @SentinelResource 注解的一个值：</p><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h6hg5ln3oaj314o0fok72.jpg"></p></blockquote><h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><blockquote><p>目前的sentinel 当重启以后，数据都会丢失，和 nacos 类似原理。需要持久化。它可以被持久化到 nacos 的数据库中。</p></blockquote><ol><li>pom依赖：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.csp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li>yml配置：</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">sentinel:</span><br>      <span class="hljs-attr">datasource:</span><br>        <span class="hljs-attr">ds1:</span>  <br>          <span class="hljs-attr">nacos:</span><br>            <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span><br>            <span class="hljs-attr">dataId:</span> <span class="hljs-string">$&#123;spring.application.name&#125;</span><br>            <span class="hljs-attr">group:</span> <span class="hljs-string">DEFAULT_GROUP</span><br>            <span class="hljs-attr">data-type:</span> <span class="hljs-string">json</span><br>            <span class="hljs-attr">rule-type:</span> <span class="hljs-string">flow</span><br></code></pre></td></tr></table></figure><ol><li>去nacos上创建一个dataid ,名字和yml配置的一致，json格式，内容如下：</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;resource&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/testA&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;limitApp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;default&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;grade&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;strategy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;controlBehavior&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;clusterMode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>resource：资源名称<br>limitApp：来源应用<br>grade：阈值类型，0表示线程数，1表示QPS，<br>count：单机阈值，<br>strategy：流控模式，0表示直接，1表示关联，2表示链路</p><p>controlBehavior:流控效果，0表示快速失败，1表示Warm Up,2表示排队等待；</p><p>cIusterM0de是否集群。</p><ol><li>启动应用，发现存在 关于 &#x2F;testA 请求路径的流控规则。</li><li>总结: 就是在 sentinel 启动的时候，去 nacos 上读取相关规则配置信息，实际上它规则的持久化，就是第三步，粘贴到nacos上保存下来，就算以后在 sentinel 上面修改了，重启应用以后也是无效的。</li></ol>]]></content>
    
    
    <categories>
      
      <category>SpringCloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud学习笔记(7)</title>
    <link href="/2022/09/23/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(7)/"/>
    <url>/2022/09/23/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(7)/</url>
    
    <content type="html"><![CDATA[<h1 id="高级部分"><a href="#高级部分" class="headerlink" title="高级部分"></a>高级部分</h1><h1 id="SpringCloud-Alibaba"><a href="#SpringCloud-Alibaba" class="headerlink" title="SpringCloud Alibaba"></a>SpringCloud Alibaba</h1><blockquote><p>alibaba 的 github上有中文文档</p></blockquote><p>spring cloud alibaba带来了什么？</p><p>2018.10.31，spring cloud Alibaba正式入驻了Spring Cloud官方孵化器，并在Maven中央库发布了第一个版本</p><p>主要功能：</p><ul><li><strong>服务限流降级</strong>：默认支持 WebServlet、WebFlux, OpenFeign、RestTemplate、Spring Cloud Gateway, Zuul, Dubbo 和 RocketMQ 限流降级功能的接入，可以在运行时通过控制台实时修改限流降级规则，还支持查看限流降级 Metrics 监控。</li><li><strong>服务注册与发现</strong>：适配 Spring Cloud 服务注册与发现标准，默认集成了 Ribbon 的支持。</li><li><strong>分布式配置管理</strong>：支持分布式系统中的外部化配置，配置更改时自动刷新。</li><li><strong>消息驱动能力</strong>：基于 Spring Cloud Stream 为微服务应用构建消息驱动能力。</li><li><strong>分布式事务</strong>：使用 @GlobalTransactional 注解， 高效并且对业务零侵入地解决分布式事务问题。。</li><li><strong>阿里云对象存储</strong>：阿里云提供的海量、安全、低成本、高可靠的云存储服务。支持在任何应用、任何时间、任何地点存储和访问任意类型的数据。</li><li><strong>分布式任务调度</strong>：提供秒级、精准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务。同时提供分布式的任务执行模型，如网格任务。网格任务支持海量子任务均匀分配到所有 Worker（schedulerx-client）上执行。</li><li><strong>阿里云短信服务</strong>：覆盖全球的短信服务，友好、高效、智能的互联化通讯能力，帮助企业迅速搭建客户触达通道。</li></ul><p>只需引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.3.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br></code></pre></td></tr></table></figure><p>组件：</p><ul><li>**<a href="https://github.com/alibaba/Sentinel">Sentinel</a>**：把流量作为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</li><li>**<a href="https://github.com/alibaba/Nacos">Nacos</a>**：一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。</li><li>**<a href="https://rocketmq.apache.org/">RocketMQ</a>**：一款开源的分布式消息系统，基于高可用分布式集群技术，提供低延时的、高可靠的消息发布与订阅服务。</li><li>**<a href="https://github.com/apache/dubbo">Dubbo</a>**：Apache Dubbo™ 是一款高性能 Java RPC 框架。</li><li>**<a href="https://github.com/seata/seata">Seata</a>**：阿里巴巴开源产品，一个易于使用的高性能微服务分布式事务解决方案。</li><li><strong><a href="https://www.aliyun.com/product/oss">Alibaba Cloud OSS</a></strong>: 阿里云对象存储服务（Object Storage Service，简称 OSS），是阿里云提供的海量、安全、低成本、高可靠的云存储服务。您可以在任何应用、任何时间、任何地点存储和访问任意类型的数据。</li><li><strong><a href="https://help.aliyun.com/document_detail/43136.html">Alibaba Cloud SchedulerX</a></strong>: 阿里中间件团队开发的一款分布式任务调度产品，提供秒级、精准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务。</li><li><strong><a href="https://www.aliyun.com/product/sms">Alibaba Cloud SMS</a></strong>: 覆盖全球的短信服务，友好、高效、智能的互联化通讯能力，帮助企业迅速搭建客户触达通道。</li></ul><p><a href="https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md">https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md</a></p><h2 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h2><p>nacos(NAming COnfiguration Service)：服务注册和配置中心</p><blockquote><p>Nacos &#x3D; Eureka + Config + Bus</p><p>替代Eureka做服务注册中心</p><p>替代Config做服务配置中心</p></blockquote><blockquote><p>github地址： <a href="https://github.com/alibaba/Nacos">https://github.com/alibaba/Nacos</a></p><p>Nacos 地址： <a href="https://nacos.io/zh-cn/">https://nacos.io/zh-cn/</a></p></blockquote><table><thead><tr><th>服务注册与服务框架</th><th>CAP模型</th><th>控制台管理</th><th>社区活跃度</th></tr></thead><tbody><tr><td>Eureka</td><td>AP高可用</td><td>支持</td><td>低(2.x版本闭源)</td></tr><tr><td>Zookeeper</td><td>CP一致</td><td>支持</td><td>中</td></tr><tr><td>Consul</td><td>CP</td><td>支持</td><td>高</td></tr><tr><td>Nacos</td><td>AP（可以切换）</td><td>支持</td><td>高</td></tr></tbody></table><p>nacos可以切换 AP 和 CP ,可使用如下命令切换成CP模式：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">curl</span> -X PUT <span class="hljs-string">&#x27;<span class="hljs-variable">$NACOS_SERVER</span>:8848/nacos/v1/ns/operator/switches?entry=serverMode&amp;value=CP&#x27;</span><br></code></pre></td></tr></table></figure><p>下载 ：</p><blockquote><p>下载地址： <a href="https://github.com/alibaba/nacos/releases/tag/1.1.4">https://github.com/alibaba/nacos/releases/tag/1.1.4</a></p><p>直接下载网址： <a href="https://github.com/alibaba/nacos/releases/download/1.1.4/nacos-server-1.1.4.zip">https://github.com/alibaba/nacos/releases/download/1.1.4/nacos-server-1.1.4.zip</a></p><p>下载压缩包以后解压，进入bin目录，打开dos窗口，执行startup命令启动它。</p><p>端口号8848</p><p>可访问 ： 【 <a href="http://localhost:8848/nacos/index.html%E3%80%91%E5%9C%B0%E5%9D%80%EF%BC%8C%E9%BB%98%E8%AE%A4%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81%E9%83%BD%E6%98%AFnacos">http://localhost:8848/nacos/index.html】地址，默认账号密码都是nacos</a></p></blockquote><h3 id="nacos服务中心"><a href="#nacos服务中心" class="headerlink" title="nacos服务中心"></a>nacos服务中心</h3><p><a href="https://nacos.io/zh-cn/docs/feature-list.html">https://nacos.io/zh-cn/docs/feature-list.html</a></p><p><a href="https://spring-cloud-alibaba-group.github.io/github-pages/hoxton/en-us/index.html#_spring_cloud_alibaba_nacos_discovery">https://spring-cloud-alibaba-group.github.io/github-pages/hoxton/en-us/index.html#_spring_cloud_alibaba_nacos_discovery</a></p><h4 id="nacos提供者"><a href="#nacos提供者" class="headerlink" title="nacos提供者"></a>nacos提供者</h4><p>新建模块 <code>alibaba-provider-payment9001</code></p><p>父pom中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.1.BUILD-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br></code></pre></td></tr></table></figure><p>子pom依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><br>       <span class="hljs-comment">&lt;!-- springcloud alibaba nacos 依赖 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <br>       <span class="hljs-comment">&lt;!-- springboot整合Web组件 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>       <span class="hljs-comment">&lt;!-- 日常通用jar包 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.wzg.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>api-commons<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;project.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>yml 配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9001</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">nacos-provider</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span><br><span class="hljs-attr">management:</span><br>  <span class="hljs-attr">endpoints:</span><br>    <span class="hljs-attr">web:</span><br>      <span class="hljs-attr">exposure:</span><br>        <span class="hljs-attr">include:</span> <span class="hljs-string">&#x27;*&#x27;</span><br></code></pre></td></tr></table></figure><p>主启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableDiscoveryClient</span> <span class="hljs-comment">// 注册</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PaymentMain9001</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>            SpringApplication.run(PaymentMain9001.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PaymentController</span> &#123;<br>    <span class="hljs-meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String serverPort;<br><br>    <span class="hljs-meta">@GetMapping(value = &quot;/payment/nacos/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPayment</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;nacos registry, serverPort: &quot;</span>+ serverPort+<span class="hljs-string">&quot;\t id&quot;</span>+id;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Nacos 自带负载均衡机制，下面创建第二个提供者9002。也可以<code>-Dserver.port=9011</code></p><p>新建 alibaba-provider-payment9002 提供者模块，clone 9001 就可以</p><h4 id="nacos消费者"><a href="#nacos消费者" class="headerlink" title="nacos消费者"></a>nacos消费者</h4><p>新建消费者 模块： alibaba-customer-nacos-order83</p><p>pom</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;project xmlns=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br>         xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>         xsi:schemaLocation=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;<br>    &lt;parent&gt;<br>        &lt;artifactId&gt;cloud2022&lt;/artifactId&gt;<br>        &lt;groupId&gt;com.wzg.springcloud&lt;/groupId&gt;<br>        &lt;version&gt;<span class="hljs-number">1.0</span>-SNAPSHOT&lt;/version&gt;<br>    &lt;/parent&gt;<br>    &lt;modelVersion&gt;<span class="hljs-number">4.0</span><span class="hljs-number">.0</span>&lt;/modelVersion&gt;<br><br>    &lt;artifactId&gt;alibaba-consumer-nacos-order83&lt;/artifactId&gt;<br><br>    &lt;dependencies&gt;<br>        &lt;!--SpringCloud ailibaba nacos --&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;com.wzg.springcloud&lt;/groupId&gt;<br>            &lt;artifactId&gt;api-commons&lt;/artifactId&gt;<br>            &lt;version&gt;$&#123;project.version&#125;&lt;/version&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;<br>            &lt;scope&gt;runtime&lt;/scope&gt;<br>            &lt;optional&gt;<span class="hljs-literal">true</span>&lt;/optional&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;<br>            &lt;artifactId&gt;lombok&lt;/artifactId&gt;<br>            &lt;optional&gt;<span class="hljs-literal">true</span>&lt;/optional&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;<br>            &lt;scope&gt;test&lt;/scope&gt;<br>        &lt;/dependency&gt;<br>    &lt;/dependencies&gt;<br><br><br>    &lt;properties&gt;<br>        &lt;maven.compiler.source&gt;<span class="hljs-number">8</span>&lt;/maven.compiler.source&gt;<br>        &lt;maven.compiler.target&gt;<span class="hljs-number">8</span>&lt;/maven.compiler.target&gt;<br>    &lt;/properties&gt;<br><br>&lt;/project&gt;<br></code></pre></td></tr></table></figure><p>yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">83</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">nacos-order-consumer</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span><br><br><br><span class="hljs-comment">#消费者将要去访问的微服务名称(注册成功进nacos的微服务提供者)</span><br><span class="hljs-attr">service-url:</span><br>  <span class="hljs-attr">nacos-user-service:</span> <span class="hljs-string">http://nacos-payment-provider</span><br></code></pre></td></tr></table></figure><p>主启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;<br><br><br><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderNacosMain83</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(OrderNacosMain83.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud.bean;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<br><br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApplicationContextConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@LoadBalanced</span><br>    <span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title function_">getRestTemplate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud.controller;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderNacosController</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RestTemplate restTemplate;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;service-url.nacos-user-service&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String serverURL;<br><br>    <span class="hljs-meta">@GetMapping(value = &quot;/consumer/payment/nacos/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">paymentInfo</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;<br>        <span class="hljs-keyword">return</span> restTemplate.getForObject(serverURL + <span class="hljs-string">&quot;/payment/nacos/&quot;</span> + id, String.class);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="各种服务中心对比"><a href="#各种服务中心对比" class="headerlink" title="各种服务中心对比"></a>各种服务中心对比</h4><table><thead><tr><th>服务注册与服务框架</th><th>CAP模型</th><th>控制台管理</th><th>社区活跃度</th></tr></thead><tbody><tr><td>Eureka</td><td>AP</td><td>支持</td><td>低(2.x版本闭源)</td></tr><tr><td>Zookeeper</td><td>CP</td><td>支持</td><td>中</td></tr><tr><td>Consul</td><td>CP</td><td>支持</td><td>高</td></tr><tr><td>Nacos</td><td>AP&#x2F;CP</td><td>支持</td><td>高</td></tr></tbody></table><table><thead><tr><th>组件名</th><th>语言</th><th>CAP</th><th>服务健康检查</th><th>对外暴露接口</th><th>SpringCloud集合</th></tr></thead><tbody><tr><td>Eureka</td><td>java</td><td>AP</td><td>可配支持</td><td>HTTP</td><td>已集成</td></tr><tr><td>Consul</td><td>Go</td><td>CP</td><td>支持</td><td>HTTP&#x2F;DNS</td><td>已集成</td></tr><tr><td>Zookeeper</td><td>java</td><td>CP</td><td>支持</td><td>客户端</td><td>已集成</td></tr></tbody></table><p>NACOS支持CP和AP切换</p><p><img src="https://img-blog.csdnimg.cn/img_convert/fe93ab4dbfdc520c411ca49163d6821a.png"></p><h3 id="nacos配置中心"><a href="#nacos配置中心" class="headerlink" title="nacos配置中心"></a>nacos配置中心</h3><h5 id="配置中心对比"><a href="#配置中心对比" class="headerlink" title="配置中心对比"></a>配置中心对比</h5><table><thead><tr><th>对比项目</th><th>Spring Cloud Config</th><th>Apollo</th><th>Nacos</th></tr></thead><tbody><tr><td>配置实时推送</td><td>支持(Spring Cloud Bus)</td><td>支持(HTTP长轮询1s内)</td><td>支持(HTTP长轮询1s内)</td></tr><tr><td>版本管理</td><td>支持(Git)</td><td>支持</td><td>支持</td></tr><tr><td>配置回滚</td><td>支持(Git)</td><td>支持</td><td>支持</td></tr><tr><td>灰度发布</td><td>支持</td><td>支持</td><td>不支持</td></tr><tr><td>权限管理</td><td>支持(依赖Git)</td><td>支持</td><td>不支持</td></tr><tr><td>多集群</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>多环境</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>监听查询</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>多语言</td><td>只支持Java</td><td>主流语言，提供了Open API</td><td>主流语言，提供了Open API</td></tr><tr><td>配置格式校验</td><td>不支持</td><td>支持</td><td>支持</td></tr><tr><td>单机读(QPS)</td><td>7(限流所致)</td><td>9000</td><td>15000</td></tr><tr><td>单击写(QPS)</td><td>5(限流所致)</td><td>1100</td><td>1800</td></tr><tr><td>3节点读 (QPS)</td><td>21(限流所致)</td><td>27000</td><td>45000</td></tr><tr><td>3节点写 (QPS)</td><td>5(限流所致)</td><td>3300</td><td>5600</td></tr></tbody></table><p>从配置中心角度来看，性能方面Nacos的读写性能最高，Apollo次之，Spring Cloud Config依赖Git场景不适合开放的大规模自动化运维API。功能方面Apollo最为完善，nacos具有Apollo大部分配置管理功能，而Spring Cloud Config不带运维管理界面，需要自行开发。Nacos的一大优势是整合了注册中心、配置中心功能，部署和操作相比Apollo都要直观简单，因此它简化了架构复杂度，并减轻运维及部署工作。</p><blockquote><p>nacos 还可以作为服务配置中心，下面是案例，创建一个模块，从nacos上读取配置信息。</p><p>nacos 作为配置中心，不需要像springcloud config 一样做一个Server端模块。</p></blockquote><p>新建模块 <code>alibaba-config-nacos-client3377</code></p><p>pom依赖：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;project xmlns=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br>         xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>         xsi:schemaLocation=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;<br>    &lt;parent&gt;<br>        &lt;artifactId&gt;cloud2022&lt;/artifactId&gt;<br>        &lt;groupId&gt;com.wzg.springcloud&lt;/groupId&gt;<br>        &lt;version&gt;<span class="hljs-number">1.0</span>-SNAPSHOT&lt;/version&gt;<br>    &lt;/parent&gt;<br>    &lt;modelVersion&gt;<span class="hljs-number">4.0</span><span class="hljs-number">.0</span>&lt;/modelVersion&gt;<br><br>    &lt;artifactId&gt;alibaba-config-nacos-client3377&lt;/artifactId&gt;<br><br>    &lt;dependencies&gt;<br>        &lt;!--nacos-config--&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br>        &lt;!--nacos-discovery--&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br>        &lt;!--web + actuator--&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br>        &lt;!--一般基础配置--&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;<br>            &lt;scope&gt;runtime&lt;/scope&gt;<br>            &lt;optional&gt;<span class="hljs-literal">true</span>&lt;/optional&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;<br>            &lt;artifactId&gt;lombok&lt;/artifactId&gt;<br>            &lt;optional&gt;<span class="hljs-literal">true</span>&lt;/optional&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;<br>            &lt;scope&gt;test&lt;/scope&gt;<br>        &lt;/dependency&gt;<br>    &lt;/dependencies&gt;<br><br>    &lt;properties&gt;<br>        &lt;maven.compiler.source&gt;<span class="hljs-number">8</span>&lt;/maven.compiler.source&gt;<br>        &lt;maven.compiler.target&gt;<span class="hljs-number">8</span>&lt;/maven.compiler.target&gt;<br>    &lt;/properties&gt;<br><br>&lt;/project&gt;<br></code></pre></td></tr></table></figure><p>bootstrap.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">3377</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">nacos-config-client</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span> <span class="hljs-comment">#服务注册中心地址</span><br>      <span class="hljs-attr">config:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span> <span class="hljs-comment">#配置中心地址</span><br>        <span class="hljs-attr">file-extension:</span> <span class="hljs-string">yaml</span> <span class="hljs-comment">#指定yaml格式的配置</span><br>        <span class="hljs-attr">group:</span> <span class="hljs-string">TEST_GROUP</span><br>        <span class="hljs-attr">namespace:</span> <span class="hljs-string">50d6d64e-f273-406a-abf8-9e45e2f2a7b6</span><br><br><span class="hljs-comment"># $&#123;spring.application.name&#125;-$&#123;spring.profile.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125;</span><br><span class="hljs-comment"># nacos-config-client-dev.yaml</span><br><br><span class="hljs-comment"># nacos-config-client-test.yaml   ----&gt; config.info</span><br></code></pre></td></tr></table></figure><p>application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">dev</span><br>    <span class="hljs-comment">#active: test # 表示测试环境</span><br><span class="hljs-comment">#    active: info</span><br></code></pre></td></tr></table></figure><p>主启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;<br><br><br><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NacosConfigClientMain3377</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(NacosConfigClientMain3377.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud.controller;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.cloud.context.config.annotation.RefreshScope;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RefreshScope</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConfigClientController</span> &#123;<br>    <span class="hljs-meta">@Value(&quot;$&#123;config.info&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String configInfo;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/config/info&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getConfigInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> configInfo;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>nacos同springcloud-config一样，在项目初始化时，要先从配置中心进行配置拉取，拉取配置之后，才能保证项目的正常启动。</p><p>springboot的配置文件的加载是存在优先熟悉怒的，bootstrap优先级高于application。（bootstrap中放共性，application中放个性）</p><p>nacos中的dataid的组成格式及与springboot配置文件中的匹配规则：</p><p>在nacos中，消费端要的文件怎么和nacos中的文件匹配呢？</p><p>在 Nacos Spring Cloud 中，<code>dataId</code> 的完整格式如下：（就是说在nacos端我们怎么命名文件的）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">$&#123;prefix&#125;-$&#123;spring.profiles.active&#125;.$&#123;file-extension&#125;<br>1<br></code></pre></td></tr></table></figure><ul><li><code>prefix</code> 默认为 <code>spring.application.name</code> 的值，也可以通过配置项 <code>spring.cloud.nacos.config.prefix</code>来配置。</li><li><code>spring.profiles.active</code> 即为当前环境对应的 profile，详情可以参考 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-profiles.html#boot-features-profiles">Spring Boot文档</a>。 <strong>注意：当 <code>spring.profiles.active</code> 为空时，对应的连接符 <code>-</code> 也将不存在，dataId 的拼接格式变成 <code>$&#123;prefix&#125;.$&#123;file-extension&#125;</code></strong></li><li><code>file-exetension</code> 为配置内容的数据格式，可以通过配置项 <code>spring.cloud.nacos.config.file-extension</code> 来配置。目前只支持 <code>properties</code> 和 <code>yaml</code> 类型。（注意nacos里必须使用yaml）</li></ul><blockquote><p>从上面可以看到重要的一点，配置文件的名称第二项，spring.profiles.active 是依据当前环境的profile属性值的，也就是这个值如果是 dev，即开发环境，它就会读取 dev 的配置信息，如果是test，测试环境，它就会读取test的配置信息，就是从 spring.profile.active 值获取当前应该读取哪个环境下的配置信息。</p></blockquote><p>所以要配置spring.profiles.active，新建application.yml文件，添加如下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">dev</span> <span class="hljs-comment"># 表示开发环境</span><br></code></pre></td></tr></table></figure><p>综合以上说明，和下面的截图，Nacos 的dataid（类似文件名）应为： nacos-config-client-dev.yaml (必须是yaml)</p><p><img src="https://img-blog.csdnimg.cn/img_convert/5954d90819e12cafc9972a8e0977561d.png"></p><p>当修改配置值，会发现 3377 上也已经修改，Nacos自带自动刷新功能！</p><p>nacos的优势在哪：</p><ul><li>问题1：实际开发者，通常一个系统会准备dev&#x2F;test&#x2F;prod环境。如何保证环境启动时服务能正确读取nacos上相应环境的配置文件<ul><li>用namespace区分环境</li></ul></li><li>问题2：一个大型分布式微服务系统有很多微服务子项目，每个微服务项目又都会有相应的开发环境、测试环境、预发环境、正式环境。那怎么对微服务配置进行管理呢？<ul><li>用group把不同的微服务划分到同一个分组里面去</li></ul></li></ul><h5 id="dgn方案"><a href="#dgn方案" class="headerlink" title="dgn方案"></a>dgn方案</h5><p><code>dataid</code>方案（就是nacos的文件名）：</p><ul><li>指定spring.profile.active和配置文件的dataID来使不太环境下读取不同的配置</li><li>配置空间+配置分组+新建dev和test两个dataid：就是创建-后不同的两个文件名<code>nacos-config-client-dev.yaml</code>、<code>nacos-config-client-test.yaml</code></li><li>通过IDEA里的spring.profile.active属性就能进行多环境下配置文件的读取</li></ul><p><code>Group</code>方案（默认DEFAULT_GROUP）：</p><ul><li>在nacos创建配置文件时，给文件指定分组。</li><li>在IDEA中该group内容</li><li>实现的功能：当修改开发环境时，只会从同一group中进行切换。</li></ul><p><code>namespace</code>方案（默认public）：</p><ul><li>这个是不允许删除的，可以创建一个新的命名空间，会自动给创建的命名空间一个流水号。</li><li>在nacos新建命名空间，自动出现7d8f0f5a-6a53-4785-9686-dd460158e5d4</li><li>在IDEA的yml中指定命名空间namespace: 7d8f0f5a-6a53-4785-9686-dd460158e5d4</li></ul><p>最后，dataid、group、namespace 三者关系如下：（不同的dataid，是相互独立的，不同的group是相互隔离的，不同的namespace也是相互独立的）</p><blockquote><p>上面只是小打小闹，下面才是真正的高级操作。</p></blockquote><p>搭建集群必须持久化，不然多台机器上的nacos的配置信息不同，造成系统错乱。它不同于单个springcloud config，没有集群一说，而且数据保存在github上，也不同于eureka，配置集群就完事了，没有需要保存的配置信息。</p><h3 id="nacos集群-x2F-持久化"><a href="#nacos集群-x2F-持久化" class="headerlink" title="nacos集群&#x2F;持久化"></a>nacos集群&#x2F;持久化</h3><p>nacos挂了怎么办？</p><p><a href="https://nacos.io/zh-cn/docs/cluster-mode-quick-start.html">https://nacos.io/zh-cn/docs/cluster-mode-quick-start.html</a></p><blockquote><p>一台linux虚拟机：nginx服务器（虚拟ip），3个nacos服务，一个mysql数据库。</p><p>nginx的安装参考之前学，使用 ContOs7 至少需要安装gcc库，不然无法编译安装【yum install gcc】</p><p>nacos下载linux版本的 tar.gz 包：<a href="https://github.com/alibaba/nacos/releases/download/1.1.4/nacos-server-1.1.4.tar.gz">https://github.com/alibaba/nacos/releases/download/1.1.4/nacos-server-1.1.4.tar.gz</a></p></blockquote><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h6gczbr0l3j30iu0fh40g.jpg"></p><p>Nacos支持三种部署模式 <a href="https://nacos.io/zh-cn/docs/deployment.html">https://nacos.io/zh-cn/docs/deployment.html</a></p><ul><li>单机模式 - 用于测试和单机试用。</li><li>集群模式 - 用于生产环境，确保高可用。</li><li>多集群模式 - 用于多数据中心场景。</li></ul><p>单机模式支持mysql：在0.7版本之前，在单机模式时nacos使用<strong>嵌入式数据库</strong>（derby，他的pom里有这个依赖）实现数据的存储，不方便观察数据存储的基本情况。0.7版本增加了支持mysql数据源能力，具体的操作步骤：</p><ul><li><p>1.安装数据库，版本要求：5.6.5+</p></li><li><p>2.初始化mysql数据库，数据库初始化文件：nacos&#x2F;conf&#x2F;nacos-mysql.sql。创建个database数据库nacos_devtest</p></li><li><p>3.修改IDEA中nacos&#x2F;conf&#x2F;application.properties文件(切换数据库)，增加支持mysql数据源配置（目前只支持mysql），添加mysql数据源的url、用户名和密码。</p></li><li><p>&#96;&#96;&#96;properties</p><h1 id="切换数据库"><a href="#切换数据库" class="headerlink" title="切换数据库"></a>切换数据库</h1><p>spring.datasource.platform&#x3D;mysql</p><p>db.num&#x3D;1<br>db.url.0&#x3D;jdbc:mysql:&#x2F;&#x2F;11.162.196.16:3306&#x2F;nacos_devtest?characterEncoding&#x3D;utf8&amp;connectTimeout&#x3D;1000&amp;socketTimeout&#x3D;3000&amp;autoReconnect&#x3D;true<br>db.user&#x3D;root<br>db.password&#x3D;w2757312346</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs awk"><br>- 再以单机模式启动nacos(重启)，nacos所有写嵌入式数据库的数据都写到了mysql<br><br>单击的数据库都是独立的，我们得让他们共用一个数据库<br><br>Nacos集群配置<br><br>环境准备：<br><br><span class="hljs-number">1</span>. <span class="hljs-number">64</span> bit OS Linux<span class="hljs-regexp">/Unix/</span>Mac，推荐使用Linux系统。<br><span class="hljs-number">2</span>. <span class="hljs-number">64</span> bit JDK <span class="hljs-number">1.8</span>+；[下载](http:<span class="hljs-regexp">//</span>www.oracle.com<span class="hljs-regexp">/technetwork/</span>java<span class="hljs-regexp">/javase/</span>downloads<span class="hljs-regexp">/jdk8-downloads-2133151.html).[配置](https:/</span><span class="hljs-regexp">/docs.oracle.com/</span>cd<span class="hljs-regexp">/E19182-01/</span><span class="hljs-number">820</span>-<span class="hljs-number">7851</span><span class="hljs-regexp">/inst_cli_jdk_javahome_t/</span>)。<br><span class="hljs-number">3</span>. Maven <span class="hljs-number">3.2</span>.x+；[下载](https:<span class="hljs-regexp">//m</span>aven.apache.org<span class="hljs-regexp">/download.cgi).[配置](https:/</span><span class="hljs-regexp">/maven.apache.org/</span>settings.html)。<br><span class="hljs-number">4</span>. <span class="hljs-number">3</span>个或<span class="hljs-number">3</span>个以上Nacos节点才能构成集群。<br><br>开始配置集群：<br><br><span class="hljs-number">1</span>. 首先对 nacos 进行持久化操作，操作如上面一致。<br><br><span class="hljs-number">2</span>. 修改 nacos/conf 下的cluster.conf文件，添加如下内容:<br><br>   ```sh<br>   <span class="hljs-comment"># it is ip</span><br>   <span class="hljs-comment"># 告诉这3个集群结点是一组的 # 不能写127.0.0.1，必须是linux hostname -i能够识别的ip</span><br>   <span class="hljs-number">192.168</span>.<span class="hljs-number">200.130</span>:<span class="hljs-number">3333</span><br>   <span class="hljs-number">192.168</span>.<span class="hljs-number">200.130</span>:<span class="hljs-number">4444</span><br>   <span class="hljs-number">192.168</span>.<span class="hljs-number">200.130</span>:<span class="hljs-number">5555</span><br></code></pre></td></tr></table></figure></li></ul><ol start="3"><li><p>修改nacos&#x2F;conf&#x2F;application.properties文件，添加设置我们的数据库信息</p></li><li><p>模拟三台nacos服务，编辑nacos的startup.sh脚本，使他能够支持不同的端口启动多次。<br>集群启动，我们希望可以类似其他软件的shell命令，传递不同的端口号启动不同的nacos实例。</p><p><code>vim startup.sh</code></p><p><img src="https://img-blog.csdnimg.cn/img_convert/b39e4b09d1da87d2598bfdbf31c1d751.png" alt="1597812799242"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/c159b991ac8444ab61bc240a6c4899bc.png" alt="1597813020494"></p><p><code>nohup $JAVA -Dserver.port=$&#123;PORT&#125; $&#123;JAVA_POT&#125; nacoas.nacos &gt;&gt; $&#123;BASE_DIR&#125;/logs/start.out 2&gt;&amp;1 &amp;</code></p></li><li><p>依次执行命令启动3个nacos集群：<br><code>./startup.sh -p 3333</code> 表示启动端口号为3333的nacos服务器实例<br><code>./startup.sh -p 4444</code><br><code>./startup.sh -p 5555</code><br><code>ps -ef | grep nacos | grep -v grep | wc -l</code></p></li><li><p>修改nginx配置，把他作为负载均衡：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim ./nginx/conf/nginx.conf<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/a377948306a03bb10de4dd9657578a22.png" alt="1597813917440"></p></li><li><p>启动nginx：<code>./nginx -c ../conf/nginx.conf</code></p></li><li><p>通过nginx访问：192.168.1.2:1111&#x2F;nacos&#x2F;#&#x2F;login</p></li><li><p>使用 9002 模块注册进Nacos集群，并获取它上面配置文件的信息application.yml中的<code>server-addr: 192.168.1.2:1111</code>，进行测试。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>SpringCloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud学习笔记(6)</title>
    <link href="/2022/09/21/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(6)/"/>
    <url>/2022/09/21/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(6)/</url>
    
    <content type="html"><![CDATA[<h1 id="消息驱动"><a href="#消息驱动" class="headerlink" title="消息驱动"></a>消息驱动</h1><h2 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h2><p>需求：消息中间件很多，希望向上抽象一个接口，我们不关心底层用的是什么消息中间件</p><p>屏蔽底层消息中间件的差异，降低切换成本，统一消息的编程模型</p><p>就像 JDBC 形成一种规范，统一不同数据库的接口</p><p><img src="https://img-blog.csdnimg.cn/img_convert/d1710ba414fcbc3720ffea05aee186b5.png" alt="1597725567239"></p><p>什么是SpringCloud Stream</p><p>官方定义SpringCloud Stream是一个构建消息驱动微服务的框架。<a href="https://spring.io/projects/spring-cloud-stream#overview">https://spring.io/projects/spring-cloud-stream#overview</a></p><p>SpringCloud Stream为一些供应商的消息中间件产品提供了个性化的自动化配置实现，引用了发布-订阅、消费组、分区的三个核心概念</p><p>目前仅支持RabbitMQ、Kafka。</p><blockquote><p>流程：</p><p>pub生产者发送消息，BROKER接收消息放到队列中，订阅者接收到消息</p><p>选修必须走特定的通道：下嘻嘻通道MessageChannel</p><p>消息通道里的消息如何消费呢？谁负责收发处理：消息通道MessageChannel的子接口SubscribableChannel，由MessageHandler消息处理器所订阅</p><p>比如java里用的是RabbitMQ，大数据里用的是kafka，来回切换麻烦，链各个消息中间件的架构上不同</p><p>像RabbitMQ有exchange，kafka有Topic和Partitions分区</p><p>这些中间件的差异导致我们实际项目开发给我们造成了一定的困难，我们如果用了两个消息队列的其中一种，后面的业务需求，我们想往另外一种消息队列进行迁移，这时候无疑就是一个灾难性的，一大堆东西都要重新推倒重新做，因为它跟我们的系统耦合了，这时候SpringCloud Stream给我们提供了一种解耦合的方式。</p></blockquote><p>Stream的消息通信方式遵循了<strong>发布-订阅模式</strong></p><p>通过定义绑定器Binder作为中间层，实现了应用程序与消息中间件细节之间的隔离。INPUT对应于生产者，OUTPUT对应于消费者</p><p><img src="https://img-blog.csdnimg.cn/img_convert/65fa5f0d45eba8e13f3c3d5614eae009.png" alt="img"></p><p>Stream标准流程套路：</p><ul><li>binder：很方便的连接中间件，屏蔽差异</li><li>Channel：通道，是队列Queue的一种抽象，在消息通讯系统中就是实现存储和转发的媒介，通过channel对队列进行配置</li><li>Source（生产）和sink（消费）：简单地可理解为参照对象是spring cloud stream自身，从stream发布消息就是输出，接收消息就是输入</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/074eeb14cc99b7067376138d25cc750b.png" alt="1597730581088"></p><p>常用注解：</p><table><thead><tr><th>组成</th><th>说明</th></tr></thead><tbody><tr><td>Middleware</td><td>中间件，目前只支FRabbitMQ和Kafka</td></tr><tr><td>Binder</td><td>Binder是应用与消息中间件之间的封装，目前实行了KafKa和RabbitMQ的Binder,通过 Binder可以很方便的连接中间件，可以动态的改变消息类型（对应kafka的topic， RabbitMQ的exchange)，这些都可以通过配置文件来实现</td></tr><tr><td>@Input</td><td>注解标识输入通道，通过该输入通接收到的消息息进入应用程序</td></tr><tr><td>@Output</td><td>注解标识输出通道，发布的消息将通过该通道离开应用程序</td></tr><tr><td>@StreamListener</td><td>监听队列，用于消费者的队列的消息接收</td></tr><tr><td>@EnableBinding</td><td>指信道channel和exchange绑定在一起</td></tr></tbody></table><h3 id="消息生产者"><a href="#消息生产者" class="headerlink" title="消息生产者"></a>消息生产者</h3><p>要新建3个子模块</p><ul><li>cloud-stream-rabbitmq-provide8801：作为生产者进行发消息模块</li><li>cloud-stream-rabbitmq-consumer8802：作为消息接收模块</li><li>cloud-stream-rabbitmq-consumer8802：作为消息接收模块</li></ul><p>新建模块 stream-rabbitmq-provider8801</p><p>8801 pom依赖：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;project xmlns=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br>         xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>         xsi:schemaLocation=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;<br>    &lt;parent&gt;<br>        &lt;artifactId&gt;cloud2022&lt;/artifactId&gt;<br>        &lt;groupId&gt;com.wzg.springcloud&lt;/groupId&gt;<br>        &lt;version&gt;<span class="hljs-number">1.0</span>-SNAPSHOT&lt;/version&gt;<br>    &lt;/parent&gt;<br>    &lt;modelVersion&gt;<span class="hljs-number">4.0</span><span class="hljs-number">.0</span>&lt;/modelVersion&gt;<br><br>    &lt;artifactId&gt;stream-rabbitmq-provide8801&lt;/artifactId&gt;<br><br>    &lt;dependencies&gt;<br>        &lt;!-- stream-rabbit --&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-cloud-starter-stream-rabbit&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;!--eureka-client 目前，这个不是必须的--&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;<br>            &lt;scope&gt;runtime&lt;/scope&gt;<br>            &lt;optional&gt;<span class="hljs-literal">true</span>&lt;/optional&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;<br>            &lt;artifactId&gt;lombok&lt;/artifactId&gt;<br>            &lt;optional&gt;<span class="hljs-literal">true</span>&lt;/optional&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;<br>            &lt;scope&gt;test&lt;/scope&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;<br>            &lt;groupId&gt;com.wzg.springcloud&lt;/groupId&gt;<br>            &lt;artifactId&gt;api-commons&lt;/artifactId&gt;<br>            &lt;version&gt;<span class="hljs-number">1.0</span>-SNAPSHOT&lt;/version&gt;<br>        &lt;/dependency&gt;<br>    &lt;/dependencies&gt;<br><br>    &lt;properties&gt;<br>        &lt;maven.compiler.source&gt;<span class="hljs-number">8</span>&lt;/maven.compiler.source&gt;<br>        &lt;maven.compiler.target&gt;<span class="hljs-number">8</span>&lt;/maven.compiler.target&gt;<br>    &lt;/properties&gt;<br><br>&lt;/project&gt;<br></code></pre></td></tr></table></figure><p>yml 配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8801</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">stream-provider</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">stream:</span><br>      <span class="hljs-attr">binders:</span> <span class="hljs-comment"># 在此配置要绑定的rabbitMQ的服务信息</span><br>        <span class="hljs-attr">defaultRabbit:</span> <span class="hljs-comment"># 表示定义的名称，用于和binding整合</span><br>          <span class="hljs-attr">type:</span> <span class="hljs-string">rabbit</span>  <span class="hljs-comment"># 消息组件类型</span><br>          <span class="hljs-attr">environment:</span>  <span class="hljs-comment"># 设置rabbitmq的相关环境配置</span><br>            <span class="hljs-attr">spring:</span><br>              <span class="hljs-attr">rabbitmq:</span><br>                <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>                <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span><br>                <span class="hljs-attr">username:</span> <span class="hljs-string">guest</span><br>                <span class="hljs-attr">password:</span> <span class="hljs-string">guest</span><br>      <span class="hljs-attr">bindings:</span>  <span class="hljs-comment"># 服务的整合处理</span><br>        <span class="hljs-attr">output:</span>   <span class="hljs-comment"># 表示是生产者，向rabbitMQ发送消息</span><br>          <span class="hljs-attr">destination:</span> <span class="hljs-string">studyExchange</span>  <span class="hljs-comment"># 表示要使用的Exchange名称</span><br>          <span class="hljs-attr">content-type:</span> <span class="hljs-string">application/json</span>  <span class="hljs-comment"># 设置消息类型，本次是json，文本是 &quot;text/plain&quot;</span><br><span class="hljs-comment">#          binder: defaultRabbit  # 设置要绑定的消息服务的具体配置</span><br><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://eureka7001.com:7001/eureka/</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">lease-renewal-interval-in-seconds:</span> <span class="hljs-number">2</span> <span class="hljs-comment"># 设置心跳时间，默认是30秒</span><br>    <span class="hljs-attr">lease-expiration-duration-in-seconds:</span> <span class="hljs-number">5</span> <span class="hljs-comment"># 最大心跳间隔不能超过5秒,默认90秒</span><br>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">send-8801.com</span> <span class="hljs-comment"># 在信息列表显示主机名称</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 访问路径变为ip地址</span><br></code></pre></td></tr></table></figure><p>主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Provider8801</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(Provider8801.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>业务类：（此业务类不是以前的service，而实负责推送消息的服务类）</p><ul><li>发送消息的接口类</li><li>发送消息接口类的实现类</li><li>controller</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud.serivce;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IMessageProvider</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">send</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud.serivce;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">import</span> org.springframework.cloud.stream.annotation.EnableBinding;<br><span class="hljs-keyword">import</span> org.springframework.cloud.stream.messaging.Source;<br><span class="hljs-keyword">import</span> org.springframework.messaging.MessageChannel;<br><span class="hljs-keyword">import</span> org.springframework.messaging.support.MessageBuilder;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><span class="hljs-keyword">import</span> java.util.UUID;<br><br><span class="hljs-meta">@EnableBinding(Source.class)</span>  <span class="hljs-comment">// 定义消息的推送管道 output//不是和controller打交道的service,而是发送消息的推送服务类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IMessageProviderImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IMessageProvider</span> &#123;<br>    <span class="hljs-comment">//上面是自定义的接口</span><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> MessageChannel output;<span class="hljs-comment">//消息发送管道</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">send</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">serial</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString();<br>        output.send(MessageBuilder.withPayload(serial).build());<span class="hljs-comment">// 绑定器</span><br>        System.out.println(<span class="hljs-string">&quot;******serial: &quot;</span> + serial);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud.controller;<br><br><span class="hljs-keyword">import</span> com.wzg.springcloud.serivce.IMessageProvider;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SendMessageController</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span> <span class="hljs-comment">// 自己的类</span><br>    <span class="hljs-keyword">private</span> IMessageProvider messageProvider;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/sendMessage&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">sendMessage</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> messageProvider.send(); <span class="hljs-comment">// 自己定义的方法，但是里面调用了MessageChannel.send()方法</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>启动Eureka Server 7001，再启动8801，进行测试，看是否rabbitMQ中有我们发送的消息。</p></blockquote><h3 id="消息消费者"><a href="#消息消费者" class="headerlink" title="消息消费者"></a>消息消费者</h3><p>新建模块 stream-rabbitmq-consumer8802</p><p>pom依赖和生产者一样。</p><p>yml配置: 在 stream的配置上，和生产者只有一处不同的地方，output 改成 input</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8802</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">cloud-stream-provider</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">stream:</span><br>      <span class="hljs-attr">binders:</span> <span class="hljs-comment"># 在次配置要绑定的rabbitMQ的服务信息</span><br>        <span class="hljs-attr">defaultRabbit:</span> <span class="hljs-comment"># 表示定义的名称，用于和binding整合</span><br>          <span class="hljs-attr">type:</span> <span class="hljs-string">rabbit</span>  <span class="hljs-comment"># 消息组件类型</span><br>          <span class="hljs-attr">environment:</span>  <span class="hljs-comment"># 设置rabbitmq的相关环境配置</span><br>            <span class="hljs-attr">spring:</span><br>              <span class="hljs-attr">rabbitmq:</span><br>                <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>                <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span><br>                <span class="hljs-attr">username:</span> <span class="hljs-string">guest</span><br>                <span class="hljs-attr">password:</span> <span class="hljs-string">guest</span><br>      <span class="hljs-attr">bindings:</span>  <span class="hljs-comment"># 服务的整合处理</span><br>        <span class="hljs-attr">input:</span>   <span class="hljs-comment"># 表示是消费者，这里是唯一和生产者不同的地方，向rabbitMQ发送消息</span><br>          <span class="hljs-attr">destination:</span> <span class="hljs-string">studyExchange</span>  <span class="hljs-comment"># 表示要使用的Exchange名称</span><br>          <span class="hljs-attr">content-type:</span> <span class="hljs-string">application/json</span>  <span class="hljs-comment"># 设置消息类型，本次是json，文本是 &quot;text/plain&quot;</span><br>          <span class="hljs-attr">binder:</span> <span class="hljs-string">defaultRabbit</span>  <span class="hljs-comment"># 设置要绑定的消息服务的具体配置</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://eureka7001.com:7001/eureka/</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">lease-renewal-interval-in-seconds:</span> <span class="hljs-number">2</span> <span class="hljs-comment"># 设置心跳时间，默认是30秒</span><br>    <span class="hljs-attr">lease-expiration-duration-in-seconds:</span> <span class="hljs-number">5</span> <span class="hljs-comment"># 最大心跳间隔不能超过5秒,默认90秒</span><br>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">receive-8802.com</span> <span class="hljs-comment"># 在信息列表显示主机名称</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 访问路径变为ip地址</span><br></code></pre></td></tr></table></figure><p>接收消息的业务类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.cloud.stream.annotation.EnableBinding;<br><span class="hljs-keyword">import</span> org.springframework.cloud.stream.annotation.StreamListener;<br><span class="hljs-keyword">import</span> org.springframework.cloud.stream.messaging.Sink;<br><span class="hljs-keyword">import</span> org.springframework.messaging.Message;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@EnableBinding(Sink.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConsumerController</span> &#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String serverPort;<br><br>    <span class="hljs-meta">@StreamListener(Sink.INPUT)</span> <span class="hljs-comment">// 消费者</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">input</span><span class="hljs-params">(Message&lt;String&gt; message)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;消费者1号，serverport: &quot;</span> + serverPort + <span class="hljs-string">&quot;，接受到的消息：&quot;</span> + message.getPayload());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="配置分组消费"><a href="#配置分组消费" class="headerlink" title="配置分组消费"></a>配置分组消费</h3><p>新建 stream-rabbitmq-consumer8803 模块：</p><blockquote><p>8803 就是 8802 clone出来的。</p></blockquote><p>当运行时，会有两个问题。</p><p>第一个问题，两个消费者都接收到了消息，这属于重复消费。例如，消费者进行订单创建，这样就创建了两份订单，会造成系统错误。</p><p>注意在stream中处同一个group中的多个消费者是竞争关系，就能保证消息只会被其中一个应用消费一次。</p><p>不同组是可以全面消费（重复消费）的</p><p>同一组内会发生竞争关系，只有其中一个可以消费。</p><blockquote><p>Stream默认不同的微服务是不同的组</p></blockquote><p><img src="https://img-blog.csdnimg.cn/img_convert/e8673ce5d424abd401f623b921773667.png" alt="1597731630685"></p><p>对于重复消费这种问题，导致的原因是默认每个微服务是不同的group，组流水号不一样，所以被认为是不同组，两个都可以消费。</p><p>解决的办法就是自定义配置分组：</p><p>消费者 yml 文件配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># 8802 的消费者</span><br><span class="hljs-attr">bindings:</span><br>       <span class="hljs-attr">input:</span>   <br>         <span class="hljs-attr">destination:</span> <span class="hljs-string">studyExchange</span>  <br>         <span class="hljs-attr">content-type:</span> <span class="hljs-string">application/json</span>  <br>         <span class="hljs-attr">binder:</span> <span class="hljs-string">defaultRabbit</span>  <br>         <span class="hljs-attr">group:</span> <span class="hljs-string">dkfA</span>  <span class="hljs-comment"># 自定义分组配置</span><br>         <br>   <span class="hljs-comment"># 8803 的消费者</span><br><span class="hljs-attr">bindings:</span><br>       <span class="hljs-attr">input:</span>   <br>         <span class="hljs-attr">destination:</span> <span class="hljs-string">studyExchange</span>  <br>         <span class="hljs-attr">content-type:</span> <span class="hljs-string">application/json</span>  <br>         <span class="hljs-attr">binder:</span> <span class="hljs-string">defaultRabbit</span>  <br>         <span class="hljs-attr">group:</span> <span class="hljs-string">dkfB</span>  <span class="hljs-comment"># 自定义分组配置</span><br></code></pre></td></tr></table></figure><p>当两个消费者配置的 group 都为 dkfA 时，就属于同一组，就不会被重复消费。（两个消费者消费同一队列）</p><h3 id="消息持久化"><a href="#消息持久化" class="headerlink" title="消息持久化"></a>消息持久化</h3><blockquote><p>加上group配置，就已经实现了消息的持久化。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>SpringCloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud学习笔记(5)</title>
    <link href="/2022/09/20/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(5)/"/>
    <url>/2022/09/20/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(5)/</url>
    
    <content type="html"><![CDATA[<h2 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h2><blockquote><p>SpringCloud Config 分布式配置中心</p></blockquote><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>微服务意味着要将单应用中的业务拆分成一个个子服务，每个服务的粒度相对较小，因此系统中会出现大量的服务。由于每个服务都需要必要的配置信息才能运行，所以一套集中式的、动态的配置管理设施是必不可少的。</p><p>springCloud提供了ConfigServer来解决这个问题，我们每一个微服务自己带着一个application.yml，上百个配置文件的管理。比如数据库的信息，我们可以写到一个统一的地方。</p><ul><li>config+bus</li><li>alibaba nacos</li><li>携程 阿波罗</li></ul><p>SpringCloud Config是什么：Spring Cloud Config为微服务架构中的微服务提供集中化的外部配置支持，配置服务器为各个不同微服务应用的所有环境提供了一个<strong>中心化的外部配置</strong>。</p><p>怎么玩：<br>SpringCloud Config分为服务端和客户端两部分。</p><ul><li>服务端也称为分布式配置中心，它是一个独立的微服务应用，用来连接配置服务器并为客户端提供获取配置信息，加密&#x2F;解密信息等访问接口</li><li>客户端则是通过指定的配置中心来管理应用资源，以及与业务相关的配置内容，并在启动的时候从配置中心取和加载配置信息配置服务器默认采用git来存储配置信息，这样就有助于对环境配置进行版本管理，并且可以通过git客户端工具来方便的管理和访问配置内容</li></ul><p>能干嘛：</p><ul><li>集中管理配置文件</li><li>不同环境不同配置，<strong>动态化的配置更新</strong>，分环境部署比如dev&#x2F;test&#x2F;prod&#x2F;beta&#x2F;release</li><li>运行期间动态调整配置，不再需要在每个服务部署的机器上编写配置文件，服务会向配置中心统一拉取配置自己的信息</li><li>当配置发生变动时，服务不需要重启即可感知到配置的变化并应用新的配置</li><li>将配置信息以REST接囗的形式暴露</li></ul><h3 id="config服务端配置"><a href="#config服务端配置" class="headerlink" title="config服务端配置"></a>config服务端配置</h3><p>这个服务端指的是消费端与github之间的桥接</p><blockquote><p>首先在github上新建一个仓库 springcloud-config</p><p><a href="mailto:&#x67;&#105;&#116;&#64;&#103;&#x69;&#x74;&#x68;&#x75;&#98;&#46;&#x63;&#111;&#x6d;">&#x67;&#105;&#116;&#64;&#103;&#x69;&#x74;&#x68;&#x75;&#98;&#46;&#x63;&#111;&#x6d;</a>:名字&#x2F;项目.git</p><p>然后使用git命令克隆到本地，命令：git clone <a href="https://github.com/LZXYF/springcloud-config">https://github.com/LZXYF/springcloud-config</a></p><p>注意上面的操作不是必须的，只要github上有就可以，克隆到本地只是修改文件。</p><p>常用命令：</p><ul><li>git add</li><li>git commit -m “标记”</li><li>git push origin master</li></ul></blockquote><p>在git根目录下创建</p><ul><li>开发环境：config-dev.yml</li><li>生产环境：config-pro.yml</li><li>测试环境：config-test.tml</li></ul><p>注意格式</p><p>新建 <code>config-center3344</code> 模块：</p><p>pom文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;project xmlns=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br>         xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>         xsi:schemaLocation=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;<br>    &lt;parent&gt;<br>        &lt;artifactId&gt;cloud2022&lt;/artifactId&gt;<br>        &lt;groupId&gt;com.wzg.springcloud&lt;/groupId&gt;<br>        &lt;version&gt;<span class="hljs-number">1.0</span>-SNAPSHOT&lt;/version&gt;<br>    &lt;/parent&gt;<br>    &lt;modelVersion&gt;<span class="hljs-number">4.0</span><span class="hljs-number">.0</span>&lt;/modelVersion&gt;<br><br>    &lt;artifactId&gt;config-center3344&lt;/artifactId&gt;<br><br>    &lt;dependencies&gt;<br>        &lt;!-- config Server --&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-cloud-config-server&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;!--eureka-client config Server也要注册进服务中心--&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;<br>            &lt;scope&gt;runtime&lt;/scope&gt;<br>            &lt;optional&gt;<span class="hljs-literal">true</span>&lt;/optional&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;<br>            &lt;artifactId&gt;lombok&lt;/artifactId&gt;<br>            &lt;optional&gt;<span class="hljs-literal">true</span>&lt;/optional&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;<br>            &lt;scope&gt;test&lt;/scope&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;<br>            &lt;groupId&gt;com.wzg.springcloud&lt;/groupId&gt;<br>            &lt;artifactId&gt;api-commons&lt;/artifactId&gt;<br>            &lt;version&gt;$&#123;project.version&#125;&lt;/version&gt;<br>        &lt;/dependency&gt;<br>    &lt;/dependencies&gt;<br><br><br>    &lt;properties&gt;<br>        &lt;maven.compiler.source&gt;<span class="hljs-number">8</span>&lt;/maven.compiler.source&gt;<br>        &lt;maven.compiler.target&gt;<span class="hljs-number">8</span>&lt;/maven.compiler.target&gt;<br>    &lt;/properties&gt;<br><br>&lt;/project&gt;<br></code></pre></td></tr></table></figure><p>yml 配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">3344</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span>  <span class="hljs-string">config-center</span> <span class="hljs-comment">#注册进Eureka服务器的微服务名</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-attr">server:</span><br>        <span class="hljs-attr">git:</span> <span class="hljs-comment"># 此处使用的是老师是配置中心</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">https://github.com/yztldxdza/springcloud-config.git</span> <span class="hljs-comment">#GitHub上面的git仓库名字</span><br>          <span class="hljs-comment">####搜索目录</span><br>          <span class="hljs-attr">search-paths:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">springcloud-config</span><br>      <span class="hljs-comment">####读取分支</span><br>      <span class="hljs-attr">label:</span> <span class="hljs-string">master</span><br><br><span class="hljs-comment">#服务注册到eureka地址</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:7001/eureka</span><br></code></pre></td></tr></table></figure><p>主启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.config.server.EnableConfigServer;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableConfigServer</span>   <span class="hljs-comment">//关键注解</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConfigCenterMain3344</span> &#123; <span class="hljs-comment">// 注意先去把Eureka启动起来</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(ConfigCenterMain3344.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>添加模拟映射：【C:\Windows\System32\drivers\etc\hosts】文件中添加： <code>127.0.0.1 config-3344.com</code></p><p>启动微服务3344，访问 <a href="http://config-3344.com:3344/master/config-dev.yml">http://config-3344.com:3344/master/config-dev.yml</a> 文件（注意，要提前在git上弄一个这文件）</p><p>文件命名和访问的规则：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/df118f6e915a845d5c71400938260c1b.png" alt="1597646186970"></p><p>不加分支名默认是master:</p><p><img src="https://img-blog.csdnimg.cn/img_convert/329f61d194f7839a55f37b5a65b70667.png" alt="1597646308915"></p><p>最后一个出的是json串</p><ul><li>label：分支branch</li><li>name：服务名</li><li>profiles：环境dev&#x2F;test&#x2F;prod</li></ul><h3 id="config客户端配置"><a href="#config客户端配置" class="headerlink" title="config客户端配置"></a>config客户端配置</h3><blockquote><p>这里的客户端指的是，使用 Config Server 统一配置文件的项目。既有之前说的消费者，又有提供者</p></blockquote><p>新建 <code>config-client-3355</code> 模块：</p><p>pom文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;project xmlns=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br>         xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>         xsi:schemaLocation=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;<br>    &lt;parent&gt;<br>        &lt;artifactId&gt;cloud2022&lt;/artifactId&gt;<br>        &lt;groupId&gt;com.wzg.springcloud&lt;/groupId&gt;<br>        &lt;version&gt;<span class="hljs-number">1.0</span>-SNAPSHOT&lt;/version&gt;<br>    &lt;/parent&gt;<br>    &lt;modelVersion&gt;<span class="hljs-number">4.0</span><span class="hljs-number">.0</span>&lt;/modelVersion&gt;<br><br>    &lt;artifactId&gt;config-client-<span class="hljs-number">3355</span>&lt;/artifactId&gt;<br><br>    &lt;dependencies&gt;<br>        &lt;!-- config Client 和 服务端的依赖不一样 --&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;!--eureka-client config Server也要注册进服务中心--&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;<br>            &lt;scope&gt;runtime&lt;/scope&gt;<br>            &lt;optional&gt;<span class="hljs-literal">true</span>&lt;/optional&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;<br>            &lt;artifactId&gt;lombok&lt;/artifactId&gt;<br>            &lt;optional&gt;<span class="hljs-literal">true</span>&lt;/optional&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;<br>            &lt;scope&gt;test&lt;/scope&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;<br>            &lt;groupId&gt;com.wzg.springcloud&lt;/groupId&gt;<br>            &lt;artifactId&gt;api-commons&lt;/artifactId&gt;<br>            &lt;version&gt;$&#123;project.version&#125;&lt;/version&gt;<br>        &lt;/dependency&gt;<br>    &lt;/dependencies&gt;<br><br><br>    &lt;properties&gt;<br>        &lt;maven.compiler.source&gt;<span class="hljs-number">8</span>&lt;/maven.compiler.source&gt;<br>        &lt;maven.compiler.target&gt;<span class="hljs-number">8</span>&lt;/maven.compiler.target&gt;<br>    &lt;/properties&gt;<br><br>&lt;/project&gt;<br></code></pre></td></tr></table></figure><p>要将Client模块下的application.yml文件改为bootstrap.yml，删掉application.yml这是很关键的</p><p>因为bootstrap.yml是比application.yml先加载的。bootstrap.yml优先级高于application.yml</p><p>appllication.yml是用户级的资源配置项</p><p>bootstrap.ym1是系统级的，优先级更加高</p><p>SpringCloud会创建一个”Bootstrap Context”作为Spring应用的ApplicationContext的<code>父上下文</code>。初始化的时候，Bootstrap Context负责从外部源加载配置属性并解析配置。这两个上下文共享一个从外部获取的Environment</p><p>Bootstrap 属性有高优先级，默认情况下，它们不会被本地配置覆盖。BootstrapContext和ApplicationContext、有着不同的约定，所以新增了一个bootstrap.yml文件，保证BootstrapContext和ApplicationContext配置的分离。</p><p>bootstrap.yml文件：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">3355</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">config-client</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-comment">#Config客户端配置</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-attr">label:</span> <span class="hljs-string">master</span> <span class="hljs-comment">#分支名称</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">config</span> <span class="hljs-comment">#配置文件名称，文件也可以是client-config-dev.yml这种格式的，这里就写 client-config</span><br>      <span class="hljs-attr">profile:</span> <span class="hljs-string">dev</span> <span class="hljs-comment">#读取后缀名称   上述3个综合：master分支上config-dev.yml的配置文件被读取http://config-3344.com:3344/master/config-dev.yml</span><br>      <span class="hljs-attr">uri:</span> <span class="hljs-string">http://localhost:3344</span> <span class="hljs-comment">#配置中心地址</span><br>      <span class="hljs-comment"># 综合上面四个 即读取配置文件地址为： http://config-3344.com:3344/master/config-dev.yml</span><br><br><span class="hljs-comment">#服务注册到eureka地址</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:7001/eureka</span><br><br><br><span class="hljs-comment"># 暴露监控端点</span><br><span class="hljs-attr">management:</span><br>  <span class="hljs-attr">endpoints:</span><br>    <span class="hljs-attr">web:</span><br>      <span class="hljs-attr">exposure:</span><br>        <span class="hljs-attr">include:</span> <span class="hljs-string">&quot;*&quot;</span><br></code></pre></td></tr></table></figure><p>主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConfigClientMain3355</span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>            SpringApplication.run(ConfigClientMain3355.class, args);<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>controller层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.cloud.context.config.annotation.RefreshScope;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RefreshScope</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConfigClientController</span> &#123;<br><br>    <span class="hljs-comment">//相当于配置了config后，就把config服务端里的变量引入进来了</span><br>    <span class="hljs-meta">@Value(&quot;$&#123;config.info&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String configInfo;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/configInfo&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getConfigInfo</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> configInfo;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>启动测试完成！如果报错，注意github上的 yml 格式有没有写错！</p><p>启动Config配置中心3344微服务并自测，启动3355作为client访问 localhost:3355&#x2F;configInfo</p><p>修改config-dev.yml配置文件并提交到github中，比如加个变量age或者版本号version。更改消费者端的配置看看其他环境能不能用</p><h3 id="动态刷新"><a href="#动态刷新" class="headerlink" title="动态刷新"></a>动态刷新</h3><p>问题：</p><ul><li>Linux运维修改GitHub上的配置文件内容做调整：比如修改config-dev.yml提交</li><li>刷新3344，发现ConfigServer服务端配置中心立刻响应，得到最新值了</li><li>刷新3355，发现ConfigClient客户端没有任何响应，拿到的还是旧值</li><li>客户端3355没有变化除非自己重启或者重新加载，才能拿到最新值</li><li>难到每次运维修改配置文件，<strong>客户端</strong>都需要重启？？噩梦</li></ul><blockquote><p>就是github上面配置更新了，config Server 项目上是动态更新的，但是，client端的项目中的配置，目前还是之前的，它不能动态更新，必须重启才行。</p></blockquote><p>动态刷新问题解决：</p><ol><li><p>client端一定要有actuator依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>client 端增加 yml 配置如下，即在 bootstrap.yml 文件中：</p></li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># 暴露监控端点</span><br><span class="hljs-attr">management:</span><br>  <span class="hljs-attr">endpoints:</span><br>    <span class="hljs-attr">web:</span><br>      <span class="hljs-attr">exposure:</span><br>        <span class="hljs-attr">include:</span> <span class="hljs-string">&quot;*&quot;</span><br></code></pre></td></tr></table></figure><p>3.在controller 上添加注解<code>@RefreshScope</code>：</p><blockquote><p>到此为止，配置已经完成，但是测试客户端 localhost:3355&#x2F;configInfo 仍然不能动态刷新，还是旧值（也就是说环境变量里的还是旧值），需要下一步。</p></blockquote><p>4.向 client 端发送一个 POST 请求</p><blockquote><p>如 curl -X POST “<a href="http://localhost:3355/actuator/refresh%E2%80%9D">http://localhost:3355/actuator/refresh”</a></p><p>两个必须：1.必须是 POST 请求，2.请求地址：<a href="http://localhost:3355/actuator/refresh">http://localhost:3355/actuator/refresh</a></p></blockquote><p>成功获得到最新值</p><p>但是又有一个问题，就是要向每个微服务客户端发送一次POST请求，当微服务数量庞大，又是一个新的问题。</p><p>能否广播，一次通知，处处生效？（还要求不要全广播，差异化管理，定点清除，20台只有18台更新）</p><p>就有下面的消息总线！</p><h2 id="Bus"><a href="#Bus" class="headerlink" title="Bus"></a>Bus</h2><p>spring cloud Bus配置spring cloud Config使用可以实现配置的动态刷新</p><p>spring cloud bus是用来将分布式系统的节点与轻量级消息系统链接起来的框架，它整合了java的事件处理机制和消息中间件的功能。</p><p>spring cloud bus目前支持RabbitMQ和Kafka（因为是主题订阅）</p><p>什么是总线</p><p>在微服务架构的系统中，通常会使用轻量级的消息代理来构建一个共用的消息主题，并让系统中所有微服务实例都连接上来。由于该主题中产生的消息会被所有实例<strong>监听和消费</strong>，所以称它为消息总线。在总线上的各个实例，都可以方便地广播一些需要让貝他连接在该主题上的实例都知道的消息。</p><p>基本原理：</p><p><code>ConfigClient</code>实例都监听MQ中同一个topic主题(默认是<code>springCloud Bus</code>)。当一个服务刷新数据的时候，它会把这个信息放入到Topic中，这样其它监听同一topic的服务就能得到通知，然后去更新自身的配置</p><p>Bus能管理和传输分布式系统间的消息，就像一个分布式执行器，可用于广播状态更改、事件推送等，也可以当做微服务间的通信通道</p><h3 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h3><blockquote><p>在windows 上安装RabbitMQ</p></blockquote><ol><li>安装RabbitMQ的依赖环境 Erlang 下载地址： <a href="http://erlang.org/download/otp_win64_21.3.exe">http://erlang.org/download/otp_win64_21.3.exe</a></li><li>安装RabbitMQ 下载地址： <a href="http://dl.bintray.com/rabbitmq/all/rabbitmq-server/3.7.14/rabbitmq-server-3.7.14.exe">http://dl.bintray.com/rabbitmq/all/rabbitmq-server/3.7.14/rabbitmq-server-3.7.14.exe</a></li><li>进入 rabbitMQ安装目录的sbin目录下，打开cmd窗口，执行 【<code>rabbitmq-plugins enable rabbitmq_management</code>】</li><li>访问【<a href="http://localhost:15672/%E3%80%91%EF%BC%8C%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81%E5%92%8C%E8%B4%A6%E5%8F%B7%EF%BC%9A%E9%BB%98%E8%AE%A4%E4%B8%BAguest">http://localhost:15672/】，输入密码和账号：默认为guest</a></li></ol><h3 id="广播式刷新配置"><a href="#广播式刷新配置" class="headerlink" title="广播式刷新配置"></a>广播式刷新配置</h3><ul><li><p>必须先具有良好的RabbitMQ环境</p></li><li><p>演示广播效果，增加复杂度，再以3355为模板再制作一个3366</p></li><li><p>设计思想</p><ul><li><p>1）利用消息总线触发一个客户端&#x2F;bus&#x2F;refresh，而刷新所有客户端的配置</p></li><li><p>2）利用消息总线触发一个服务端ConfigServer的&#x2F;bus&#x2F;refres端点，从而刷新所有客户端的配置</p></li><li><p>图二的架构显然更加适合，图一不适合的原因如下</p><ul><li><p>打破了微服务的职责单一性，因为微服务本身是业务模块，它本不应该承担配置刷新的职责</p></li><li><p>破坏了微服务各节点的对等性。</p></li><li><p>有一定的局限性“例如，微服务在迁移时，它的网络地址常常会发生变化，此时如果想要做到自动刷新，那就会增加更多的</p></li></ul></li></ul></li><li><p>给cloud-config-center-3344配置中心服务端添加消息总线支持</p></li><li><p>给cloud-config-client-3355客户端添加消息总线支持</p></li><li><p>给cloud-config-client-3366客户端添加消息总线支持（以3355为模板）</p></li><li><p>测试</p></li><li><p>一次修改，广播通知，出处生效</p></li><li><p>但还是得发一个POST请求，只不过只给config发而已</p></li></ul><p>首先给 config Server 和 config client 都添加如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 添加rabbitMQ的消息总线支持包 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>config Server 的yml文件增加如下rabbitmq配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># rabbitMq的相关配置</span><br><span class="hljs-attr">rabbitmq:</span><br>  <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span>  <span class="hljs-comment"># 这里没错，虽然rabbitMQ网页是 15672</span><br>  <span class="hljs-attr">username:</span> <span class="hljs-string">guest</span><br>  <span class="hljs-attr">password:</span> <span class="hljs-string">guest</span><br><span class="hljs-comment"># rabbitmq 的相关配置2 暴露bus刷新配置的端点</span><br><span class="hljs-attr">management:</span><br>  <span class="hljs-attr">endpoints:</span><br>    <span class="hljs-attr">web:</span><br>      <span class="hljs-attr">exposure:</span><br>        <span class="hljs-attr">include:</span> <span class="hljs-string">&#x27;bus-refresh&#x27;</span><br></code></pre></td></tr></table></figure><p>config Client 的yml文件修改成如下配置：（注意对齐方式，和config Server不一样）</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-comment"># config 客户端配置</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-attr">label:</span> <span class="hljs-string">master</span>         <span class="hljs-comment"># 分支名称</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">client-config</span>       <span class="hljs-comment"># 配置文件名称</span><br>      <span class="hljs-attr">profile:</span> <span class="hljs-string">test</span>      <span class="hljs-comment"># 使用配置环境</span><br>      <span class="hljs-attr">uri:</span> <span class="hljs-string">http://config-3344.com:3344</span>  <span class="hljs-comment"># config Server 地址</span><br></code></pre></td></tr></table></figure><p>3355客户端的bootstrap.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">3355</span> <span class="hljs-comment"># client</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">config-client</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-comment">#Config客户端配置</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-attr">label:</span> <span class="hljs-string">master</span> <span class="hljs-comment">#分支名称</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">config</span> <span class="hljs-comment">#配置文件名称</span><br>      <span class="hljs-attr">profile:</span> <span class="hljs-string">dev</span> <span class="hljs-comment">#读取后缀名称   上述3个综合：master分支上config-dev.yml的配置文件被读取http://config-3344.com:3344/master/config-dev.yml</span><br>      <span class="hljs-attr">uri:</span> <span class="hljs-string">http://localhost:3344</span> <span class="hljs-comment">#配置中心地址k</span><br><br><span class="hljs-comment">#rabbitmq相关配置 15672是Web管理界面的端口；5672是MQ访问的端口</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">guest</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">guest</span><br><br><span class="hljs-comment">#服务注册到eureka地址</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:7001/eureka</span><br><br><span class="hljs-comment"># 暴露监控端点</span><br><span class="hljs-attr">management:</span><br>  <span class="hljs-attr">endpoints:</span><br>    <span class="hljs-attr">web:</span><br>      <span class="hljs-attr">exposure:</span><br>        <span class="hljs-attr">include:</span> <span class="hljs-string">&quot;*&quot;</span><br></code></pre></td></tr></table></figure><p>3344注册中心的application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">3344</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span>  <span class="hljs-string">cloud-config-center</span> <span class="hljs-comment">#注册进Eureka服务器的微服务名</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-attr">server:</span><br>        <span class="hljs-attr">git:</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">git@github.com:zzyybs/springcloud-config.git</span> <span class="hljs-comment">#GitHub上面的git仓库名字</span><br>        <span class="hljs-comment">####搜索目录</span><br>          <span class="hljs-attr">search-paths:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">springcloud-config</span><br>      <span class="hljs-comment">####读取分支</span><br>      <span class="hljs-attr">label:</span> <span class="hljs-string">master</span><br><span class="hljs-comment">#rabbitmq相关配置</span><br><span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">guest</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">guest</span><br><br><span class="hljs-comment">#服务注册到eureka地址</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:7001/eureka</span><br><br><span class="hljs-comment">##rabbitmq相关配置,暴露bus刷新配置的端点</span><br><span class="hljs-attr">management:</span><br>  <span class="hljs-attr">endpoints:</span> <span class="hljs-comment">#暴露bus刷新配置的端点</span><br>    <span class="hljs-attr">web:</span><br>      <span class="hljs-attr">exposure:</span><br>        <span class="hljs-attr">include:</span> <span class="hljs-string">&#x27;bus-refresh&#x27;</span><br></code></pre></td></tr></table></figure><p>可在github上修改yml文件进行测试，修改完文件，向 config server 发送 请求：</p><p>给3344发就能全局同步了【curl -X POST “<a href="http://localhost:3344/actuator/bus-refresh%E2%80%9D%E3%80%91">http://localhost:3344/actuator/bus-refresh”】</a></p><blockquote><p>注意，之前是向config client 一个个发送请求，但是这次是向 config Server 发送请求，而所有的config client 的配置也都全部更新。</p></blockquote><h3 id="定点通知"><a href="#定点通知" class="headerlink" title="定点通知"></a>定点通知</h3><p>新的需求：指定具体某一个实例（的参数）生效而不是全部，一些是最新值，一些是旧值</p><ul><li>公式：<code>http://localhost:配置中心的端口号/actuator/bus-refresh/&#123;destination&#125;</code></li><li>例子：curl -X POST “http&#x2F;&#x2F;localhost:3344&#x2F;actuator&#x2F;bus-refresh&#x2F;config-client:3355</li><li>即微服务名称+端囗号</li><li>&#x2F;bus&#x2F;refresh请求不再发送到具体的服务实例上，而是发给configserver并通过destination参数类指定需要更新配置的服务或实例</li><li>我们这里以刷新运行在3355端口上的config-client为例<ul><li>只通知3355</li><li>不通知3366</li></ul></li></ul><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h6eb7tpyzuj30up0igdkh.jpg"></p><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h6eb83t6owj30qx063jrt.jpg"></p><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h6eb8dcitlj319b0eftbu.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>SpringCloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud学习笔记(4)</title>
    <link href="/2022/09/20/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(4)/"/>
    <url>/2022/09/20/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(4)/</url>
    
    <content type="html"><![CDATA[<h1 id="Hystrix-断路器"><a href="#Hystrix-断路器" class="headerlink" title="Hystrix 断路器"></a>Hystrix 断路器</h1><blockquote><p>官方地址：<a href="https://github.com/Netflix/Hystrix/wiki/How-To-Use">https://github.com/Netflix/Hystrix/wiki/How-To-Use</a></p><p>“断路器“本身是一种开关装置，当某个服务单元发生故障之后，涌过断路器的故障监控（类似熔断保险丝），向调用方返回一个符合预期的、可处理的备选响应(FallBack)，而不是长时间的等待或者抛出调用方无法处理的异常，这样就保证了服务调用方的线程不会被长时间、不必要地占用，从而避免了故障在分布式系统中的蔓延，乃至雪崩。</p></blockquote><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h5 id="服务雪崩："><a href="#服务雪崩：" class="headerlink" title="服务雪崩："></a>服务雪崩：</h5><p>多个微服务之间调用的时候，假设微服务A调用微服务B和微服务C，微服务B和微服务C又调用其它的微服务，这就是所谓的“<strong>扇出</strong>“</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">A<span class="hljs-comment">--&gt;B,C</span><br>BC<span class="hljs-comment">--&gt;D</span><br></code></pre></td></tr></table></figure><p>如果扇出的链路上某个微服务的调用响应时间过长或者不可用，对微服务A的调用就会占用越来越多的系统资源，进而引起系统崩溃，即所谓的“<code>雪崩效应</code>”。</p><p>对于高流量的应用来说，单一的后端依赖可能会导致所有服务器上的所有资源都在几秒钟内饱和。比失败更糟糕的是，这些应用程序还可能导致服务之间的延迟增加，备份队列，线程和其他系统资源紧张，导致整个系统发生更多的级联故障。这些都表示需要对故障和延迟进行隔离和管理，以便单个依赖关系的失败，不能取消整个应用程序或系统。</p><p>Hystrix是一个用于处理分布式系统的延迟和容错的开源库，在分布式系统里，许多依赖不可避免的会调用失败，比如超时、异常等，Hystrix能够保证在一个依赖出问题的情况下，不会导致整体服务失败，避免级联故障，以提高分布式系统的弹性。</p><blockquote><p>Hystrix停止更新，进入维护阶段：<a href="https://github.com/Netflix/Hystrix">https://github.com/Netflix/Hystrix</a></p><p><a href="https://github.com/Netflix/Hystrix/wiki/How-To-Use">https://github.com/Netflix/Hystrix/wiki/How-To-Use</a></p></blockquote><h5 id="服务降级："><a href="#服务降级：" class="headerlink" title="服务降级："></a>服务降级：</h5><p>fallback</p><blockquote><p>服务器忙碌或者网络拥堵时，不让客户端等待并立刻返回一个友好提示，fallback。</p><ul><li>对方系统不可用了，你需要给我一个<strong>兜底的方法</strong>，不要耗死。</li><li>向调用方返回一个符合预期的、可处理的<strong>备选响应</strong>(FallBack)，而不是长时间的等待或者抛出调用方无法处理的异常，这样就保证了服务调用方的线程不会被长时间、不必要地占用，从而避免了故障在分布式系统中的蔓延，乃至雪崩。</li></ul></blockquote><p>降级发生的情况：</p><ul><li>程序运行异常</li><li>超时</li><li>服务熔断触发服务降级</li><li>线程池&#x2F;信号量打满也会导致服务降级</li></ul><h5 id="服务熔断："><a href="#服务熔断：" class="headerlink" title="服务熔断："></a>服务熔断：</h5><p>break</p><ul><li>类比保险丝达到最大服务访问后，<strong>直接拒绝访问</strong>，拉闸限电，然后调用服务降级的方法并返回友好提示</li><li>就是保险丝：服务的降级-&gt;进熔断-&gt;恢复调用链路</li></ul><h5 id="服务限流："><a href="#服务限流：" class="headerlink" title="服务限流："></a>服务限流：</h5><p>flowlimit</p><p>秒杀高并发等操作，严禁一窝蜂的过来拥挤，大家排队，一秒钟几个，有序进行</p><blockquote><p>可见，上面的技术不论是消费者还是提供者，根据真实环境都是可以加入配置的。</p></blockquote><h2 id="断路案例"><a href="#断路案例" class="headerlink" title="断路案例"></a>断路案例</h2><blockquote><p>首先构建一个eureka作为服务中心的单机版微服务架构 ，这里使用之前eureka Server 7001模块，作为服务中心</p></blockquote><p>新建 提供者 <code>provider-hystrix-payment8001</code> 模块：</p><p>pom 文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;project xmlns=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br>         xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>         xsi:schemaLocation=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;<br>    &lt;parent&gt;<br>        &lt;artifactId&gt;cloud2022&lt;/artifactId&gt;<br>        &lt;groupId&gt;com.wzg.springcloud&lt;/groupId&gt;<br>        &lt;version&gt;<span class="hljs-number">1.0</span>-SNAPSHOT&lt;/version&gt;<br>    &lt;/parent&gt;<br>    &lt;modelVersion&gt;<span class="hljs-number">4.0</span><span class="hljs-number">.0</span>&lt;/modelVersion&gt;<br><br>    &lt;artifactId&gt;provider-hystrix-payment8001&lt;/artifactId&gt;<br><br>    &lt;dependencies&gt;<br>        &lt;!-- hystrix --&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;!--eureka-client--&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;<br>            &lt;scope&gt;runtime&lt;/scope&gt;<br>            &lt;optional&gt;<span class="hljs-literal">true</span>&lt;/optional&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;<br>            &lt;artifactId&gt;lombok&lt;/artifactId&gt;<br>            &lt;optional&gt;<span class="hljs-literal">true</span>&lt;/optional&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;<br>            &lt;scope&gt;test&lt;/scope&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;<br>            &lt;groupId&gt;com.wzg.springcloud&lt;/groupId&gt;<br>            &lt;artifactId&gt;api-commons&lt;/artifactId&gt;<br>            &lt;version&gt;$&#123;project.version&#125;&lt;/version&gt;<br>        &lt;/dependency&gt;<br>    &lt;/dependencies&gt;<br><br>    &lt;properties&gt;<br>        &lt;maven.compiler.source&gt;<span class="hljs-number">8</span>&lt;/maven.compiler.source&gt;<br>        &lt;maven.compiler.target&gt;<span class="hljs-number">8</span>&lt;/maven.compiler.target&gt;<br>    &lt;/properties&gt;<br><br>&lt;/project&gt;<br></code></pre></td></tr></table></figure><p>yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8001</span><br><br><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">true</span>    <span class="hljs-comment">#表识不向注册中心注册自己</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">true</span>   <span class="hljs-comment">#表示自己就是注册中心，职责是维护服务实例，并不需要去检索服务</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-comment"># defaultZone: http://eureka7002.com:7002/eureka/    #设置与eureka server交互的地址查询服务和注册服务都需要依赖这个地址</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://eureka7001.com:7001/eureka/</span><br><span class="hljs-comment">#  server:</span><br><span class="hljs-comment">#    enable-self-preservation: false</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">provider-hystrix-payment</span><br><span class="hljs-comment">#    eviction-interval-timer-in-ms: 2000</span><br></code></pre></td></tr></table></figure><p>主启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud;<br><br><span class="hljs-keyword">import</span> com.netflix.hystrix.contrib.metrics.eventstream.HystrixMetricsStreamServlet;<br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.boot.web.servlet.ServletRegistrationBean;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;<br><span class="hljs-keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)</span><br><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-meta">@EnableCircuitBreaker</span><span class="hljs-comment">//加上这个</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PaymentMain8001</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(PaymentMain8001.class,args);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span> <span class="hljs-comment">// 注入豪猪的servlet // 该servlet与服务容错本身无关 // springboot默认路径不是/hustrix.stream，只要在自己的项目里自己配置servlet</span><br>    <span class="hljs-keyword">public</span> ServletRegistrationBean <span class="hljs-title function_">getServlet</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">HystrixMetricsStreamServlet</span> <span class="hljs-variable">streamServlet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HystrixMetricsStreamServlet</span>();<br>        <span class="hljs-type">ServletRegistrationBean</span> <span class="hljs-variable">servletRegistrationBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletRegistrationBean</span>(streamServlet);<br>        servletRegistrationBean.setLoadOnStartup(<span class="hljs-number">1</span>);<br>        servletRegistrationBean.addUrlMappings(<span class="hljs-string">&quot;/hystrix.stream&quot;</span>);<br>        servletRegistrationBean.setName(<span class="hljs-string">&quot;HystrixMetricsStreamServlet&quot;</span>);<br>        <span class="hljs-keyword">return</span> servletRegistrationBean;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>service层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud.Service;<br><br><span class="hljs-keyword">import</span> cn.hutool.core.util.IdUtil;<br><span class="hljs-keyword">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;<br><span class="hljs-keyword">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixProperty;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PaymentService</span> &#123;<br><br>    <span class="hljs-comment">//服务降级</span><br><br>    <span class="hljs-comment">/* 可以正常访问的方法*/</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">paymentinfo_Ok</span><span class="hljs-params">(Integer id)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;线程池：&quot;</span> + Thread.currentThread().getName() + <span class="hljs-string">&quot;--paymentInfo_OK，id:&quot;</span> + id;<br>    &#125;<br><br>    <span class="hljs-comment">/* 超时访问的方法 */</span><br>    <span class="hljs-meta">@HystrixCommand(fallbackMethod = &quot;paymentinfo_TimeoutHandler&quot;,commandProperties = &#123;</span><br><span class="hljs-meta">            @HystrixProperty(name=&quot;execution.isolation.thread.timeoutInMilliseconds&quot;,//时间单位</span><br><span class="hljs-meta">                    value=&quot;3000&quot;)&#125;)</span><span class="hljs-comment">//超时时间</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">paymentinfo_Timeout</span><span class="hljs-params">(Integer id)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">interTime</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>        <span class="hljs-keyword">try</span>&#123;<br>            TimeUnit.SECONDS.sleep(interTime);<span class="hljs-comment">//模拟超时</span><br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;线程池：&quot;</span> + Thread.currentThread().getName() + <span class="hljs-string">&quot;--paymentInfo_Timeout，id:&quot;</span> + id +<br>                <span class="hljs-string">&quot;耗时&quot;</span> + interTime + <span class="hljs-string">&quot;秒钟--&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">paymentinfo_TimeoutHandler</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;线程池:  &quot;</span>+Thread.currentThread().getName()+<span class="hljs-string">&quot;  8001系统繁忙或者运行报错，请稍后再试,id:  &quot;</span>+id+<span class="hljs-string">&quot;\t&quot;</span>+<span class="hljs-string">&quot;o(╥﹏╥)o&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//服务熔断</span><br>    <span class="hljs-meta">@HystrixCommand(fallbackMethod = &quot;paymentCircuitBreaker_fallback&quot;,</span><br><span class="hljs-meta">            commandProperties = &#123;</span><br><span class="hljs-meta">                    @HystrixProperty(name = &quot;circuitBreaker.enabled&quot;,value = &quot;true&quot;),// 是否开启断路器</span><br><span class="hljs-meta">                    @HystrixProperty(name = &quot;circuitBreaker.requestVolumeThreshold&quot;,value = &quot;10&quot;),// 请求次数</span><br><span class="hljs-meta">                    @HystrixProperty(name = &quot;circuitBreaker.sleepWindowInMilliseconds&quot;,value = &quot;10000&quot;), // 时间窗口期</span><br><span class="hljs-meta">                    @HystrixProperty(name = &quot;circuitBreaker.errorThresholdPercentage&quot;,value = &quot;60&quot;),// 失败率达到多少后跳闸</span><br><span class="hljs-meta">            &#125;)</span> <span class="hljs-comment">// 在10s内10次请求有60%失败 // 先看次数，再看百分比</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">paymentCircuitBreaker</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;<br>        <span class="hljs-keyword">if</span>(id &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;******id 不能负数&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">serialNumber</span> <span class="hljs-operator">=</span> IdUtil.simpleUUID();<span class="hljs-comment">// 等价于UUID.randomUUID().toString(); //pom中有hutool-all</span><br><br>        <span class="hljs-keyword">return</span> Thread.currentThread().getName()+<span class="hljs-string">&quot;\t&quot;</span>+<span class="hljs-string">&quot;调用成功，流水号: &quot;</span> + serialNumber;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">paymentCircuitBreaker_fallback</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;<span class="hljs-comment">//服务降级</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;id 不能负数，请稍后再试，/(ㄒoㄒ)/~~   id: &quot;</span> +id;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>controller层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud.controller;<br><br><span class="hljs-keyword">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;<br><span class="hljs-keyword">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixProperty;<br><span class="hljs-keyword">import</span> com.wzg.springcloud.Service.PaymentService;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PaymentController</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> PaymentService paymentService;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String serverPort;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/payment/hystrix/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">paymentInfo_OK</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span>Integer id)</span>&#123;<br>        log.info(<span class="hljs-string">&quot;paymentInfo_OKKKKOKKK&quot;</span>);<br>        <span class="hljs-keyword">return</span> paymentService.paymentinfo_Ok(id);<br>    &#125;<br><br><span class="hljs-comment">//    @GetMapping(&quot;/payment/hystrix/timeout/&#123;id&#125;&quot;)</span><br><span class="hljs-comment">//    public String paymentInfo_Timeout(@PathVariable(&quot;id&quot;)Integer id)&#123;</span><br><span class="hljs-comment">//        log.info(&quot;paymentInfo_timeout&quot;);</span><br><span class="hljs-comment">//        return paymentService.paymentinfo_Timeout(id);</span><br><span class="hljs-comment">//    &#125;</span><br><br>    <span class="hljs-comment">/* 超时访问的方法 */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/payment/hystrix/timeout/&#123;id&#125;&quot;)</span><br>    <span class="hljs-comment">// 服务端service</span><br>    <span class="hljs-meta">@HystrixCommand(fallbackMethod = &quot;paymentInfo_TimeOutHandler&quot;,//超时后回调方法</span><br><span class="hljs-meta">            commandProperties = &#123;</span><br><span class="hljs-meta">                    @HystrixProperty(name=&quot;execution.isolation.thread.timeoutInMilliseconds&quot;,//时间单位</span><br><span class="hljs-meta">                            value=&quot;5000&quot;)&#125;)</span><span class="hljs-comment">//超时时间</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">paymentInfo_TimeOut</span><span class="hljs-params">(Integer id)</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123; TimeUnit.MILLISECONDS.sleep(<span class="hljs-number">3000</span>); &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123; e.printStackTrace(); &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;线程池:  &quot;</span>+Thread.currentThread().getName()+<span class="hljs-string">&quot; id:  &quot;</span>+id+<span class="hljs-string">&quot;\t&quot;</span>+<span class="hljs-string">&quot;O(∩_∩)O哈哈~&quot;</span>+<span class="hljs-string">&quot;  耗时(秒): &quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//====服务熔断</span><br>    <span class="hljs-meta">@GetMapping(&quot;/payment/circuit/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">paymentCircuitBreaker</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span>Integer id)</span>&#123;<br>        <span class="hljs-keyword">return</span> paymentService.paymentCircuitBreaker(id);<br>    &#125;<br><br><br>    <span class="hljs-comment">// 兜底方法</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">paymentInfo_TimeOutHandler</span><span class="hljs-params">(Integer id)</span>&#123; <span class="hljs-comment">// 回调函数向调用方返回一个符合预期的、可处理的备选响应</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;线程池:  &quot;</span>+Thread.currentThread().getName()+<span class="hljs-string">&quot;  8001系统繁忙或者运行报错，请稍后再试,id:  &quot;</span>+id+<span class="hljs-string">&quot;\t&quot;</span>+<span class="hljs-string">&quot;o(╥﹏╥)o&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="模拟高并发"><a href="#模拟高并发" class="headerlink" title="模拟高并发"></a>模拟高并发</h3><h5 id="JMeter"><a href="#JMeter" class="headerlink" title="JMeter"></a><code>JMeter</code></h5><p>这里使用一个新东西 JMeter 压力测试器，模拟多个请求</p><p>下载压缩包，解压，双击 &#x2F;bin&#x2F; 下的 jmeter.bat 即可启动</p><p>ctrl + S 保存后，输入请求地址开始压测。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/4393d2e2bd953e109c050dd459a29647.png" alt="1597472029967"></p><p><strong>从测试可以看出，当模拟的超长请求被高并发以后，访问普通的小请求速率也会被拉低。</strong></p><p>tomcat的默认工作线程数被打满了，没有多余的线程来分解压力和处理。</p><p>上面还是服务8001自己测试，加入此时外部的消费者80页来访问，那消费者只能干等，最终导致消费端80不满意，服务端8001直接被拖死。</p><p>测试可见，当启动高并发测试时，消费者访问也会变得很慢，甚至出现超时报错。</p><p>演示问题：8001端口自身已经被打满了，80还要访问8001，80也响应慢了。</p><ul><li>超时导致服务器变慢（转圈）：超时不再等待</li><li>出错（宕机或程序运行出错）：出错要有兜底</li></ul><p>解决思路：</p><ul><li>对方服务（8001）<code>超时</code>了，调用者（80）不能一直卡死等待，必须有服务降级</li><li>对方服务（8001) <code>down机</code>了，调用者（80）不能一直卡死等待，必须有服务降级</li><li>对方服务（8001) OK，调用者（80）自己出故障或有自我要求（自己的等待时间小于服务提供者），自己处理降级</li></ul><h3 id="服务降级案例"><a href="#服务降级案例" class="headerlink" title="服务降级案例"></a>服务降级案例</h3><p>新建消费者 <code>consumer-feign-hystrix-order80</code> 模块：以feign为服务调用，eureka为服务中心的模块，</p><p>pom</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;project xmlns=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br>         xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>         xsi:schemaLocation=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;<br>    &lt;parent&gt;<br>        &lt;artifactId&gt;cloud2022&lt;/artifactId&gt;<br>        &lt;groupId&gt;com.wzg.springcloud&lt;/groupId&gt;<br>        &lt;version&gt;<span class="hljs-number">1.0</span>-SNAPSHOT&lt;/version&gt;<br>    &lt;/parent&gt;<br>    &lt;modelVersion&gt;<span class="hljs-number">4.0</span><span class="hljs-number">.0</span>&lt;/modelVersion&gt;<br><br>    &lt;artifactId&gt;consumer-feign-hystrix-order80&lt;/artifactId&gt;<br><br>    &lt;dependencies&gt;<br>        &lt;!--openfeign--&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br>        &lt;!-- hystrix --&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;!--eureka-client--&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;<br>            &lt;scope&gt;runtime&lt;/scope&gt;<br>            &lt;optional&gt;<span class="hljs-literal">true</span>&lt;/optional&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;<br>            &lt;artifactId&gt;lombok&lt;/artifactId&gt;<br>            &lt;optional&gt;<span class="hljs-literal">true</span>&lt;/optional&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;<br>            &lt;scope&gt;test&lt;/scope&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;<br>            &lt;groupId&gt;com.wzg.springcloud&lt;/groupId&gt;<br>            &lt;artifactId&gt;api-commons&lt;/artifactId&gt;<br>            &lt;version&gt;$&#123;project.version&#125;&lt;/version&gt;<br>        &lt;/dependency&gt;<br>    &lt;/dependencies&gt;<br><br>    &lt;properties&gt;<br>        &lt;maven.compiler.source&gt;<span class="hljs-number">8</span>&lt;/maven.compiler.source&gt;<br>        &lt;maven.compiler.target&gt;<span class="hljs-number">8</span>&lt;/maven.compiler.target&gt;<br>    &lt;/properties&gt;<br><br>&lt;/project&gt;<br></code></pre></td></tr></table></figure><p>yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">consumer-feign-hystrix-service</span><br><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://eureka7001.com:7001/eureka/</span><br><br><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">hystrix:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.netflix.hystrix.EnableHystrix;<br><span class="hljs-keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableFeignClients</span><br><span class="hljs-meta">@EnableHystrix</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderHystrixMain80</span>&#123;<span class="hljs-comment">//消费端</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(OrderHystrixMain80.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>一般服务降级放在客户端，即 消费者端 ，但是提供者端一样能使用。</p><p>首先提供者，即8001 先从自身找问题，设置自身调用超时的峰值，峰值内正常运行，超出峰值需要有兜底的方法处理，作服务降级fallback</p></blockquote><h4 id="服务端降级-HystrixCommand"><a href="#服务端降级-HystrixCommand" class="headerlink" title="服务端降级@HystrixCommand"></a>服务端降级<code>@HystrixCommand</code></h4><p>首先 对 <code>8001</code>的service进行配置（对容易超时的方法进行配置) :</p><p>降级配置：<code>@HystrixCommand</code>，可以在里面指定超时&#x2F;出错的回调方法，作为兜底方法</p><h4 id="消费端降级"><a href="#消费端降级" class="headerlink" title="消费端降级"></a>消费端降级</h4><p>上面的案例是服务端降级，现在我们服务端处理3s，然后返回。但是消费端等1s就等不住了，这时候就需要消费端也有降级方法</p><p><code>80</code>的降级。原理是一样的，上面的@HystrixCommand降级可以放在服务端，也可以放在消费端。但一般放在客户端。</p><blockquote><p>注意：我们自己配置过的热部署方式对java代码的改动明显，但对@HystrixCommand内属性的修改建议重启微服务。</p></blockquote><p>然后对 80 进行服务降级：很明显 service 层是接口，所以我们对消费者，在它的 controller 层进行降级。继续使用<code>@HystrixCommand</code>注解指定方法超时后的回调方法</p><p>目前问题：</p><ul><li>每个业务方法对应一个兜底的方法，代码膨胀</li><li>同样和自定义分开</li></ul><p>我们定义一个全局的兜底方法，这样就不用每个方法都得写兜底方法了。</p><h5 id="全局兜底-DefaultProperties"><a href="#全局兜底-DefaultProperties" class="headerlink" title="全局兜底@DefaultProperties"></a>全局兜底<code>@DefaultProperties</code></h5><h5 id="service降级-FeignClient"><a href="#service降级-FeignClient" class="headerlink" title="service降级@FeignClient"></a>service降级<code>@FeignClient</code></h5><p>下面解决业务逻辑混在一起的问题（解耦）：我们改在service层进行服务降级</p><blockquote><p>服务降级，客户端去调用服务端，碰上服务端宕机或关闭。</p><p>本次案例降级处理是在客户端80实现完成的，与服务端8001没有关系。只需要为Feign客户端定义的接口添加一个服务降级处理的实现类即可实现解耦。</p></blockquote><p>在这种方式一般是在客户端，即消费者端，首先上面再controller中添加的 @HystrixCommand 和 @DefaultProperties 两个注解去掉。就是保持原来的controller</p><h3 id="服务熔断案例"><a href="#服务熔断案例" class="headerlink" title="服务熔断案例"></a>服务熔断案例</h3><blockquote><p>实际上服务熔断 和 服务降级 没有任何关系，就像 java 和 javaScript</p><p>服务熔断，有点自我恢复的味道</p><p>参考：<a href="https://blog.csdn.net/www1056481167/article/details/81157171">https://blog.csdn.net/www1056481167/article/details/81157171</a></p></blockquote><blockquote><p><strong>服务雪崩</strong></p><p>多个微服务之间调用的时候，假设微服务A调用微服务B和微服务C，微服务B和微服务C有调用其他的微服务，这就是所谓的”扇出”，如扇出的链路上某个微服务的调用响应式过长或者不可用，对微服务A的调用就会占用越来越多的系统资源，进而引起系统雪崩，所谓的”雪崩效应”</p><p><strong>Hystrix</strong>：</p><p>Hystrix是一个用于分布式系统的延迟和容错的开源库。在分布式系统里，许多依赖不可避免的调用失败，比如超时、异常等，Hystrix能够保证在一个依赖出问题的情况下，不会导致整个服务失败，避免级联故障，以提高分布式系统的弹性。</p><p><strong>断路器</strong>：</p><p>“断路器”本身是一种开关装置，当某个服务单元发生故障监控(类似熔断保险丝)，向调用方法返回一个符合预期的、可处理的备选响应(FallBack)，而不是长时间的等待或者抛出调用方法无法处理的异常，这样就保证了服务调用方的线程不会被长时间、不必要地占用，从而避免了故障在分布式系统中的蔓延。乃至雪崩。</p><p><strong>服务熔断</strong>：</p><p>熔断机制是应对雪崩效应的一种微服务链路保护机制，当扇出链路的某个微服务不可用或者响应时间太长时，会进行服务的降级，进而熔断该节点微服务的调用，快速返回”错误”的响应信息。</p><p>当检测到该节点微服务响应正常后恢复调用链路，在SpringCloud框架机制通过Hystrix实现，Hystrix会监控微服务见调用的状况，当失败的调用到一个阈值，默认是5秒内20次调用失败就会启动熔断机制，熔断机制的注解是<code>@HystrixCommand</code></p></blockquote><p>熔断的状态：</p><ul><li>熔断打开：请求不再进行调用当前服务，内部设置时钟一般为MTTR（平均故障处理时间），当打开时长达到所设时钟则进入半熔断状态</li><li>熔断关闭：熔断关闭不会对服务进行熔断</li><li>熔断半开：<strong>部分请求</strong>根据规则调用当前服务，如果请求成功目符合规则，则认为当前服务恢复正常，关闭熔断。</li></ul><p>涉及到断路器的三个重要参数快照时间窗、请求总数阀值、错误百分比阀值</p><ul><li>1：快照时间窗：断路器确定是否打开需要统计一些请求和错误数据而统计的时间范围就是快照时间窗，默认为最近的10秒。</li><li>2：请求总数阀值：在快照时间窗内，必须满足请求总数阀值才有资格熔断。默认为20，意味着在10秒内，如果该hystrix命令的调用次数不足20次，即使所有的请求都超时或具他原因失败，断路器都不会打开。</li><li>3：错误百分比阀值：当请求总数在快照时间窗内超过了阀值，上日发生了30次调用，如果在这30次调用中，有15次发生了超时异常，也就是超过50％的错误百分比，在默认设定50％阀值情况，这时候就会将断路器打开。</li></ul><blockquote><p>The precise way that the circuit opening and closing occurs is as follows:</p><ol><li>Assuming the volume across a circuit meets a certain threshold (<code>HystrixCommandProperties.circuitBreakerRequestVolumeThreshold()</code>)…</li><li>And assuming that the error percentage exceeds the threshold error percentage (<code>HystrixCommandProperties.circuitBreakerErrorThresholdPercentage()</code>)…</li><li>Then the circuit-breaker transitions from <code>CLOSED</code> to <code>OPEN</code>.</li><li>While it is open, it short-circuits all requests made against that circuit-breaker.</li><li>After some amount of time (<code>HystrixCommandProperties.circuitBreakerSleepWindowInMilliseconds()</code>), the next single request is let through (this is the <code>HALF-OPEN</code> state). If the request fails, the circuit-breaker returns to the <code>OPEN</code> state for the duration of the sleep window. If the request succeeds, the circuit-breaker transitions to <code>CLOSED</code> and the logic in <strong>1.</strong> takes over again.经过一段时间后，如果有1个尝试成功了，就慢慢尝试恢复</li></ol><p>参考：<a href="https://github.com/Netflix/Hystrix/wiki/How-it-Works#CircuitBreaker">https://github.com/Netflix/Hystrix/wiki/How-it-Works#CircuitBreaker</a></p></blockquote><p>实验效果为，多次出错调用fallback后，调用正常的也出错调用fallback。过了一会又自己恢复了。<br>展望：以后用的是Sentinel代替。</p><p>关于解耦以后的全局配置说明：</p><p>例如上面提到的全局服务降级，并且是feign+hystrix整合，即 service 实现类的方式，如何做全局配置？</p><blockquote><p>上面有 做全局配置时，设置超时时间的方式，我们可以从中获得灵感，即在yml文件中 进行熔断配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">hystrix:</span><br><span class="hljs-attr">command:</span><br><span class="hljs-attr">default:</span><br><span class="hljs-attr">circuitBreaker:</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">requestVolumeThreshold:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">sleepWindowInMilliseconds:</span> <span class="hljs-number">10000</span><br>  <span class="hljs-attr">errorThresholdPercentage:</span> <span class="hljs-number">60</span><br><span class="hljs-number">12345678</span><br></code></pre></td></tr></table></figure></blockquote><h2 id="Hystrix-DashBoard"><a href="#Hystrix-DashBoard" class="headerlink" title="Hystrix DashBoard"></a>Hystrix DashBoard</h2><p>除了隔离依赖服务的调用以外，Hystrix还提供了准实时的调用监控(HystrixDashboard)，Hystrix会持续地记录所有通过Hystrix发起的请求的执行信息，并以统计报表和图形的形式展示给用户，包括每秒执行多少请求多少成功，多少失败等。Netflix通过hystrix-metrics-event-stream实现了对以上指标的监控。SpringCloud也提供了HystrixDashboard的整合，对监控内容转化成可视化界面。</p><p>新建模块 consumer-hystrix-dashboard9001 ：</p><p>pom 文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;project xmlns=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br>         xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>         xsi:schemaLocation=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;<br>    &lt;parent&gt;<br>        &lt;artifactId&gt;cloud2022&lt;/artifactId&gt;<br>        &lt;groupId&gt;com.wzg.springcloud&lt;/groupId&gt;<br>        &lt;version&gt;<span class="hljs-number">1.0</span>-SNAPSHOT&lt;/version&gt;<br>    &lt;/parent&gt;<br>    &lt;modelVersion&gt;<span class="hljs-number">4.0</span><span class="hljs-number">.0</span>&lt;/modelVersion&gt;<br><br>    &lt;artifactId&gt;consumer-hystrix-dashboard9001&lt;/artifactId&gt;<br><br>    &lt;dependencies&gt;<br>        &lt;!-- hystrix Dashboard--&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix-dashboard&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;!-- 常规 jar 包 --&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;<br>            &lt;scope&gt;runtime&lt;/scope&gt;<br>            &lt;optional&gt;<span class="hljs-literal">true</span>&lt;/optional&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;<br>            &lt;artifactId&gt;lombok&lt;/artifactId&gt;<br>            &lt;optional&gt;<span class="hljs-literal">true</span>&lt;/optional&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;<br>            &lt;scope&gt;test&lt;/scope&gt;<br>        &lt;/dependency&gt;<br>        &lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;com.wzg.springcloud&lt;/groupId&gt;<br>            &lt;artifactId&gt;api-commons&lt;/artifactId&gt;<br>            &lt;version&gt;$&#123;project.version&#125;&lt;/version&gt;<br>        &lt;/dependency&gt;<br>    &lt;/dependencies&gt;<br><br><br>    &lt;properties&gt;<br>        &lt;maven.compiler.source&gt;<span class="hljs-number">8</span>&lt;/maven.compiler.source&gt;<br>        &lt;maven.compiler.target&gt;<span class="hljs-number">8</span>&lt;/maven.compiler.target&gt;<br>    &lt;/properties&gt;<br><br>&lt;/project&gt;<br></code></pre></td></tr></table></figure><p>yml文件只需要配置端口号，主启动类加上这样注解：@EnableHystrixDashboard</p><p>启动测试：访问 <a href="http://ocalhost:9001/hystrix">http://ocalhost:9001/hystrix</a></p><h3 id="监控实战"><a href="#监控实战" class="headerlink" title="监控实战"></a>监控实战</h3><blockquote><p>下面使用上面 9001 Hystrix Dashboard 项目，来监控 8001 项目 Hystrix 的实时情况：</p></blockquote><p>注意8001被监控的时候pom里要actuator依赖，此外还要有</p><ul><li>主启动类上加<code>@EnableCircuitBreaker</code>，用于对豪猪熔断机制的支持</li><li>然后就可以取页面里看熔断情况了。输入localhost:8001&#x2F;hystrix.stream</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/c25ab441fcf34f252a293d95a74871ce.png" alt="1597558486510"></p><h1 id="服务网关"><a href="#服务网关" class="headerlink" title="服务网关"></a>服务网关</h1><h2 id="Gateway"><a href="#Gateway" class="headerlink" title="Gateway"></a>Gateway</h2><blockquote><p>内容过多，开发可参考 <a href="https://docs.spring.io/">https://docs.spring.io/</a> 官网文档</p></blockquote><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>SpringCloud Gateway是SpringCloud的一个全新项目，基于Spring5.O+Springboot 2.0和ProjectReactor等技术开发的网关，它旨在为微服务架构提供一种简单有效的统一的API路由管理方式。</p><p>SpringCloudGateway作为SpringCloud生态系统中的网关，目标是替代Zuul,在SpringCloud2.0以上版本中，没有对新版本的zuul2.0以上最新高性能版本进行集成，仍然还是使用的Zuul 1.x非Reactor模式的老版本。而为了提升网关的性能，<strong>SpringCloud Gateway是基于WebFlux框架实现的，而webFlux框架底层则使用了高性能的Reactor模式通信框架Netty</strong>。</p><h5 id="Gateway是什么"><a href="#Gateway是什么" class="headerlink" title="Gateway是什么"></a>Gateway是什么</h5><p>Gateway特性：</p><ul><li>基于SpringFramework5，ProjectReactor和SpringBoot 2.0进行构建；</li><li>动态路由：能够匹任何请求属性；</li><li>可以对路由指定Predicate（断言）和Filter（过滤器）·</li><li>集成Hystrix的断路器功能；</li><li>集成SpringCloud服务发现功能；</li><li>易于编写的Predicate（断言）和Filter（过滤器）·</li><li>请求限流功能；</li><li>支持路径重写。</li></ul><p>GateWay的三大核心概念：</p><ul><li>Route(路由）：路由是构建网关的基本模块，它由ID、目标URI、一系列的断言和过滤器组成，如果断言为true则匹配该路由</li><li>Predicate(断言）：参考的是Java8的java.util.function.predicate。开发人员可以匹配HTTP请求中的所有内容（例如请求头或请求参数），如果请求与断言相匹配则进行路由<ul><li>匹配条件</li></ul></li><li>Filter(过滤）：指的是spring框架中GatewayFilter的实例，使用过滤器，可以在请求被路由前或者之后对请求进行修改。</li><li>例子：通过<code>断言</code>虽然进来了，但老师要罚站10min（<code>过滤器</code>操作），然后才能正常坐下听课</li></ul><p>web请求，通过一些匹配条件，定位到真正的服务节点。并在这个转发过程的前后，进行一些精细化控制。<br>而filter，就可以理解为一个无所不能的拦截器。有了这两个元素，再加上目标uri，就可以实现一个具体的路由了</p><p><img src="https://img-blog.csdnimg.cn/img_convert/b925eec3db224cb6eee4dea48732e65d.png" alt="Spring Cloud Gateway Diagram"></p><p>客户端向Spring Cloud Gateway发出请求。然后在Gateway HandlerMapping中找到与请求相匹配的路由，将其发送到Gateway Web Handler</p><p>Handler再通过指定的过滤器链来将请求发送到我们实际的服务执行业务逻辑，然后返回。</p><p>过滤器之间用虚线分开是因为过滤器可能会在发送代理请求之前（Pre）或之后（post）执行业务逻辑。</p><p><code>Filter</code>在pre类型的过滤器可以做<strong>参数校验，权限校验，流量监听，日志输出，协议转换</strong>等，</p><p>在post类型的过滤器中可以做响应内容、响应头的修改，日志的输出，流量监控等有着非常重要的作用。</p><h3 id="入门配置"><a href="#入门配置" class="headerlink" title="入门配置"></a>入门配置</h3><p>新建模块 gateway-gateway9527</p><blockquote><p>现在实现，通过Gateway (网关) 来访问其它项目，这里选择之前8001项目，要求注册进Eureka Server 。其它没要求。</p></blockquote><p>pom文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;project xmlns=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br>         xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>         xsi:schemaLocation=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;<br>    &lt;parent&gt;<br>        &lt;artifactId&gt;cloud2022&lt;/artifactId&gt;<br>        &lt;groupId&gt;com.wzg.springcloud&lt;/groupId&gt;<br>        &lt;version&gt;<span class="hljs-number">1.0</span>-SNAPSHOT&lt;/version&gt;<br>    &lt;/parent&gt;<br>    &lt;modelVersion&gt;<span class="hljs-number">4.0</span><span class="hljs-number">.0</span>&lt;/modelVersion&gt;<br><br>    &lt;artifactId&gt;gateway-gateway9527&lt;/artifactId&gt;<br><br>    &lt;dependencies&gt;<br>        &lt;!--gateway--&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br>        &lt;!--eureka-client gateWay网关作为一种微服务，也要注册进服务中心。哪个注册中心都可以，如zk--&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br>        &lt;!-- gateway和spring web+actuator不能同时存在，即web相关jar包不能导入 --&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;<br>            &lt;scope&gt;runtime&lt;/scope&gt;<br>            &lt;optional&gt;<span class="hljs-literal">true</span>&lt;/optional&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;<br>            &lt;artifactId&gt;lombok&lt;/artifactId&gt;<br>            &lt;optional&gt;<span class="hljs-literal">true</span>&lt;/optional&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;<br>            &lt;scope&gt;test&lt;/scope&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;<br>            &lt;groupId&gt;com.wzg.springcloud&lt;/groupId&gt;<br>            &lt;artifactId&gt;api-commons&lt;/artifactId&gt;<br>            &lt;version&gt;$&#123;project.version&#125;&lt;/version&gt;<br>        &lt;/dependency&gt;<br>    &lt;/dependencies&gt;<br><br><br>    &lt;properties&gt;<br>        &lt;maven.compiler.source&gt;<span class="hljs-number">8</span>&lt;/maven.compiler.source&gt;<br>        &lt;maven.compiler.target&gt;<span class="hljs-number">8</span>&lt;/maven.compiler.target&gt;<br>    &lt;/properties&gt;<br><br>&lt;/project&gt;<br></code></pre></td></tr></table></figure><p>yml文件：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9527</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">gateway9527</span><br>  <span class="hljs-comment">## GateWay配置</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">locator:</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 开启从注册中心动态创建路由的功能，利用微服务名进行路由</span><br>      <span class="hljs-attr">routes:</span> <span class="hljs-comment">#多个路由</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">payment_routh</span>  <span class="hljs-comment"># 路由ID ， 没有固定的规则但要求唯一，建议配合服务名</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://PROVIDER-SERVICE</span> <span class="hljs-comment"># lb 属于GateWay 的关键字，代表是动态uri，即代表使用的是服务注册中心的微服务名，它默认开启使用负载均衡机制</span><br><span class="hljs-comment">#          uri: http://localhost:8001  # 匹配后提供服务的路由地址 #uri+predicates  # 要访问这个路径得先经过9527处理</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/payment/**</span>  <span class="hljs-comment"># 断言，路径相匹配的进行路由</span><br>            <span class="hljs-comment">#- After=2022-02-21T15:51:37.485+08:00[Asia/Shanghai]</span><br>            <span class="hljs-comment">#- Cookie=username,wzg</span><br>            <span class="hljs-comment">#- Header=X-Request-Id, \d+  # 请求头要有X-Request-Id属性并且值为整数的正则表达式</span><br><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">payment_routh2</span>  <span class="hljs-comment"># 路由ID ， 没有固定的规则但要求唯一，建议配合服务名</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://PROVIDER-SERVICE</span><br><span class="hljs-comment">#          uri: http://localhost:8001  # 匹配后提供服务的路由地址</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/payment/lb/**</span>  <span class="hljs-comment"># 断言，路径相匹配的进行路由</span><br><br><span class="hljs-comment"># 注册进 eureka Server # 网关他本身也是一个微服务，也要注册进注册主中心</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">gateway-service</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://eureka7001.com:7001/eureka/</span><br>      <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GatewayMain9527</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(GatewayMain9527.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>8001看看controller的访问地址，我们目前不想暴露8001端口，希望在8001外面套一层9527。这样别人就攻击不了8001，有网关挡着</p><p>访问测试：</p><ul><li>1 启动eureka Server，</li><li>2 启动 8001 项目，</li><li>3 启动 9527（Gateway项目）</li></ul><blockquote><p>可见，当我们访问 <a href="http://localhost:9527/payment/get/1">http://localhost:9527/payment/get/1</a> 时，即访问网关地址时，会给我们转发到 8001 项目的请求地址，以此作出响应。</p><p>加入网关前：<a href="http://localhost:8001/payment/get/1">http://localhost:8001/payment/get/1</a></p><p>加入网关后：<a href="http://localhost:9527/payment/get/1">http://localhost:9527/payment/get/1</a></p></blockquote><p>上面是以 yml 文件配置的路由，也有使用config类配置的方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud.config;<br><br><span class="hljs-keyword">import</span> org.springframework.cloud.gateway.route.RouteLocator;<br><span class="hljs-keyword">import</span> org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GateWayConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RouteLocator <span class="hljs-title function_">customRouteLocator</span><span class="hljs-params">(RouteLocatorBuilder routeLocatorBuilder)</span>&#123;<br>        RouteLocatorBuilder.<span class="hljs-type">Builder</span> <span class="hljs-variable">routes</span> <span class="hljs-operator">=</span> routeLocatorBuilder.routes();<br><br>        <span class="hljs-comment">// 分别是id，本地址，转发到的地址</span><br>        routes.route(<span class="hljs-string">&quot;path_route_wzg&quot;</span>,<br>                r -&gt; r.path(<span class="hljs-string">&quot;/guonei&quot;</span>).uri(<span class="hljs-string">&quot;http://news.baidu.com/guonei&quot;</span>)<br>        ).build();<span class="hljs-comment">//JDK8新特性</span><br><br>        <span class="hljs-keyword">return</span> routes.build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="动态配置"><a href="#动态配置" class="headerlink" title="动态配置"></a>动态配置</h3><blockquote><p>这里所谓的动态配置就是利用服务注册中心，来实现 负载均衡 的调用 多个微服务。</p><p>默认情况下gateway会根据注册中心注册的服务列表，以注册中心上微服务名为路径创建动态路由进行转发，从而实现动态路由的功能</p><p>注意，这是GateWay 的负载均衡</p></blockquote><p>对yml进行配置：让其先通过gateway，再通过gateway去注册中心找提供者</p><h3 id="Gateway-Predicate"><a href="#Gateway-Predicate" class="headerlink" title="Gateway:Predicate"></a>Gateway:Predicate</h3><blockquote><p>注意到上面yml配置中，有个predicates 属性值。</p></blockquote><ul><li>1 After Route Predicate</li><li>2 Before Route Predicate</li><li>3 Between Route Predicate</li><li>4 Cookie Route Predicate</li><li>5 Header Route Predicate</li><li>6 Host Route Predicate</li><li>7 Method Route Predicate</li><li>8 Path Route Predicate</li><li>9 Query Route Predicate</li></ul><p>具体使用：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">cloud-gateway</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">locator:</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#开启从注册中心动态创建路由的功能，利用微服务名进行路由</span><br>      <span class="hljs-attr">routes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">payment_routh</span> <span class="hljs-comment">#payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名</span><br>          <span class="hljs-comment">#uri: http://localhost:8001          #匹配后提供服务的路由地址</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://cloud-payment-service</span> <span class="hljs-comment">#匹配后提供服务的路由地址</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/payment/get/**</span>         <span class="hljs-comment"># 断言，路径相匹配的进行路由</span><br><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">payment_routh2</span> <span class="hljs-comment">#payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名</span><br>          <span class="hljs-comment">#uri: http://localhost:8001          #匹配后提供服务的路由地址</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://cloud-payment-service</span> <span class="hljs-comment">#匹配后提供服务的路由地址</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/payment/lb/**</span>         <span class="hljs-comment"># 断言，路径相匹配的进行路由</span><br>            <span class="hljs-comment">#- After=2020-02-21T15:51:37.485+08:00[Asia/Shanghai]</span><br>            <span class="hljs-comment">#- Cookie=username,zzyy</span><br>            <span class="hljs-comment">#- Header=X-Request-Id, \d+  # 请求头要有X-Request-Id属性并且值为整数的正则表达式</span><br></code></pre></td></tr></table></figure><p>predicates下面可以有多个属性，表示多个属性与操作为true这个路由才生效</p><p>predicates属性下的After属性</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">predicates:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/payment/lb/**</span> <br>          <span class="hljs-bullet">-</span> <span class="hljs-string">After=2020-02-21T15:51:37.485+08:00[Asia/Shanghai]</span> <span class="hljs-comment"># 会在这个时间之后这个路由才生效</span><br></code></pre></td></tr></table></figure><p>predicates属性下的Cookie属性</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">predicates:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">Cookie=username,zzyy,ch.p</span> <span class="hljs-comment"># 需要有这个Cookie值才生效  最后一个是正则表达式</span><br><span class="hljs-comment"># curl 地址 --cookie &quot;a=b&quot;</span><br></code></pre></td></tr></table></figure><p>predicates属性下的Header属性</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">routes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">header_route</span><br>        <span class="hljs-attr">uri:</span> <span class="hljs-string">https://example.org</span><br>        <span class="hljs-attr">predicates:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">Header=X-Request-Id,</span> <span class="hljs-string">\d+</span><br><span class="hljs-number">12345678</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">routes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">host_route</span><br>        <span class="hljs-attr">uri:</span> <span class="hljs-string">https://example.org</span><br>        <span class="hljs-attr">predicates:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">Host=**.somehost.org,**.anotherhost.org</span>  <span class="hljs-comment"># Host Route Predicate Factory接收一组参数，一组匹配的域名列表，这个模板是一个ant分隔的模板，用.号作为分隔符。它通过参数中的主机地址作为匹配规则</span><br>        <br>        <br>        <span class="hljs-comment"># 放爬虫思路，前后端分离的话，只限定前端项目主机访问，这样可以屏蔽大量爬虫。</span><br><br><span class="hljs-string">例如我加上：</span> <span class="hljs-bullet">-</span> <span class="hljs-string">Host=localhost:**</span>       <span class="hljs-string">**</span> <span class="hljs-string">代表允许任何端口</span><br><br><span class="hljs-string">就只能是主机来访</span><br></code></pre></td></tr></table></figure><p>更多属性可以参考：<a href="https://docs.spring.io/spring-cloud-gateway/docs/2.2.5.RELEASE/reference/html/#configuring-route-predicate-factories-and-gateway-filter-factories">https://docs.spring.io/spring-cloud-gateway/docs/2.2.5.RELEASE/reference/html/#configuring-route-predicate-factories-and-gateway-filter-factories</a></p><p>需要注意的是value部分写的是正则表达式</p><p>高并发工具：jmeter、postman、curl</p><p>配置错误页面:</p><blockquote><p>注意，springboot默认&#x2F;static&#x2F;error&#x2F; 下错误代码命名的页面为错误页面，即 404.html</p><p>而且不需要导入额外的包，Gateway 里面都有。</p></blockquote><h3 id="Gateway-Filter"><a href="#Gateway-Filter" class="headerlink" title="Gateway:Filter"></a>Gateway:Filter</h3><p>生命周期：</p><ul><li>pre：</li><li>post：</li></ul><p>种类：</p><ul><li>GatewayFilter：<a href="https://docs.spring.io/spring-cloud-gateway/docs/2.2.5.RELEASE/reference/html/#gatewayfilter-factories">https://docs.spring.io/spring-cloud-gateway/docs/2.2.5.RELEASE/reference/html/#gatewayfilter-factories</a></li><li>GlobalFilter：<a href="https://docs.spring.io/spring-cloud-gateway/docs/2.2.5.RELEASE/reference/html/#global-filters">https://docs.spring.io/spring-cloud-gateway/docs/2.2.5.RELEASE/reference/html/#global-filters</a></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">routes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">add_request_header_route</span><br>        <span class="hljs-attr">uri:</span> <span class="hljs-string">https://example.org</span><br>        <span class="hljs-attr">filters:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">AddRequestHeader=X-Request-red,</span> <span class="hljs-string">blue</span> <span class="hljs-comment"># 添加了个请求头X-Request-red</span><br></code></pre></td></tr></table></figure><p>主要是配置全局自定义过滤器，其它的小配置具体看官网吧</p><p>2个主要接口：<code>implements GlobalFilter,Ordered</code></p><p>场景：</p><ul><li>全局日志记录</li><li>统一网关鉴权</li><li>。。。</li></ul><p>自定义全局过滤器配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud.filter;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;<br><span class="hljs-keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;<br><span class="hljs-keyword">import</span> org.springframework.core.Ordered;<br><span class="hljs-keyword">import</span> org.springframework.http.HttpStatus;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.web.server.ServerWebExchange;<br><span class="hljs-keyword">import</span> reactor.core.publisher.Mono;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyLogGateWayFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">GlobalFilter</span>, Ordered &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title function_">filter</span><span class="hljs-params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;<br><br>        log.info(<span class="hljs-string">&quot;********** come in MyLogGateWayFilter:  &quot;</span>+<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">uname</span> <span class="hljs-operator">=</span> exchange.getRequest().getQueryParams().getFirst(<span class="hljs-string">&quot;uname&quot;</span>);<br>        <span class="hljs-comment">//合法性检验</span><br>        <span class="hljs-keyword">if</span>(uname == <span class="hljs-literal">null</span>) &#123;<br>            log.info(<span class="hljs-string">&quot;*******用户名为null，非法用户，o(╥﹏╥)o，请求不被接受&quot;</span>);<br>            <span class="hljs-comment">//设置 response 状态码   因为在请求之前过滤的，so就算是返回NOT_FOUND 也不会返回错误页面</span><br>            exchange.getResponse().setStatusCode(HttpStatus.NOT_ACCEPTABLE);<br>            <span class="hljs-comment">//完成请求调用</span><br>            <span class="hljs-keyword">return</span> exchange.getResponse().setComplete();<br>        &#125;<br>        <span class="hljs-comment">//过滤链放行</span><br>        <span class="hljs-keyword">return</span> chain.filter(exchange);<br>    &#125;<br><br>    <span class="hljs-comment">// 返回值是加载顺序，一般全局的都是第一位加载</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getOrder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>在实际使用中，大部分是自己配置过滤器</p>]]></content>
    
    
    <categories>
      
      <category>SpringCloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud学习笔记(3)</title>
    <link href="/2022/09/18/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(3)/"/>
    <url>/2022/09/18/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(3)/</url>
    
    <content type="html"><![CDATA[<h2 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h2><p>springCloud 整合 zookeeper</p><ul><li>zookeeper是一个分布式协调工具，可以实现注册中心功能</li><li>关闭Linux服务器防火墙后动zookeeper服务器</li><li>zookeeper服务器取代Eureka服务器，zk作为服务注册中心</li></ul><h5 id="提供者"><a href="#提供者" class="headerlink" title="提供者"></a>提供者</h5><p>新建模块provider-payment8004</p><h5 id="pom"><a href="#pom" class="headerlink" title="pom:"></a>pom:</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;project xmlns=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br>         xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>         xsi:schemaLocation=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;<br>    &lt;parent&gt;<br>        &lt;artifactId&gt;cloud2022&lt;/artifactId&gt;<br>        &lt;groupId&gt;com.wzg.springcloud&lt;/groupId&gt;<br>        &lt;version&gt;<span class="hljs-number">1.0</span>-SNAPSHOT&lt;/version&gt;<br>    &lt;/parent&gt;<br>    &lt;modelVersion&gt;<span class="hljs-number">4.0</span><span class="hljs-number">.0</span>&lt;/modelVersion&gt;<br><br>    &lt;artifactId&gt;provider-payment8004&lt;/artifactId&gt;<br><br>    &lt;dependencies&gt;<br>        &lt;!--springcloud 整合 zookeeper 组件--&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>            &lt;!--zk发现--&gt;<br>            &lt;artifactId&gt;spring-cloud-starter-zookeeper-discovery&lt;/artifactId&gt;<br>            &lt;exclusions&gt;<br>                &lt;exclusion&gt;<br>                    &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt;<br>                    &lt;artifactId&gt;zookeeper&lt;/artifactId&gt;<br>                &lt;/exclusion&gt;<br>            &lt;/exclusions&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt;<br>            &lt;artifactId&gt;zookeeper&lt;/artifactId&gt;<br>            &lt;version&gt;<span class="hljs-number">3.4</span><span class="hljs-number">.9</span>&lt;/version&gt;<br>            &lt;exclusions&gt;<br>                &lt;exclusion&gt;<br>                    &lt;groupId&gt;org.slf4j&lt;/groupId&gt;<br>                    &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;<br>                &lt;/exclusion&gt;<br>            &lt;/exclusions&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;dependency&gt;<br>            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;<br>            &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;<br>            &lt;version&gt;<span class="hljs-number">1.1</span><span class="hljs-number">.10</span>&lt;/version&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;!--mysql-connector-java--&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;mysql&lt;/groupId&gt;<br>            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;!--jdbc--&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;<br>            &lt;scope&gt;runtime&lt;/scope&gt;<br>            &lt;optional&gt;<span class="hljs-literal">true</span>&lt;/optional&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;<br>            &lt;artifactId&gt;lombok&lt;/artifactId&gt;<br>            &lt;optional&gt;<span class="hljs-literal">true</span>&lt;/optional&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;<br>            &lt;scope&gt;test&lt;/scope&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;dependency&gt;&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;<br>            &lt;groupId&gt;com.wzg.springcloud&lt;/groupId&gt;<br>            &lt;artifactId&gt;api-commons&lt;/artifactId&gt;<br>            &lt;version&gt;$&#123;project.version&#125;&lt;/version&gt;<br>        &lt;/dependency&gt;<br><br>    &lt;/dependencies&gt;<br><br>    &lt;properties&gt;<br>        &lt;maven.compiler.source&gt;<span class="hljs-number">8</span>&lt;/maven.compiler.source&gt;<br>        &lt;maven.compiler.target&gt;<span class="hljs-number">8</span>&lt;/maven.compiler.target&gt;<br>    &lt;/properties&gt;<br><br>&lt;/project&gt;<br></code></pre></td></tr></table></figure><h5 id="yml"><a href="#yml" class="headerlink" title="yml:"></a>yml:</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8004</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">payment-service</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span>      <span class="hljs-comment">#当前数据源操作类型</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">org.gjt.mm.mysql.Driver</span>        <span class="hljs-comment">#mysql驱动包</span><br>    <span class="hljs-comment">#    driver-class-name: com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/wzg_db01?useUnicode=true&amp;characterEncoding-utr-8&amp;useSSL=false</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123</span><br>    <span class="hljs-attr">druid:</span><br>      <span class="hljs-attr">test-while-idle:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">validation-query:</span> <span class="hljs-string">SELECT</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">zookeeper:</span><br>      <span class="hljs-attr">connect-string:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.130</span><span class="hljs-string">:2181</span> <span class="hljs-comment"># zk地址</span><br></code></pre></td></tr></table></figure><h5 id="主启动类："><a href="#主启动类：" class="headerlink" title="主启动类："></a>主启动类：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;<br><br><span class="hljs-meta">@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)</span><br><span class="hljs-meta">@EnableDiscoveryClient</span>  <span class="hljs-comment">// 以后用这个就可以了，不用eureka了</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PaymentMain8004</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        SpringApplication.run(PaymentMain8004.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Controller"><a href="#Controller" class="headerlink" title="Controller :"></a>Controller :</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud.controller;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><span class="hljs-keyword">import</span> java.util.UUID;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PaymentController</span> &#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String serverPort;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/payment/zk&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">paymentzk</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;springcloud with zookeeper :&quot;</span> + serverPort + <span class="hljs-string">&quot;\t&quot;</span> + UUID.randomUUID().toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>问题1:因为引入了mybatis但没有指定mapper运行时idea发出警告</p><p>解决方法：8004模块中暂时还没用到sql我直接就把依赖移除了</p><p>问题2:设置了jdbc或mysql未指定数据源运行时idea发出警告</p><p>解决方法：在yml中写入指定数据源在主启动类上添加@SpringBootApplication(exclude &#x3D; DataSourceAutoConfiguration.class)</p><p>问题3：idea运行时报错：KeeperErrorCode &#x3D; ConnectionLoss</p><p>解决方法：我一开始用的zookeeper是3.7.1，Linux上用的也是这个但还是报错，我就换回了视频上的3.4.9</p><p>问题4：zookeeper版本冲突，和slf4j冲突</p><p>解决方法：在依赖中用exclusions排除其他版本的包</p><p>问题5：java.net.ConnectException: Connection timed out: no further information</p><p>解决方法:这个问题很常见，可能是Linux防火墙没关，我是关了防火墙但没开放2181端口。重新打开防火墙并开放2181端口就OK了</p><h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><blockquote><p>创建测试zookeeper作为服务注册中心的 消费者 模块 cloud-customerzk-order80</p><p>主启动类、pom文件、yml文件和提供者的类似</p></blockquote><h5 id="config"><a href="#config" class="headerlink" title="config"></a>config</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud.config;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringBootConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootConfiguration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApplicationContextConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@LoadBalanced</span> <span class="hljs-comment">// 继续加上这个</span><br>    <span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title function_">getTemplate</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud.controller;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderZKController</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String INVOKE_URL=<span class="hljs-string">&quot;http://payment-service&quot;</span>; <span class="hljs-comment">//和原来一样</span><br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RestTemplate restTemplate;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/consumer/payment/zk&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">paymentInfo</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> restTemplate.getForObject(INVOKE_URL + <span class="hljs-string">&quot;/payment/zk&quot;</span>,String.class);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试:</p><p><a href="http://localhost:8004/payment/zk">localhost:8004&#x2F;payment&#x2F;zk</a></p><p><a href="http://localhost/consumer/payment/zk">localhost&#x2F;consumer&#x2F;payment&#x2F;zk</a></p><p>关于 zookeeper 的集群搭建，目前使用较少，而且在 yml 文件中的配置也是类似，以列表形式写入 zookeeper 的多个地址即可，而且zookeeper 集群，在 hadoop的笔记中也有记录。总而言之，只要配合zookeeper集群，以及yml文件的配置就能完成集群搭建</p><p>后面会用ribbon代替RestTemplate</p><h2 id="Consul"><a href="#Consul" class="headerlink" title="Consul"></a>Consul</h2><blockquote><p>consul也是服务注册中心的一个实现，是由go语言写的。官网地址： <a href="https://www.consul.io/intro">https://www.consul.io/intro</a> 中文地址： <a href="https://www.springcloud.cc/spring-cloud-consul.html">https://www.springcloud.cc/spring-cloud-consul.html</a><br>Consul是一套开源的分布式服务发现和配置管理系统。<br>提供了微服务系统中的服务治理，配置中心，控制总线等功能。这些功能中的每一个都可以根据需要单独使用，也可以一起使用以构建全方位的服务网络。</p></blockquote><ul><li>服务发现：提供HTTP和DNS两种发现方式</li><li>健康监测：支持多种方式，HTTP、TCP、Docker、Shell脚本定制化</li><li>KV存储：Key、Value的存储方式</li><li>多数据中心：Consul支持多数据中心</li><li>可视化Web界面</li></ul><h3 id="安装并运行"><a href="#安装并运行" class="headerlink" title="安装并运行"></a>安装并运行</h3><blockquote><p>下载地址：<a href="https://www.consul.io/downloads.html">https://www.consul.io/downloads.html</a></p><p>打开下载的压缩包，只有一个exe文件，实际上是不用安装的，在exe文件所在目录打开dos窗口使用即可。</p><p>使用开发模式启动：consul agent -dev</p><p>访问8500端口，即可访问首页</p></blockquote><h3 id="提供者-1"><a href="#提供者-1" class="headerlink" title="提供者"></a>提供者</h3><blockquote><p>新建提供者模块：providerconsul-service8006</p></blockquote><p>pom 文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;project xmlns=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br>         xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>         xsi:schemaLocation=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;<br>    &lt;parent&gt;<br>        &lt;artifactId&gt;cloud2022&lt;/artifactId&gt;<br>        &lt;groupId&gt;com.wzg.springcloud&lt;/groupId&gt;<br>        &lt;version&gt;<span class="hljs-number">1.0</span>-SNAPSHOT&lt;/version&gt;<br>    &lt;/parent&gt;<br>    &lt;modelVersion&gt;<span class="hljs-number">4.0</span><span class="hljs-number">.0</span>&lt;/modelVersion&gt;<br><br>    &lt;artifactId&gt;providerconsul-payment8006&lt;/artifactId&gt;<br><br>    &lt;dependencies&gt;<br>        &lt;!--springcloud consul server--&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-cloud-starter-consul-discovery&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;!-- springboot整合Web组件 --&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;!-- 日常通用jar包 --&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;<br>            &lt;artifactId&gt;lombok&lt;/artifactId&gt;<br>            &lt;optional&gt;<span class="hljs-literal">true</span>&lt;/optional&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;<br>            &lt;scope&gt;test&lt;/scope&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;dependency&gt;&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;<br>            &lt;groupId&gt;com.wzg.springcloud&lt;/groupId&gt;<br>            &lt;artifactId&gt;api-commons&lt;/artifactId&gt;<br>            &lt;version&gt;$&#123;project.version&#125;&lt;/version&gt;<br>        &lt;/dependency&gt;<br><br>    &lt;/dependencies&gt;<br><br>    &lt;properties&gt;<br>        &lt;maven.compiler.source&gt;<span class="hljs-number">8</span>&lt;/maven.compiler.source&gt;<br>        &lt;maven.compiler.target&gt;<span class="hljs-number">8</span>&lt;/maven.compiler.target&gt;<br>    &lt;/properties&gt;<br><br>&lt;/project&gt;<br></code></pre></td></tr></table></figure><p>yml 文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8006</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">payment-service</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">consul:</span><br>      <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">8500</span><br>      <span class="hljs-attr">discovery:</span>    <span class="hljs-comment"># 指定注册对外暴露的服务名称</span><br>        <span class="hljs-attr">service-name:</span> <span class="hljs-string">$&#123;spring.application.name&#125;</span><br></code></pre></td></tr></table></figure><p>主启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)</span><br><span class="hljs-meta">@EnableDiscoveryClient</span> <span class="hljs-comment">// 提供者</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConsulProviderMain8006</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(ConsulProviderMain8006.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud.controller;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> java.util.UUID;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PaymentController</span> &#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String serverPort;<br><br>    <span class="hljs-meta">@GetMapping(value = &quot;/payment/consul&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">paymentConsul</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;springcloud with consul: &quot;</span>+serverPort+<span class="hljs-string">&quot;\t&quot;</span>+ UUID.randomUUID().toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="消费者-1"><a href="#消费者-1" class="headerlink" title="消费者"></a>消费者</h3><blockquote><p>新建 一个 在80端口的 消费者模块。pom和yml和提供者的类似，主启动类不用说,模块为consumerconsul-order80</p></blockquote><p>bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud.bean;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApplicationContextConfig</span> &#123;<br><br>    <span class="hljs-meta">@LoadBalanced</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title function_">getRestTemplate</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud.controller;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderConsulController</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">INVOME_URL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://payment-service&quot;</span>;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RestTemplate restTemplate;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/consumer/payment/consul&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">payment</span> <span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> restTemplate.getForObject(INVOME_URL+<span class="hljs-string">&quot;/payment/consul&quot;</span>,String.class);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><table><thead><tr><th>组件名</th><th>语言</th><th>CAP</th><th>服务健康检查</th><th>对外暴露接口</th><th>SpringCloud集合</th></tr></thead><tbody><tr><td>Eureka</td><td>java</td><td>AP</td><td>可配支持</td><td>HTTP</td><td>已集成</td></tr><tr><td>Consul</td><td>Go</td><td>CP</td><td>支持</td><td>HTTP&#x2F;DNS</td><td>已集成</td></tr><tr><td>Zookeeper</td><td>java</td><td>CP</td><td>支持</td><td>客户端</td><td>已集成</td></tr></tbody></table><p>CAP：</p><ul><li>C：Consitency 强一致性</li><li>A：Available 可用性</li><li>P：Partition tolerance 分区容错性</li></ul><p>CAP理论关注粒度是数据，而不是整体系统设计的</p><p><img src="https://img-blog.csdnimg.cn/img_convert/6151d7b348a7cf02a5107bc2821667a6.png" alt=" "></p><h2 id="Ribbon"><a href="#Ribbon" class="headerlink" title="Ribbon"></a>Ribbon</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>SpringCloud Ribbon是基于NetfIixRibbon实现的一套<strong>客户端</strong>负载均衡的工具。</p><p>简单的说，Ribbon是Neix发布的开源项目，主要功能是提供<strong>客户端的软件负载均衡算法和服务调用</strong>。Ribbon客户端组件提供一系列完善的配置项如<strong>连接超时，重试</strong>等。简单的说，就是在配置文件中列出LoadBalancer（简称LB)后面所有的机器，Ribbon会自动的帮助你基于某种规则（如简单轮询，随机连接等）去连接这些机器。我们很容易使用Ribbon实现自定义的负载均衡算法。</p><p>LB负载均衡(LoadBalance)是什么？</p><p>简单的说就是将用户的请求平摊的分配到多个服务上，从而达到系统的HA（高可用）。</p><p>常见的负载均衡有软件Nginx，LVS，硬件F5等。</p><p>Ribbon本地负载均衡客户端 VS Nginx服务端负载均衡区别：</p><ul><li>Nginx是<strong>服务器负载均衡</strong>（集中式LB），客户端所有请求都会交给nginx，然后由nginx实现转发请求。即负载均衡是由服务端实现的。</li><li>Ribbon是<strong>本地负载均衡</strong>（进程内LB），在调用微服务接口时候，会<strong>在注册中心上获取注册信息服务列表之后缓存到JVM本地</strong>，从而在本地实现RPC远程服务调用技术。</li><li>集中式LB：即在服务的消费方和提供方之间使用独立的LB设施（可以是硬件，如F5，也可以是软件，如nginx),由该设施负责把访问请求通过某种策略转发至服务的提供方；</li><li>进程内LB：将LB逻辑集成到消费方，消费方从服务注册中心获知有哪些地址可用，然后自己再从这些地址中选择出一个合适的服务器！Ribbon就属于进程内LB,它只是一个类库，集成于消费方进程，消费方通过它来获取到服务提供方的地址。</li></ul><p>Ribbon在工作时分成两步：</p><ul><li>第一步先选择Eureka Server，它优先选择在同一个区域内负载较少的server</li><li>第二步再根据用户指定的策略，在从server取到的服务注册列表中选择一个地址。<ul><li>其中Ribbon提供了多种策略：比如轮询、随相和根据响应时间加权。</li></ul></li></ul><p>上面在eureka时，确实实现了负载均衡机制，那是因为 <strong>eureka-client包里面自带着ribbon</strong>：</p><blockquote><p>一句话，<strong>Ribbon 就是 负载均衡 + RestTemplate 调用</strong>。实际上不止eureka的jar包有，zookeeper的jar包，还有consul的jar包都包含了他，就是上面使用的服务调用。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/img_convert/20b76c287a08e1e165691a87a9db1984.png" alt="1597385486515"></p><p>如果自己添加，在 模块的 pom 文件中引入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>1234<br></code></pre></td></tr></table></figure><h5 id="RestTemplate"><a href="#RestTemplate" class="headerlink" title="RestTemplate"></a>RestTemplate</h5><p>对于RestTemplate 的一些说明：</p><blockquote><p>有两种请求方式：post和get ,还有两种返回类型：object 和 Entity</p></blockquote><ul><li>getForObject()&#x2F;getForEntity()<ul><li>Object：返回对象响应体中数据转化成的对象，基本上可以理解成json</li><li>Entity：返回对象是ResponseEntity对象，包含了响应中的一些重要信息，比如响应头、响应状态码、响应体等</li><li>返回的<code>entity.getBody()</code>即得到了Object</li></ul></li><li>postForObject()&#x2F;postForEntity()</li></ul><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>IRule：根据特定算法从服务列表中选择一个要访问的服务</p><p>Ribbon 负载均衡规则类型：</p><ul><li>com.netflix.loadbalancer.RoundRobinRule：轮询</li><li>com.netflix.loadbalancer.RandomRule：随机</li><li>com.netfIix.IoadbaIancer.RetryRuIe：先按照RoundRobinRule的策略获取服务，如果获取服务失败则在指定时间内会进行重试，获取可用的服务</li><li>WeightedResponseTimeRule：对RoundRobinRule的扩展，响应速度越快的实例选择权重越大，越容易被选择</li><li>BestAvailableRule：会先过滤掉由于多次访问故障而处于断路器跳闸状态的服务，然后选择一个并发量最小的服务</li><li>AvailabilityFilteringRule：先过滤掉故障实例，再选择并发较小的实例</li><li>ZoneAvoidanceRule：默认规则，复合判断server所在区域的性能和server的可用性选择服务器</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/3fab156f64a839166f24865f6a425390.png" alt="img"></p><p>配置负载均衡规则：</p><p>官方文档明确给出了警告：</p><blockquote><p>这个自定义配置类不能放在@ComponentScan 所扫描的当前包下以及子包下，否则我们自定义的这个配置类就会被所有的Ribbon客户端所共享，达不到特殊化定制的目的了。</p></blockquote><p>注意上面说的，而Springboot主启动类上的 @SpringBootApplication 注解，相当于加了@ComponentScan注解，会自动扫描当前包及子包，所以注意不要放在SpringBoot主启动类的包内。</p><p>创建包：</p><ul><li>java<ul><li>com.hh<ul><li>myrule<ul><li>MySelfRule.java</li></ul></li><li>springcloud<ul><li>主启动类</li></ul></li></ul></li></ul></li></ul><p>在这个包下新建 MySelfRule类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.dkf.myrule;<br><br><span class="hljs-keyword">import</span> com.netflix.loadbalancer.IRule;<br><span class="hljs-keyword">import</span> com.netflix.loadbalancer.RandomRule;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MySelfRule</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> IRule <span class="hljs-title function_">myrule</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomRule</span>(); <span class="hljs-comment">//负载均衡规则定义为随机</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后在主启动类上添加如下注解 @RibbonClient：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.dkf.springcloud;<br><br><span class="hljs-keyword">import</span> com.dkf.myrule.MySelfRule;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-meta">@RibbonClient(name=&quot;CLOUD-PROVIDER-SERVICE&quot;, configuration = MySelfRule.class)</span><span class="hljs-comment">//指定该负载均衡规则对哪个提供者服务使用 ， 加载自定义规则的配置类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderMain80</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        SpringApplication.run(OrderMain80.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="轮询算法原理"><a href="#轮询算法原理" class="headerlink" title="轮询算法原理"></a>轮询算法原理</h3><p><strong>负载均衡轮询算法</strong> ：</p><p>rest接口第几次请求次数 % 服务器集群总数量 &#x3D; 实际调用服务器位置下标</p><p>每次服务器重启后，rest接口计数从1开始。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/bbbad3b38503c1d502c364aa8849c715.png" alt="1597387609476"></p><p>ribbon源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> AtomicInteger nextServerCyclicCounter;<br><br><span class="hljs-keyword">public</span> Server <span class="hljs-title function_">choose</span><span class="hljs-params">(ILoadBalancer lb, Object key)</span> &#123;<br><br>    <span class="hljs-type">Server</span> <span class="hljs-variable">server</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (server == <span class="hljs-literal">null</span> &amp;&amp; count++ &lt; <span class="hljs-number">10</span>) &#123;<br>        List&lt;Server&gt; reachableServers = lb.getReachableServers();<br>        List&lt;Server&gt; allServers = lb.getAllServers();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">upCount</span> <span class="hljs-operator">=</span> reachableServers.size();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">serverCount</span> <span class="hljs-operator">=</span> allServers.size();<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">nextServerIndex</span> <span class="hljs-operator">=</span> incrementAndGetModulo(serverCount);<br>        server = allServers.get(nextServerIndex);<br><br>        <span class="hljs-keyword">if</span> (server == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">/* Transient. */</span><br>            Thread.yield();<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (server.isAlive() &amp;&amp; (server.isReadyToServe())) &#123;<br>            <span class="hljs-keyword">return</span> (server);<br>        &#125;<br><br>        <span class="hljs-comment">// Next.</span><br>        server = <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (count &gt;= <span class="hljs-number">10</span>) &#123;<br>        log.warn(<span class="hljs-string">&quot;No available alive servers after 10 tries from load balancer: &quot;</span>  + lb);<br>    &#125;<br>    <span class="hljs-keyword">return</span> server;<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">incrementAndGetModulo</span><span class="hljs-params">(<span class="hljs-type">int</span> modulo)</span> &#123;<br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> nextServerCyclicCounter.get();<span class="hljs-comment">//获取原子的值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> (current + <span class="hljs-number">1</span>) % modulo;<br>        <span class="hljs-keyword">if</span> (nextServerCyclicCounter.compareAndSet(current, next)) <span class="hljs-comment">//CAS</span><br>            <span class="hljs-keyword">return</span> next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>手写负载算法：cas+自旋</p><p>首先8001、8002服务controller层加上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/payment/lb&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPaymentLB</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> SERVER_PORT;<br>&#125;<br></code></pre></td></tr></table></figure><p>LoadBalancer接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.cloud.client.ServiceInstance;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">LoadBalancer</span> &#123;<br>    ServiceInstance <span class="hljs-title function_">instances</span><span class="hljs-params">(List&lt;ServiceInstance&gt; serviceInstances)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.cloud.client.ServiceInstance;<br><span class="hljs-keyword">import</span> java.sql.SQLOutput;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyLB</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">LoadBalancer</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">atomicInteger</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAndIncrement</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> current;<br>        <span class="hljs-type">int</span> next;<br><br>        <span class="hljs-keyword">do</span> &#123;<br>            current = <span class="hljs-built_in">this</span>.atomicInteger.get();<br>            next = current &gt;= Integer.MAX_VALUE ? <span class="hljs-number">0</span> : current + <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">while</span> (!atomicInteger.compareAndSet(current, next));<br>        System.out.println(<span class="hljs-string">&quot;第几次访问,次数next:&quot;</span> + next);<br>        <span class="hljs-keyword">return</span> next;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ServiceInstance <span class="hljs-title function_">instances</span><span class="hljs-params">(List&lt;ServiceInstance&gt; serviceInstances)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> getAndIncrement() % serviceInstances.size();<br>        <span class="hljs-keyword">return</span> serviceInstances.get(index);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>controller类中添加：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/consumer/payment/lb&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPaymentLB</span><span class="hljs-params">()</span> &#123;<br>    List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="hljs-string">&quot;CLOUD-PAYMENT-SERVICE&quot;</span>);<span class="hljs-comment">//获得总的提供者数</span><br>    <span class="hljs-keyword">if</span> (instances == <span class="hljs-literal">null</span> || instances.size() &lt;= <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-type">ServiceInstance</span> <span class="hljs-variable">serviceInstance</span> <span class="hljs-operator">=</span> loadBalancer.instances(instances);<span class="hljs-comment">//传入总的实例数</span><br>    <span class="hljs-type">URI</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> serviceInstance.getUri();<br><br>    <span class="hljs-keyword">return</span> restTemplate.getForObject(uri + <span class="hljs-string">&quot;/payment/lb&quot;</span>, String.class);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="OpenFeign"><a href="#OpenFeign" class="headerlink" title="OpenFeign"></a>OpenFeign</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote><p>这里和之前学的dubbo很像，例如消费者的controller 可以调用提供者的 service层方法，但是不一样，它貌似只能调用提供者的 controller，即写一个提供者项目的controller的接口，消费者来调用这个接口方法，就还是相当于是调用提供者的 controller ，和RestTemplate 没有本质区别</p></blockquote><p>Feign能干什么：</p><p>Feign旨在使编写JavaHttp客户端变得更容易。</p><p>前面在使用Ribbon+RestTemplate时，利用RestTemplate对http请求的封装处理，形成了一套模版化的调用方法。但是在实际开发中，由于对服务依赖的调用可能不止一处，往往一个接囗会被多处调用，所以通常都会针对每个微服务自行封装些客户端类来包装这些依赖服务的调用。所以，Feign在此基础上做了进一步封装，由他来帮助我们定义和实现依赖服务接口的定义。在Feign的实现下，我们<strong>只需创建一个接口并使用注解的方式来配置它</strong>（以前是Dao接口上面标注Mapper注解，现在是一个微服务接口上面标注一个Feign注解即可，即可完成对服务提供方的接口绑定，简化了使用Springcloud Ribbon时，自动封装服务调用客户端的开发量。</p><p>Feign集成了Ribbon</p><p>利用Ribbon维护了Payment的服务列表信息，并目通过轮询实现了客户端的负载均衡。而与Ribbon不同的是，通过feign只需要定义服务绑定接口目以声明式的方法，优雅而简单的实现了服务调用</p><table><thead><tr><th>Feign</th><th>OpenFeign</th></tr></thead><tbody><tr><td>Feign是SpringCloud组件中的一个轻量级RESTful的HTTP服务客户端。Feign内置了Ribbon，用来做客户端负载均衡，去调用服务注册中心的服务。Feign的使用方式是：使用Feign的注解定义接口，调用这个接口，就可以调用服务注册中心的服务</td><td>OpenFeign是SpringCloud在Feign的基础上支持了SpringMVC的注解，如@RequestMapping等等。OpenFeign的<code>@FeignClient</code>可以解析SpringMVC的下的接囗，并通过动态代理的方式产生实现类，实现类中做负载均衡并调用其他服务。</td></tr><tr><td>org.springframework.cloud spring-cloud-starter-feign</td><td>org.springframework.cloud spring-cloud-starter-openfeign</td></tr></tbody></table><h3 id="消费端"><a href="#消费端" class="headerlink" title="消费端"></a>消费端</h3><p>新建consumer-feign-order80模块</p><p>feign用在消费端，feign自带负载均衡配置，所以不用手动配置</p><p>pom ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;project xmlns=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br>         xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>         xsi:schemaLocation=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;<br>    &lt;parent&gt;<br>        &lt;artifactId&gt;cloud2022&lt;/artifactId&gt;<br>        &lt;groupId&gt;com.wzg.springcloud&lt;/groupId&gt;<br>        &lt;version&gt;<span class="hljs-number">1.0</span>-SNAPSHOT&lt;/version&gt;<br>    &lt;/parent&gt;<br>    &lt;modelVersion&gt;<span class="hljs-number">4.0</span><span class="hljs-number">.0</span>&lt;/modelVersion&gt;<br><br>    &lt;artifactId&gt;consumer-feign-order80&lt;/artifactId&gt;<br><br>    &lt;dependencies&gt;<br>        &lt;!-- Open Feign，他里面也有ribbon，所以有负载均衡 --&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br>        &lt;!-- eureka Client --&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;<br>            &lt;groupId&gt;com.wzg.springcloud&lt;/groupId&gt;<br>            &lt;artifactId&gt;api-commons&lt;/artifactId&gt;<br>            &lt;version&gt;$&#123;project.version&#125;&lt;/version&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;<br>            &lt;artifactId&gt;lombok&lt;/artifactId&gt;<br>            &lt;optional&gt;<span class="hljs-literal">true</span>&lt;/optional&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;<br>            &lt;scope&gt;runtime&lt;/scope&gt;<br>            &lt;optional&gt;<span class="hljs-literal">true</span>&lt;/optional&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;<br>            &lt;scope&gt;test&lt;/scope&gt;<br>        &lt;/dependency&gt;<br>    &lt;/dependencies&gt;<br><br>    &lt;properties&gt;<br>        &lt;maven.compiler.source&gt;<span class="hljs-number">8</span>&lt;/maven.compiler.source&gt;<br>        &lt;maven.compiler.target&gt;<span class="hljs-number">8</span>&lt;/maven.compiler.target&gt;<br>    &lt;/properties&gt;<br><br>&lt;/project&gt;<br></code></pre></td></tr></table></figure><p>yaml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">service-url:</span> <span class="hljs-comment"># 配置服务中心，openFeign去里面找服务</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/</span><br><br><br><span class="hljs-comment">#设置feign客户端超时时间(OpenFeign默认支持ribbon)</span><br><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-attr">default:</span><br>        <span class="hljs-comment">#指的是建立连接后从服务器读取到可用资源所用的时间</span><br>        <span class="hljs-attr">ConnectTimeout:</span> <span class="hljs-number">5000</span><br>        <span class="hljs-comment">#指的是建立连接所用的时间，适用于网络状况正常的情况下,两端连接所用的时间</span><br>        <span class="hljs-attr">ReadTimeout:</span> <span class="hljs-number">5000</span><br><br><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">level:</span><br>    <span class="hljs-comment"># feign日志以什么级别监控哪个接口</span><br>    <span class="hljs-attr">com.atguigu.springcloud.service.PaymentFeignService:</span> <span class="hljs-string">debug</span><br></code></pre></td></tr></table></figure><p>主启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableFeignClients</span>   <span class="hljs-comment">//关键注解</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderFeignMain80</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(OrderFeignMain80.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud.service;<br><br><span class="hljs-keyword">import</span> com.wzg.springcloud.entities.CommonResult;<br><span class="hljs-keyword">import</span> com.wzg.springcloud.entities.Payment;<br><span class="hljs-keyword">import</span> org.springframework.cloud.openfeign.FeignClient;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span> <span class="hljs-comment">//别忘了添加这个</span><br><span class="hljs-meta">@FeignClient(value = &quot;PAYMENT-SERVICE&quot;)</span>  <span class="hljs-comment">//服务名称，要和eureka上面的一致才行</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">PaymentService</span> &#123;<br>    <span class="hljs-comment">//这个就是provider 的controller层的方法定义。</span><br>    <span class="hljs-meta">@GetMapping(value = &quot;/payment/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> CommonResult&lt;Payment&gt; <span class="hljs-title function_">getPaymentById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;<br><br>    <span class="hljs-meta">@GetMapping(value = &quot;/payment/feign/timeout&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">paymentFeignTimeout</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud.controller;<br><br><span class="hljs-keyword">import</span> com.wzg.springcloud.entities.CommonResult;<br><span class="hljs-keyword">import</span> com.wzg.springcloud.entities.Payment;<br><span class="hljs-keyword">import</span> com.wzg.springcloud.service.PaymentService;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//使用起来就相当于是普通的service。</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderFeignController</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> PaymentService paymentService;<span class="hljs-comment">//动态代理</span><br><br>    <span class="hljs-meta">@GetMapping(&quot;/feign/payment/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> CommonResult&lt;Payment&gt; <span class="hljs-title function_">getPaymentById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;<br>        <span class="hljs-keyword">return</span> paymentService.getPaymentById(id);<br>    &#125;<br><br>    <span class="hljs-comment">//消费方80</span><br>    <span class="hljs-meta">@GetMapping(value = &quot;/consumer/payment/feign/timeout&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">paymentFeignTimeout</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// OpenFeign客户端一般默认等待1秒钟</span><br>        <span class="hljs-keyword">return</span> paymentService.paymentFeignTimeout();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="超时控制"><a href="#超时控制" class="headerlink" title="超时控制"></a>超时控制</h3><blockquote><p>Openfeign默认超时等待为一秒，在消费者里面配置超时时间</p></blockquote><h3 id="开启日志打印"><a href="#开启日志打印" class="headerlink" title="开启日志打印"></a>开启日志打印</h3><p>Feign提共了日志打印功能，我们可以诵过配置来调整日志级别，从而了解Feign中Tttp请求的细节。</p><p>说白了就是对Feign接口的调用情况进行监控和输出。</p><p>日志级别：</p><ul><li>NONE.默认的，不显示任何日志；</li><li>BASIC，仅记录请求方法、URL、响应状态码及执行时间；</li><li>HEADERS：除了BASIC中定义的信息之外，还有请求和响应的头信息</li><li>FULL:除了HEADERS中定义的信息之外，还有请求和响应的正文及元数据。</li></ul><p>首先写一个config配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud.config;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> feign.Logger;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FeignConfig</span>&#123;<br>    <span class="hljs-meta">@Bean</span><br>    Logger.Level <span class="hljs-title function_">feignLoggerLevel</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> Logger.Level.FULL;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后在yml文件中开启日志打印配置</p>]]></content>
    
    
    <categories>
      
      <category>SpringCloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud学习笔记(2)</title>
    <link href="/2022/09/17/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(2)/"/>
    <url>/2022/09/17/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(2)/</url>
    
    <content type="html"><![CDATA[<h1 id="服务注册中心"><a href="#服务注册中心" class="headerlink" title="服务注册中心"></a>服务注册中心</h1><blockquote><p>如果是上面只有两个微服务，通过 RestTemplate ，是可以相互调用的，但是当微服务项目的数量增大，就需要服务注册中心。目前没有学习服务调用相关技术，使用 SpringCloud 自带的 RestTemplate 来实现RPC</p></blockquote><h2 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h2><p><strong>什么是服务治理</strong>：</p><p>SpringCloud封装了Netflix公司开发的Eureka模块来实现服务治理</p><p>在传统的rpc远程调用框架中，管理每个服务与服务之间依赖关系比较复杂，管理比较复杂，所以需要使用服务治理，管理服务于服务之间依赖关系，可以实现服务调用、负载均衡、容错等，实现服务发现与注册。</p><p><strong>什么是服务注册与发现</strong>：</p><p>Eureka采用了CS的设计结构，Eureka Server服务注册功能的服务器，它是服务注册中心。而系统中的其他微服务，使用Eureka的客户端连接到Eureka Server并维持心跳连接。这样系统的维护人员就可以通过Eureka Server来监控系统中各个微服务是否正常运行。这点和zookeeper很相似</p><p><img src="https://img-blog.csdnimg.cn/img_convert/8da648937c52bff1a3690b6520c3f540.png" alt="1597291856582"></p><h3 id="单机版Eureka构建："><a href="#单机版Eureka构建：" class="headerlink" title="单机版Eureka构建："></a>单机版Eureka构建：</h3><p>消费者端口80，提供者端口8001。</p><p>Eureka端口7001</p><h4 id="1-Server模块"><a href="#1-Server模块" class="headerlink" title="1) Server模块"></a>1) Server模块</h4><p>pom</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;project xmlns=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br>         xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>         xsi:schemaLocation=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;<br>    &lt;parent&gt;<br>        &lt;artifactId&gt;cloud2022&lt;/artifactId&gt;<br>        &lt;groupId&gt;com.wzg.springcloud&lt;/groupId&gt;<br>        &lt;version&gt;<span class="hljs-number">1.0</span>-SNAPSHOT&lt;/version&gt;<br>    &lt;/parent&gt;<br>    &lt;modelVersion&gt;<span class="hljs-number">4.0</span><span class="hljs-number">.0</span>&lt;/modelVersion&gt;<br><br>    &lt;artifactId&gt;eureka-server7001&lt;/artifactId&gt;<br><br>    &lt;dependencies&gt;<br><br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;<br>            &lt;scope&gt;test&lt;/scope&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;!--一般通用配置--&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;com.wzg.springcloud&lt;/groupId&gt;<br>            &lt;artifactId&gt;api-commons&lt;/artifactId&gt;<br>            &lt;version&gt;<span class="hljs-number">1.0</span>-SNAPSHOT&lt;/version&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;<br>            &lt;artifactId&gt;lombok&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;dependency&gt;<br>            &lt;groupId&gt;junit&lt;/groupId&gt;<br>            &lt;artifactId&gt;junit&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br><br>    &lt;/dependencies&gt;<br><br>    &lt;properties&gt;<br>        &lt;maven.compiler.source&gt;<span class="hljs-number">8</span>&lt;/maven.compiler.source&gt;<br>        &lt;maven.compiler.target&gt;<span class="hljs-number">8</span>&lt;/maven.compiler.target&gt;<br>    &lt;/properties&gt;<br><br>&lt;/project&gt;<br></code></pre></td></tr></table></figure><p>application.yml</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">server:<br>  port: <span class="hljs-number">7001</span><br><br>eureka:<br>  instance:<br>    hostname: localhost  # eureka 服务端的实例名称<br><br>  client:<br>    # <span class="hljs-literal">false</span> 代表不向服务注册中心注册自己，因为它本身就是服务中心<br>    register-with-eureka: <span class="hljs-literal">false</span><br>    # <span class="hljs-literal">false</span> 代表自己就是服务注册中心，自己的作用就是维护服务实例，并不需要去检索服务<br>    fetch-registry: <span class="hljs-literal">false</span><br>    service-url:<br>      # 设置与 Eureka Server 交互的地址，查询服务 和 注册服务都依赖这个地址<br>      defaultZone: http:<span class="hljs-comment">//$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span><br>#      defaultZone: http:<span class="hljs-comment">//127.0.0.1:7001/eureka/</span><br></code></pre></td></tr></table></figure><p>主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)</span><br><span class="hljs-meta">@EnableEurekaServer</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EurekaMain7001</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(EurekaMain7001.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>问题1：启动idea报错，提示你没有配置数据源</p><p>解决方法：@SpringBootApplication(exclude &#x3D; DataSourceAutoConfiguration.class)<strong>禁止SpringBoot自动注入数据源配置</strong>。</p><h2 id="Eureka集群原理"><a href="#Eureka集群原理" class="headerlink" title="Eureka集群原理"></a>Eureka集群原理</h2><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h6iuwypkvij30z60cy7bc.jpg"></p><h4 id="注册中心集群搭建"><a href="#注册中心集群搭建" class="headerlink" title="注册中心集群搭建"></a>注册中心集群搭建</h4><p>根据上面创建的7001创建一份7002，除了yml文件其余全部相同</p><p>7001yml：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">7001</span><br><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">eureka7001.com</span>  <span class="hljs-comment"># eureka 服务器的实例地址</span><br><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-comment">## 一定要注意这里的地址，这是搭建集群的关键。反过来写，写的是集群中其他Eureka服务器的地址</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://eureka7002.com:7002/eureka/</span><br></code></pre></td></tr></table></figure><p>7002yml:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">server:<br>  port: <span class="hljs-number">7002</span><br><br>eureka:<br>  instance:<br>    hostname: eureka7002.com  # eureka 服务器的实例地址<br><br>  client:<br>    register-with-eureka: <span class="hljs-literal">false</span><br>    fetch-registry: <span class="hljs-literal">false</span><br>    service-url:<br>      ## 一定要注意这里的地址 这是搭建集群的关键<br>      defaultZone: http:<span class="hljs-comment">//eureka7001.com:7001/eureka/</span><br></code></pre></td></tr></table></figure><h4 id="服务提供者集群搭建"><a href="#服务提供者集群搭建" class="headerlink" title="服务提供者集群搭建"></a>服务提供者集群搭建</h4><p>根据8001创建一份8002</p><p>把yml统一改成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java">server:<br>  port: <span class="hljs-number">8002</span><br><br><br>spring:<br>  application:<br>    name: payment-service<br>  datasource:<br>    type: com.alibaba.druid.pool.DruidDataSource      #当前数据源操作类型<br>    driver-class-name: org.gjt.mm.mysql.Driver        #mysql驱动包<br>    #    driver-class-name: com.mysql.cj.jdbc.Driver<br>    url: jdbc:mysql:<span class="hljs-comment">//localhost:3306/wzg_db01?useUnicode=true&amp;characterEncoding-utr-8&amp;useSSL=false</span><br>    username: root<br>    password: <span class="hljs-number">123</span><br>    druid:<br>      test-<span class="hljs-keyword">while</span>-idle: <span class="hljs-literal">true</span><br>      validation-query: SELECT <span class="hljs-number">1</span><br><br><br>eureka:<br>  client:<br>    register-with-eureka: <span class="hljs-literal">true</span><br>    fetch-registry: <span class="hljs-literal">true</span><br>    service-url: # 提供者注册到多个eureka中<br>      defaultZone: http:<span class="hljs-comment">//eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/</span><br><br><br>mybatis:<br>  mapper-locations: classpath:mapper<span class="hljs-comment">/*.xml</span><br><span class="hljs-comment">  type-aliases-package: com.wzg.springcloud.entities       #所有Entity别名类所在包</span><br></code></pre></td></tr></table></figure><p>controller统一改成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud.controller;<br><br><br><span class="hljs-keyword">import</span> com.wzg.springcloud.entities.CommonResult;<br><span class="hljs-keyword">import</span> com.wzg.springcloud.entities.Payment;<br><span class="hljs-keyword">import</span> com.wzg.springcloud.service.PaymentService;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PaymentController</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> PaymentService paymentService;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String serverPort;<br><br>    <span class="hljs-meta">@PostMapping(value = &quot;/payment/create&quot;)</span><br>    <span class="hljs-keyword">public</span> CommonResult <span class="hljs-title function_">create</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Payment payment)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> paymentService.create(payment);<br>        log.info(<span class="hljs-string">&quot;插入结果：&quot;</span> + result);<br>        <span class="hljs-keyword">if</span> (result &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonResult</span>&lt;&gt;(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;插入成功,serverPort&quot;</span>+serverPort, result);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonResult</span>&lt;&gt;(<span class="hljs-number">444</span>, <span class="hljs-string">&quot;插入失败&quot;</span>, <span class="hljs-literal">null</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(value = &quot;/payment/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> CommonResult&lt;Payment&gt; <span class="hljs-title function_">getPaymentById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;<br>        <span class="hljs-type">Payment</span> <span class="hljs-variable">payment</span> <span class="hljs-operator">=</span> paymentService.getPaymentById(id);<br><br>        log.info(<span class="hljs-string">&quot;查询结果:&quot;</span> + payment);<br><br>        <span class="hljs-keyword">if</span> (payment != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonResult</span>&lt;&gt;(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;查询成功serverPort&quot;</span>+serverPort,payment);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonResult</span>&lt;&gt;(<span class="hljs-number">444</span>, <span class="hljs-string">&quot;查询失败,查询ID:&quot;</span> + id, <span class="hljs-literal">null</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h4><p>更改消费者的controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud.controller;<br><br><span class="hljs-keyword">import</span> com.wzg.springcloud.entities.CommonResult;<br><span class="hljs-keyword">import</span> com.wzg.springcloud.entities.Payment;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RequestMapping(&quot;consumer&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderController</span> &#123;<br><br><span class="hljs-comment">//    public static final String PAYMENY_URL=&quot;http://localhost:8001&quot;;</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String PAYMENY_URL=<span class="hljs-string">&quot;http://PAYMENT-SERVICE&quot;</span>;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RestTemplate restTemplate;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * PAYMENY_URL+&quot;/payment/create&quot;,//请求地址</span><br><span class="hljs-comment">     * payment,//请求参数</span><br><span class="hljs-comment">     * CommonResult.class//返回类型</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-meta">@PostMapping(&quot;/payment/create&quot;)</span><br>    <span class="hljs-keyword">public</span> CommonResult&lt;Payment&gt; <span class="hljs-title function_">create</span><span class="hljs-params">(Payment payment)</span>&#123;<br>        <span class="hljs-keyword">return</span> restTemplate.postForObject(PAYMENY_URL+<span class="hljs-string">&quot;/payment/create&quot;</span>, payment, CommonResult.class);<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/payment/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> CommonResult&lt;Payment&gt; <span class="hljs-title function_">getPaymentById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span>Long id)</span>&#123;<br>        <span class="hljs-keyword">return</span> restTemplate.getForObject(PAYMENY_URL+<span class="hljs-string">&quot;/payment/&quot;</span>+id,CommonResult.class);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>config</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud.config;<br><br><span class="hljs-keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApplicationContextConfig</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * RestTemplate提供了多种便捷访问远程http服务的方法，</span><br><span class="hljs-comment">     * 是一种简单便捷的访问restful服务模板类，是spring提供的用于rest服务的客户端模板工具集</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@LoadBalanced</span><span class="hljs-comment">//这个注解，就赋予了RestTemplate 负载均衡的能力</span><br>    <span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title function_">getRestTemplate</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h3><h4 id="启动顺序—7001—7002—8001—8002—80"><a href="#启动顺序—7001—7002—8001—8002—80" class="headerlink" title="启动顺序—7001—7002—8001—8002—80"></a>启动顺序—7001—7002—8001—8002—80</h4><ul><li>1先启动eureka注册中心</li><li>2启动服务提供者payment支付服务</li><li>3支付服务启动后会把自身信息化 服务以别名方式注册进eureka</li><li>4消费者order服务在要调用接囗时，<strong>使用服务别名去注册中心取实际的RPC远程调用地址</strong></li><li>5<strong>消费者获得调用地址后，底层实际是利用<code>HttpClient</code>技术实现远程调用</strong></li><li>6<strong>消费者获得服务地址后会存<code>jvm内存</code>中，默认每间隔30s更新一次服务调用地址</strong></li></ul><p>Eureka Server在设计的时候就考虑了高可用设计，在Eureka服务治理设计中，<strong>所有节点既是服务的提供方，也是服务的消费方</strong>，服务注册中心也不例外。</p><p>Eureka Server的高可用实际上就是将自己做为服务向其他服务注册中心注册自己，这样就可以形成一组互相注册的服务注册中心，以实现服务清单的互相同步，达到高可用的效果。</p><p>Eureka Server的同步遵循着一个非常简单的原则：只要有一条边将节点连接，就可以进行信息传播与同步。可以采用两两注册的方式实现集群中节点完全对等的效果，实现最高可用性集群，任何一台注册中心故障都不会影响服务的注册与发现。</p><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><ul><li>集群中多个提供者的<code>spring:application:name:</code>要一致</li><li>启动类添加<code>@EnableDiscoveryClient</code>或者<code>@EnableEurekaClient</code><br>1，<code>@EnableDiscoveryClient</code>注解是基于<code>spring-cloud-commons</code>依赖，并且在classpath中实现；<br>2，<code>@EnableEurekaClient</code>注解是基于<code>spring-cloud-netflix</code>依赖，只能为eureka作用；<br>如果你的classpath中添加了eureka，则它们的作用是一样的。</li></ul><h3 id="actuator微服务信息完善"><a href="#actuator微服务信息完善" class="headerlink" title="actuator微服务信息完善"></a>actuator微服务信息完善</h3><p>修改服务提供者的yml：设置服务名称+显示ip地址、</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">payment8001</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="服务发现Discovery"><a href="#服务发现Discovery" class="headerlink" title="服务发现Discovery"></a>服务发现Discovery</h3><p>对于注册进eureka里面的微服务，可以通过服务发现来获得该服务的信息。（即我们前面可视化页面的信息）</p><ol><li>在主启动类上添加注解：<code>@EnableDiscoveryClient</code></li><li>在 服务提供者的Controller 里面打印信息：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Resource</span> <span class="hljs-comment">// 自动注入</span><br><span class="hljs-keyword">private</span> DiscoveryClient discoveryClient;<br><br><span class="hljs-meta">@GetMapping(&quot;/payment/discovery&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">discovery</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//获得服务清单列表</span><br>        List&lt;String&gt; services = discoveryClient.getServices();<br>        <span class="hljs-keyword">for</span>(String service: services)&#123;<br>            log.info(<span class="hljs-string">&quot;*****service: &quot;</span> + service);<br>        &#125;<br>        <span class="hljs-comment">// 根据具体服务进一步获得该微服务的信息</span><br>        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="hljs-string">&quot;PAYMENT-SERVICE&quot;</span>);<br>        <span class="hljs-keyword">for</span>(ServiceInstance serviceInstance:instances)&#123;<br>            log.info(serviceInstance.getServiceId() + <span class="hljs-string">&quot;\t&quot;</span> + serviceInstance.getHost()<br>                    + <span class="hljs-string">&quot;\t&quot;</span> + serviceInstance.getPort() + <span class="hljs-string">&quot;\t&quot;</span> + serviceInstance.getUri());<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.discoveryClient;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="Eureka-自我保护机制"><a href="#Eureka-自我保护机制" class="headerlink" title="Eureka 自我保护机制"></a>Eureka 自我保护机制</h3><p>某时刻某一个微服务不可用了，Eureka不会立即清理，依旧会对该微服务的信息进行保存。属于CAP里的AP（高可用）分支</p><p>保护模式主要用于一组客户和Eureka Server之间存在网络分区场景下保护。一旦进入保护模式，Eureka Server将会尝试保护其服务注册表中的信息，不再删除服务注册表中固定信息，也就是不会注销任何微服务。</p><p>如果在Eureka Server的首页看到以下这段提示，则说明Eureka讲入了保护模式：</p><blockquote><p>EMERGENCY!EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY’RE NOT.<br>RENEWALS ARE LESSER THAN THRESHOLD AND HENCE THE INSTANCES ARE NOT BEING EXPIRED JUST TO BE SAFE</p></blockquote><p>为什么会产生Eureka自我保护机制？</p><p>为了防止Eureka Client可以正常运行但是与Eureka Server网络不通情况下，Eureka Server不会立刻将Eureka Client服务剔除</p><p>什么是自我保护模式？</p><p>默认情况下，如果Eureka Server在一定时间内没有接收到某个微服务实例的心跳，Eureka Server将会注销该实例（默认90秒）。但是当网络分区故障发生时、卡顿、拥挤）时，微服务与Eureka Server之间无法正常通信，以上行为可能变得非常危险了—因为微服务本身其实是健康的，此时本不应该注销这个微服务。Eureka通过”自我保护模式”来解决这个问题—当Eureka Server节点在短时间内丢失过多客户端时（可能发生了网络分区故障），那么这个节点就会进入自我保护模式。</p><p>自我保护机制：默认情况下Eureka CIient定时向Eureka Server端发送心跳包。</p><p>如果Eureka在server端在一定时间内（默认90秒）没有收到Eureka Client发送心跳包，便会直接从服务注册列表中剔除该服务，但是在短时间（90秒内）内丢失了大量的服务实例心跳，这时Eureka Server会开启自我保护机制，不会剔除该服务（该现象可能出现如果网络不通但是Eureka Client出现宕机，此时如果别的注册中心如果一定时间内没有收到心跳会将剔除该服务这样就出现了严重失误，因为客户端还能正常发送心跳，只是网络延迟问题，而保护机制是为了解决此问题而产生的</p><p>在自我保护模式中，Eureka Server会保护服务注册表中的信息，不再注册任何服务实例。</p><p>它的设计哲学就是宁可保留错误的服务注册信息，也不盲目注销任何可能健康的服务实例。一句话讲解：好死不如赖活着</p><p>综上，自我保护模式是一种应对网络异常的安全保护措施。它的架构哲学是宁可同时保留所有微服务（健康的微服务和不健康的微服务都会保留）也不盲目注销任何健康的微服务。使用自我保护模式，可以让Eureka集群更加的健壮、稳定。</p><p>禁止自我保护:（如果想）</p><blockquote><p>在 Eureka Server 的模块中的 yml 文件进行配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">7001</span><br><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">eureka7001.com</span>  <span class="hljs-comment"># eureka 服务器的实例地址</span><br><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-comment">## 一定要注意这里的地址，这是搭建集群的关键。反过来写，写的是集群中其他Eureka服务器的地址</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://eureka7002.com:7002/eureka/</span><br>  <span class="hljs-attr">server:</span> <span class="hljs-comment"># 与client平行</span><br>    <span class="hljs-comment"># 关闭自我保护机制，保证不可用该服务被及时剔除</span><br>    <span class="hljs-attr">enable-self-preservation:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">eviction-interval-timer-in-ms:</span> <span class="hljs-number">2000</span><br></code></pre></td></tr></table></figure></blockquote><p>修改 Eureka Client 模块的 心跳间隔时间：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8001</span><br><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">payment-service</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span>      <span class="hljs-comment">#当前数据源操作类型</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">org.gjt.mm.mysql.Driver</span>        <span class="hljs-comment">#mysql驱动包</span><br>    <span class="hljs-comment">#    driver-class-name: com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/wzg_db01?useUnicode=true&amp;characterEncoding-utr-8&amp;useSSL=false</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123</span><br>    <span class="hljs-attr">druid:</span><br>      <span class="hljs-attr">test-while-idle:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">validation-query:</span> <span class="hljs-string">SELECT</span> <span class="hljs-number">1</span><br><br><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">payment8001</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># Eureka客户端像服务端发送心跳的时间间隔，单位s，默认30s</span><br>    <span class="hljs-attr">lease-renewal-interval-in-seconds:</span> <span class="hljs-number">1</span><br>    <span class="hljs-comment"># Rureka服务端在收到最后一次心跳后等待时间上线，单位为s，默认90s，超时将剔除服务</span><br>    <span class="hljs-attr">lease-expiration-duration-in-seconds:</span> <span class="hljs-number">2</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">service-url:</span> <span class="hljs-comment"># 提供者注册到多个eureka中</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/</span><br><br><br><span class="hljs-attr">mybatis:</span><br>  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath:mapper/*.xml</span><br>  <span class="hljs-attr">type-aliases-package:</span> <span class="hljs-string">com.wzg.springcloud.entities</span>       <span class="hljs-comment">#所有Entity别名类所在包</span><br></code></pre></td></tr></table></figure><h5 id="eureka配置项解读："><a href="#eureka配置项解读：" class="headerlink" title="eureka配置项解读："></a>eureka配置项解读：</h5><p>在注册服务之后，服务提供者会维护一个心跳用来持续高速Eureka Server，“我还在持续提供服务”，否则Eureka Server的剔除任务会将该服务实例从服务列表中排除出去。我们称之为服务续约。<br>面是服务续约的两个重要属性：</p><p>（1）eureka.instance.lease-expiration-duration-in-seconds<br>leaseExpirationDurationInSeconds，表示eureka server至上一次收到client的心跳之后，等待下一次心跳的超时时间，在这个时间内若没收到下一次心跳，则将移除该instance。<br>默认为90秒<br>如果该值太大，则很可能将流量转发过去的时候，该instance已经不存活了。<br>如果该值设置太小了，则instance则很可能因为临时的网络抖动而被摘除掉。<br>该值至少应该大于leaseRenewalIntervalInSeconds</p><p>（2）eureka.instance.lease-renewal-interval-in-seconds<br>leaseRenewalIntervalInSeconds，表示eureka client发送心跳给server端的频率。如果在leaseExpirationDurationInSeconds后，server端没有收到client的心跳，则将摘除该instance。除此之外，如果该instance实现了HealthCheckCallback，并决定让自己unavailable的话，则该instance也不会接收到流量。<br>默认30秒</p><h4 id="Eureka停更说明："><a href="#Eureka停更说明：" class="headerlink" title="Eureka停更说明："></a>Eureka停更说明：</h4><p>2.0后停更了。</p>]]></content>
    
    
    <categories>
      
      <category>SpringCloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud学习笔记(1)</title>
    <link href="/2022/09/17/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(1)/"/>
    <url>/2022/09/17/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(1)/</url>
    
    <content type="html"><![CDATA[<h1 id="终于来到了后端路线的尽头–微服务"><a href="#终于来到了后端路线的尽头–微服务" class="headerlink" title="终于来到了后端路线的尽头–微服务"></a>终于来到了后端路线的尽头–微服务</h1><h4 id="三年，你知道我这三年是怎么过的吗？！"><a href="#三年，你知道我这三年是怎么过的吗？！" class="headerlink" title="三年，你知道我这三年是怎么过的吗？！"></a>三年，你知道我这三年是怎么过的吗？！</h4><h4 id="大一-html-css-js-Java基础"><a href="#大一-html-css-js-Java基础" class="headerlink" title="大一:html+css+js+Java基础"></a>大一:html+css+js+Java基础</h4><h4 id="大二：Java高级-Java8—-gt-Mysql—-gt-JDBC—-gt-数据结构与算法—-gt-JavaWeb—-gt-Spring5—-gt"><a href="#大二：Java高级-Java8—-gt-Mysql—-gt-JDBC—-gt-数据结构与算法—-gt-JavaWeb—-gt-Spring5—-gt" class="headerlink" title="大二：Java高级+Java8—&gt;Mysql—&gt;JDBC—&gt;数据结构与算法—&gt;JavaWeb—&gt;Spring5—&gt;"></a>大二：Java高级+Java8—&gt;Mysql—&gt;JDBC—&gt;数据结构与算法—&gt;JavaWeb—&gt;Spring5—&gt;</h4><h4 id="SpringMVC—-gt-MyBatis—-gt-MyBatisPlus—-gt-Maven—-gt-SpringBoot—-gt-Git—-gt-Linux—-gt"><a href="#SpringMVC—-gt-MyBatis—-gt-MyBatisPlus—-gt-Maven—-gt-SpringBoot—-gt-Git—-gt-Linux—-gt" class="headerlink" title="SpringMVC—&gt;MyBatis—&gt;MyBatisPlus—&gt;Maven—&gt;SpringBoot—&gt;Git—&gt;Linux—&gt;"></a>SpringMVC—&gt;MyBatis—&gt;MyBatisPlus—&gt;Maven—&gt;SpringBoot—&gt;Git—&gt;Linux—&gt;</h4><h4 id="—-gt-设计模式"><a href="#—-gt-设计模式" class="headerlink" title="—&gt;设计模式"></a>—&gt;设计模式</h4><h4 id="大三：Redis—-gt-RabbitMQ—-gt-Nginx—-gt-Netty—-gt-Dubbo—-gt-SpringCloud—-gt-Eureka—-gt"><a href="#大三：Redis—-gt-RabbitMQ—-gt-Nginx—-gt-Netty—-gt-Dubbo—-gt-SpringCloud—-gt-Eureka—-gt" class="headerlink" title="大三：Redis—&gt;RabbitMQ—&gt;Nginx—&gt;Netty—&gt;Dubbo—&gt;SpringCloud—&gt;Eureka—&gt;"></a>大三：Redis—&gt;RabbitMQ—&gt;Nginx—&gt;Netty—&gt;Dubbo—&gt;SpringCloud—&gt;Eureka—&gt;</h4><h4 id="Zookeeper—-gt-Consul—-gt-Ribbon—-gt-Hystrix—-gt-Gateway—-gt-config—-gt-Bus—-gt-Stream"><a href="#Zookeeper—-gt-Consul—-gt-Ribbon—-gt-Hystrix—-gt-Gateway—-gt-config—-gt-Bus—-gt-Stream" class="headerlink" title="Zookeeper—&gt;Consul—&gt;Ribbon—&gt;Hystrix—&gt;Gateway—&gt;config—&gt;Bus—&gt;Stream"></a>Zookeeper—&gt;Consul—&gt;Ribbon—&gt;Hystrix—&gt;Gateway—&gt;config—&gt;Bus—&gt;Stream</h4><h4 id="—-gt-Sleuth—-gt-SpringAlibaba—-gt-Nacos—-gt-Sentinel—-gt-Seata"><a href="#—-gt-Sleuth—-gt-SpringAlibaba—-gt-Nacos—-gt-Sentinel—-gt-Seata" class="headerlink" title="—&gt;Sleuth—&gt;SpringAlibaba—&gt;Nacos—&gt;Sentinel—&gt;Seata"></a>—&gt;Sleuth—&gt;SpringAlibaba—&gt;Nacos—&gt;Sentinel—&gt;Seata</h4><h4 id="终于有点要摸到终点线的感觉了o-╥﹏╥-o"><a href="#终于有点要摸到终点线的感觉了o-╥﹏╥-o" class="headerlink" title="终于有点要摸到终点线的感觉了o(╥﹏╥)o"></a>终于有点要摸到终点线的感觉了o(╥﹏╥)o</h4><h1 id="什么是微服务"><a href="#什么是微服务" class="headerlink" title="什么是微服务"></a><strong>什么是微服务</strong></h1><ul><li><h4 id="微服务是一种架构风格"><a href="#微服务是一种架构风格" class="headerlink" title="微服务是一种架构风格"></a>微服务是一种架构风格</h4></li><li><h4 id="一个应用拆分为一组小型服务"><a href="#一个应用拆分为一组小型服务" class="headerlink" title="一个应用拆分为一组小型服务"></a>一个应用拆分为一组小型服务</h4></li><li><h4 id="每个服务运行在自己的进程内，也就是可独立部署和升级"><a href="#每个服务运行在自己的进程内，也就是可独立部署和升级" class="headerlink" title="每个服务运行在自己的进程内，也就是可独立部署和升级"></a>每个服务运行在自己的进程内，也就是可独立部署和升级</h4></li><li><h4 id="服务之间使用轻量级HTTP交互"><a href="#服务之间使用轻量级HTTP交互" class="headerlink" title="服务之间使用轻量级HTTP交互"></a>服务之间使用轻量级HTTP交互</h4></li><li><h4 id="服务围绕业务功能拆分"><a href="#服务围绕业务功能拆分" class="headerlink" title="服务围绕业务功能拆分"></a>服务围绕业务功能拆分</h4></li><li><h4 id="可以由全自动部署机制独立部署"><a href="#可以由全自动部署机制独立部署" class="headerlink" title="可以由全自动部署机制独立部署"></a>可以由全自动部署机制独立部署</h4></li><li><h4 id="去中心化，服务自治。服务可以使用不同的语言、不同的存储技术"><a href="#去中心化，服务自治。服务可以使用不同的语言、不同的存储技术" class="headerlink" title="去中心化，服务自治。服务可以使用不同的语言、不同的存储技术"></a>去中心化，服务自治。服务可以使用不同的语言、不同的存储技术</h4></li></ul><h3 id="分布式微服务架构-落地维度"><a href="#分布式微服务架构-落地维度" class="headerlink" title="分布式微服务架构-落地维度"></a><strong>分布式微服务架构-落地维度</strong></h3><ul><li><h4 id="服务调用"><a href="#服务调用" class="headerlink" title="服务调用"></a>服务调用</h4></li><li><h4 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h4></li><li><h4 id="服务注册与发现"><a href="#服务注册与发现" class="headerlink" title="服务注册与发现"></a>服务注册与发现</h4></li><li><h4 id="服务熔断"><a href="#服务熔断" class="headerlink" title="服务熔断"></a>服务熔断</h4></li><li><h4 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h4></li><li><h4 id="服务消息队列"><a href="#服务消息队列" class="headerlink" title="服务消息队列"></a>服务消息队列</h4></li><li><h4 id="服务网关"><a href="#服务网关" class="headerlink" title="服务网关"></a>服务网关</h4></li><li><h4 id="配置中心管理"><a href="#配置中心管理" class="headerlink" title="配置中心管理"></a>配置中心管理</h4></li><li><h4 id="自动化构建部署"><a href="#自动化构建部署" class="headerlink" title="自动化构建部署"></a>自动化构建部署</h4></li><li><h4 id="服务监控"><a href="#服务监控" class="headerlink" title="服务监控"></a>服务监控</h4></li><li><h4 id="全链路追踪"><a href="#全链路追踪" class="headerlink" title="全链路追踪"></a>全链路追踪</h4></li><li><h4 id="服务定时任务"><a href="#服务定时任务" class="headerlink" title="服务定时任务"></a>服务定时任务</h4></li><li><h4 id="调度操作"><a href="#调度操作" class="headerlink" title="调度操作"></a>调度操作</h4></li></ul><h3 id="Spring-Cloud简介"><a href="#Spring-Cloud简介" class="headerlink" title="Spring Cloud简介"></a><strong>Spring Cloud简介</strong></h3><h4 id="SpringCloud-x3D-分布式微服务架构的站式解决方案，是多种微服务架构落地技术的集合体，俗称微服务全家桶"><a href="#SpringCloud-x3D-分布式微服务架构的站式解决方案，是多种微服务架构落地技术的集合体，俗称微服务全家桶" class="headerlink" title="SpringCloud&#x3D;分布式微服务架构的站式解决方案，是多种微服务架构落地技术的集合体，俗称微服务全家桶"></a>SpringCloud&#x3D;分布式微服务架构的站式解决方案，是多种微服务架构落地技术的集合体，俗称微服务全家桶</h4><h4 id="关于微服务主要是跟着尚硅谷周阳老师的视频学习"><a href="#关于微服务主要是跟着尚硅谷周阳老师的视频学习" class="headerlink" title="关于微服务主要是跟着尚硅谷周阳老师的视频学习"></a>关于微服务主要是跟着尚硅谷周阳老师的视频学习</h4><h4 id="代码仓库地址：yztldxdza-x2F-springcloud-github-com"><a href="#代码仓库地址：yztldxdza-x2F-springcloud-github-com" class="headerlink" title="代码仓库地址：yztldxdza&#x2F;springcloud (github.com)"></a>代码仓库地址：<a href="https://github.com/yztldxdza/springcloud">yztldxdza&#x2F;springcloud (github.com)</a></h4><h4 id="Spring-Cloud技术栈"><a href="#Spring-Cloud技术栈" class="headerlink" title="Spring Cloud技术栈"></a>Spring Cloud技术栈</h4><p><img src="https://img-blog.csdnimg.cn/img_convert/fa347f3da197c3df86bf5d36961c8cde.png" alt="netflix"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/b39a21012bed11a837c1edff840e5024.png" alt="img"></p><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h69utgg0o5j315q0detdk.jpg"></p><h4 id="springcloud搭建项目选用的技术栈"><a href="#springcloud搭建项目选用的技术栈" class="headerlink" title="springcloud搭建项目选用的技术栈"></a>springcloud搭建项目选用的技术栈</h4><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h69uv7q0unj30pp0dxwib.jpg"></p><h4 id="在搭建微服务架构的时候一定是约定-gt-配置-gt-编码"><a href="#在搭建微服务架构的时候一定是约定-gt-配置-gt-编码" class="headerlink" title="在搭建微服务架构的时候一定是约定 &gt; 配置 &gt; 编码"></a>在搭建微服务架构的时候一定是<strong>约定 &gt; 配置 &gt; 编码</strong></h4><h4 id="创建微服务cloud整体聚合父工程Project，有8个关键步骤："><a href="#创建微服务cloud整体聚合父工程Project，有8个关键步骤：" class="headerlink" title="创建微服务cloud整体聚合父工程Project，有8个关键步骤："></a>创建微服务cloud整体聚合父工程Project，有8个关键步骤：</h4><ol><li><h4 id="New-Project-maven工程-create-from-archetype-maven-archetype-site"><a href="#New-Project-maven工程-create-from-archetype-maven-archetype-site" class="headerlink" title="New Project - maven工程 - create from archetype: maven-archetype-site"></a>New Project - maven工程 - create from archetype: maven-archetype-site</h4></li><li><h4 id="聚合总父工程名字"><a href="#聚合总父工程名字" class="headerlink" title="聚合总父工程名字"></a>聚合总父工程名字</h4></li><li><h4 id="Maven选版本"><a href="#Maven选版本" class="headerlink" title="Maven选版本"></a>Maven选版本</h4></li><li><h4 id="工程名字"><a href="#工程名字" class="headerlink" title="工程名字"></a>工程名字</h4></li><li><h4 id="字符编码-Settings-File-encoding"><a href="#字符编码-Settings-File-encoding" class="headerlink" title="字符编码 - Settings - File encoding"></a>字符编码 - Settings - File encoding</h4></li><li><h4 id="注解生效激活-Settings-Annotation-Processors"><a href="#注解生效激活-Settings-Annotation-Processors" class="headerlink" title="注解生效激活 - Settings - Annotation Processors"></a>注解生效激活 - Settings - Annotation Processors</h4></li><li><h4 id="Java编译版本选8"><a href="#Java编译版本选8" class="headerlink" title="Java编译版本选8"></a>Java编译版本选8</h4></li><li><h4 id="File-Type过滤-Settings-File-Type"><a href="#File-Type过滤-Settings-File-Type" class="headerlink" title="File Type过滤 - Settings - File Type"></a>File Type过滤 - Settings - File Type</h4></li></ol><h3 id="从刚开始创建工程就遇到了问题"><a href="#从刚开始创建工程就遇到了问题" class="headerlink" title="从刚开始创建工程就遇到了问题"></a>从刚开始创建工程就遇到了问题</h3><h5 id="在新建模块的时候8001和8002建成了8081和8082，学到zookeeper才反应过来，只是模块名不同其余内容都一样"><a href="#在新建模块的时候8001和8002建成了8081和8082，学到zookeeper才反应过来，只是模块名不同其余内容都一样" class="headerlink" title="在新建模块的时候8001和8002建成了8081和8082，学到zookeeper才反应过来，只是模块名不同其余内容都一样"></a>在新建模块的时候8001和8002建成了8081和8082，学到zookeeper才反应过来，只是模块名不同其余内容都一样</h5><h5 id="问题1：maven版本不对应，maven3-8和idea2021不兼容"><a href="#问题1：maven版本不对应，maven3-8和idea2021不兼容" class="headerlink" title="问题1：maven版本不对应，maven3.8和idea2021不兼容"></a>问题1：maven版本不对应，maven3.8和idea2021不兼容</h5><h5 id="解决方法：重新下载maven3-5-4版本"><a href="#解决方法：重新下载maven3-5-4版本" class="headerlink" title="解决方法：重新下载maven3.5.4版本"></a>解决方法：重新下载maven3.5.4版本</h5><h5 id="问题2：pom文件的依赖项爆红"><a href="#问题2：pom文件的依赖项爆红" class="headerlink" title="问题2：pom文件的依赖项爆红"></a>问题2：pom文件的依赖项爆红</h5><h5 id="解决方法：查看maven仓库位置是否正确-清除idea的缓存并重启"><a href="#解决方法：查看maven仓库位置是否正确-清除idea的缓存并重启" class="headerlink" title="解决方法：查看maven仓库位置是否正确,清除idea的缓存并重启"></a>解决方法：查看maven仓库位置是否正确,清除idea的缓存并重启</h5><h5 id="问题3：mysql版本问题，要求至少是5-7我在导入的时候看到自己是5-1-49"><a href="#问题3：mysql版本问题，要求至少是5-7我在导入的时候看到自己是5-1-49" class="headerlink" title="问题3：mysql版本问题，要求至少是5.7我在导入的时候看到自己是5.1.49"></a>问题3：mysql版本问题，要求至少是5.7我在导入的时候看到自己是5.1.49</h5><h5 id="以为自己版本过低又下了一个Java8的版本，后来才发现mysql5-7的版本号是5-1-47，自己的版本还高两个"><a href="#以为自己版本过低又下了一个Java8的版本，后来才发现mysql5-7的版本号是5-1-47，自己的版本还高两个" class="headerlink" title="以为自己版本过低又下了一个Java8的版本，后来才发现mysql5.7的版本号是5.1.47，自己的版本还高两个"></a>以为自己版本过低又下了一个Java8的版本，后来才发现mysql5.7的版本号是5.1.47，自己的版本还高两个</h5><h5 id="问题4：老师是用-mysql-version-来指定版本号的，我也这么写后idea爆红，找不到依赖项"><a href="#问题4：老师是用-mysql-version-来指定版本号的，我也这么写后idea爆红，找不到依赖项" class="headerlink" title="问题4：老师是用${mysql.version}来指定版本号的，我也这么写后idea爆红，找不到依赖项"></a>问题4：老师是用${mysql.version}来指定版本号的，我也这么写后idea爆红，找不到依赖项</h5><h5 id="解决方法-配置环境变量或手动指定版本号"><a href="#解决方法-配置环境变量或手动指定版本号" class="headerlink" title="解决方法:配置环境变量或手动指定版本号"></a>解决方法:配置环境变量或手动指定版本号</h5><h5 id="问题5：我在引入依赖项的时候，复制了别人写好的笔记，导致多引入了两个依赖项Zipkin和netflix，刚开始我写完代码运行后报错一直不知道问题出在哪，后来查了好久才知道是多引入了包导致的"><a href="#问题5：我在引入依赖项的时候，复制了别人写好的笔记，导致多引入了两个依赖项Zipkin和netflix，刚开始我写完代码运行后报错一直不知道问题出在哪，后来查了好久才知道是多引入了包导致的" class="headerlink" title="问题5：我在引入依赖项的时候，复制了别人写好的笔记，导致多引入了两个依赖项Zipkin和netflix，刚开始我写完代码运行后报错一直不知道问题出在哪，后来查了好久才知道是多引入了包导致的"></a>问题5：我在引入依赖项的时候，复制了别人写好的笔记，导致多引入了两个依赖项Zipkin和netflix，刚开始我写完代码运行后报错一直不知道问题出在哪，后来查了好久才知道是多引入了包导致的</h5><h5 id="解决方法-我来来回回重建了好几次项目都不行，直到把依赖从pom中去掉然后把在maven中包删除后清除idea缓存重启才行了"><a href="#解决方法-我来来回回重建了好几次项目都不行，直到把依赖从pom中去掉然后把在maven中包删除后清除idea缓存重启才行了" class="headerlink" title="解决方法:我来来回回重建了好几次项目都不行，直到把依赖从pom中去掉然后把在maven中包删除后清除idea缓存重启才行了"></a>解决方法:我来来回回重建了好几次项目都不行，直到把依赖从pom中去掉然后把在maven中包删除后清除idea缓存重启才行了</h5><h4 id="设置好后的父pom文件"><a href="#设置好后的父pom文件" class="headerlink" title="设置好后的父pom文件"></a>设置好后的父pom文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.wzg.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud2022<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>provider-payment8081<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>consumer-order80<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>api-commons<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 统一管理jar包版本 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">junit.version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">junit.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">log4j.version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">log4j.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">lombok.version</span>&gt;</span>1.18.16<span class="hljs-tag">&lt;/<span class="hljs-name">lombok.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mysql.version</span>&gt;</span>5.1.49<span class="hljs-tag">&lt;/<span class="hljs-name">mysql.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">druid.version</span>&gt;</span>1.1.17<span class="hljs-tag">&lt;/<span class="hljs-name">druid.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mybatis.spring.boot.version</span>&gt;</span>2.1.4<span class="hljs-tag">&lt;/<span class="hljs-name">mybatis.spring.boot.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 1、只是声明依赖，并不实际引入，子项目按需声明使用的依赖 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 2、子项目可以继承父项目的 version 和 scope --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 3、子项目若指定了 version 和 scope，以子项目为准 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><br>            <span class="hljs-comment">&lt;!--spring boot 2.2.2--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.2.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>            <span class="hljs-comment">&lt;!--spring cloud Hoxton.SR1--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>Hoxton.SR1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>            <span class="hljs-comment">&lt;!--spring cloud alibaba 2.1.0.RELEASE--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.0.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.49<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">fork</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">fork</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">addResources</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">addResources</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="复习DependencyManagement和Dependencies"><a href="#复习DependencyManagement和Dependencies" class="headerlink" title="复习DependencyManagement和Dependencies"></a>复习DependencyManagement和Dependencies</h2><p>Maven使用<code>dependencyManagement</code>元素来提供了一种管理依赖版本号的方式。</p><p>通常会在一个组织或者项目的最顶层的父POM中看到<code>dependencyManagement</code>元素。</p><p>使用pom.xml中的<code>dependencyManagement</code>元素能让所有在子项目中引用个依赖而不用显式的列出版本量。</p><p>Maven会沿着父子层次向上走，直到找到一个拥有<code>dependencyManagement</code>元素的项目，然后它就会使用这个</p><p><code>dependencyManagement</code>元素中指定的版本号。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysq1<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后在子项目里就可以添加<code>mysql-connector</code>时可以不指定版本号，例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysq1<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这样做的<strong>好处</strong>就是：如果有多个子项目都引用同一样依赖，则可以避免在每个使用的子项目里都声明一个版本号，这样当想升级或切换到另一个版本时，只需要在顶层父容器里更新，而不需要一个一个子项目的修改；另外如果某个子项目需要另外的一个版本，只需要声明version就可。</p><ul><li><code>dependencyManagement</code>里只是声明依赖，<strong>并不实现引入</strong>，因此<strong>子项目需要显示的声明需要用的依赖</strong>。</li><li>如果不在子项目中声明依赖，是不会从父项目中继承下来的；只有在子项目中写了该依赖项,并且没有指定具体版本，才会从父项目中继承该项，并且version和scope都读取自父pom。</li><li>如果子项目中指定了版本号，那么会使用子项目中指定的jar版本。</li></ul><hr><p>IDEA右侧旁的Maven插件有<code>Toggle &#39; Skip Tests&#39; Mode</code>按钮，这样maven可以跳过单元测试</p><hr><p>父工程创建完成执行<code>mvn : install</code>将父工程发布到仓库方便子工程继承。</p><h2 id="支付模块构建"><a href="#支付模块构建" class="headerlink" title="支付模块构建"></a>支付模块构建</h2><p>创建微服务模块套路：</p><ol><li>建Module</li><li>改POM</li><li>写YML</li><li>主启动</li><li>业务类</li></ol><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h6ahbsux3rj30mv05jq3r.jpg"></p><p>创建cloud-provider-payment8001微服务提供者支付Module模块：</p><p><strong>1.建名为provider-payment8001的Maven工程</strong></p><p><strong>2.改POM</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud2022<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.wzg.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>provider-payment8081<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>api-commons<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.wzg.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--mysql-connector-java--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--jdbc--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="问题6：这里的pom文件中引入了devtools这个热部署插件，每次代码更新它就会重新生成项目。但如果多个项目同时运行就会造成端口冲突"><a href="#问题6：这里的pom文件中引入了devtools这个热部署插件，每次代码更新它就会重新生成项目。但如果多个项目同时运行就会造成端口冲突" class="headerlink" title="问题6：这里的pom文件中引入了devtools这个热部署插件，每次代码更新它就会重新生成项目。但如果多个项目同时运行就会造成端口冲突"></a>问题6：这里的pom文件中引入了devtools这个热部署插件，每次代码更新它就会重新生成项目。但如果多个项目同时运行就会造成端口冲突</h5><h5 id="解决方法：移除该插件或在yml文件中手动指定端口号"><a href="#解决方法：移除该插件或在yml文件中手动指定端口号" class="headerlink" title="解决方法：移除该插件或在yml文件中手动指定端口号"></a>解决方法：移除该插件或在yml文件中手动指定端口号</h5><p><strong>3.写YML</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java">server:<br>  port: <span class="hljs-number">8001</span><br><br>spring:<br>  application:<br>    name: cloud-provider-service<br>  datasource:<br>    type: com.alibaba.druid.pool.DruidDataSource      #当前数据源操作类型<br>    driver-class-name: org.gjt.mm.mysql.Driver        #mysql驱动包<br>    #    driver-class-name: com.mysql.cj.jdbc.Driver<br>    url: jdbc:mysql:<span class="hljs-comment">//localhost:3306/wzg_db01?useUnicode=true&amp;characterEncoding-utr-8&amp;useSSL=false</span><br>    username: root<br>    password: <span class="hljs-number">123</span><br>    druid:<br>      test-<span class="hljs-keyword">while</span>-idle: <span class="hljs-literal">true</span><br>      validation-query: SELECT <span class="hljs-number">1</span><br><br><br>#eureka:<br>#  client:<br>#    register-with-eureka: <span class="hljs-literal">false</span> # 是否注册自己的信息到EurekaServer，默认是<span class="hljs-literal">true</span><br>#    fetch-registry: <span class="hljs-literal">false</span> # 是否拉取其它服务的信息，默认是<span class="hljs-literal">true</span><br>#    service-url: # EurekaServer的地址，现在是自己的地址，如果是集群，需要加上其它Server的地址。<br>#      defaultZone: http:<span class="hljs-comment">//127.0.0.1:8001/eureka</span><br><br>mybatis:<br>  mapper-locations: classpath:mapper<span class="hljs-comment">/*.xml</span><br><span class="hljs-comment">  type-aliases-package: com.wzg.springcloud.entities       #所有Entity别名类所在包</span><br></code></pre></td></tr></table></figure><p>问题7：项目运行时会报Error: testWhileIdle is true, validationQuery not set的错误。空闲的时候需要进行检测，但是检测的查询语句没有设置。大致意思就是说，当数据库没有接收到请求时，会进行数据库连接检测，检查数据库是否还是连着的。检查数据库是否断开需要发送sql语句。报错是说这个sql语句没有设置。</p><p>解决方法：在yml中设置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">druid:<br>    test-<span class="hljs-keyword">while</span>-idle: <span class="hljs-literal">true</span><br>    validation-query: SELECT <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><strong>4.主启动</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PaymentMain8081</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(PaymentMain8081.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>5.业务类</strong></p><p><strong>SQL</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `payment`(<br>`id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;ID&#x27;</span>,<br>    `serial` <span class="hljs-type">varchar</span>(<span class="hljs-number">200</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span>,<br><span class="hljs-keyword">PRIMARY</span> KEY (id)<br>)ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4<br></code></pre></td></tr></table></figure><p><strong>Entities</strong>：</p><p>实体类Payment：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud.entities;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Payment</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String serial;<br>&#125;<br></code></pre></td></tr></table></figure><p>JSON封装体CommonResult：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud.entities;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonResult</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">private</span> Integer code;<br>    <span class="hljs-keyword">private</span> String message;<br>    <span class="hljs-keyword">private</span> T data;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CommonResult</span><span class="hljs-params">(Integer code, String message)</span> &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.message = message;<br>        <span class="hljs-built_in">this</span>.data = <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>DAO</strong>：</p><p>接口PaymentDao：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud.dao;<br><br><span class="hljs-keyword">import</span> com.wzg.springcloud.entities.Payment;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Param;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">PaymentDao</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">create</span><span class="hljs-params">(Payment payment)</span>;<br><br>    <span class="hljs-keyword">public</span> Payment <span class="hljs-title function_">getPaymentById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> Long id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>MyBatis映射文件PaymentMapper.xml，路径：resources&#x2F;mapper&#x2F;PaymentMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.wzg.springcloud.dao.PaymentDao&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;create&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.wzg.springcloud.entities.Payment&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><br>        insert into payment(serial)<br>        values (#&#123;serial&#125;);<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.wzg.springcloud.entities.Payment&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;BIGINT&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;serial&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;serial&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getPaymentById&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;java.lang.Long&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span>&gt;</span><br>        select *<br>        from payment<br>        where id = #&#123;id&#125;;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>Service</strong>：</p><p>接口PaymentService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud.service;<br><br><span class="hljs-keyword">import</span> com.wzg.springcloud.entities.Payment;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Param;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">PaymentService</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">create</span><span class="hljs-params">(Payment payment)</span>;<br><br>    Payment <span class="hljs-title function_">getPaymentById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> Long id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud.service;<br><br><span class="hljs-keyword">import</span> com.wzg.springcloud.dao.PaymentDao;<br><span class="hljs-keyword">import</span> com.wzg.springcloud.entities.Payment;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PaymentServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">PaymentService</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> PaymentDao paymentDao;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">create</span><span class="hljs-params">(Payment payment)</span> &#123;<br>        <span class="hljs-keyword">return</span> paymentDao.create(payment);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Payment <span class="hljs-title function_">getPaymentById</span><span class="hljs-params">(Long id)</span> &#123;<br>        <span class="hljs-keyword">return</span> paymentDao.getPaymentById(id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Controller</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud.controller;<br><br><br><span class="hljs-keyword">import</span> com.wzg.springcloud.entities.CommonResult;<br><span class="hljs-keyword">import</span> com.wzg.springcloud.entities.Payment;<br><span class="hljs-keyword">import</span> com.wzg.springcloud.service.PaymentService;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PaymentController</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> PaymentService paymentService;<br><br>    <span class="hljs-meta">@PostMapping(value = &quot;/payment/create&quot;)</span><br>    <span class="hljs-keyword">public</span> CommonResult <span class="hljs-title function_">create</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Payment payment)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> paymentService.create(payment);<br>        log.info(<span class="hljs-string">&quot;插入结果：&quot;</span> + result);<br>        <span class="hljs-keyword">if</span> (result &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonResult</span>&lt;&gt;(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;插入成功&quot;</span>, result);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonResult</span>&lt;&gt;(<span class="hljs-number">444</span>, <span class="hljs-string">&quot;插入失败&quot;</span>, <span class="hljs-literal">null</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(value = &quot;/payment/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> CommonResult&lt;Payment&gt; <span class="hljs-title function_">getPaymentById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;<br>        <span class="hljs-type">Payment</span> <span class="hljs-variable">payment</span> <span class="hljs-operator">=</span> paymentService.getPaymentById(id);<br><br>        log.info(<span class="hljs-string">&quot;查询结果:&quot;</span> + payment);<br><br>        <span class="hljs-keyword">if</span> (payment != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonResult</span>&lt;&gt;(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;查询成功&quot;</span>, payment);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonResult</span>&lt;&gt;(<span class="hljs-number">444</span>, <span class="hljs-string">&quot;查询失败,查询ID:&quot;</span> + id, <span class="hljs-literal">null</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>6.测试</strong></p><ol><li>浏览器 - <a href="http://localhost:8001/payment/1">http://localhost:8001/payment/1</a></li></ol><p><strong>7.小总结</strong></p><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h6ahcq55vwj30ec0dsmzo.jpg"></p><p>Controller调用Service，Service调用Dao，Dao调用实体类，实体类关联sql</p><h2 id="消费者订单模块"><a href="#消费者订单模块" class="headerlink" title="消费者订单模块"></a>消费者订单模块</h2><p><strong>1.建Module</strong></p><p>创建名为consumer-order80的maven工程。</p><p><strong>2.改POM</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud2022<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.wzg.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>consumer-order80<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>api-commons<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.wzg.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>3.写YML</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">server:<br>  port: <span class="hljs-number">80</span><br><br>#  在使用 SpringBoot 热部署插件 devtools ,同时启动多个Application 时，控制台会报这个警告；<br>#  问题在于：DevToolsProperties 中配置了一个端口,默认是<span class="hljs-number">35729</span><br>spring:<br>  devtools:<br>    livereload:<br>      port: <span class="hljs-number">3571</span><br></code></pre></td></tr></table></figure><p><strong>4.主启动</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderMain80</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        SpringApplication.run(OrderMain80.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>5.业务类</strong></p><p>实体类：还是entities</p><p>控制层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud.controller;<br><br><span class="hljs-keyword">import</span> com.wzg.springcloud.entities.CommonResult;<br><span class="hljs-keyword">import</span> com.wzg.springcloud.entities.Payment;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RequestMapping(&quot;consumer&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderController</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String PAYMENY_URL=<span class="hljs-string">&quot;http://localhost:8001&quot;</span>;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RestTemplate restTemplate;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * PAYMENY_URL+&quot;/payment/create&quot;,//请求地址</span><br><span class="hljs-comment">     * payment,//请求参数</span><br><span class="hljs-comment">     * CommonResult.class//返回类型</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-meta">@PostMapping(&quot;/payment/create&quot;)</span><br>    <span class="hljs-keyword">public</span> CommonResult&lt;Payment&gt; <span class="hljs-title function_">create</span><span class="hljs-params">(Payment payment)</span>&#123;<br>        <span class="hljs-keyword">return</span> restTemplate.postForObject(PAYMENY_URL+<span class="hljs-string">&quot;/payment/create&quot;</span>, payment, CommonResult.class);<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/payment/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> CommonResult&lt;Payment&gt; <span class="hljs-title function_">getPaymentById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span>Long id)</span>&#123;<br>        <span class="hljs-keyword">return</span> restTemplate.getForObject(PAYMENY_URL+<span class="hljs-string">&quot;/payment/&quot;</span>+id,CommonResult.class);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzg.springcloud.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> whlie(true)&#123;learn&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApplicationContextConfig</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * RestTemplate提供了多种便捷访问远程http服务的方法，</span><br><span class="hljs-comment">     * 是一种简单便捷的访问restful服务模板类，是spring提供的用于rest服务的客户端模板工具集</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title function_">getRestTemplate</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>6.测试</strong></p><p>运行consumer-order80与provider-payment8001两工程</p><ul><li>浏览器 - <a href="http://localhost/consumer/payment/1">http://localhost/consumer/payment/1</a></li></ul><p><strong>RestTemplate</strong></p><p>RestTemplate提供了多种便捷访问远程Http服务的方法，是一种简单便捷的访问restful服务模板类，是Spring提供的用于访问Rest服务的客户端模板工具集</p><p>问题7：maven–install的时候提示maven-artifact2.9.0.pom有问题</p><p>解决方法：去maven仓库找到D:.m2\repository\org\apache\maven\maven-artifact\2.0.9直接删除该文件夹,重新下载</p><h2 id="工程重构"><a href="#工程重构" class="headerlink" title="工程重构"></a>工程重构</h2><p>提取消费者和提供者的重复代码，和之前学dubbo一个方法:抽取公共部分新建项目,通过maven–install到仓库其他项目要用的时候添加依赖</p><p>1.新建 api-commons</p><p>2.POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud2022<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.wzg.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>api-commons<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 这个是新添加的，之前没用到，后面会用到。关于这个hutool 是个功能强大的工具包，官网：https://hutool.cn/ --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.hutool<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hutool-all<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3.entities</p><p>将consumer-order80与provider-payment8001两工程的公有entities包移至api-commons工程下。</p><p>4.maven clean、install api-commons工程，以供给consumer-order80与provider-payment8001两工程调用。</p><p>5.订单80和支付8001分别改造</p><ul><li>将consumer-order80与provider-payment8001两工程的公有entities包移除</li><li>引入api-commons依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lun.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud-api-commons<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;project.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>6.测试</p><p><strong>7.小总结</strong></p><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h6ahdl285fj30e00jdtbn.jpg"></p><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h6ahdw27m7j30fn0bvq4j.jpg"></p><h4 id="至此微服务入门结束"><a href="#至此微服务入门结束" class="headerlink" title="至此微服务入门结束"></a>至此微服务入门结束</h4>]]></content>
    
    
    <categories>
      
      <category>SpringCloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>电脑商城项目06订单与AOP</title>
    <link href="/2022/07/30/%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE06%E8%AE%A2%E5%8D%95%E4%B8%8EAOP/"/>
    <url>/2022/07/30/%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE06%E8%AE%A2%E5%8D%95%E4%B8%8EAOP/</url>
    
    <content type="html"><![CDATA[<h2 id="确认订单"><a href="#确认订单" class="headerlink" title="确认订单"></a>确认订单</h2><h3 id="1-确认订单-持久层"><a href="#1-确认订单-持久层" class="headerlink" title="1.确认订单-持久层"></a>1.确认订单-持久层</h3><h4 id="1-1规划需要执行的SQL语句"><a href="#1-1规划需要执行的SQL语句" class="headerlink" title="1.1规划需要执行的SQL语句"></a>1.1规划需要执行的SQL语句</h4><blockquote><p>用户在购物车列表页中通过随机勾选相关的商品,在点击”结算”按钮后跳转到”确认订单页”,在这个页面中需要展示用户在上个页面所勾选的”购物车列表页”中对应的数据.说白了也就是列表展示,且展示的内容还是来自于购物车表.但是用户勾选了哪些商品呢,所以”购物车列表页”需要将用户勾选的商品id传递给”确认订单页”</p></blockquote><p>所以在持久层需要完成“根据若干个不确定的id值，查询购物车数据表，显示购物车中的数据信息”。则需要执行的SQL语句大致是。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>    cid,<br>    uid,<br>    pid,<br>    t_cart.price,<br>    t_cart.num,<br>    title,<br>    t_product.price <span class="hljs-keyword">as</span> realPrice,<br>    image<br><span class="hljs-keyword">from</span> t_cart<br><span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> t_product <span class="hljs-keyword">on</span> t_cart.pid <span class="hljs-operator">=</span> t_product.id<br><span class="hljs-keyword">where</span><br>cid <span class="hljs-keyword">in</span> (?,?,?)<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span><br>t_cart.created_time <span class="hljs-keyword">desc</span><br></code></pre></td></tr></table></figure><p>注意where cid in (?,?,?),这里是需要传入cid的集合</p><h4 id="1-2设计接口和抽象方法"><a href="#1-2设计接口和抽象方法" class="headerlink" title="1.2设计接口和抽象方法"></a>1.2设计接口和抽象方法</h4><p>在CartMapper接口中添加findVOByCids抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;CartVO&gt; <span class="hljs-title function_">findVOByCids</span><span class="hljs-params">(Integer[] cids)</span>;<br></code></pre></td></tr></table></figure><h4 id="1-3配置映射"><a href="#1-3配置映射" class="headerlink" title="1.3配置映射"></a>1.3配置映射</h4><p>1.在CartMapper.xml文件中添加SQL语句的映射配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findVOByCids&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.cy.store.vo.CartVO&quot;</span>&gt;</span><br>    select<br>        cid,<br>        uid,<br>        pid,<br>        t_cart.price,<br>        t_cart.num,<br>        title,<br>        t_product.price as realPrice,<br>        image<br>    from t_cart<br>    left join t_product on t_cart.pid = t_product.id<br>    where<br>        cid in (<br>            <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;array&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;cid&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span><br>                #&#123;cid&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br>            )<br>    order by<br>    t_cart.created_time desc<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>foreach循环就是一个for循环</p><ul><li>collection标识循环的是list集合还是数组,如果是list集合就用collection&#x3D;“list”</li><li>item用来接收每次循环获取的值</li><li>separator标识循环出来的值中间用什么隔开,且最后循环出来的值后面不加</li></ul></blockquote><h4 id="1-4单元测试"><a href="#1-4单元测试" class="headerlink" title="1.4单元测试"></a>1.4单元测试</h4><p>在CartMapperTests测试类中添加findVOByCids方法进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findVOByCids</span><span class="hljs-params">()</span> &#123;<br>    Integer[] cids = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">100</span>&#125;;<span class="hljs-comment">//可以写表中不存在的,无非就是查不到数据,并不会报错</span><br>    List&lt;CartVO&gt; list = cartMapper.findVOByCids(cids);<br>    <span class="hljs-keyword">for</span> (CartVO item : list) &#123;<br>        System.out.println(item);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-确认订单-业务层"><a href="#2-确认订单-业务层" class="headerlink" title="2.确认订单-业务层"></a>2.确认订单-业务层</h3><h4 id="2-1规划异常"><a href="#2-1规划异常" class="headerlink" title="2.1规划异常"></a>2.1规划异常</h4><p>查询语句,没有需要规划的异常,在业务层判断这几条购物车商品的数据归属是否正确,如果不正确也不需要抛出异常,直接从查询到的数据中移除该商品就行了</p><h4 id="2-2设计接口和抽象方法及实现"><a href="#2-2设计接口和抽象方法及实现" class="headerlink" title="2.2设计接口和抽象方法及实现"></a>2.2设计接口和抽象方法及实现</h4><p>1.在ICartService接口中添加getVOByCids()抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;CartVO&gt; <span class="hljs-title function_">getVOByCids</span><span class="hljs-params">(Integer uid, Integer[] cids)</span>;<span class="hljs-comment">//uid是为了判断数据归属是否正确</span><br></code></pre></td></tr></table></figure><p>2.在CartServiceImpl类中重写业务接口中的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;CartVO&gt; <span class="hljs-title function_">getVOByCids</span><span class="hljs-params">(Integer uid, Integer[] cids)</span> &#123;<br>    List&lt;CartVO&gt; list = cartMapper.findVOByCids(cids);<br><br>    <span class="hljs-comment">//可以使用for遍历,这里玩个新的,用迭代器遍历</span><br>    Iterator&lt;CartVO&gt; it = list.iterator();<br>    <span class="hljs-keyword">while</span> (it.hasNext()) &#123;<br><br>        <span class="hljs-comment">//指向的是该元素之前,所以需要next得到该元素</span><br>        <span class="hljs-type">CartVO</span> <span class="hljs-variable">cart</span> <span class="hljs-operator">=</span> it.next();<br><br>        <span class="hljs-keyword">if</span> (!cart.getUid().equals(uid)) &#123;<br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * 不能用list.remove(cart)</span><br><span class="hljs-comment">             * 在迭代器进行遍历的时候不能使用集合的移除</span><br><span class="hljs-comment">             * 方法,需要用迭代器特有的移除方法</span><br><span class="hljs-comment">             */</span><br>            it.remove();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> list;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-3单元测试"><a href="#2-3单元测试" class="headerlink" title="2.3单元测试"></a>2.3单元测试</h4><p>业务层只是调用持久层获取数据并判断归属是否正确,这里不再测试</p><h3 id="3-确认订单-控制层"><a href="#3-确认订单-控制层" class="headerlink" title="3.确认订单-控制层"></a>3.确认订单-控制层</h3><h4 id="3-1处理异常"><a href="#3-1处理异常" class="headerlink" title="3.1处理异常"></a>3.1处理异常</h4><p>业务层没有抛出异常,所以不需要处理异常</p><h4 id="3-2设计请求"><a href="#3-2设计请求" class="headerlink" title="3.2设计请求"></a>3.2设计请求</h4><ul><li>&#x2F;carts&#x2F;list</li><li>GET</li><li>Integer[] cids, HttpSession session</li><li>JsonResult&lt;List<CartVO>&gt;</li></ul><h4 id="3-3处理请求"><a href="#3-3处理请求" class="headerlink" title="3.3处理请求"></a>3.3处理请求</h4><p>1.在CartController类中添加处理请求的getVOByCids()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;list&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult&lt;List&lt;CartVO&gt;&gt; <span class="hljs-title function_">findVOByCids</span><span class="hljs-params">(Integer[] cids, HttpSession session)</span> &#123;<br>    List&lt;CartVO&gt; data = cartService.getVOByCids(getUidFromSession(session), cids);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonResult</span>&lt;&gt;(OK, data);<br>&#125;<br></code></pre></td></tr></table></figure><p>启动服务,登录后在地址栏输入<a href="http://localhost:8080/carts/list?cids=1&amp;cids=5&amp;cids=7%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95">http://localhost:8080/carts/list?cids=1&amp;cids=5&amp;cids=7进行测试</a></p><h3 id="4-确认订单-前端页面"><a href="#4-确认订单-前端页面" class="headerlink" title="4.确认订单-前端页面"></a>4.确认订单-前端页面</h3><h4 id="4-1显示勾选的购物车数据"><a href="#4-1显示勾选的购物车数据" class="headerlink" title="4.1显示勾选的购物车数据"></a>4.1显示勾选的购物车数据</h4><p>1.检查cart.html页面,里面form标签的action&#x3D;”orderConfirm.html”属性(规定表单数据提交到哪里)和结算按钮的类型”type&#x3D;submit”是必不可少的,这样点击”结算”时才能将数据传给”确认订单页”并在”确认订单页”展示选中的商品数据</p><p>2.在orderConfirm.html页面中实现自动加载从cart.html页面中传递过来的cids数据,再去请求ajax,然后将后端返回的数据填充在页面的某个区域中</p><p>3.orderConfirm.js文件中</p><ul><li><p>$(“.link-pay”).click(……)作用:点击”在线支付”后跳转到支付页面,这个其实就是下个模块要做的”创建订单”功能,该功能需要和数据库交互,所以不是在前端实现的,所以这行代码无用</p></li><li><p>$(“.link-success”).click(…):在orderConfirm.html页面没有class为link-success的标签,所以这行代码不会被执行</p><p>综上两条,orderConfirm.js文件在orderConfirm.html页面中无用,但存在可能会和下个模块”创建订单”功能冲突(下个模块会实现点击”创建订单”后页面跳转),所以注释掉</p></li></ul><hr><p>下面在orderConfirm.html页面编写js代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>    $(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">showCartList</span>();<br>&#125;);<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">showCartList</span>(<span class="hljs-params"></span>) &#123;<br>        $(<span class="hljs-string">&quot;#cart-list&quot;</span>).<span class="hljs-title function_">empty</span>();<br>        $.<span class="hljs-title function_">ajax</span>(&#123;<br>            <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/carts/list&quot;</span>,<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;GET&quot;</span>,<br>            <span class="hljs-attr">data</span>: location.<span class="hljs-property">search</span>.<span class="hljs-title function_">substr</span>(<span class="hljs-number">1</span>),<br>            <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;JSON&quot;</span>,<br>            <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">json</span>) &#123;<br>                <span class="hljs-keyword">if</span> (json.<span class="hljs-property">state</span> == <span class="hljs-number">200</span>) &#123;<br>                    <span class="hljs-keyword">var</span> list = json.<span class="hljs-property">data</span>;<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(location.<span class="hljs-property">search</span>.<span class="hljs-title function_">substr</span>(<span class="hljs-number">1</span>));<span class="hljs-comment">//调试用</span><br><br>                    <span class="hljs-comment">//声明两个变量用于更新&quot;确认订单&quot;页的总件数和总价</span><br>                    <span class="hljs-keyword">var</span> allCount = <span class="hljs-number">0</span>;<br>                    <span class="hljs-keyword">var</span> allPrice = <span class="hljs-number">0</span>;<br><br>                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; list.<span class="hljs-property">length</span>; i++) &#123;<br>                        <span class="hljs-keyword">var</span> tr = <span class="hljs-string">&#x27;&lt;tr&gt;\n&#x27;</span> +<br>                            <span class="hljs-string">&#x27;&lt;td&gt;&lt;img src=&quot;..#&#123;image&#125;collect.png&quot; class=&quot;img-responsive&quot; /&gt;&lt;/td&gt;\n&#x27;</span> +<br>                            <span class="hljs-string">&#x27;&lt;td&gt;#&#123;title&#125;&lt;/td&gt;\n&#x27;</span> +<br>                            <span class="hljs-string">&#x27;&lt;td&gt;¥&lt;span&gt;#&#123;price&#125;&lt;/span&gt;&lt;/td&gt;\n&#x27;</span> +<br>                            <span class="hljs-string">&#x27;&lt;td&gt;#&#123;num&#125;&lt;/td&gt;\n&#x27;</span> +<br>                            <span class="hljs-string">&#x27;&lt;td&gt;&lt;span&gt;#&#123;totalPrice&#125;&lt;/span&gt;&lt;/td&gt;\n&#x27;</span> +<br>                            <span class="hljs-string">&#x27;&lt;/tr&gt;&#x27;</span>;<br>                        tr = tr.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;#&#123;image&#125;&quot;</span>,list[i].<span class="hljs-property">image</span>);<br>                        tr = tr.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;#&#123;title&#125;&quot;</span>,list[i].<span class="hljs-property">title</span>);<br>                        tr = tr.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;#&#123;price&#125;&quot;</span>,list[i].<span class="hljs-property">realPrice</span>);<br>                        tr = tr.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;#&#123;num&#125;&quot;</span>,list[i].<span class="hljs-property">num</span>);<br>                        tr = tr.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;#&#123;totalPrice&#125;&quot;</span>,list[i].<span class="hljs-property">realPrice</span>*list[i].<span class="hljs-property">num</span>);<br>                        $(<span class="hljs-string">&quot;#cart-list&quot;</span>).<span class="hljs-title function_">append</span>(tr);<br><br>                        <span class="hljs-comment">//更新&quot;确认订单&quot;页的总件数和总价</span><br>                        allCount += list[i].<span class="hljs-property">num</span>;<br>                        allPrice += list[i].<span class="hljs-property">realPrice</span>*list[i].<span class="hljs-property">num</span>;<br>                    &#125;<br>                    $(<span class="hljs-string">&quot;#all-count&quot;</span>).<span class="hljs-title function_">html</span>(allCount);<br>                    $(<span class="hljs-string">&quot;#all-price&quot;</span>).<span class="hljs-title function_">html</span>(allPrice);<br>                &#125;<br>            &#125;,<br>            <span class="hljs-attr">error</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">xhr</span>) &#123;<br>                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;在确认订单页加载勾选的购物车数据时发生未知的异常&quot;</span>+xhr.<span class="hljs-property">status</span>);<br>            &#125;<br>        &#125;);<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><blockquote><p>1.为什么点击购物车列表页面的”结算”按钮后地址栏中会请求<a href="http://localhost:8080/web/orderConfirm.html?cids=6&amp;cids=5%E5%91%A2,%E5%9B%A0%E4%B8%BA%E8%AF%A5%E6%8C%89%E9%92%AE%E6%9C%89%E4%B8%80%E4%B8%AAtype=submit%E5%B1%9E%E6%80%A7,%E4%B8%94%E8%A1%A8%E5%8D%95%E6%9C%89%E4%B8%80%E4%B8%AAaction=&quot;orderConfirm.html&quot;%E5%B1%9E%E6%80%A7,%E6%89%80%E4%BB%A5%E7%82%B9%E5%87%BB%E8%AF%A5%E6%8C%89%E9%92%AE%E5%90%8E%E4%BC%9A%E6%90%BA%E5%B8%A6%E8%A1%A8%E5%8D%95%E4%B8%AD%E5%8F%82%E6%95%B0%E8%87%AA%E5%8A%A8%E8%B7%B3%E8%BD%AC">http://localhost:8080/web/orderConfirm.html?cids=6&amp;cids=5呢,因为该按钮有一个type=submit属性,且表单有一个action=&quot;orderConfirm.html&quot;属性,所以点击该按钮后会携带表单中参数自动跳转</a></p><p>会携带哪些参数呢:把表单中有name属性的标签的value值传递出去,针对这个请求传递的是name”cids”,其value值根据勾选的商品而定,可以是1或3或10</p><p>2.<strong>data: location.search.substr(1)这个API的参数为0表示截取地址栏中?后面的数据,即参数</strong></p><p><strong>如果这个API的参数为0则表示截取地址栏中?前面的数据,即请求地址</strong></p></blockquote><h4 id="4-2显示选择收货地址"><a href="#4-2显示选择收货地址" class="headerlink" title="4.2显示选择收货地址"></a>4.2显示选择收货地址</h4><p>收货地址存放在前端的一个select下拉列表中,我们需要将查询到的当前登录用户的收货地址动态的加载到这个下拉列表中.从数据库的角度看,是一个select查询语句,在”收货地址列表展示”模块已经编写了该持久层,业务层,控制层,所以这里只需要编写对应的前端页面就可以了</p><p>1.在orderConfirm.html页面中的ready函数中添加showAddressList方法的调用,使确认订单页加载时能够自动从后端获取该用户地址填充到select控件中并将第一个地址显示出来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">showCartList</span>();<br>    <span class="hljs-title function_">showAddressList</span>();<br>&#125;);<br></code></pre></td></tr></table></figure><p>2.在orderConfirm.html页面中编写showAddressList方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">showAddressList</span>(<span class="hljs-params"></span>) &#123;<br>    $(<span class="hljs-string">&quot;#address-list&quot;</span>).<span class="hljs-title function_">empty</span>();<br>    $.<span class="hljs-title function_">ajax</span>(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/addresses&quot;</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;GET&quot;</span>,<br>        <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;JSON&quot;</span>,<br>        <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">json</span>) &#123;<br>            <span class="hljs-keyword">if</span> (json.<span class="hljs-property">state</span> == <span class="hljs-number">200</span>) &#123;<br>                <span class="hljs-keyword">var</span> list = json.<span class="hljs-property">data</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; list.<span class="hljs-property">length</span>; i++) &#123;<br><br>                    <span class="hljs-comment">/*</span><br><span class="hljs-comment">                                value=&quot;#&#123;aid&#125;&quot;在该模块没有用,但是扔写上,只要是从数据库查到到的数据,都要让前端页</span><br><span class="hljs-comment">                                面的该条数据和id绑定(因为可能干别的什么时需要用到,就比如说下一个&quot;创建订单&quot;模块</span><br><span class="hljs-comment">                                就需要根据前端传给后端的aid查询用户选中的是哪一个地址然后将其加入订单表)</span><br><span class="hljs-comment">                     * */</span><br>                    <span class="hljs-keyword">var</span> opt = <span class="hljs-string">&#x27;&lt;option value=&quot;#&#123;aid&#125;&quot;&gt;#&#123;name&#125;&amp;nbsp;&amp;nbsp;&amp;nbsp;#&#123;tag&#125;&amp;nbsp;&amp;nbsp;&amp;nbsp;#&#123;provinceName&#125;#&#123;cityName&#125;#&#123;areaName&#125;#&#123;address&#125;&amp;nbsp;&amp;nbsp;&amp;nbsp;#&#123;tel&#125;&lt;/option&gt;&#x27;</span>;<br>                    opt = opt.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;#&#123;aid&#125;&quot;</span>,list[i].<span class="hljs-property">aid</span>);<br>                    opt = opt.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;#&#123;name&#125;&quot;</span>,list[i].<span class="hljs-property">name</span>);<br>                    opt = opt.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;#&#123;tag&#125;&quot;</span>,list[i].<span class="hljs-property">tag</span>);<br>                    opt = opt.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;#&#123;provinceName&#125;&quot;</span>,list[i].<span class="hljs-property">provinceName</span>);<br>                    opt = opt.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;#&#123;cityName&#125;&quot;</span>,list[i].<span class="hljs-property">cityName</span>);<br>                    opt = opt.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;#&#123;areaName&#125;&quot;</span>,list[i].<span class="hljs-property">areaName</span>);<br>                    opt = opt.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;#&#123;address&#125;&quot;</span>,list[i].<span class="hljs-property">address</span>);<br>                    opt = opt.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;#&#123;tel&#125;&quot;</span>,list[i].<span class="hljs-property">tel</span>);<br><br>                    $(<span class="hljs-string">&quot;#address-list&quot;</span>).<span class="hljs-title function_">append</span>(opt);<br>                &#125;<br>            &#125;<br>        &#125;,<br>        <span class="hljs-attr">error</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">xhr</span>) &#123;<br>            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;在确认订单页加载用户地址时发生未知的异常&quot;</span>+xhr.<span class="hljs-property">status</span>);<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="创建订单"><a href="#创建订单" class="headerlink" title="创建订单"></a>创建订单</h2><h3 id="1-创建数据表"><a href="#1-创建数据表" class="headerlink" title="1.创建数据表"></a>1.创建数据表</h3><p>1.使用use命令先选中store数据库。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">USE store;<br></code></pre></td></tr></table></figure><p>2.在store数据库中创建t_order和t_order_item数据表</p><blockquote><p>针对该模块可以将t_order_item表和t_order表合并,但是以后可能开发某个模块可能单独用到t_order_item(比如用户查看订单时只需要t_order_item表就可以实现)所以,建议这两个表分开创建</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t_order (<br>oid <span class="hljs-type">INT</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;订单id&#x27;</span>,<br>uid <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;用户id&#x27;</span>,<br>recv_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;收货人姓名&#x27;</span>,<br>recv_phone <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) COMMENT <span class="hljs-string">&#x27;收货人电话&#x27;</span>,<br>recv_province <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">15</span>) COMMENT <span class="hljs-string">&#x27;收货人所在省&#x27;</span>,<br>recv_city <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">15</span>) COMMENT <span class="hljs-string">&#x27;收货人所在市&#x27;</span>,<br>recv_area <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">15</span>) COMMENT <span class="hljs-string">&#x27;收货人所在区&#x27;</span>,<br>recv_address <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) COMMENT <span class="hljs-string">&#x27;收货详细地址&#x27;</span>,<br>total_price <span class="hljs-type">BIGINT</span> COMMENT <span class="hljs-string">&#x27;总价&#x27;</span>,<br>status <span class="hljs-type">INT</span> COMMENT <span class="hljs-string">&#x27;状态：0-未支付，1-已支付，2-已取消，3-已关闭，4-已完成&#x27;</span>,<br>order_time DATETIME COMMENT <span class="hljs-string">&#x27;下单时间&#x27;</span>,<br>pay_time DATETIME COMMENT <span class="hljs-string">&#x27;支付时间&#x27;</span>,<br>created_user <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) COMMENT <span class="hljs-string">&#x27;创建人&#x27;</span>,<br>created_time DATETIME COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>modified_user <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) COMMENT <span class="hljs-string">&#x27;修改人&#x27;</span>,<br>modified_time DATETIME COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br><span class="hljs-keyword">PRIMARY</span> KEY (oid)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t_order_item (<br>id <span class="hljs-type">INT</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;订单中的商品记录的id&#x27;</span>,<br>oid <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;所归属的订单的id&#x27;</span>,<br>pid <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;商品的id&#x27;</span>,<br>title <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;商品标题&#x27;</span>,<br>image <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">500</span>) COMMENT <span class="hljs-string">&#x27;商品图片&#x27;</span>,<br>price <span class="hljs-type">BIGINT</span> COMMENT <span class="hljs-string">&#x27;商品价格&#x27;</span>,<br>num <span class="hljs-type">INT</span> COMMENT <span class="hljs-string">&#x27;购买数量&#x27;</span>,<br>created_user <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) COMMENT <span class="hljs-string">&#x27;创建人&#x27;</span>,<br>created_time DATETIME COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>modified_user <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) COMMENT <span class="hljs-string">&#x27;修改人&#x27;</span>,<br>modified_time DATETIME COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br><span class="hljs-keyword">PRIMARY</span> KEY (id)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br></code></pre></td></tr></table></figure><h3 id="2-创建用户的实体类"><a href="#2-创建用户的实体类" class="headerlink" title="2.创建用户的实体类"></a>2.创建用户的实体类</h3><p>1.entity包下创建Order实体类并继承BaseEntity类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** 订单数据的实体类 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Order</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseEntity</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer oid;<br>    <span class="hljs-keyword">private</span> Integer uid;<br>    <span class="hljs-keyword">private</span> String recvName;<br>    <span class="hljs-keyword">private</span> String recvPhone;<br>    <span class="hljs-keyword">private</span> String recvProvince;<br>    <span class="hljs-keyword">private</span> String recvCity;<br>    <span class="hljs-keyword">private</span> String recvArea;<br>    <span class="hljs-keyword">private</span> String recvAddress;<br>    <span class="hljs-keyword">private</span> Long totalPrice;<br>    <span class="hljs-keyword">private</span> Integer status;<br>    <span class="hljs-keyword">private</span> Date orderTime;<br>    <span class="hljs-keyword">private</span> Date payTime;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * get,set</span><br><span class="hljs-comment">     * equals和hashCode</span><br><span class="hljs-comment">     * toString</span><br><span class="hljs-comment">     */</span><br>&#125;    <br></code></pre></td></tr></table></figure><p>2.在com.cy.store.entity包下创建OrderItem实体类并继承BaseEntity类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** 订单中的商品数据 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderItem</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseEntity</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> Integer oid;<br>    <span class="hljs-keyword">private</span> Integer pid;<br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-keyword">private</span> String image;<br>    <span class="hljs-keyword">private</span> Long price;<br>    <span class="hljs-keyword">private</span> Integer num;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * get,set</span><br><span class="hljs-comment">     * equals和hashCode</span><br><span class="hljs-comment">     * toString</span><br><span class="hljs-comment">     */</span><br>&#125; <br></code></pre></td></tr></table></figure><h3 id="3-创建订单-持久层"><a href="#3-创建订单-持久层" class="headerlink" title="3.创建订单-持久层"></a>3.创建订单-持久层</h3><h4 id="3-1规划需要执行的SQL语句"><a href="#3-1规划需要执行的SQL语句" class="headerlink" title="3.1规划需要执行的SQL语句"></a>3.1规划需要执行的SQL语句</h4><p>1.插入订单数据的SQL语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">inert into t_order (aid除外的所有字段) values (字段的值)<br></code></pre></td></tr></table></figure><p>2.插入某一个订单中商品数据的SQL语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">inert <span class="hljs-keyword">into</span> t_order (id除外的所有字段) <span class="hljs-keyword">values</span> (字段的值)<br></code></pre></td></tr></table></figure><h4 id="3-2实现接口和抽象方法"><a href="#3-2实现接口和抽象方法" class="headerlink" title="3.2实现接口和抽象方法"></a>3.2实现接口和抽象方法</h4><p>在mapper包下创建OrderMapper接口并在接口中添加抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">OrderMapper</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 插入订单数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> order 订单数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 受影响的行数</span><br><span class="hljs-comment">     */</span><br>    Integer <span class="hljs-title function_">insertOrder</span><span class="hljs-params">(Order order)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 插入某一个订单中商品数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> orderItem 订单中商品数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 受影响的行数</span><br><span class="hljs-comment">     */</span><br>    Integer <span class="hljs-title function_">insertOrderItem</span><span class="hljs-params">(OrderItem orderItem)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-3编写映射"><a href="#3-3编写映射" class="headerlink" title="3.3编写映射"></a>3.3编写映射</h4><p>创建OrderMapper.xml文件,并添加抽象方法的映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.cy.store.mapper.OrderMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 插入订单数据 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertOrder&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;oid&quot;</span>&gt;</span><br>        insert into t_order (<br>        uid, recv_name, recv_phone, recv_province, recv_city, recv_area, recv_address,<br>        total_price,status, order_time, pay_time, created_user, created_time, modified_user,<br>        modified_time<br>        ) values (<br>        #&#123;uid&#125;, #&#123;recvName&#125;, #&#123;recvPhone&#125;, #&#123;recvProvince&#125;, #&#123;recvCity&#125;, #&#123;recvArea&#125;,<br>        #&#123;recvAddress&#125;, #&#123;totalPrice&#125;, #&#123;status&#125;, #&#123;orderTime&#125;, #&#123;payTime&#125;, #&#123;createdUser&#125;,<br>        #&#123;createdTime&#125;, #&#123;modifiedUser&#125;, #&#123;modifiedTime&#125;<br>        )<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 插入订单商品数据 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertOrderItem&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><br>        insert into t_order_item (<br>        oid, pid, title, image, price, num, created_user,<br>        created_time, modified_user, modified_time<br>        ) values (<br>        #&#123;oid&#125;, #&#123;pid&#125;, #&#123;title&#125;, #&#123;image&#125;, #&#123;price&#125;, #&#123;num&#125;, #&#123;createdUser&#125;,<br>        #&#123;createdTime&#125;, #&#123;modifiedUser&#125;, #&#123;modifiedTime&#125;<br>        )<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-4单元测试"><a href="#3-4单元测试" class="headerlink" title="3.4单元测试"></a>3.4单元测试</h4><p>创建OrderMapperTests测试类并添加测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderMapperTests</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OrderMapper orderMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertOrder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Order</span>();<br>        order.setUid(<span class="hljs-number">31</span>);<br>        order.setRecvName(<span class="hljs-string">&quot;小王&quot;</span>);<br>        order.setRecvPhone(<span class="hljs-string">&quot;133333&quot;</span>);<br>        orderMapper.insertOrder(order);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertOrderItem</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">OrderItem</span> <span class="hljs-variable">orderItem</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderItem</span>();<br>        orderItem.setOid(<span class="hljs-number">1</span>);<br>        orderItem.setPid(<span class="hljs-number">10000001</span>);<br>        orderItem.setTitle(<span class="hljs-string">&quot;高档铅笔&quot;</span>);<br>        orderMapper.insertOrderItem(orderItem);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-创建订单-业务层"><a href="#4-创建订单-业务层" class="headerlink" title="4.创建订单-业务层"></a>4.创建订单-业务层</h3><h4 id="4-1规划异常"><a href="#4-1规划异常" class="headerlink" title="4.1规划异常"></a>4.1规划异常</h4><p>无异常</p><h4 id="4-2实现接口和抽象方法及实现"><a href="#4-2实现接口和抽象方法及实现" class="headerlink" title="4.2实现接口和抽象方法及实现"></a>4.2实现接口和抽象方法及实现</h4><blockquote><p>查看订单表的字段从而分析业务层方法需要哪些参数:</p><p>oid:主键自增,所以不需要该参数</p><p>uid:由控制层获取session中uid传给业务层,所以需要该参数<br>recv_name:通过”确认订单页”传递选中的地址aid,根据aid在在业务层调用已经声明的findByAid方法(该方法是在做”设置默认地址”模块时创建的,只在持久层创建了,并没有在业务层继续实现),所以需要参数aid<br>recv_phone:同上<br>recv_province:同上<br>recv_city:同上<br>recv_area:同上<br>recv_address:同上<br>total_price:根据前端传来的cids查询出每类商品数量和单价,然后相乘后求和,所以需要参数Integer[] cids<br>status:默认是0,所以不需要该参数<br>order_time:业务层实现方法内部可以声明,所以不需要该参数<br>pay_time:”创建订单”模块不需要此参数<br>created_user:由控制层获取session中username传给业务层,所以需要该参数<br>created_time:业务层实现方法内部可以声明,所以不需要该参数<br>modified_user:由控制层获取session中username传给业务层,所以需要该参数<br>modified_time:业务层实现方法内部可以声明,所以不需要该参数</p></blockquote><p>综上分析,需要的参数是uid和aid,且需要在IAddressService接口添加getByAid()方法来获取选中的收货地址的详细数据:</p><p>1.在IAddressService接口中添加getByAid()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Address <span class="hljs-title function_">getByAid</span><span class="hljs-params">(Integer aid, Integer uid)</span>;<br></code></pre></td></tr></table></figure><p>2.在AddressServiceImpl类中实现接口中的getByAid()抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Address <span class="hljs-title function_">getByAid</span><span class="hljs-params">(Integer aid, Integer uid)</span> &#123;<br><br>    <span class="hljs-type">Address</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> addressMapper.findByAid(aid);<br><br>    <span class="hljs-keyword">if</span> (address == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AddressNotFoundException</span>(<span class="hljs-string">&quot;收货地址数据不存在的异常&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!address.getUid().equals(uid)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AccessDeniedException</span>(<span class="hljs-string">&quot;非法访问&quot;</span>);<br>    &#125;<br>    address.setProvinceCode(<span class="hljs-literal">null</span>);<br>    address.setCityCode(<span class="hljs-literal">null</span>);<br>    address.setAreaCode(<span class="hljs-literal">null</span>);<br>    address.setCreatedUser(<span class="hljs-literal">null</span>);<br>    address.setCreatedTime(<span class="hljs-literal">null</span>);<br>    address.setModifiedUser(<span class="hljs-literal">null</span>);<br>    address.setModifiedTime(<span class="hljs-literal">null</span>);<br>    <span class="hljs-keyword">return</span> address;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.在service包下创建IOrderService业务层接口并添加抽象方法用于创建订单</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IOrderService</span> &#123;<br>    Order <span class="hljs-title function_">create</span><span class="hljs-params">(Integer aid, Integer[] cids, Integer uid, String username)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>返回值是Order是因为还要在下个页面展示订单详细信息</strong></p><p>4.在impl包下创建OrderServiceImpl并编写代码实现订单和订单中所有商品数据的插入操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IOrderService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OrderMapper orderMapper;<br><br>    <span class="hljs-comment">//需要调用业务层的getByAid方法</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IAddressService addressService;<br><br>    <span class="hljs-comment">//需要调用业务层的getVOByCids方法</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ICartService cartService;<br><br>    <span class="hljs-comment">//需要调用业务层的getByUid方法</span><br>    <span class="hljs-keyword">private</span> IUserService userService;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Order <span class="hljs-title function_">create</span><span class="hljs-params">(Integer aid, Integer[] cids, Integer uid, String username)</span> &#123;<br><br>        <span class="hljs-comment">//返回的列表中的对象都是即将下单的</span><br>        List&lt;CartVO&gt; list = cartService.getVOByCids(uid, cids);<br><br>        <span class="hljs-type">long</span> <span class="hljs-variable">totalPrice</span> <span class="hljs-operator">=</span> <span class="hljs-number">0L</span>;<br>        <span class="hljs-keyword">for</span> (CartVO cartVO : list) &#123;<br>            totalPrice += cartVO.getRealPrice()*cartVO.getNum();<br><br>        &#125;<br>        <span class="hljs-type">Address</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> addressService.getByAid(aid, uid);<br>        <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Order</span>();<br>        order.setUid(uid);<br><br>        <span class="hljs-comment">//封装收货地址</span><br>        order.setRecvName(address.getName());<br>        order.setRecvPhone(address.getPhone());<br>        order.setRecvProvince(address.getProvinceName());<br>        order.setRecvCity(address.getCityName());<br>        order.setRecvArea(address.getAreaName());<br>        order.setRecvAddress(address.getAddress());<br><br>        <span class="hljs-comment">//封装创建时间,支付状态和总价</span><br>        order.setOrderTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        order.setStatus(<span class="hljs-number">0</span>);<br>        order.setTotalPrice(totalPrice);<br><br>        <span class="hljs-comment">//封装四个日志</span><br>        order.setCreatedUser(username);<br>        order.setCreatedTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        order.setModifiedUser(username);<br>        order.setModifiedTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> orderMapper.insertOrder(order);<br>        <span class="hljs-keyword">if</span> (rows != <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InsertException</span>(<span class="hljs-string">&quot;插入数据时产生未知的异常&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//插入数据——将某条订单的所有商品的详细数据插入</span><br>        <span class="hljs-keyword">for</span> (CartVO cartVO : list) &#123;<br>            <span class="hljs-type">OrderItem</span> <span class="hljs-variable">orderItem</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderItem</span>();<br><br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * 此时获取的oid不为空,因为在配置文件里面开启了oid主</span><br><span class="hljs-comment">             * 键自增,所以上面的代码执行插入时就自动将oid赋值了</span><br><span class="hljs-comment">             */</span><br>            orderItem.setOid(order.getOid());<br><br>            orderItem.setPid(cartVO.getPid());<br>            orderItem.setTitle(cartVO.getTitle());<br>            orderItem.setImage(cartVO.getImage());<br>            orderItem.setPrice(cartVO.getRealPrice());<br>            orderItem.setNum(cartVO.getNum());<br><br>            orderItem.setCreatedUser(username);<br>            orderItem.setCreatedTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>            orderItem.setModifiedUser(username);<br>            orderItem.setModifiedTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br><br>            rows = orderMapper.insertOrderItem(orderItem);<br>            <span class="hljs-keyword">if</span> (rows != <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InsertException</span>(<span class="hljs-string">&quot;插入数据时产生未知的异常&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> order;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-3单元测试"><a href="#4-3单元测试" class="headerlink" title="4.3单元测试"></a>4.3单元测试</h4><p>创建OrderServiceTests测试类并添加create()方法进行功能测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderServiceTests</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IOrderService orderService;<br><br>    <span class="hljs-meta">@Autowired</span><br>    IUserService userService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">create</span><span class="hljs-params">()</span> &#123;<br>        Integer[] cids = &#123;<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>&#125;;<br>        <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> orderService.create(<span class="hljs-number">13</span>, cids, <span class="hljs-number">11</span>, <span class="hljs-string">&quot;小红&quot;</span>);<br>        System.out.println(order);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-创建订单-控制层"><a href="#5-创建订单-控制层" class="headerlink" title="5.创建订单-控制层"></a>5.创建订单-控制层</h3><h4 id="5-1处理异常"><a href="#5-1处理异常" class="headerlink" title="5.1处理异常"></a>5.1处理异常</h4><p>没有异常需要处理</p><h4 id="5-2设计请求"><a href="#5-2设计请求" class="headerlink" title="5.2设计请求"></a>5.2设计请求</h4><ul><li>&#x2F;orders&#x2F;create</li><li>GET</li><li>Integer aid, Integer[] cids, HttpSession session</li><li>JsonResult<Order></li></ul><h4 id="5-3处理请求"><a href="#5-3处理请求" class="headerlink" title="5.3处理请求"></a>5.3处理请求</h4><p>controller包下创建OrderController类，并继承自BaseController类,在类中编写请求方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;orders&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IOrderService orderService;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;create&quot;)</span><br>    <span class="hljs-keyword">public</span> JsonResult&lt;Order&gt; <span class="hljs-title function_">create</span><span class="hljs-params">(Integer aid, Integer[] cids, HttpSession session)</span> &#123;<br>        <span class="hljs-type">Order</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> orderService.create(<br>                aid,<br>                cids,<br>                getUidFromSession(session),<br>                getUsernameFromSession(session));<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonResult</span>&lt;&gt;(OK,data);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-创建订单-前端页面"><a href="#6-创建订单-前端页面" class="headerlink" title="6.创建订单-前端页面"></a>6.创建订单-前端页面</h3><p>在”确认订单页”添加发送请求的处理方法使点击”在线支付”按钮可以创建订单并跳转到”支付信息页”(支付页显示详细商品信息这个功能这里不做了)</p><p><strong>请求参数是通过字符串拼接得到的,那么就必须用get请求,因为post请求不能拼接字符串</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#btn-create-order&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> aid = $(<span class="hljs-string">&quot;#address-list&quot;</span>).<span class="hljs-title function_">val</span>();<span class="hljs-comment">//12</span><br>    <span class="hljs-keyword">var</span> cids = location.<span class="hljs-property">search</span>.<span class="hljs-title function_">substr</span>(<span class="hljs-number">1</span>);<span class="hljs-comment">//cids=4&amp;cids=6&amp;cids=8</span><br>    $.<span class="hljs-title function_">ajax</span>(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/orders/create&quot;</span>,<br>        <span class="hljs-attr">data</span>: <span class="hljs-string">&quot;aid=&quot;</span> + aid + <span class="hljs-string">&quot;&amp;&quot;</span> + cids,<span class="hljs-comment">//aid=12&amp;cids=4&amp;cids=6&amp;cids=8</span><br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;GET&quot;</span>,<br>        <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;JSON&quot;</span>,<br>        <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">json</span>) &#123;<br>            <span class="hljs-keyword">if</span> (json.<span class="hljs-property">state</span> == <span class="hljs-number">200</span>) &#123;<br>                location.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;payment.html&quot;</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;创建订单失败！&quot;</span> + json.<span class="hljs-property">message</span>);<br>            &#125;<br>        &#125;,<br>        <span class="hljs-attr">error</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">xhr</span>) &#123;<br>            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;创建订单数据时产生未知的异常&quot;</span> + xhr.<span class="hljs-property">status</span>);<br>        &#125;<br>    &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><p>检测项目所有业务层方法的耗时(开始执行时间和结束执行时间只差值),再在不改变项目主体流程代码的前提条件下完成此功能,就要用到AOP</p><blockquote><p>如果我们想对业务某一些方法同时添加相同的功能需求,并且在不改变业务功能逻辑的基础之上进行完成,就可以使用AOP的切面编程进行开发</p></blockquote><h3 id="1-Spring-AOP"><a href="#1-Spring-AOP" class="headerlink" title="1.Spring AOP"></a>1.Spring AOP</h3><p>AOP：面向切面（Aspect）编程。AOP并不是Spring框架的特性(Spring已经被整合到了SpringBoot中,所以如果AOP是Spring框架的特性,那么就不需要手动导包,只需要在一个类上写@Aspect注解,鼠标放到该注解上按alt+enter就可以自动导包了,但是事与愿违,所以说AOP并不是Spring框架的特性)，只是Spring很好的支持了AOP。</p><p>使用步骤:</p><ol><li>首先定义一个类,将这个类作为切面类</li><li>在这个类中定义切面方法(5种:前置,后置,环绕,异常,最终)</li><li>将这个切面方法中的业务逻辑对应的代码进行编写和设计</li><li>通过连接点来连接目标方法,就是用粗粒度表达式和细粒度表达式来进行连接</li></ol><h3 id="2-切面方法"><a href="#2-切面方法" class="headerlink" title="2.切面方法"></a>2.切面方法</h3><p>1.切面方法的访问权限是public。</p><p>2.切面方法的返回值类型可以是void或Object，如果该方法被@Around注解修饰，必须使用Object作为返回值类型，并返回连接点方法的返回值；如果使用的注解是@Before或@After等其他注解时，则自行决定。</p><p>3.切面方法的名称可以自定义。</p><p>4.切面方法可以接收参数,参数是ProccedingJoinPoint接口类型的参数.但是@Around所修饰的方法必须要传递这个参数.其他注解修饰的方法要不要该参数都可以</p><h3 id="3-统计业务方法执行时长"><a href="#3-统计业务方法执行时长" class="headerlink" title="3 统计业务方法执行时长"></a>3 统计业务方法执行时长</h3><p>1.因为AOP不是Spring内部封装的技术,所以需要进行导包操作:在pom.xml文件中添加两个关于AOP的依赖aspectjweaver和aspectjtools。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.在com.cy.store.aop包下创建TimerAspect切面类,给类添加两个注解进行修饰:</p><ul><li>@Aspect(将当前类标记为切面类)</li><li>@Component(将当前类的对象创建使用维护交由Spring容器维护)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TimerAspect</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.在类中添加切面方法,这里使用环绕通知的方式来进行编写</p><p><strong>参数ProceedingJoinPoint接口表示连接点,也就是是目标方法的对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint pjp)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>    <span class="hljs-comment">//开始时间</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>    <span class="hljs-comment">//调用目标方法,比如login方法,getByUid方法</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> pjp.proceed();<br>    <span class="hljs-comment">//结束时间</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>    System.out.println(<span class="hljs-string">&quot;耗时:&quot;</span>+(end-start));<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.将当前环绕通知映射到某个切面上,也就是指定连接的点.给around方法添加注解@Around</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Around(&quot;execution(* com.cy.store.service.impl.*.*(..))&quot;)</span><br></code></pre></td></tr></table></figure><ul><li>第一个*表示方法返回值是任意的</li><li>第二个*表示imp包下的类是任意的</li><li>第三个*表示类里面的方法是任意的</li><li>(…)表示方法的参数是任意的</li></ul><p>5.启动项目，在前端浏览器访问任意一个功能模块进行功能的测试</p>]]></content>
    
    
    <categories>
      
      <category>电脑商城项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>电脑商城项目05商品详情和购物车</title>
    <link href="/2022/07/28/%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE05%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E5%92%8C%E8%B4%AD%E7%89%A9%E8%BD%A6/"/>
    <url>/2022/07/28/%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE05%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E5%92%8C%E8%B4%AD%E7%89%A9%E8%BD%A6/</url>
    
    <content type="html"><![CDATA[<h2 id="显示商品详情"><a href="#显示商品详情" class="headerlink" title="显示商品详情"></a>显示商品详情</h2><h3 id="1-显示商品详情-持久层"><a href="#1-显示商品详情-持久层" class="headerlink" title="1.显示商品详情-持久层"></a>1.显示商品详情-持久层</h3><h4 id="1-1规划需要执行的SQL语句"><a href="#1-1规划需要执行的SQL语句" class="headerlink" title="1.1规划需要执行的SQL语句"></a>1.1规划需要执行的SQL语句</h4><p>根据商品id显示商品详情的SQL语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t_product <span class="hljs-keyword">WHERE</span> id<span class="hljs-operator">=</span>?<br></code></pre></td></tr></table></figure><h4 id="1-2设计接口和抽象方法"><a href="#1-2设计接口和抽象方法" class="headerlink" title="1.2设计接口和抽象方法"></a>1.2设计接口和抽象方法</h4><p>在ProductMapper接口中添加抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据商品id查询商品详情</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id 商品id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 匹配的商品详情，如果没有匹配的数据则返回null</span><br><span class="hljs-comment"> */</span><br>Product <span class="hljs-title function_">findById</span><span class="hljs-params">(Integer id)</span>;<br></code></pre></td></tr></table></figure><h4 id="1-3编写映射"><a href="#1-3编写映射" class="headerlink" title="1.3编写映射"></a>1.3编写映射</h4><p>在ProductMapper.xml文件中配置findById(Integer id)方法的映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findById&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;ProductEntityMap&quot;</span>&gt;</span><br>    select * from t_product where id=#&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-显示商品详情-业务层"><a href="#2-显示商品详情-业务层" class="headerlink" title="2.显示商品详情-业务层"></a>2.显示商品详情-业务层</h3><h4 id="2-1规划异常"><a href="#2-1规划异常" class="headerlink" title="2.1规划异常"></a>2.1规划异常</h4><p>如果商品数据不存在，应该抛出ProductNotFoundException，所以创建ProductNotFoundException异常类并使其继承ServiceException</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** 商品数据不存在的异常 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductNotFoundException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceException</span> &#123;<br>    <span class="hljs-comment">/**重写ServiceException的所有构造方法*/</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2设计接口和抽象方法及实现"><a href="#2-2设计接口和抽象方法及实现" class="headerlink" title="2.2设计接口和抽象方法及实现"></a>2.2设计接口和抽象方法及实现</h4><p>1.在业务层IProductService接口中添加findById(Integer id)抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据商品id查询商品详情</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id 商品id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 匹配的商品详情，如果没有匹配的数据则返回null</span><br><span class="hljs-comment"> */</span><br>Product <span class="hljs-title function_">findById</span><span class="hljs-params">(Integer id)</span>;<br></code></pre></td></tr></table></figure><p>2.在ProductServiceImpl类中，实现接口中的findById(Integer id)抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Product <span class="hljs-title function_">findById</span><span class="hljs-params">(Integer id)</span> &#123;<br>    <span class="hljs-type">Product</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> productMapper.findById(id);<br>    <span class="hljs-comment">// 判断查询结果是否为null</span><br>    <span class="hljs-keyword">if</span> (product == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductNotFoundException</span>(<span class="hljs-string">&quot;尝试访问的商品数据不存在&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 将查询结果中的部分属性设置为null</span><br>    product.setPriority(<span class="hljs-literal">null</span>);<br>    product.setCreatedUser(<span class="hljs-literal">null</span>);<br>    product.setCreatedTime(<span class="hljs-literal">null</span>);<br>    product.setModifiedUser(<span class="hljs-literal">null</span>);<br>    product.setModifiedTime(<span class="hljs-literal">null</span>);<br><br>    <span class="hljs-keyword">return</span> product;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-显示商品详情-控制层"><a href="#3-显示商品详情-控制层" class="headerlink" title="3.显示商品详情-控制层"></a>3.显示商品详情-控制层</h3><h4 id="3-1处理异常"><a href="#3-1处理异常" class="headerlink" title="3.1处理异常"></a>3.1处理异常</h4><p>在BaseController类中的handleException()方法中添加处理ProductNotFoundException的异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> ProductNotFoundException) &#123;<br>result.setState(<span class="hljs-number">4006</span>);<br>    result.setMessage(<span class="hljs-string">&quot;访问的商品数据不存在的异常&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-2-设计请求"><a href="#3-2-设计请求" class="headerlink" title="3.2 设计请求"></a>3.2 设计请求</h4><ul><li>&#x2F;products&#x2F;{id}&#x2F;details</li><li>Integer id</li><li>GET</li><li>JsonResult<Product></li></ul><h4 id="3-3处理请求"><a href="#3-3处理请求" class="headerlink" title="3.3处理请求"></a>3.3处理请求</h4><p>在ProductController类中添加处理请求的getById()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;&#123;id&#125;/details&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult&lt;Product&gt; <span class="hljs-title function_">getById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;<br>    <span class="hljs-type">Product</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> productService.findById(id);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonResult</span>&lt;Product&gt;(OK, data);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-显示商品详情-前端页面"><a href="#4-显示商品详情-前端页面" class="headerlink" title="4.显示商品详情-前端页面"></a>4.显示商品详情-前端页面</h3><p>1.首页将商品id发送给详情页后,详情页需要从url中裁取获得该id,实现方法在jquery-getUrlParam.js中(目前怎么实现裁取可以先不学),所以需要在product.html页面中导入该js文件,这里我在body标签内部的最后引入该js文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../js/jquery-getUrlParam.js&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>2.在product.html页面中body标签内部的最后添加获取当前商品详情的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>            <span class="hljs-comment">//调用jquery-getUrlParam.js文件的getUrlParam方法获取商品id</span><br>            <span class="hljs-keyword">var</span> id = $.<span class="hljs-title function_">getUrlParam</span>(<span class="hljs-string">&quot;id&quot;</span>);<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;id=&quot;</span> + id);<br>            $(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>                $.<span class="hljs-title function_">ajax</span>(&#123;<br>                    <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/products/&quot;</span> + id + <span class="hljs-string">&quot;/details&quot;</span>,<br>                    <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;GET&quot;</span>,<br>                    <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;JSON&quot;</span>,<br>                    <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">json</span>) &#123;<br>                        <span class="hljs-keyword">if</span> (json.<span class="hljs-property">state</span> == <span class="hljs-number">200</span>) &#123;<br>                            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;title=&quot;</span> + json.<span class="hljs-property">data</span>.<span class="hljs-property">title</span>);<br>                            <span class="hljs-comment">//html()方法:</span><br>                            <span class="hljs-comment">// 假设有个标签&lt;div id=&quot;a&quot;&gt;&lt;/div&gt;</span><br>                            <span class="hljs-comment">//那么$(&quot;#a&quot;).html(&lt;p&gt;&lt;/p&gt;)就是给该div标签加p标签</span><br>                            <span class="hljs-comment">//$(&quot;#a&quot;).html(&quot;我爱中国&quot;)就是给该div标签填充&quot;我爱中国&quot;内容</span><br>                            $(<span class="hljs-string">&quot;#product-title&quot;</span>).<span class="hljs-title function_">html</span>(json.<span class="hljs-property">data</span>.<span class="hljs-property">title</span>);<br>                            $(<span class="hljs-string">&quot;#product-sell-point&quot;</span>).<span class="hljs-title function_">html</span>(json.<span class="hljs-property">data</span>.<span class="hljs-property">sellPoint</span>);<br>                            $(<span class="hljs-string">&quot;#product-price&quot;</span>).<span class="hljs-title function_">html</span>(json.<span class="hljs-property">data</span>.<span class="hljs-property">price</span>);<br><br>                            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>                                $(<span class="hljs-string">&quot;#product-image-&quot;</span> + i + <span class="hljs-string">&quot;-big&quot;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;src&quot;</span>, <span class="hljs-string">&quot;..&quot;</span> + json.<span class="hljs-property">data</span>.<span class="hljs-property">image</span> + i + <span class="hljs-string">&quot;_big.png&quot;</span>);<br>                                $(<span class="hljs-string">&quot;#product-image-&quot;</span> + i).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;src&quot;</span>, <span class="hljs-string">&quot;..&quot;</span> + json.<span class="hljs-property">data</span>.<span class="hljs-property">image</span> + i + <span class="hljs-string">&quot;.jpg&quot;</span>);<br>                            &#125;<br>                        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (json.<span class="hljs-property">state</span> == <span class="hljs-number">4006</span>) &#123; <span class="hljs-comment">// 商品数据不存在的异常</span><br>                            location.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;index.html&quot;</span>;<br>                        &#125; <span class="hljs-keyword">else</span> &#123;<br>                            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;获取商品信息失败！&quot;</span> + json.<span class="hljs-property">message</span>);<br>                        &#125;<br>                    &#125;<br>                &#125;);<br>            &#125;);<br>        &lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="加入购物车"><a href="#加入购物车" class="headerlink" title="加入购物车"></a>加入购物车</h2><h3 id="1-创建数据表"><a href="#1-创建数据表" class="headerlink" title="1.创建数据表"></a>1.创建数据表</h3><p>1.使用use命令先选中store数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">USE store;<br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>2.在store数据库中创建t_cart用户数据表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t_cart (<br>cid <span class="hljs-type">INT</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;购物车数据id&#x27;</span>,<br>uid <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;用户id&#x27;</span>,<br>pid <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;商品id&#x27;</span>,<br>price <span class="hljs-type">BIGINT</span> COMMENT <span class="hljs-string">&#x27;加入时商品单价&#x27;</span>,<br>num <span class="hljs-type">INT</span> COMMENT <span class="hljs-string">&#x27;商品数量&#x27;</span>,<br>created_user <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) COMMENT <span class="hljs-string">&#x27;创建人&#x27;</span>,<br>created_time DATETIME COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>modified_user <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) COMMENT <span class="hljs-string">&#x27;修改人&#x27;</span>,<br>modified_time DATETIME COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br><span class="hljs-keyword">PRIMARY</span> KEY (cid)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br></code></pre></td></tr></table></figure><h3 id="2-创建购物车的实体类"><a href="#2-创建购物车的实体类" class="headerlink" title="2.创建购物车的实体类"></a>2.创建购物车的实体类</h3><p>在entity包下创建购物车的Cart实体类并使其继承BaseEntity</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**购物车数据的实体类*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cart</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseEntity</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer cid;<br>    <span class="hljs-keyword">private</span> Integer uid;<br>    <span class="hljs-keyword">private</span> Integer pid;<br>    <span class="hljs-keyword">private</span> Long price;<br>    <span class="hljs-keyword">private</span> Integer num;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * get,set</span><br><span class="hljs-comment"> * equals和hashCode</span><br><span class="hljs-comment"> * toString</span><br><span class="hljs-comment"> */</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-加入购物车-持久层"><a href="#3-加入购物车-持久层" class="headerlink" title="3.加入购物车-持久层"></a>3.加入购物车-持久层</h3><h4 id="3-1规划需要执行的SQL语句"><a href="#3-1规划需要执行的SQL语句" class="headerlink" title="3.1规划需要执行的SQL语句"></a>3.1规划需要执行的SQL语句</h4><p>1.向购物车表中插入商品数据的SQL语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into t_cart (除了cid以外的所有字段) values (匹配的值列表);<br></code></pre></td></tr></table></figure><p>2.如果当前商品已经在购物车存在,则直接更新商品即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">update t_cart set num=? where cid=?<br></code></pre></td></tr></table></figure><p>3.在插入或者更新具体执行哪个语句,取决于数据库中是否有当前的这个购物车商品的数据,需要查询语句才能确定</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from t_cart where uid=? and pid=?<br></code></pre></td></tr></table></figure><h4 id="3-2设计接口和抽象方法"><a href="#3-2设计接口和抽象方法" class="headerlink" title="3.2设计接口和抽象方法"></a>3.2设计接口和抽象方法</h4><p>在mapper包下创建CartMapper接口，并添加抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">CartMapper</span> &#123;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 插入购物车数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> cart 购物车数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 受影响的行数</span><br><span class="hljs-comment">     */</span><br>    Integer <span class="hljs-title function_">insert</span><span class="hljs-params">(Cart cart)</span>;<br><br>    <span class="hljs-comment">/** 修改购物车数据中商品的数量*/</span><br>    Integer <span class="hljs-title function_">updateNumByCid</span><span class="hljs-params">(</span><br><span class="hljs-params">            <span class="hljs-meta">@Param(&quot;cid&quot;)</span> Integer cid,</span><br><span class="hljs-params">            <span class="hljs-meta">@Param(&quot;num&quot;)</span> Integer num,</span><br><span class="hljs-params">            <span class="hljs-meta">@Param(&quot;modifiedUser&quot;)</span> String modifiedUser,</span><br><span class="hljs-params">            <span class="hljs-meta">@Param(&quot;modifiedTime&quot;)</span> Date modifiedTime)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据用户id和商品id查询购物车中的数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> uid 用户id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pid 商品id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 匹配的购物车数据，如果该用户的购物车中并没有该商品，则返回null</span><br><span class="hljs-comment">     */</span><br>    Cart <span class="hljs-title function_">findByUidAndPid</span><span class="hljs-params">(</span><br><span class="hljs-params">            <span class="hljs-meta">@Param(&quot;uid&quot;)</span> Integer uid,</span><br><span class="hljs-params">            <span class="hljs-meta">@Param(&quot;pid&quot;)</span> Integer pid)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-3编写映射"><a href="#3-3编写映射" class="headerlink" title="3.3编写映射"></a>3.3编写映射</h4><p>在resources.mapper文件夹下创建CartMapper.xml文件，并在文件中配置以上三个方法的映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.cy.store.mapper.CartMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;CartEntityMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.cy.store.entity.Cart&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;cid&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;cid&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;created_user&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;createdUser&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;created_time&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;createdTime&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;modified_user&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;modifiedUser&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;modified_time&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;modifiedTime&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 插入购物车数据--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insert&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;cid&quot;</span>&gt;</span><br>        insert into t_cart (uid, pid, price, num, created_user, created_time, modified_user, modified_time)<br>        values (#&#123;uid&#125;, #&#123;pid&#125;, #&#123;price&#125;, #&#123;num&#125;, #&#123;createdUser&#125;, #&#123;createdTime&#125;, #&#123;modifiedUser&#125;, #&#123;modifiedTime&#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 修改购物车数据中商品的数量--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateNumByCid&quot;</span>&gt;</span><br>        update t_cart set<br>            num=#&#123;num&#125;,<br>            modified_user=#&#123;modifiedUser&#125;,<br>            modified_time=#&#123;modifiedTime&#125;<br>        where cid=#&#123;cid&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 根据用户id和商品id查询购物车中的数据--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findByUidAndPid&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;CartEntityMap&quot;</span>&gt;</span><br>        select * from t_cart where uid=#&#123;uid&#125; AND pid=#&#123;pid&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-4单元测试"><a href="#3-4单元测试" class="headerlink" title="3.4单元测试"></a>3.4单元测试</h4><p>创建CartMapperTests测试类进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CartMapperTests</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> CartMapper cartMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Cart</span> <span class="hljs-variable">cart</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cart</span>();<br>        cart.setUid(<span class="hljs-number">11</span>);<br>        cart.setPid(<span class="hljs-number">10000001</span>);<br>        cart.setNum(<span class="hljs-number">3</span>);<br>        cart.setPrice(<span class="hljs-number">4L</span>);<span class="hljs-comment">//长整型</span><br>        cartMapper.insert(cart);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateNumByCid</span><span class="hljs-params">()</span> &#123;<br>        cartMapper.updateNumByCid(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findByUidAndPid</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Cart</span> <span class="hljs-variable">cart</span> <span class="hljs-operator">=</span> cartMapper.findByUidAndPid(<span class="hljs-number">11</span>, <span class="hljs-number">10000001</span>);<br>        System.out.println(cart);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-加入购物车-业务层"><a href="#4-加入购物车-业务层" class="headerlink" title="4.加入购物车-业务层"></a>4.加入购物车-业务层</h3><h4 id="4-1规划异常"><a href="#4-1规划异常" class="headerlink" title="4.1规划异常"></a>4.1规划异常</h4><p>在插入数据时，可能抛出InsertException异常；在修改数据时，可能抛出UpdateException异常.这两个异常已开发</p><h4 id="4-2设计接口和抽象方法及实现"><a href="#4-2设计接口和抽象方法及实现" class="headerlink" title="4.2设计接口和抽象方法及实现"></a>4.2设计接口和抽象方法及实现</h4><p>1.在com.cy.store.service包下创建ICartService接口，并添加抽象方法</p><p>该抽象方法都需要哪些参数呢,还是依据持久层,看持久层三条sql语句的实现需要什么参数:</p><blockquote><p>findByUidAndPid:查询购物车数据,参数是uid,pid</p><p>insert:插入购物车数据,参数是cart对象(属性有cid,uid,pid,price,num)</p><p>updateNumByCid:修改购物车中商品数量,参数是cid,num,modifiedUser,modifiedTime</p><p>price可以通过业务层中调用ProductMapper接口的findById获取,modifiedTime在业务层实现类的内部创建,所以需要的参数是uid,pid,num,username</p></blockquote><p>经过这次分析结合以前给业务层方法声明参数,可以发现<strong>即使持久层的方法参数是实体类对象,业务层的方法参数也大多不是实体类对象,因为实体类的部分属性是可以在业务层进行拼接然后封装到实体类对象中,再传给持久层(比如这里的price),这样的话就降低了前端传递数据的压力,如果该对象的所有方法都必须由前端传递过来,那么业务层方法参数可以是实体类对象(如注册用户时业务层的方法参数就是User对象)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ICartService</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将商品添加到购物车</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> uid 当前登录用户的id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pid 商品的id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> amount 增加的数量</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> username 当前登录的用户名</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">addToCart</span><span class="hljs-params">(Integer uid, Integer pid, Integer amount, String username)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.创建CartServiceImpl类，并实现ICartService接口.在类中声明CartMapper持久层对象和IProductService处理商品数据的业务对象,并实现业务层的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CartServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ICartService</span> &#123;<br>    <span class="hljs-comment">/**购物车的业务层依赖于购物车的持久层以及商品的持久层*/</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> CartMapper cartMapper;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ProductMapper productMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addToCart</span><span class="hljs-params">(Integer uid, Integer pid, Integer amount, String username)</span> &#123;<br><br>        <span class="hljs-comment">//根据参数pid和uid查询购物车中该商品是否已经存在</span><br>        <span class="hljs-type">Cart</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> cartMapper.findByUidAndPid(uid, pid);<br><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">cid</span> <span class="hljs-operator">=</span> result.getCid();<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>        <span class="hljs-keyword">if</span> (result == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">Cart</span> <span class="hljs-variable">cart</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cart</span>();<br><br>            <span class="hljs-comment">//封装数据：uid,pid,amount</span><br>            cart.setUid(uid);<br>            cart.setPid(pid);<br>            cart.setNum(amount);<span class="hljs-comment">//注意前端传来amount时并没有和数据库商品数量进行求和</span><br><br>            <span class="hljs-comment">//查询商品数据，得到商品价格并封装</span><br>            <span class="hljs-type">Product</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> productMapper.findById(pid);<br>            cart.setPrice(product.getPrice());<br><br>            <span class="hljs-comment">//封装数据：4个日志</span><br>            cart.setCreatedUser(username);<br>            cart.setCreatedTime(date);<br>            cart.setModifiedUser(username);<br>            cart.setModifiedTime(date);<br><br>            <span class="hljs-type">Integer</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> cartMapper.insert(cart);<br>            <span class="hljs-keyword">if</span> (rows != <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InsertException</span>(<span class="hljs-string">&quot;插入数据时出现未知异常&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//从查询结果中取出原数量，与参数amount相加，得到新的数量</span><br>            <span class="hljs-type">Integer</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> result.getNum() + amount;<span class="hljs-comment">//加入购物车时只会有+不可能有-</span><br><br>            <span class="hljs-type">Integer</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> cartMapper.updateNumByCid(<br>                result.getCid(),<br>                num,<br>                username,<br>                date);<br>            <span class="hljs-keyword">if</span> (rows != <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InsertException</span>(<span class="hljs-string">&quot;更新数据时产生未知异常&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-3单元测试"><a href="#4-3单元测试" class="headerlink" title="4.3单元测试"></a>4.3单元测试</h4><p>创建测试类CartServiceTests并编写测试方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CartServiceTests</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ICartService cartService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addToCart</span><span class="hljs-params">()</span> &#123;<br>        cartService.addToCart(<span class="hljs-number">11</span>, <span class="hljs-number">10000002</span>, <span class="hljs-number">5</span>, <span class="hljs-string">&quot;Tom&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-加入购物车-控制层"><a href="#5-加入购物车-控制层" class="headerlink" title="5.加入购物车-控制层"></a>5.加入购物车-控制层</h3><h4 id="5-1处理异常"><a href="#5-1处理异常" class="headerlink" title="5.1处理异常"></a>5.1处理异常</h4><p>InsertException异常和UpdateException异常都已经设置到BaseController类中了,这里无需重复开发</p><h4 id="5-2设计请求"><a href="#5-2设计请求" class="headerlink" title="5.2设计请求"></a>5.2设计请求</h4><ul><li>&#x2F;carts&#x2F;add_to_cart</li><li>post</li><li>Integer pid, Integer amount, HttpSession session</li><li>JsonResult<Void></li></ul><h4 id="5-3处理请求"><a href="#5-3处理请求" class="headerlink" title="5.3处理请求"></a>5.3处理请求</h4><p>在controller包下创建CartController类并继承BaseController类,在类中添加处理请求的addToCart()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;carts&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CartController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ICartService cartService;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;add_to_cart&quot;)</span><br>    <span class="hljs-keyword">public</span> JsonResult&lt;Void&gt; <span class="hljs-title function_">addToCart</span><span class="hljs-params">(Integer pid, Integer amount, HttpSession session)</span> &#123;<br>        cartService.addToCart(<br>                getUidFromSession(session),<br>                pid,<br>                amount,<br>                getUsernameFromSession(session));<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonResult</span>&lt;Void&gt;(OK);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>启动服务,登录账号后在地址栏输入<a href="http://localhost:8080/carts/add_to_cart?pid=10000002&amp;amount=5%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95">http://localhost:8080/carts/add_to_cart?pid=10000002&amp;amount=5进行测试</a></p><h3 id="6-加入购物车-前端页面"><a href="#6-加入购物车-前端页面" class="headerlink" title="6.加入购物车-前端页面"></a>6.加入购物车-前端页面</h3><p>在product.html页面中的body标签内的script标签里为“加入购物车”按钮添加点击事件</p><p>回顾一下在ajax函数中data参数的数据设置的方式</p><ul><li><p>data:$(“选择的form表单”).serialize()。当需要提交的参数过多并且在同一个表单中时使用</p></li><li><p>data:new FormData($(“选择的form表单”)[0])。只适用提交文件</p></li><li><p>data:“username&#x3D;TOM”。手动拼接,适合参数值固定并且参数值列表有限.等同于</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> user = <span class="hljs-string">&quot;控件某属性值或控件文本内容或自己声明的值&quot;</span><br><span class="hljs-attr">data</span>: <span class="hljs-string">&quot;username=&quot;</span>+user<br></code></pre></td></tr></table></figure></li><li><p>使用JSON格式提交数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;Tom&quot;</span>,<br>    <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">18</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用RestFul风格不属于前端给后端传参数</p></li></ul><blockquote><p>这里表单里面有很多无用参数,所以不使用表单提交</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;#btn-add-to-cart&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    $.<span class="hljs-title function_">ajax</span>(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/carts/add_to_cart&quot;</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>        <span class="hljs-attr">data</span>: &#123;<br>            <span class="hljs-string">&quot;pid&quot;</span>: id,<br>            <span class="hljs-string">&quot;amount&quot;</span>: $(<span class="hljs-string">&quot;#num&quot;</span>).<span class="hljs-title function_">val</span>()<br>        &#125;,<br>        <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;JSON&quot;</span>,<br>        <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">json</span>) &#123;<br>            <span class="hljs-keyword">if</span> (json.<span class="hljs-property">state</span> == <span class="hljs-number">200</span>) &#123;<br>                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;增加成功！&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;增加失败！&quot;</span> + json.<span class="hljs-property">message</span>);<br>            &#125;<br>        &#125;,<br>        <span class="hljs-attr">error</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">xhr</span>) &#123;<br>            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;您的登录信息已经过期，请重新登录！HTTP响应码：&quot;</span> + xhr.<span class="hljs-property">status</span>);<br>            location.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;login.html&quot;</span>;<br>        &#125;<br>    &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><p><strong>点击”加入购物车”按钮后页面跳转的实现:product.html导入的product.js文件里面实现了点击后跳转</strong></p><h2 id="显示购物车列表"><a href="#显示购物车列表" class="headerlink" title="显示购物车列表"></a>显示购物车列表</h2><h3 id="1-显示购物车列表-持久层"><a href="#1-显示购物车列表-持久层" class="headerlink" title="1.显示购物车列表-持久层"></a>1.显示购物车列表-持久层</h3><h4 id="1-1规划需要执行的SQL语句-1"><a href="#1-1规划需要执行的SQL语句-1" class="headerlink" title="1.1规划需要执行的SQL语句"></a>1.1规划需要执行的SQL语句</h4><p>这里需要将商品表和购物车表进行连表查询</p><p>显示某用户的购物车列表数据的SQL语句大致是</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>cid, #日后勾选购物车商品模块需要用到cid来确定勾选的是购物车表的哪一条数据<br><br>uid, #感觉没必要,因为uid可以从session中拿的呀,难道是为<br>#了后面提交购物车订单时判断提交的商品的uid和登录的uid是否一致?<br><br>pid, #日购提交订单模块需要用到pid来确定购买的是商品表的哪件商<br>#品,然后对商品表的该商品的库存,销售热度等信息进行修改<br><br>t_cart.price, #两个表都有该字段,需要指定获取的是哪个数据表的<br><br>t_cart.num, #两个表都有该字段且含义不同,需要指定获取的是哪个数据表的<br><br>title,<br><br>t_product.price <span class="hljs-keyword">as</span> realPrice, #为了在购物车列表页展示两个价格的差值<br><br>image<br><br><span class="hljs-keyword">from</span> t_cart<br><span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> t_product <span class="hljs-keyword">on</span> t_cart.pid <span class="hljs-operator">=</span> t_product.id #把t_cart作为主表(老师说现在处理的是购物车表的数据所以让其为主表,我不明白)<br><span class="hljs-keyword">where</span><br>uid <span class="hljs-operator">=</span> #&#123;uid&#125;<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span><br>t_cart.created_time <span class="hljs-keyword">desc</span> #进行排序使最新加入购物车的在最上面<br></code></pre></td></tr></table></figure><h4 id="1-2设计接口和抽象方法-1"><a href="#1-2设计接口和抽象方法-1" class="headerlink" title="1.2设计接口和抽象方法"></a>1.2设计接口和抽象方法</h4><p>1. </p><blockquote><p>VO全称Value Object,值对象。当进行select查询时,查询的结果属于多张表中的内容,此时发现结果集不能直接使用某个POJO实体类来接收,因为POJO实体类不能包含多表查询出来的信息,解决方式是:重新去构建一个新的对象,这个对象用于存储所查询出来的结果集对应的映射,所以把这个对象称之为值对象.</p></blockquote><p>在store包下创建一个vo包,在该包下面创建CartVO类,不需要继承BaseController类,那相应的就需要单独实现Serializable接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** 购物车数据的Value Object类 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CartVO</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer cid;<br>    <span class="hljs-keyword">private</span> Integer uid;<br>    <span class="hljs-keyword">private</span> Integer pid;<br>    <span class="hljs-keyword">private</span> Long price;<br>    <span class="hljs-keyword">private</span> Integer num;<br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-keyword">private</span> Long realPrice;<br>    <span class="hljs-keyword">private</span> String image;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * get,set</span><br><span class="hljs-comment"> * equals和hashCode</span><br><span class="hljs-comment"> * toString</span><br><span class="hljs-comment"> */</span><br>&#125;<br></code></pre></td></tr></table></figure><p>2.在CartMapper接口中添加抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询某用户的购物车数据</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> uid 用户id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 该用户的购物车数据的列表</span><br><span class="hljs-comment"> */</span><br>List&lt;CartVO&gt; <span class="hljs-title function_">findVOByUid</span><span class="hljs-params">(Integer uid)</span>;<br></code></pre></td></tr></table></figure><h4 id="1-3编写映射-1"><a href="#1-3编写映射-1" class="headerlink" title="1.3编写映射"></a>1.3编写映射</h4><p>1.在CartMapper.xml文件中添加findVOByUid()方法的映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 查询某用户的购物车数据：List&lt;CartVO&gt; findVOByUid(Integer uid) --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findVOByUid&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.cy.store.vo.CartVO&quot;</span>&gt;</span><br>    select<br>        cid,<br>        uid,<br>        pid,<br>        t_cart.price,<br>        t_cart.num,<br>        title,<br>        t_product.price as realPrice,<br>        image<br>    from t_cart<br>    left join t_product on t_cart.pid = t_product.id<br>    where<br>    uid = #&#123;uid&#125;<br>    order by<br>    t_cart.created_time desc<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="1-4单元测试"><a href="#1-4单元测试" class="headerlink" title="1.4单元测试"></a>1.4单元测试</h4><p>在CartMapperTests测试类中添加findVOByUid()方法的测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findVOByUid</span><span class="hljs-params">()</span> &#123;<br>    List&lt;CartVO&gt; list = cartMapper.findVOByUid(<span class="hljs-number">11</span>);<br>    System.out.println(list);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-显示购物车列表-业务层"><a href="#2-显示购物车列表-业务层" class="headerlink" title="2.显示购物车列表-业务层"></a>2.显示购物车列表-业务层</h3><h4 id="2-1-规划异常"><a href="#2-1-规划异常" class="headerlink" title="2.1 规划异常"></a>2.1 规划异常</h4><p>查询不到就返回空,不需要规划异常</p><h4 id="2-2设计接口和抽象方法及实现-1"><a href="#2-2设计接口和抽象方法及实现-1" class="headerlink" title="2.2设计接口和抽象方法及实现"></a>2.2设计接口和抽象方法及实现</h4><p>1.在ICartService接口中添加findVOByUid()抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询某用户的购物车数据</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> uid 用户id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 该用户的购物车数据的列表</span><br><span class="hljs-comment"> */</span><br>List&lt;CartVO&gt; <span class="hljs-title function_">getVOByUid</span><span class="hljs-params">(Integer uid)</span>;<br></code></pre></td></tr></table></figure><p>2.在CartServiceImpl类中重写业务接口中的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;CartVO&gt; <span class="hljs-title function_">getVOByUid</span><span class="hljs-params">(Integer uid)</span> &#123;<br>    <span class="hljs-keyword">return</span> cartMapper.findVOByUid(uid);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-3单元测试"><a href="#2-3单元测试" class="headerlink" title="2.3单元测试"></a>2.3单元测试</h4><p>该业务层只是调用了持久层的方法并返回,可以不再测试</p><h3 id="3-显示购物车列表-控制层"><a href="#3-显示购物车列表-控制层" class="headerlink" title="3.显示购物车列表-控制层"></a>3.显示购物车列表-控制层</h3><h4 id="3-1-处理异常"><a href="#3-1-处理异常" class="headerlink" title="3.1 处理异常"></a>3.1 处理异常</h4><p>业务层没有抛出异常,所以这里不需要处理异常</p><h4 id="3-2-设计请求-1"><a href="#3-2-设计请求-1" class="headerlink" title="3.2 设计请求"></a>3.2 设计请求</h4><ul><li>&#x2F;carts&#x2F;</li><li>GET</li><li>HttpSession session</li><li>JsonResult&lt;List<CartVO>&gt;</li></ul><h4 id="3-3-处理请求"><a href="#3-3-处理请求" class="headerlink" title="3.3 处理请求"></a>3.3 处理请求</h4><p>在CartController类中编写处理请求的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&#123;&quot;&quot;, &quot;/&quot;&#125;)</span><br><span class="hljs-keyword">public</span> JsonResult&lt;List&lt;CartVO&gt;&gt; <span class="hljs-title function_">getVOByUid</span><span class="hljs-params">(HttpSession session)</span> &#123;<br>    List&lt;CartVO&gt; data = cartService.getVOByUid(getUidFromSession(session));<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonResult</span>&lt;List&lt;CartVO&gt;&gt;(OK, data);<br>&#125;<br></code></pre></td></tr></table></figure><p>启动服务,登录后在地址栏输入<a href="http://localhost:8080/carts%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95">http://localhost:8080/carts进行测试</a></p><h3 id="4-显示购物车列表-前端页面"><a href="#4-显示购物车列表-前端页面" class="headerlink" title="4.显示购物车列表-前端页面"></a>4.显示购物车列表-前端页面</h3><p>1.将cart.html页面的head头标签内引入的cart.js文件注释掉(这个就是文件的功能:点击”+“,”-“,“删除”,”全选”等按钮时执行相应的操作)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!-- <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/cart.js&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span> --&gt;<br></code></pre></td></tr></table></figure><blockquote><p>多说一下,form标签的action&#x3D;”orderConfirm.html”属性(规定表单数据提交到哪里)和结算按钮的类型”type&#x3D;submit”是必不可少的,这样点击”结算”时才能将数据传给”确认订单页”并在”确认订单页”展示选中的商品数据</p><p>当然也可以把这两个删掉,然后给结算按钮添加”type&#x3D;button”然后给该按钮绑定一个点击事件实现页面跳转和数据传递,但是这样太麻烦了</p></blockquote><p>2.在cart.html页面body标签内的script标签中编写展示购物车列表的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>    $(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">showCartList</span>();<br>&#125;);<br><br>    <span class="hljs-comment">//展示购物车列表数据</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">showCartList</span>(<span class="hljs-params"></span>) &#123;<br>        $(<span class="hljs-string">&quot;#cart-list&quot;</span>).<span class="hljs-title function_">empty</span>();<br>        $.<span class="hljs-title function_">ajax</span>(&#123;<br>            <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/carts&quot;</span>,<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;GET&quot;</span>,<br>            <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;JSON&quot;</span>,<br>            <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">json</span>) &#123;<br>                <span class="hljs-keyword">var</span> list = json.<span class="hljs-property">data</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; list.<span class="hljs-property">length</span>; i++) &#123;<br>                    <span class="hljs-keyword">var</span> tr = <span class="hljs-string">&#x27;&lt;tr&gt;\n&#x27;</span> +<br>                        <span class="hljs-string">&#x27;&lt;td&gt;\n&#x27;</span> +<br>                        <span class="hljs-string">&#x27;&lt;input name=&quot;cids&quot; value=&quot;#&#123;cid&#125;&quot; type=&quot;checkbox&quot; class=&quot;ckitem&quot; /&gt;\n&#x27;</span> +<br>                        <span class="hljs-string">&#x27;&lt;/td&gt;\n&#x27;</span> +<br>                        <span class="hljs-string">&#x27;&lt;td&gt;&lt;img src=&quot;..#&#123;image&#125;collect.png&quot; class=&quot;img-responsive&quot; /&gt;&lt;/td&gt;\n&#x27;</span> +<br>                        <span class="hljs-string">&#x27;&lt;td&gt;#&#123;title&#125;#&#123;msg&#125;&lt;/td&gt;\n&#x27;</span> +<br>                        <span class="hljs-string">&#x27;&lt;td&gt;¥&lt;span id=&quot;goodsPrice#&#123;cid&#125;&quot;&gt;#&#123;singlePrice&#125;&lt;/span&gt;&lt;/td&gt;\n&#x27;</span> +<br>                        <span class="hljs-string">&#x27;&lt;td&gt;\n&#x27;</span> +<br>                        <span class="hljs-string">&#x27;&lt;input type=&quot;button&quot; value=&quot;-&quot; class=&quot;num-btn&quot; οnclick=&quot;reduceNum(1)&quot; /&gt;\n&#x27;</span> +<br>                        <span class="hljs-string">&#x27;&lt;input id=&quot;goodsCount#&#123;cid&#125;&quot; type=&quot;text&quot; size=&quot;2&quot; readonly=&quot;readonly&quot; class=&quot;num-text&quot; value=&quot;#&#123;num&#125;&quot;&gt;\n&#x27;</span> +<br>                        <span class="hljs-string">&#x27;&lt;input class=&quot;num-btn&quot; type=&quot;button&quot; value=&quot;+&quot; οnclick=&quot;addNum(#&#123;cid&#125;)&quot; /&gt;\n&#x27;</span> +<br>                        <span class="hljs-string">&#x27;&lt;/td&gt;\n&#x27;</span> +<br>                        <span class="hljs-string">&#x27;&lt;td&gt;&lt;span id=&quot;goodsCast#&#123;cid&#125;&quot;&gt;#&#123;totalPrice&#125;&lt;/span&gt;&lt;/td&gt;\n&#x27;</span> +<br>                        <span class="hljs-string">&#x27;&lt;td&gt;\n&#x27;</span> +<br>                        <span class="hljs-string">&#x27;&lt;input type=&quot;button&quot; οnclick=&quot;delCartItem(this)&quot; class=&quot;cart-del btn btn-default btn-xs&quot; value=&quot;删除&quot; /&gt;\n&#x27;</span> +<br>                        <span class="hljs-string">&#x27;&lt;/td&gt;\n&#x27;</span> +<br>                        <span class="hljs-string">&#x27;&lt;/tr&gt;&#x27;</span>;<br>                    tr = tr.<span class="hljs-title function_">replaceAll</span>(<span class="hljs-regexp">/#&#123;cid&#125;/g</span>, list[i].<span class="hljs-property">cid</span>);<br>                    tr = tr.<span class="hljs-title function_">replaceAll</span>(<span class="hljs-regexp">/#&#123;image&#125;/g</span>, list[i].<span class="hljs-property">image</span>);<br>                    tr = tr.<span class="hljs-title function_">replaceAll</span>(<span class="hljs-regexp">/#&#123;title&#125;/g</span>, list[i].<span class="hljs-property">title</span>);<br>                    tr = tr.<span class="hljs-title function_">replaceAll</span>(<span class="hljs-regexp">/#&#123;singlePrice&#125;/g</span>, list[i].<span class="hljs-property">realPrice</span>);<br>                    tr = tr.<span class="hljs-title function_">replaceAll</span>(<span class="hljs-regexp">/#&#123;num&#125;/g</span>, list[i].<span class="hljs-property">num</span>);<br>                    tr = tr.<span class="hljs-title function_">replaceAll</span>(<span class="hljs-regexp">/#&#123;totalPrice&#125;/g</span>, list[i].<span class="hljs-property">realPrice</span> * list[i].<span class="hljs-property">num</span>);<br>                    <span class="hljs-keyword">if</span> (list[i].<span class="hljs-property">realPrice</span> &lt; list[i].<span class="hljs-property">price</span>) &#123;<br>                        tr = tr.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/#&#123;msg&#125;/g</span>, <span class="hljs-string">&quot;比加入时降价&quot;</span> + (list[i].<span class="hljs-property">price</span> - list[i].<span class="hljs-property">realPrice</span>) + <span class="hljs-string">&quot;元&quot;</span>);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        tr = tr.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/#&#123;msg&#125;/g</span>, <span class="hljs-string">&quot;&quot;</span>);<br>                    &#125;<br>                    $(<span class="hljs-string">&quot;#cart-list&quot;</span>).<span class="hljs-title function_">append</span>(tr);<br>                &#125;<br>            &#125;,<br>            <span class="hljs-attr">error</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">xhr</span>) &#123;<br>                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;加载购物车列表数据时产生未知的异常&quot;</span>+xhr.<span class="hljs-property">status</span>);<br>            &#125;<br>        &#125;);<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>这tr变量是怎么声明的呢:</p><p><strong>先敲下var&#x3D;‘’;然后在上面的html里面找到tbody下的任意一个tr标签复制在单引号里面,然后删掉制表符.最后对该字符串稍加改动:</strong></p><blockquote><p>1.第18行name&#x3D;“cids” value&#x3D;”#{cid}”是为”点击结算按钮跳转到确认订单页面”模块做准备。这两个属性都是自己添加的,在tbody复制的tr标签里面没有,这两个属性是为了跳转到”确认订单页”时能够携带该参数(比如传递cids&#x3D;1)</p><p>2.第26οnclick&#x3D;”addNum(#{cid})“是为”在购物车列表增加商品数量”模块做准备。是为了点击”+”后能调用addNum函数并传入对应的cid</p><p>3.第22行id&#x3D;”goodsPrice#{cid}”和第25行id&#x3D;”goodsCount#{cid}”和第28行id&#x3D;”goodsCast#{cid}”都是为”在购物车列表增加商品数量”模块做准备。在后端更新完商品数量相应的前端页面也要更新:</p><ul><li>根据id&#x3D;”goodsCount#{cid}”获取数量相关的控件后更新其value属性的值(value属性用.val()赋值)</li><li>根据id&#x3D;”goodsPrice#{cid}”获取价格相关的控件后拿到其单价</li><li>将单价和数量相乘后,根据id&#x3D;”goodsCast#{cid}”获取总价相关的控件并更新其文本值(文本用.html()更新)</li></ul><p>4.上面这三条都是和本模块无关的,其余的修改都是和本模块相关的,在tbody复制的tr标签里面都有,比葫芦画瓢就可以了</p></blockquote><p><strong>点击”结算”按钮页面跳转的实现:在cart.html页面点击”结算”后会跳转到”确认订单页”并将表单中的数据作为参数传递给”确认订单页”</strong></p><h2 id="增加商品数量"><a href="#增加商品数量" class="headerlink" title="增加商品数量"></a>增加商品数量</h2><blockquote><p>购物车详情页点击”+“”-“修改商品数量时<strong>必须和数据库进行交互</strong>,因为这是即使展示给用户的,不能说用户看到的数量是5,结果数据库的购物车表中的数量是4吧?</p><p>但是在商品详情页点击”+“”-“修改商品数量时可以不用和数据库进行交互而是等到用户点击”加入购物车”后再进行交互,因为在用户点击”加入购物车”之前并不需要将商品数量更新到购物车表,可以去看看这个项目的商品详情页,那里点击”+“”-“修改商品数量时就是js实现的,并没有和数据库交互.(如果加一个模块:商品详情页点击”+“”-“时要知道库存够不够用户选择的这个数量,此时就需要和数据库交互了)</p></blockquote><h3 id="1-增加购物车商品数量-持久层"><a href="#1-增加购物车商品数量-持久层" class="headerlink" title="1.增加购物车商品数量-持久层"></a>1.增加购物车商品数量-持久层</h3><h4 id="1-1规划需要执行的SQL语句-2"><a href="#1-1规划需要执行的SQL语句-2" class="headerlink" title="1.1规划需要执行的SQL语句"></a>1.1规划需要执行的SQL语句</h4><p>1.更新该商品的数量.此SQL语句无需重复开发</p><p>2.首先进行查询需要操作的购物车数据信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t_cart <span class="hljs-keyword">WHERE</span> cid<span class="hljs-operator">=</span>?<br></code></pre></td></tr></table></figure><h4 id="1-2设计接口和抽象方法-2"><a href="#1-2设计接口和抽象方法-2" class="headerlink" title="1.2设计接口和抽象方法"></a>1.2设计接口和抽象方法</h4><p>在CartMapper接口中添加抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Cart <span class="hljs-title function_">findByCid</span><span class="hljs-params">(Integer cid)</span>;<br></code></pre></td></tr></table></figure><h4 id="1-3编写映射-2"><a href="#1-3编写映射-2" class="headerlink" title="1.3编写映射"></a>1.3编写映射</h4><p>在CartMapper文件中添加findByCid(Integer cid)方法的映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findByCid&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;CartEntityMap&quot;</span>&gt;</span><br>    select * from t_cart where cid=#&#123;cid&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="1-4单元测试-1"><a href="#1-4单元测试-1" class="headerlink" title="1.4单元测试"></a>1.4单元测试</h4><p>在CartMapperTests测试类中添加findByCid()测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findByCid</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(cartMapper.findByCid(<span class="hljs-number">1</span>));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-增加购物车商品数量-业务层"><a href="#2-增加购物车商品数量-业务层" class="headerlink" title="2.增加购物车商品数量-业务层"></a>2.增加购物车商品数量-业务层</h3><h4 id="2-1规划异常-1"><a href="#2-1规划异常-1" class="headerlink" title="2.1规划异常"></a>2.1规划异常</h4><ul><li>在更新时产生UpdateException未知异常,此异常类无需再次创建</li><li>可能该购物车列表数据归属不是登录的用户,抛AccessDeniedException异常,此异常类无需再次创建</li><li>要查询的数据不存在.抛出CartNotFoundException异常,创建该异常类并使其继承ServiceException</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** 购物车数据不存在的异常 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CartNotFoundException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceException</span> &#123;<br>    <span class="hljs-comment">/**重写ServiceException的所有构造方法*/</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2设计接口和抽象方法及实现-2"><a href="#2-2设计接口和抽象方法及实现-2" class="headerlink" title="2.2设计接口和抽象方法及实现"></a>2.2设计接口和抽象方法及实现</h4><p>在业务层ICartService接口中添加addNum()抽象方法</p><p>1.先判断需要哪些参数,该抽象方法的实现依赖于CartMapper接口的两个方法:</p><blockquote><p>updateNumByCid方法.参数是cid,num,String modifiedUser,Date modifiedTime</p><p>findByCid方法.参数是cid</p><p>在业务层中从购物车表查询到该商品的数量,然后再和前端传过来的增加的数量进行求和得到num</p><p>所以该方法的参数是cid,uid,username</p></blockquote><p>2.判断一下该方法的返回值:</p><ul><li>该方法返回值void.这样的话就需要在前端页面加location.href使该页面自己跳转到自己,实现刷新页面(不建议,每次都加载整个页面,数据量太大了)</li><li>返回值是Integer类型.这样的话就把数据库中更新后的数量层层传给前端,前端接收后填充到控件中就可以了</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 增加用户的购物车中某商品的数量</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> cid</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> uid</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> username</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span> 增加成功后新的数量</span><br><span class="hljs-comment">*/</span><br>Integer <span class="hljs-title function_">addNum</span><span class="hljs-params">(Integer cid,Integer uid, String username)</span>;<br></code></pre></td></tr></table></figure><p>3.在CartServiceImpl类中实现接口中的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">addNum</span><span class="hljs-params">(Integer cid, Integer uid, String username)</span> &#123;<br>    <span class="hljs-type">Cart</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> cartMapper.findByCid(cid);<br>    <span class="hljs-keyword">if</span> (result == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CartNotFoundException</span>(<span class="hljs-string">&quot;数据不存在&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!result.getUid().equals(uid)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AccessDeniedException</span>(<span class="hljs-string">&quot;数据非法访问&quot;</span>);<br>    &#125;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> result.getNum() + <span class="hljs-number">1</span>;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> cartMapper.updateNumByCid(cid, num, username, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    <span class="hljs-keyword">if</span> (rows != <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UpdateException</span>(<span class="hljs-string">&quot;更新数据时产生未知异常&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> num;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-3单元测试-1"><a href="#2-3单元测试-1" class="headerlink" title="2.3单元测试"></a>2.3单元测试</h4><p>就接收个参数,然后业务层将其加一后返回,不需要再测了</p><h3 id="3-增加购物车商品数量-控制层"><a href="#3-增加购物车商品数量-控制层" class="headerlink" title="3.增加购物车商品数量-控制层"></a>3.增加购物车商品数量-控制层</h3><h4 id="3-1处理异常-1"><a href="#3-1处理异常-1" class="headerlink" title="3.1处理异常"></a>3.1处理异常</h4><p>在BaseController类中添加CartNotFoundException异常类的统一管理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> CartNotFoundException) &#123;<br>    result.setState(<span class="hljs-number">4007</span>);<br>    result.setMessage(<span class="hljs-string">&quot;购物车表不存在该商品的异常&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-2设计请求"><a href="#3-2设计请求" class="headerlink" title="3.2设计请求"></a>3.2设计请求</h4><ul><li>&#x2F;carts&#x2F;{cid}&#x2F;num&#x2F;add</li><li>post</li><li>@PathVariable(“cid”) Integer cid, HttpSession session</li><li>JsonResult<Integer></li></ul><h4 id="3-3处理请求-1"><a href="#3-3处理请求-1" class="headerlink" title="3.3处理请求"></a>3.3处理请求</h4><p>在CartController类中添加处理请求的addNum()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;&#123;cid&#125;/num/add&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult&lt;Integer&gt; <span class="hljs-title function_">addNum</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;cid&quot;)</span> Integer cid, HttpSession session)</span> &#123;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> cartService.addNum(<br>        cid,<br>        getUidFromSession(session),<br>        getUsernameFromSession(session));<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonResult</span>&lt;Integer&gt;(OK, data);<br>&#125;<br></code></pre></td></tr></table></figure><p>启动服务,登录后在地址栏输入<a href="http://localhost:8080/carts/1/num/add%E8%BF%9B%E8%A1%8C%E9%AA%8C%E8%AF%81">http://localhost:8080/carts/1/num/add进行验证</a></p><h3 id="4-增加购物车商品数量-前端页面"><a href="#4-增加购物车商品数量-前端页面" class="headerlink" title="4.增加购物车商品数量-前端页面"></a>4.增加购物车商品数量-前端页面</h3><p>1.首先确定在showCartList()函数中动态拼接的增加购物车按钮是绑定了addNum()事件，如果已经添加无需重复添加</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;input <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;num-btn&quot;</span> type=<span class="hljs-string">&quot;button&quot;</span> value=<span class="hljs-string">&quot;+&quot;</span> onclick=<span class="hljs-string">&quot;addNum(#&#123;cid&#125;)&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p>2.在script标签中定义addNum()函数并编写增加购物车数量的逻辑代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">addNum</span>(<span class="hljs-params">cid</span>) &#123;<br>    $.<span class="hljs-title function_">ajax</span>(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/carts/&quot;</span>+cid+<span class="hljs-string">&quot;/num/add&quot;</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>        <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;JSON&quot;</span>,<br>        <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">json</span>) &#123;<br>            <span class="hljs-keyword">if</span> (json.<span class="hljs-property">state</span> == <span class="hljs-number">200</span>) &#123;<br>                $(<span class="hljs-string">&quot;#goodsCount&quot;</span>+cid).<span class="hljs-title function_">val</span>(json.<span class="hljs-property">data</span>);<span class="hljs-comment">//字符串+整数cid后结果为字符串</span><br><br>                <span class="hljs-comment">//更新该商品总价</span><br>                <span class="hljs-comment">/*</span><br><span class="hljs-comment">                            html()方法:</span><br><span class="hljs-comment">                            不传参:是获取某个标签内部的内容(文本或标签)</span><br><span class="hljs-comment">                            传参:将参数放到标签里面替换掉该标签原有内容</span><br><span class="hljs-comment">                            * */</span><br>                <span class="hljs-keyword">var</span> price = $(<span class="hljs-string">&quot;#goodsPrice&quot;</span>+cid).<span class="hljs-title function_">html</span>();<br>                <span class="hljs-keyword">var</span> totalPrice = price * json.<span class="hljs-property">data</span>;<br><br>                <span class="hljs-comment">//将商品总价更新到控件中</span><br>                $(<span class="hljs-string">&quot;#goodsCast&quot;</span>+cid).<span class="hljs-title function_">html</span>(totalPrice);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;增加购物车商品数量失败&quot;</span>+json.<span class="hljs-property">message</span>);<br>            &#125;<br>        &#125;,<br>        <span class="hljs-attr">error</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">xhr</span>) &#123;<br>            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;增加购物车商品数量时产生未知的异常!&quot;</span>+xhr.<span class="hljs-property">message</span>);<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>电脑商城项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>电脑商城项目04收货地址列表展示，设为默认，删除和商品热销排行</title>
    <link href="/2022/07/26/%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE04%E6%94%B6%E8%B4%A7%E5%9C%B0%E5%9D%80%E5%88%97%E8%A1%A8%E5%B1%95%E7%A4%BA%EF%BC%8C%E8%AE%BE%E4%B8%BA%E9%BB%98%E8%AE%A4%EF%BC%8C%E5%88%A0%E9%99%A4%E5%92%8C%E5%95%86%E5%93%81%E7%83%AD%E9%94%80%E6%8E%92%E8%A1%8C/"/>
    <url>/2022/07/26/%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE04%E6%94%B6%E8%B4%A7%E5%9C%B0%E5%9D%80%E5%88%97%E8%A1%A8%E5%B1%95%E7%A4%BA%EF%BC%8C%E8%AE%BE%E4%B8%BA%E9%BB%98%E8%AE%A4%EF%BC%8C%E5%88%A0%E9%99%A4%E5%92%8C%E5%95%86%E5%93%81%E7%83%AD%E9%94%80%E6%8E%92%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="收货地址列表展示"><a href="#收货地址列表展示" class="headerlink" title="收货地址列表展示"></a>收货地址列表展示</h2><h3 id="1-收货地址列表展示-持久层"><a href="#1-收货地址列表展示-持久层" class="headerlink" title="1.收货地址列表展示-持久层"></a>1.收货地址列表展示-持久层</h3><h4 id="1-1规划需要执行的SQL语句"><a href="#1-1规划需要执行的SQL语句" class="headerlink" title="1.1规划需要执行的SQL语句"></a>1.1规划需要执行的SQL语句</h4><p>数据库数据的查询操作</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t_address <span class="hljs-keyword">where</span> uid ? <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> is_default <span class="hljs-keyword">DESC</span>,created_time <span class="hljs-keyword">DESC</span><br></code></pre></td></tr></table></figure><p>其中order by is_default DESC是为了让默认收货地址展示在最上面,order by可以有多个字句,中间用逗号隔开,后面加的create_time DESC是为了让非默认收货地址创建的越晚越展示在上面</p><h4 id="1-2设计接口和抽象方法"><a href="#1-2设计接口和抽象方法" class="headerlink" title="1.2设计接口和抽象方法"></a>1.2设计接口和抽象方法</h4><p>在AddressMapper接口追加抽象方法findByUid</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 根据用户的uid查询用户的收货地址数据</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> uid 用户uid</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span> 收货地址数据</span><br><span class="hljs-comment">*/</span><br>List&lt;Address&gt; <span class="hljs-title function_">findByUid</span><span class="hljs-params">(Integer uid)</span>;<br></code></pre></td></tr></table></figure><h4 id="1-3编写映射"><a href="#1-3编写映射" class="headerlink" title="1.3编写映射"></a>1.3编写映射</h4><p>在xml文件添加相应的sql语句映射</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">&lt;</span><span class="hljs-keyword">select</span> id<span class="hljs-operator">=</span>&quot;findByUid&quot; resultMap<span class="hljs-operator">=</span>&quot;AddressEntityMap&quot;<span class="hljs-operator">&gt;</span><br>    <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t_address <span class="hljs-keyword">where</span> uid<span class="hljs-operator">=</span>#&#123;uid&#125;<br>    <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> is_default <span class="hljs-keyword">DESC</span>,created_time <span class="hljs-keyword">DESC</span><br><span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span><span class="hljs-keyword">select</span><span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><h4 id="1-4单元测试"><a href="#1-4单元测试" class="headerlink" title="1.4单元测试"></a>1.4单元测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findByUid</span> <span class="hljs-params">()</span> &#123;<br>    List&lt;Address&gt; list = addressMapper.findByUid(<span class="hljs-number">11</span>);<br>    System.out.println(list);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-收货地址列表展示-业务层"><a href="#2-收货地址列表展示-业务层" class="headerlink" title="2.收货地址列表展示-业务层"></a>2.收货地址列表展示-业务层</h3><h4 id="2-1规划异常"><a href="#2-1规划异常" class="headerlink" title="2.1规划异常"></a>2.1规划异常</h4><p>该模块只是为了展示列表,不涉及到增删改,即便没有拿到任何数据,那无非就是不展示呗,所以不涉及到异常,不需要在业务层抛出异常</p><h4 id="2-2设计接口和抽象方法及实现"><a href="#2-2设计接口和抽象方法及实现" class="headerlink" title="2.2设计接口和抽象方法及实现"></a>2.2设计接口和抽象方法及实现</h4><p>1.定义抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Address&gt; <span class="hljs-title function_">getByUid</span><span class="hljs-params">(Integer uid)</span>;<br></code></pre></td></tr></table></figure><p>2.实现该方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;Address&gt; <span class="hljs-title function_">getByUid</span><span class="hljs-params">(Integer uid)</span> &#123;<br>    List&lt;Address&gt; list = addressMapper.findByUid(uid);<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 收货地址列表在前端只展示了四个数据,这里让其他值为空降低数据量</span><br><span class="hljs-comment">    * ProvinceName,CityName,AreaName,aid,tel(确认订单页展示展示用户地</span><br><span class="hljs-comment">    * 址时用到tel)在展示地址列表用不到,但是后面提交订单时的地址会用到,所以这里不设为null</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-keyword">for</span> (Address address : list) &#123;<br>        <span class="hljs-comment">//address.setAid(null);</span><br>        address.setUid(<span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">//address.setProvinceName(null);</span><br>        address.setProvinceCode(<span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">//address.setCityName(null);</span><br>        address.setCityCode(<span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">//address.setAreaName(null);</span><br>        address.setAreaCode(<span class="hljs-literal">null</span>);<br>        address.setZip(<span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">//address.setTel(null);</span><br>        address.setIsDefault(<span class="hljs-literal">null</span>);<br>        address.setCreatedTime(<span class="hljs-literal">null</span>);<br>        address.setCreatedUser(<span class="hljs-literal">null</span>);<br>        address.setModifiedTime(<span class="hljs-literal">null</span>);<br>        address.setModifiedUser(<span class="hljs-literal">null</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> list;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-3单元测试"><a href="#2-3单元测试" class="headerlink" title="2.3单元测试"></a>2.3单元测试</h4><p>这里不再进行单元测试</p><h3 id="3-收货地址列表展示-控制层"><a href="#3-收货地址列表展示-控制层" class="headerlink" title="3.收货地址列表展示-控制层"></a>3.收货地址列表展示-控制层</h3><h4 id="3-1处理异常"><a href="#3-1处理异常" class="headerlink" title="3.1处理异常"></a>3.1处理异常</h4><p>因为业务层没有抛出异常,所以这里不需要处理异常</p><h4 id="3-2设计请求"><a href="#3-2设计请求" class="headerlink" title="3.2设计请求"></a>3.2设计请求</h4><ul><li>&#x2F;addresses</li><li>HttpSession session</li><li>get(该功能模块只需要uid,不需要别的数据,而且uid也是在后端封装的,所以前端没有提交什么数据,体量很小可以用get)</li><li>JsonResult&lt;List<Address>&gt;</li></ul><h4 id="3-3处理请求"><a href="#3-3处理请求" class="headerlink" title="3.3处理请求"></a>3.3处理请求</h4><p>实现请求方法的编写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&#123;&quot;&quot;,&quot;/&quot;&#125;)</span><br><span class="hljs-keyword">public</span> JsonResult&lt;List&lt;Address&gt;&gt; <span class="hljs-title function_">getByUid</span><span class="hljs-params">(HttpSession session)</span> &#123;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">uid</span> <span class="hljs-operator">=</span> getUidFromSession(session);<br>    List&lt;Address&gt; data = addressService.getByUid(uid);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonResult</span>&lt;&gt;(OK,data);<br>&#125;<br></code></pre></td></tr></table></figure><p>启动服务,登录账号后在地址栏输入<a href="http://localhost:8080/addresses%E6%B5%8B%E8%AF%95%E8%83%BD%E5%90%A6%E6%8B%BF%E5%88%B0%E6%95%B0%E6%8D%AE">http://localhost:8080/addresses测试能否拿到数据</a></p><p>###4.收货地址列表展示-前端页面</p><p>在address.html中编写js代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    $(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">showAddressList</span>();<br>&#125;);<br><br><span class="hljs-comment">/**展示用户收货地址数据列表*/</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">showAddressList</span>(<span class="hljs-params"></span>) &#123;<br>    $(<span class="hljs-string">&quot;#address-list&quot;</span>).<span class="hljs-title function_">empty</span>();<br>    $.<span class="hljs-title function_">ajax</span>(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/addresses&quot;</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;get&quot;</span>,<br>        <span class="hljs-comment">//data: &quot;parent=86&quot;,//不需要提交数据,所以data可以删去</span><br>        <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;JSON&quot;</span>,<br>        <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">json</span>) &#123;<br>            <span class="hljs-keyword">if</span> (json.<span class="hljs-property">state</span> == <span class="hljs-number">200</span>) &#123;<br>                <span class="hljs-keyword">var</span> list = json.<span class="hljs-property">data</span>;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(list);<span class="hljs-comment">//调试用</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; list.<span class="hljs-property">length</span>; i++) &#123;<br>                    <span class="hljs-comment">//先写一个var tr = &#x27;&#x27;; 然后去上面的地址展示中找一个tr标签复制粘贴到单引号里面,再删去多余的制表符</span><br>                    <span class="hljs-keyword">var</span> tr = <span class="hljs-string">&#x27;&lt;tr&gt;\n&#x27;</span> +<br>                        <span class="hljs-string">&#x27;&lt;td&gt;#&#123;tag&#125;&lt;/td&gt;\n&#x27;</span> +<br>                        <span class="hljs-string">&#x27;&lt;td&gt;#&#123;name&#125;&lt;/td&gt;\n&#x27;</span> +<br>                        <span class="hljs-string">&#x27;&lt;td&gt;#&#123;address&#125;&lt;/td&gt;\n&#x27;</span> +<br>                        <span class="hljs-string">&#x27;&lt;td&gt;#&#123;phone&#125;&lt;/td&gt;\n&#x27;</span> +<br>                        <span class="hljs-string">&#x27;&lt;td&gt;&lt;a class=&quot;btn btn-xs btn-info&quot;&gt;&lt;span class=&quot;fa fa-edit&quot;&gt;&lt;/span&gt; 修改&lt;/a&gt;&lt;/td&gt;\n&#x27;</span> +<br>                        <span class="hljs-string">&#x27;&lt;td&gt;&lt;a class=&quot;btn btn-xs add-del btn-info&quot;&gt;&lt;span class=&quot;fa fa-trash-o&quot;&gt;&lt;/span&gt; 删除&lt;/a&gt;&lt;/td&gt;\n&#x27;</span> +<br>                        <span class="hljs-string">&#x27;&lt;td&gt;&lt;a class=&quot;btn btn-xs add-def btn-default&quot;&gt;设为默认&lt;/a&gt;&lt;/td&gt;\n&#x27;</span> +<br>                        <span class="hljs-string">&#x27;&lt;/tr&gt;&#x27;</span>;<br>                    <span class="hljs-comment">//下面用正则表达式更改字符串,上面的#&#123;tag&#125;#&#123;name&#125;等等只</span><br>                    <span class="hljs-comment">//是占位符,没有任何意义,我也可以把#&#123;tag&#125;写成任何想写的东西</span><br>                    <span class="hljs-comment">//replace的第一个参数/占位符/g可以,&quot;占位符&quot;也可以</span><br>                    tr = tr.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/#&#123;tag&#125;/g</span>,list[i].<span class="hljs-property">tag</span>);<br>                    tr = tr.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/#&#123;name&#125;/g</span>,list[i].<span class="hljs-property">name</span>);<br>                    tr = tr.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;#&#123;address&#125;&quot;</span>,list[i].<span class="hljs-property">address</span>);<br>                    tr = tr.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;#&#123;phone&#125;&quot;</span>,list[i].<span class="hljs-property">phone</span>);<br><br>                    $(<span class="hljs-string">&quot;#address-list&quot;</span>).<span class="hljs-title function_">append</span>(tr);<br>                &#125;<br><br>                <span class="hljs-comment">//用hide方法将第一个收货地址的&quot;设为默认&quot;元素隐藏,.add-def:eq(0)表</span><br>                <span class="hljs-comment">//示第一个class为add-def的标签,这样就可以保证隐藏的是第一个收货地址</span><br>                $(<span class="hljs-string">&quot;.add-def:eq(0)&quot;</span>).<span class="hljs-title function_">hide</span>();<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                &lt;!--这个其实永远不会执行,因为没有编写<br>                异常,控制层返回的状态码永远是<span class="hljs-variable constant_">OK</span>--&gt;<br>                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;用户收货地址数据加载失败&quot;</span>)<br>            &#125;<br>        &#125;<br>    &#125;);<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="设置默认收货地址"><a href="#设置默认收货地址" class="headerlink" title="设置默认收货地址"></a>设置默认收货地址</h2><h3 id="1-设置默认收货地址-持久层"><a href="#1-设置默认收货地址-持久层" class="headerlink" title="1.设置默认收货地址-持久层"></a>1.设置默认收货地址-持久层</h3><h4 id="1-1规划需要执行的SQL语句-1"><a href="#1-1规划需要执行的SQL语句-1" class="headerlink" title="1.1规划需要执行的SQL语句"></a>1.1规划需要执行的SQL语句</h4><p>无论选择的是哪一条数据,都把所有的数据设为非默认,再把当前数据设为默认</p><blockquote><p>我们可能会想着把第一条设为非默认,再将该条设为默认,但这样处理的话需要额外做一条查询语句拿到默认地址的数据</p></blockquote><p>1.检测当前用户想设置为默认收货地址的这条数据是否存在</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t_address <span class="hljs-keyword">where</span> aid<span class="hljs-operator">=</span>?<br></code></pre></td></tr></table></figure><p>2.在修改用户的默认收货地址之前先将所有的收货地址设置为非默认</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> t_address <span class="hljs-keyword">set</span> is_default<span class="hljs-operator">=</span><span class="hljs-number">0</span> <span class="hljs-keyword">where</span> uid<span class="hljs-operator">=</span>?<br></code></pre></td></tr></table></figure><p>3.将用户选中的这条记录设置为默认收货地址</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> t_address <span class="hljs-keyword">set</span> is_default<span class="hljs-operator">=</span><span class="hljs-number">1</span>,modified_user<span class="hljs-operator">=</span>?,modified_time<span class="hljs-operator">=</span>? <span class="hljs-keyword">where</span> aid<span class="hljs-operator">=</span>?<br></code></pre></td></tr></table></figure><h4 id="1-2设计接口和抽象方法-1"><a href="#1-2设计接口和抽象方法-1" class="headerlink" title="1.2设计接口和抽象方法"></a>1.2设计接口和抽象方法</h4><p>在AddressMapper接口中来定义实现该模块所需的三个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 根据aid查询收货地址数据</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> aid 收货地址aid</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span> 收货地址数据,如果没有找到则返回null值</span><br><span class="hljs-comment">*/</span><br>Address <span class="hljs-title function_">findByAid</span><span class="hljs-params">(Integer aid)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 根据用户uid修改用户的收货地址统一设置为非默认</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> uid 用户uid</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span> 受影响的行数</span><br><span class="hljs-comment">*/</span><br>Integer <span class="hljs-title function_">updateNonDefault</span><span class="hljs-params">(Integer uid)</span>;<br><br><br>Integer <span class="hljs-title function_">updateDefaultByAid</span><span class="hljs-params">(</span><br><span class="hljs-params">    <span class="hljs-meta">@Param(&quot;aid&quot;)</span> Integer aid,</span><br><span class="hljs-params">    <span class="hljs-meta">@Param(&quot;modifiedUser&quot;)</span> String modifiedUser,</span><br><span class="hljs-params">    <span class="hljs-meta">@Param(&quot;modifiedTime&quot;)</span> Date modifiedTime)</span>;<br></code></pre></td></tr></table></figure><h4 id="1-3编写映射-1"><a href="#1-3编写映射-1" class="headerlink" title="1.3编写映射"></a>1.3编写映射</h4><p>在AddressMapper.xml中编写映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findByAid&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;AddressEntityMap&quot;</span>&gt;</span><br>    select * from t_address where aid=#&#123;aid&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateNonDefault&quot;</span>&gt;</span><br>    update t_address<br>    set is_default=0<br>    where uid=#&#123;uid&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateDefaultByAid&quot;</span>&gt;</span><br>    update t_address<br>    set is_default=1,<br>    modified_user=#&#123;modifiedUser&#125;,<br>    modified_time=#&#123;modifiedTime&#125;<br>    where aid=#&#123;aid&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="1-4单元测试-1"><a href="#1-4单元测试-1" class="headerlink" title="1.4单元测试"></a>1.4单元测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findByAid</span><span class="hljs-params">()</span> &#123;<br>    System.err.println(addressMapper.findByAid(<span class="hljs-number">9</span>));<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateNonDefault</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(addressMapper.updateNonDefault(<span class="hljs-number">11</span>));<span class="hljs-comment">//有几条数据影响行数就输出几</span><br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateDefaultByAid</span><span class="hljs-params">()</span> &#123;<br>    addressMapper.updateDefaultByAid(<span class="hljs-number">9</span>,<span class="hljs-string">&quot;明明&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-设置默认收货地址-业务层"><a href="#2-设置默认收货地址-业务层" class="headerlink" title="2.设置默认收货地址-业务层"></a>2.设置默认收货地址-业务层</h3><h4 id="2-1规划异常-1"><a href="#2-1规划异常-1" class="headerlink" title="2.1规划异常"></a>2.1规划异常</h4><ul><li>在执行更新时产生未知的UpdateException异常,已经创建无需重复创建</li><li>访问的数据不是当前登录用户的收货地址数据,属于非法访问,AccessDeniedException异常(就比如说,展示收货地址列表的sql语句写错了,然后这里展示的是别人的收货地址,此时想要将某个收货地址改为默认就属于非法访问了)</li><li>收货地址可能不存在的AddressNotFoundException异常,(比如,刚展示完收货地址列表,管理员误删地址了,此时地址就不存在了)</li></ul><p>在业务层的ex包下创建如下两个异常类,并使其继承ServiceException类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**收货地址数据不存在的异常*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AddressNotFoundException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceException</span> &#123;<br>    <span class="hljs-comment">/**重写ServiceException的所有构造方法*/</span><br>&#125;<br><span class="hljs-comment">/**非法访问的异常*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AccessDeniedException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceException</span> &#123;<br>    <span class="hljs-comment">/**重写ServiceException的所有构造方法*/</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2设计接口和抽象方法及实现-1"><a href="#2-2设计接口和抽象方法及实现-1" class="headerlink" title="2.2设计接口和抽象方法及实现"></a>2.2设计接口和抽象方法及实现</h4><p>1.在IAddressService接口中编写抽象方法setDefault,并使其在方法内部统一实现持久层的三个方法</p><p>分析一下该方法需要什么参数:</p><blockquote><p>先看持久层的三个方法需要什么参数:aid,uid,modifiedUser,modifiedTime.</p><p>其中aid是从前端一步一步传到业务层的,所以需要该参数</p><p>uid和modifiedUser是一样的,都是由控制层从session获取的uid并传给业务层,所以需要该参数</p><p>modifiedTime可以在业务层new Date,所以不需要该参数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 修改某个用户的某条收货地址数据为默认收货地址</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> aid 收货地址的id</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> uid 用户id</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> username 修改执行人</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">setDefault</span><span class="hljs-params">(Integer aid,Integer uid,String username)</span>;<br></code></pre></td></tr></table></figure><p>2.在AddressServiceImpl类编写该方法的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDefault</span><span class="hljs-params">(Integer aid, Integer uid, String username)</span> &#123;<br><br>    <span class="hljs-comment">//1.检测是否有该条收货地址数据</span><br>    <span class="hljs-type">Address</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> addressMapper.findByAid(aid);<br>    <span class="hljs-keyword">if</span> (result == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AddressNotFoundException</span>(<span class="hljs-string">&quot;收货地址不存在&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//2.检测当前获取到的收货地址数据的归属</span><br>    <span class="hljs-keyword">if</span> (!result.getUid().equals(uid)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AccessDeniedException</span>(<span class="hljs-string">&quot;非法数据访问&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//3.先将所有的收货地址设置为非默认</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> addressMapper.updateNonDefault(uid);<br>    <span class="hljs-keyword">if</span> (rows &lt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UpdateException</span>(<span class="hljs-string">&quot;更新数据时产生未知的异常&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//4.将用户选中的地址设置为默认收货地址</span><br>    rows = addressMapper.updateDefaultByAid(aid, username, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    <span class="hljs-keyword">if</span> (rows != <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UpdateException</span>(<span class="hljs-string">&quot;更新数据时产生未知的异常&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-3单元测试-1"><a href="#2-3单元测试-1" class="headerlink" title="2.3单元测试"></a>2.3单元测试</h4><p>在AddressServiceTests类中编写单元测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDefault</span><span class="hljs-params">()</span> &#123;<br>    addressService.setDefault(<span class="hljs-number">9</span>,<span class="hljs-number">11</span>,<span class="hljs-string">&quot;管理员&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-设置默认收货地址-控制层"><a href="#3-设置默认收货地址-控制层" class="headerlink" title="3.设置默认收货地址-控制层"></a>3.设置默认收货地址-控制层</h3><h4 id="3-1处理异常-1"><a href="#3-1处理异常-1" class="headerlink" title="3.1处理异常"></a>3.1处理异常</h4><p>在BaseController类中处理业务层抛出的两个异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> AddressNotFoundException) &#123;<br>    result.setState(<span class="hljs-number">4004</span>);<br>    result.setMessage(<span class="hljs-string">&quot;用户的收货地址数据不存在的异常&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> AccessDeniedException) &#123;<br>    result.setState(<span class="hljs-number">4005</span>);<br>    result.setMessage(<span class="hljs-string">&quot;收货地址数据非法访问的异常&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-2设计请求-1"><a href="#3-2设计请求-1" class="headerlink" title="3.2设计请求"></a>3.2设计请求</h4><ul><li>&#x2F;addresses&#x2F;{aid}&#x2F;set_default(以前的数据是通过表单直接提交的,还有一种提交方式就是RestFul风格,这种提交方式可以提交更多的数据,这里用这个提交方式)</li><li>GET</li><li>Integer aid,HttpSession session(如果这里是id那就必须在Integer aid前加@PathVariable(“aid”)强行将aid的值注入到id中)</li><li>JsonResult<Void></li></ul><h4 id="3-3处理请求-1"><a href="#3-3处理请求-1" class="headerlink" title="3.3处理请求"></a>3.3处理请求</h4><p>在AddressController类中编写请求处理方法.</p><p><strong>RestFul编写时不管参数名和占位符是否一致都必须加@PathVariable(“aid”)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//RestFul风格的请求编写</span><br><span class="hljs-meta">@RequestMapping(&quot;&#123;aid&#125;/set_default&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult&lt;Void&gt; <span class="hljs-title function_">setDefault</span><span class="hljs-params">(</span><br><span class="hljs-params">    <span class="hljs-meta">@PathVariable(&quot;aid&quot;)</span> Integer aid,HttpSession session)</span> &#123;<br>    addressService.setDefault(<br>        aid,<br>        getUidFromSession(session),<br>        getUsernameFromSession(session));<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonResult</span>&lt;&gt;(OK);<br>&#125;<br></code></pre></td></tr></table></figure><p>启动服务,登录账号后在地址栏输入<a href="http://localhost:8080/addresses/8/set_default%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95">http://localhost:8080/addresses/8/set_default进行测试</a></p><h3 id="4-设置默认收货地址-前端页面"><a href="#4-设置默认收货地址-前端页面" class="headerlink" title="4.设置默认收货地址-前端页面"></a>4.设置默认收货地址-前端页面</h3><p>观察address.html代码发现”设为默认”按钮没有id属性,那应该怎么获取”设为默认”按钮以监听是否被点击了呢?</p><p>法一:给”设为默认”的标签添加id属性(我觉得不对,因为id必须是唯一的,如果给该按钮加id属性,那么该用户有几个收货地址就会给几个按钮加同样的id,这显然不对,我认为可以用按钮上本就存在的class属性)。</p><p>法二:给”设置默认”按钮添加一个onclick属性,指向一个方法的调用,在这个方法中来完成ajax请求的方法</p><p>在这里用第二种方法:</p><p>1.展示用户收货地址数据列表的js函数中用for循环给页面增加地址数据的tr标签,我们需要在for循环中为每一个tr标签增加onclick属性并指向setDefault(#{aid})函数,括号里面占位符是为了给外部的setDefault函数传参,可以随便写,只要给占位符赋值时对应就可以了,.<strong>注意,即使调用的是无参函数也要加括号</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;td&gt;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;setDefault(#&#123;aid&#125;)&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-xs add-def btn-default&quot;</span>&gt;</span>设为默认<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>&lt;/td&gt;<br></code></pre></td></tr></table></figure><p>2.在for循环中为占位符赋值:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">tr = tr.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;#&#123;aid&#125;&quot;</span>,list[i].<span class="hljs-property">aid</span>);<br></code></pre></td></tr></table></figure><p>3.完成setDefault方法的声明</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">setDefault</span>(<span class="hljs-params">aid</span>) &#123;<br>    $.<span class="hljs-title function_">ajax</span>(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/addresses/&quot;</span>+aid+<span class="hljs-string">&quot;/set_default&quot;</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>        <span class="hljs-comment">//data: $(&quot;#form-change-password&quot;).serialize(),</span><br>        <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;JSON&quot;</span>,<br>        <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">json</span>) &#123;<br>            <span class="hljs-keyword">if</span> (json.<span class="hljs-property">state</span> == <span class="hljs-number">200</span>) &#123;<br>                <span class="hljs-comment">//重新加载收货地址列表页面</span><br>                <span class="hljs-title function_">showAddressList</span>();<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;设置默认收货地址失败&quot;</span>)<br>            &#125;<br>        &#125;,<br>        <span class="hljs-attr">error</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">xhr</span>) &#123;<br>            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;设置默认收货地址时产生未知的异常!&quot;</span>+xhr.<span class="hljs-property">message</span>);<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="删除收货地址"><a href="#删除收货地址" class="headerlink" title="删除收货地址"></a>删除收货地址</h2><h3 id="1-删除收货地址-持久层"><a href="#1-删除收货地址-持久层" class="headerlink" title="1.删除收货地址-持久层"></a>1.删除收货地址-持久层</h3><h4 id="1-1规划需要执行的SQL语句-2"><a href="#1-1规划需要执行的SQL语句-2" class="headerlink" title="1.1规划需要执行的SQL语句"></a>1.1规划需要执行的SQL语句</h4><p>1.在删除之前判断该数据是否存在,需要执行查询语句看能否查到该数据,还需要根据返回的aid获取uid并和session中的uid进行比较判断归属是否正确,这一条SQL语句在设置收货地址时已经开发,无需重复开发</p><p>2.开发执行删除的SQL语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> t_address <span class="hljs-keyword">where</span> aid<span class="hljs-operator">=</span>?<br></code></pre></td></tr></table></figure><p>3.需要判断删除的地址是否是默认地址(使用aid查询到的地址对象的getIsDefault方法),如果判断出删的是默认地址,则还需要定义把哪个地址设为默认,这里定义最新修改的为默认地址.</p><p>开发该SQL语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t_address <span class="hljs-keyword">where</span> uid<span class="hljs-operator">=</span>? <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> modified_time <span class="hljs-keyword">DESC</span> limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><strong>其中limit 0,1表示查询到的第一条数据(limit (n-1),pageSize),这样查询后就只会获得第一条数据</strong></p><p>4.如果用户本身就只有一条地址,那么删除后其他操作就可以不进行了,所以需要查询该用户的所有地址数量,在设置收货地址时已经开发,无需重复开发</p><h4 id="1-2设计接口和抽象方法-2"><a href="#1-2设计接口和抽象方法-2" class="headerlink" title="1.2设计接口和抽象方法"></a>1.2设计接口和抽象方法</h4><p>在AddressMapper接口中进行抽象方法的设计</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据收货地址id删除收货地址数据</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> aid 收货地址的id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 受影响的行数</span><br><span class="hljs-comment"> */</span><br>Integer <span class="hljs-title function_">deleteByAid</span><span class="hljs-params">(Integer aid)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据用户uid查询用户最后一次被修改的收货地址数据</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> uid 用户id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 收货地址数据</span><br><span class="hljs-comment"> */</span><br>Address <span class="hljs-title function_">findLastModified</span><span class="hljs-params">(Integer uid)</span>;<br></code></pre></td></tr></table></figure><h4 id="1-3编写映射-2"><a href="#1-3编写映射-2" class="headerlink" title="1.3编写映射"></a>1.3编写映射</h4><p>在AddressMapper.xml文件中进行映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteByAid&quot;</span>&gt;</span><br>    delete from t_address where aid=#&#123;aid&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findLastModified&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;AddressEntityMap&quot;</span>&gt;</span><br>    select * from t_address<br>    where uid=#&#123;uid&#125;<br>    order by modified_time DESC limit 0,1<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="1-4单元测试-2"><a href="#1-4单元测试-2" class="headerlink" title="1.4单元测试"></a>1.4单元测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteByAid</span><span class="hljs-params">()</span> &#123;<br>    addressMapper.deleteByAid(<span class="hljs-number">11</span>);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findLastModified</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(addressMapper.findLastModified(<span class="hljs-number">11</span>));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-删除收货地址-业务层"><a href="#2-删除收货地址-业务层" class="headerlink" title="2.删除收货地址-业务层"></a>2.删除收货地址-业务层</h3><h4 id="2-1规划异常-2"><a href="#2-1规划异常-2" class="headerlink" title="2.1规划异常"></a>2.1规划异常</h4><ul><li>可能没有该条地址数据(已开发)</li><li>可能地址数据归属错误(已开发)</li><li>在执行删除的时候可能会产生未知的异常导致数据不能够删除成功,则抛出DeleteException异常,在service创建该异常并使其继承业务层异常</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**删除数据时产生的异常*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeleteException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceException</span>&#123;<br>    <span class="hljs-comment">/**重写ServiceException的所有构造方法*/</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2设计接口和抽象方法及实现-2"><a href="#2-2设计接口和抽象方法及实现-2" class="headerlink" title="2.2设计接口和抽象方法及实现"></a>2.2设计接口和抽象方法及实现</h4><p>1.在IAddressService接口中定义抽象方法</p><p>需要给抽象方法声明哪些参数呢:</p><blockquote><p>根据分析可得,该抽象方法的实现依赖于持久层的以下方法:</p><p>1.findByAid:查询该条地址数据是否存在,参数是aid</p><p>3.deleteByAid:删除地址数据,参数是aid</p><p>5.countByUid:统计用户地址数量,参数是uid</p><p>6.findLastModified:查询得到最后修改的一条地址,参数是uid</p><p>7.updateDefaultByAid:设置默认收货地址,参数是aid,modifiedUser,modifiedTime</p><p>稍加分析可以得出接下来定义的抽象方法的参数是:aid,uid,username</p></blockquote><p><strong>把上面的分析补上:2.判断地址数据归属是否正确4.判断删除的是否是默认地址.这七步就是业务层完整的开发流程</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 删除用户选中的收货地址数据</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> aid 收货地址id</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> uid 用户id</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> username 用户名</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Integer aid,Integer uid,String username)</span>;<br></code></pre></td></tr></table></figure><p>2.实现该抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Integer aid, Integer uid, String username)</span> &#123;<br>    <span class="hljs-type">Address</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> addressMapper.findByAid(aid);<br>    <span class="hljs-comment">//1.</span><br>    <span class="hljs-keyword">if</span> (result == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AddressNotFoundException</span>(<span class="hljs-string">&quot;收货地址数据不存在&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//2.</span><br>    <span class="hljs-keyword">if</span> (!result.getUid().equals(uid)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AccessDeniedException</span>(<span class="hljs-string">&quot;非法数据访问&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//3.</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> addressMapper.deleteByAid(aid);<br>    <span class="hljs-keyword">if</span> (rows != <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeleteException</span>(<span class="hljs-string">&quot;删除数据时产生未知的异常&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//4.如果删除的是非默认地址则不需要再做后面的任何操作,终止程序</span><br>    <span class="hljs-keyword">if</span> (result.getIsDefault() == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">//5.</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> addressMapper.countByUid(uid);<br>    <span class="hljs-keyword">if</span> (count == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">//6.</span><br>    <span class="hljs-type">Address</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> addressMapper.findLastModified(uid);<br>    <span class="hljs-comment">//7.</span><br>    rows = addressMapper.updateDefaultByAid(address.getAid(), username, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    <span class="hljs-keyword">if</span> (rows != <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UpdateException</span>(<span class="hljs-string">&quot;更新数据时产生未知的异常&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-3单元测试-2"><a href="#2-3单元测试-2" class="headerlink" title="2.3单元测试"></a>2.3单元测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">()</span> &#123;<br>    addressService.delete(<span class="hljs-number">1</span>,<span class="hljs-number">11</span>,<span class="hljs-string">&quot;4.11删除&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-删除收货地址-控制层"><a href="#3-删除收货地址-控制层" class="headerlink" title="3.删除收货地址-控制层"></a>3.删除收货地址-控制层</h3><h4 id="3-1处理异常-2"><a href="#3-1处理异常-2" class="headerlink" title="3.1处理异常"></a>3.1处理异常</h4><p>需要在BaseController类中处理异常类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> DeleteException) &#123;<br>    result.setState(<span class="hljs-number">5002</span>);<br>    result.setMessage(<span class="hljs-string">&quot;删除数据时产生未知的异常&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-2设计请求-2"><a href="#3-2设计请求-2" class="headerlink" title="3.2设计请求"></a>3.2设计请求</h4><ul><li>&#x2F;addresses&#x2F;{aid}&#x2F;delete</li><li>POST</li><li>Integer aid,HttpSession session</li><li>JsonResult<Void></li></ul><h4 id="3-3处理请求-2"><a href="#3-3处理请求-2" class="headerlink" title="3.3处理请求"></a>3.3处理请求</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;&#123;aid&#125;/delete&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult&lt;Void&gt; <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;aid&quot;)</span> Integer aid,HttpSession session)</span> &#123;<br>    addressService.delete(<br>        aid,<br>        getUidFromSession(session),<br>        getUsernameFromSession(session));<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonResult</span>&lt;&gt;(OK);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-4单元测试"><a href="#3-4单元测试" class="headerlink" title="3.4单元测试"></a>3.4单元测试</h4><p>在AddressController类编写请求处理方法的实现</p><p>这个方法就只是调用业务层方法然后给前端返回一些信息,可以选择不用测试</p><h3 id="4-删除收货地址-前端页面"><a href="#4-删除收货地址-前端页面" class="headerlink" title="4.删除收货地址-前端页面"></a>4.删除收货地址-前端页面</h3><p>处理该前端页面的所有步骤和处理”设置默认收货地址”的一样</p><p>1.给”删除”按钮添加onclick属性并指向deleteByAid(aid)方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;td&gt;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;delete(#&#123;aid&#125;)&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-xs add-del btn-info&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-trash-o&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> 删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>&lt;/td&gt;<br></code></pre></td></tr></table></figure><p>2.给占位符赋值</p><p>因为处理”设置默认收货地址”时已经编写tr &#x3D; tr.replace(“#{aid}”,list[i].aid);用来给占位符#{aid}赋值,所以这里不需要再写.但是需要把replace改为replaceAll</p><p>3.完成deleteByAid(aid)方法的声明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">function <span class="hljs-title function_">setDefault</span><span class="hljs-params">(aid)</span> &#123;<br>    $.ajax(&#123;<br>        url: <span class="hljs-string">&quot;/addresses/&quot;</span>+aid+<span class="hljs-string">&quot;/set_default&quot;</span>,<br>        type: <span class="hljs-string">&quot;POST&quot;</span>,<br>        <span class="hljs-comment">//data: $(&quot;#form-change-password&quot;).serialize(),</span><br>        dataType: <span class="hljs-string">&quot;JSON&quot;</span>,<br>        success: function (json) &#123;<br>            <span class="hljs-keyword">if</span> (json.state == <span class="hljs-number">200</span>) &#123;<br>                <span class="hljs-comment">//重新加载收货地址列表页面</span><br>                showAddressList();<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                alert(<span class="hljs-string">&quot;删除收货地址失败&quot;</span>)<br>            &#125;<br>        &#125;,<br>        error: function (xhr) &#123;<br>            alert(<span class="hljs-string">&quot;删除收货地址时产生未知的异常!&quot;</span>+xhr.message);<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="商品热销排行"><a href="#商品热销排行" class="headerlink" title="商品热销排行"></a>商品热销排行</h2><h3 id="1-创建数据表"><a href="#1-创建数据表" class="headerlink" title="1.创建数据表"></a>1.创建数据表</h3><p>1.在store数据库中创建t_product数据表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE t_product (<br>  id int(20) NOT NULL COMMENT &#x27;商品id&#x27;,<br>  category_id int(20) DEFAULT NULL COMMENT &#x27;分类id&#x27;,<br>  item_type varchar(100) DEFAULT NULL COMMENT &#x27;商品系列&#x27;,<br>  title varchar(100) DEFAULT NULL COMMENT &#x27;商品标题&#x27;,<br>  sell_point varchar(150) DEFAULT NULL COMMENT &#x27;商品卖点&#x27;,<br>  price bigint(20) DEFAULT NULL COMMENT &#x27;商品单价&#x27;,<br>  num int(10) DEFAULT NULL COMMENT &#x27;库存数量&#x27;,<br>  image varchar(500) DEFAULT NULL COMMENT &#x27;图片路径&#x27;,<br>  `status` int(1) DEFAULT &#x27;1&#x27; COMMENT &#x27;商品状态  1：上架   2：下架   3：删除&#x27;,<br>  priority int(10) DEFAULT NULL COMMENT &#x27;显示优先级&#x27;,<br>  created_time datetime DEFAULT NULL COMMENT &#x27;创建时间&#x27;,<br>  modified_time datetime DEFAULT NULL COMMENT &#x27;最后修改时间&#x27;,<br>  created_user varchar(50) DEFAULT NULL COMMENT &#x27;创建人&#x27;,<br>  modified_user varchar(50) DEFAULT NULL COMMENT &#x27;最后修改人&#x27;,<br>  PRIMARY KEY (id)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8;<br></code></pre></td></tr></table></figure><p>2.向该表插入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">LOCK TABLES t_product WRITE;<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t_product <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">10000001</span>,<span class="hljs-number">238</span>,<span class="hljs-string">&#x27;牛皮纸记事本&#x27;</span>,<span class="hljs-string">&#x27;广博(GuangBo)10本装40张A5牛皮纸记事本子日记本办公软抄本GBR0731&#x27;</span>,<span class="hljs-string">&#x27;经典回顾！超值特惠！&#x27;</span>,<span class="hljs-number">23</span>,<span class="hljs-number">99999</span>,<span class="hljs-string">&#x27;/images/portal/00GuangBo1040A5GBR0731/&#x27;</span>,<span class="hljs-number">1</span>,<span class="hljs-number">62</span>,<span class="hljs-string">&#x27;2017-10-25 15:08:55&#x27;</span>,<span class="hljs-string">&#x27;2017-10-25 15:08:55&#x27;</span>,<span class="hljs-string">&#x27;admin&#x27;</span>,<span class="hljs-string">&#x27;admin&#x27;</span>),等等等等;<br>UNLOCK TABLES;<br></code></pre></td></tr></table></figure><h3 id="2-创建商品的实体类"><a href="#2-创建商品的实体类" class="headerlink" title="2.创建商品的实体类"></a>2.创建商品的实体类</h3><p>创建Product实体类并使其继承BaseEntity类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** 商品数据的实体类 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Product</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseEntity</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> Integer categoryId;<br>    <span class="hljs-keyword">private</span> String itemType;<br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-keyword">private</span> String sellPoint;<br>    <span class="hljs-keyword">private</span> Long price;<br>    <span class="hljs-keyword">private</span> Integer num;<br>    <span class="hljs-keyword">private</span> String image;<br>    <span class="hljs-keyword">private</span> Integer status;<br>    <span class="hljs-keyword">private</span> Integer priority;<br> <span class="hljs-comment">/**</span><br><span class="hljs-comment"> * get,set</span><br><span class="hljs-comment"> * equals和hashCode</span><br><span class="hljs-comment"> * toString</span><br><span class="hljs-comment"> */</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-商品热销排行-持久层"><a href="#3-商品热销排行-持久层" class="headerlink" title="3.商品热销排行-持久层"></a>3.商品热销排行-持久层</h3><h4 id="3-1-规划需要执行的SQL语句"><a href="#3-1-规划需要执行的SQL语句" class="headerlink" title="3.1 规划需要执行的SQL语句"></a>3.1 规划需要执行的SQL语句</h4><p>查询热销商品列表的SQL语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t_product <span class="hljs-keyword">WHERE</span> status<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> priority <span class="hljs-keyword">DESC</span> LIMIT <span class="hljs-number">0</span>,<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h4 id="3-2-设计接口和抽象方法"><a href="#3-2-设计接口和抽象方法" class="headerlink" title="3.2 设计接口和抽象方法"></a>3.2 设计接口和抽象方法</h4><p>在mapper包下创建ProductMapper接口并在接口中添加查询热销商品findHotList()的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ProductMapper</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询热销商品的前四名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 热销商品前四名的集合</span><br><span class="hljs-comment">     */</span><br>    List&lt;Product&gt; <span class="hljs-title function_">findHotList</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-3-编写映射"><a href="#3-3-编写映射" class="headerlink" title="3.3 编写映射"></a>3.3 编写映射</h4><p>在main\resources\mapper文件夹下创建ProductMapper.xml文件，并在文件中配置findHotList()方法的映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.cy.store.mapper.ProductMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ProductEntityMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.cy.store.entity.Product&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;category_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;categoryId&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;item_type&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;itemType&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sell_point&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;sellPoint&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;created_user&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;createdUser&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;created_time&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;createdTime&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;modified_user&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;modifiedUser&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;modified_time&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;modifiedTime&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findHotList&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;ProductEntityMap&quot;</span>&gt;</span><br>        select * from t_product where status=1 order by priority desc limit 0,4<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-商品热销排行-业务层"><a href="#4-商品热销排行-业务层" class="headerlink" title="4.商品热销排行-业务层"></a>4.商品热销排行-业务层</h3><h4 id="4-1-规划异常"><a href="#4-1-规划异常" class="headerlink" title="4.1 规划异常"></a>4.1 规划异常</h4><blockquote><p>只要是查询,不涉及到增删改的,都没有异常,无非就是没有该数据然后返回空</p></blockquote><h4 id="4-2-设计接口和抽象方法及实现"><a href="#4-2-设计接口和抽象方法及实现" class="headerlink" title="4.2 设计接口和抽象方法及实现"></a>4.2 设计接口和抽象方法及实现</h4><p>1.创建IProductService接口，并在接口中添加findHotList()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IProductService</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询热销商品的前四名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 热销商品前四名的集合</span><br><span class="hljs-comment">     */</span><br>    List&lt;Product&gt; <span class="hljs-title function_">findHotList</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.在业务层创建ProductServiceImpl类并实现该方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.service.impl;<br><span class="hljs-keyword">import</span> com.cy.store.entity.Product;<br><span class="hljs-keyword">import</span> com.cy.store.mapper.ProductMapper;<br><span class="hljs-keyword">import</span> com.cy.store.service.IProductService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/** 处理商品数据的业务层实现类 */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IProductService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ProductMapper productMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Product&gt; <span class="hljs-title function_">findHotList</span><span class="hljs-params">()</span> &#123;<br>        List&lt;Product&gt; list = productMapper.findHotList();<br>        <span class="hljs-keyword">for</span> (Product product : list) &#123;<br>            product.setPriority(<span class="hljs-literal">null</span>);<br>            product.setCreatedUser(<span class="hljs-literal">null</span>);<br>            product.setCreatedTime(<span class="hljs-literal">null</span>);<br>            product.setModifiedUser(<span class="hljs-literal">null</span>);<br>            product.setModifiedTime(<span class="hljs-literal">null</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-商品热销排行-控制层"><a href="#5-商品热销排行-控制层" class="headerlink" title="5.商品热销排行-控制层"></a>5.商品热销排行-控制层</h3><h4 id="5-1-处理异常"><a href="#5-1-处理异常" class="headerlink" title="5.1 处理异常"></a>5.1 处理异常</h4><blockquote><p>无异常。</p></blockquote><h4 id="5-2-设计请求"><a href="#5-2-设计请求" class="headerlink" title="5.2 设计请求"></a>5.2 设计请求</h4><ul><li>&#x2F;products&#x2F;hot_list</li><li>GET</li><li>不需要请求参数</li><li>JsonResult&lt;List<Product>&gt;</li></ul><h4 id="5-3-处理请求"><a href="#5-3-处理请求" class="headerlink" title="5.3 处理请求"></a>5.3 处理请求</h4><p>1.创建ProductController类并使其继承BaseController类,在类中编写处理请求的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;products&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IProductService productService;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;hot_list&quot;)</span><br>    <span class="hljs-keyword">public</span> JsonResult&lt;List&lt;Product&gt;&gt; <span class="hljs-title function_">getHotList</span><span class="hljs-params">()</span> &#123;<br>        List&lt;Product&gt; data = productService.findHotList();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonResult</span>&lt;List&lt;Product&gt;&gt;(OK, data);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.为了能不登录也可以访问该数据,需要将products&#x2F;**请求添加到白名单中:</p><p>在LoginInterceptorConfigure类的addInterceptors方法中添加代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">patterns.add(<span class="hljs-string">&quot;/products/**&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="6-商品-热销排行-前端页面"><a href="#6-商品-热销排行-前端页面" class="headerlink" title="6.商品-热销排行-前端页面"></a>6.商品-热销排行-前端页面</h3><p>1.在index.html页面给“热销排行”列表的div标签设置id属性值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hot-list&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel-body panel-item&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- ... --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.在index.html页面中添加展示热销排行商品的js代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>    $(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">showHotList</span>();<br>&#125;);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">showHotList</span>(<span class="hljs-params"></span>) &#123;<br>    $(<span class="hljs-string">&quot;#hot-list&quot;</span>).<span class="hljs-title function_">empty</span>();<br>    $.<span class="hljs-title function_">ajax</span>(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/products/hot_list&quot;</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;GET&quot;</span>,<br>        <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;JSON&quot;</span>,<br>        <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">json</span>) &#123;<br>            <span class="hljs-keyword">var</span> list = json.<span class="hljs-property">data</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; list.<span class="hljs-property">length</span>; i++) &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(list[i].<span class="hljs-property">title</span>);<span class="hljs-comment">//调试用</span><br>                <span class="hljs-keyword">var</span> html = <span class="hljs-string">&#x27;&lt;div class=&quot;col-md-12&quot;&gt;&#x27;</span><br>                + <span class="hljs-string">&#x27;&lt;div class=&quot;col-md-7 text-row-2&quot;&gt;&lt;a href=&quot;product.html?id=#&#123;id&#125;&quot;&gt;#&#123;title&#125;&lt;/a&gt;&lt;/div&gt;&#x27;</span><br>                + <span class="hljs-string">&#x27;&lt;div class=&quot;col-md-2&quot;&gt;¥#&#123;price&#125;&lt;/div&gt;&#x27;</span><br>                + <span class="hljs-string">&#x27;&lt;div class=&quot;col-md-3&quot;&gt;&lt;img src=&quot;..#&#123;image&#125;collect.png&quot; class=&quot;img-responsive&quot; /&gt;&lt;/div&gt;&#x27;</span><br>                + <span class="hljs-string">&#x27;&lt;/div&gt;&#x27;</span>;<br><br>                html = html.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/#&#123;id&#125;/g</span>, list[i].<span class="hljs-property">id</span>);<br>                html = html.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/#&#123;title&#125;/g</span>, list[i].<span class="hljs-property">title</span>);<br>                html = html.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/#&#123;price&#125;/g</span>, list[i].<span class="hljs-property">price</span>);<br>                html = html.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/#&#123;image&#125;/g</span>, list[i].<span class="hljs-property">image</span>);<br><br>                $(<span class="hljs-string">&quot;#hot-list&quot;</span>).<span class="hljs-title function_">append</span>(html);<br>            &#125;<br>        &#125;<br>    &#125;);<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>关于image标签里面的属性src&#x3D;“…#{image}collect.png” class&#x3D;“img-responsive”</p><ul><li>…代表跳到父文件夹,即index.html的父文件夹static</li><li>…后面和collect前面不需要单斜杠,因为数据库中图片地址的数据前面后面加的有</li></ul><p>关于a标签里面的href&#x3D;“product.html?id&#x3D;#{id}”</p><ul><li>这里是为了点击超链接进入商品详情页时可以把商品id传给详情页,使两个页面形成联系</li></ul>]]></content>
    
    
    <categories>
      
      <category>电脑商城项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>电脑商城项目03头像上传和新增收货地址</title>
    <link href="/2022/07/24/%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE03%E5%A4%B4%E5%83%8F%E4%B8%8A%E4%BC%A0%E5%92%8C%E6%96%B0%E5%A2%9E%E6%94%B6%E8%B4%A7%E5%9C%B0%E5%9D%80/"/>
    <url>/2022/07/24/%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE03%E5%A4%B4%E5%83%8F%E4%B8%8A%E4%BC%A0%E5%92%8C%E6%96%B0%E5%A2%9E%E6%94%B6%E8%B4%A7%E5%9C%B0%E5%9D%80/</url>
    
    <content type="html"><![CDATA[<h2 id="上传头像"><a href="#上传头像" class="headerlink" title="上传头像"></a>上传头像</h2><p>错误方法:把文件存到数据库中,需要图片时访问数据库,数据库将文件解析为字节流返回,最后写到本地的某一个文件.这种方法太耗费资源和时间了</p><p>正确方法:将对应的文件保存在操作系统上,然后再把这个文件路径记录下来,因为在记录路径的时候是非常便捷和方便的,将来如果要打开这个文件可以依据这个路径找到这个文件,所以说在数据库中保存该文件的路径即可.</p><p>稍微大一点的公司都会将所有的静态资源(图片,文件,其他资源文件)放到某台电脑上,再把这台电脑作为一台单独的服务器使用</p><h3 id="1-上传头像-持久层"><a href="#1-上传头像-持久层" class="headerlink" title="1.上传头像-持久层"></a>1.上传头像-持久层</h3><h4 id="1-1SQL语句的规划"><a href="#1-1SQL语句的规划" class="headerlink" title="1.1SQL语句的规划"></a>1.1SQL语句的规划</h4><p>更新用户avatar字段的sql语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> t_user <span class="hljs-keyword">set</span> avatar<span class="hljs-operator">=</span>?,modified_user<span class="hljs-operator">=</span>?,modified_time<span class="hljs-operator">=</span>? <span class="hljs-keyword">where</span> uid<span class="hljs-operator">=</span>?<br></code></pre></td></tr></table></figure><h4 id="1-2设计接口和抽象方法"><a href="#1-2设计接口和抽象方法" class="headerlink" title="1.2设计接口和抽象方法"></a>1.2设计接口和抽象方法</h4><p>在UserMapper接口中定义一个抽象方法用于修改用户的头像</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** 根据用户uid修改用户的头像*/</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 注解<span class="hljs-doctag">@Param</span>(&quot;SQL映射文件中#&#123;&#125;占位符的变量名&quot;),解决的问题:</span><br><span class="hljs-comment"> * 当SQL语句的占位符和映射的接口方法参数名不一致时,需要将某个参数强行注入到某个</span><br><span class="hljs-comment"> * 占位符变量上时,可以使用<span class="hljs-doctag">@Param</span>这个注解来标注映射的关系</span><br><span class="hljs-comment"> * */</span><br>Integer <span class="hljs-title function_">updateAvatarByUid</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;uid&quot;)</span> Integer iddddd,//<span class="hljs-meta">@Param(&quot;参数名&quot;)</span>注解中的参数名需要和sql语句中</span><br><span class="hljs-params">                          //的#&#123;参数名&#125;的参数名保持一致.该处表示iddddd中的变量值要注入到sql语句的uid中</span><br><span class="hljs-params">                          String avatar,</span><br><span class="hljs-params">                          String modifiedUser,</span><br><span class="hljs-params">                          Date modifiedTime)</span>;<br></code></pre></td></tr></table></figure><h4 id="1-3编写映射"><a href="#1-3编写映射" class="headerlink" title="1.3编写映射"></a>1.3编写映射</h4><p>UserMapper.xml文件中编写映射的SQL语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateAvatarByUid&quot;</span>&gt;</span><br>    update t_user<br>    set<br>        avatar = #&#123;avatar&#125;,<br>        modified_user = #&#123;modifiedUser&#125;,<br>        modified_time = #&#123;modifiedTime&#125;<br>    where<br>        uid = #&#123;uid&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="1-4单元测试"><a href="#1-4单元测试" class="headerlink" title="1.4单元测试"></a>1.4单元测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateAvatarByUid</span><span class="hljs-params">()</span> &#123;<br>    userMapper.updateAvatarByUid(<br>        <span class="hljs-number">11</span>,<br>        <span class="hljs-string">&quot;abc&quot;</span>,<br>        <span class="hljs-string">&quot;mxy&quot;</span>,<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-上传头像-业务层"><a href="#2-上传头像-业务层" class="headerlink" title="2.上传头像-业务层"></a>2.上传头像-业务层</h3><h4 id="2-1规划异常"><a href="#2-1规划异常" class="headerlink" title="2.1规划异常"></a>2.1规划异常</h4><ul><li>用户数据不存在,找不到对应的用户数据</li><li>更新的时候,出现未知异常</li></ul><blockquote><p>无需重复开发</p></blockquote><h4 id="2-2设计接口和抽象方法及实现"><a href="#2-2设计接口和抽象方法及实现" class="headerlink" title="2.2设计接口和抽象方法及实现"></a>2.2设计接口和抽象方法及实现</h4><p>1.先分析一下业务层接口需要哪些参数:那就需要看持久层接口要的有什么参数:</p><p>uid,avatar,modifiedUser,modifiedTime,其中modifiedTime是在方法中创建的,uid和modifiedUser从session中获取,但是session对象是在控制层的并不会出现在业务层,所以业务层要保留这两个参数,以便控制层可以传递过来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 修改用户的头像</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> uid 用户uid</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> avatar 用户头像的路径</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> username 用户名称</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">changeAvatar</span><span class="hljs-params">(Integer uid,</span><br><span class="hljs-params">                  String avatar,</span><br><span class="hljs-params">                  String username)</span>;<span class="hljs-comment">//业务层一般叫username而不叫modifiedUser,因</span><br>                                    <span class="hljs-comment">// 为业务层并没有直接和数据库关联</span><br></code></pre></td></tr></table></figure><p>2.编写业务层的更新用户头像的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changeAvatar</span><span class="hljs-params">(Integer uid, String avatar, String username)</span> &#123;<br>    <span class="hljs-comment">//查询当前的用户数据是否存在</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> userMapper.findByUid(uid);<br>    <span class="hljs-keyword">if</span> (result == <span class="hljs-literal">null</span> || result.getIsDelete() == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernameNotFoundException</span>(<span class="hljs-string">&quot;用户数据不存在&quot;</span>);<br>    &#125;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> userMapper.updateAvatarByUid(uid, avatar, username, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    <span class="hljs-keyword">if</span> (rows!=<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UpdateException</span>(<span class="hljs-string">&quot;更新用户头像时产生未知异常&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-3单元测试"><a href="#2-3单元测试" class="headerlink" title="2.3单元测试"></a>2.3单元测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changeAvatar</span><span class="hljs-params">()</span> &#123;<br>    userService.changeAvatar(<span class="hljs-number">11</span>,<span class="hljs-string">&quot;222&quot;</span>,<span class="hljs-string">&quot;mmm&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-上传头像-控制层"><a href="#3-上传头像-控制层" class="headerlink" title="3.上传头像-控制层"></a>3.上传头像-控制层</h3><p><em>文件上传过程中产生的异常太多了,再比如文件类型不匹配或文件被损坏</em></p><h4 id="3-1规划异常"><a href="#3-1规划异常" class="headerlink" title="3.1规划异常"></a>3.1规划异常</h4><blockquote><p>客户端传递文件给服务器,服务器的控制端controller接收文件,接收时可能抛出异常,因为用户传过来的文件有可能超出了我们的大小限制</p><p>该异常能放在业务层抛出吗?没必要的,因为此时数据是从控制层往下传的,所以控制层产生的异常直接在这一层(控制层)抛就可以了</p></blockquote><p>上传文件时的异常都是文件异常,所以可以先创建一个文件异常类的基类FileUploadException并使其继承RuntimeException</p><p>文件异常基类的子类有:</p><ul><li>FileEmptyException:文件为空的异常(没有选择上传的文件就提交了表单,或选择的文件是0字节的空文件)</li><li>FileSizeException:文件大小超出限制</li><li>FileTypeException:文件类型异常(上传的文件类型超出了限制)</li><li>FileUploadIOException:文件读写异常</li><li>FileStateException:文件状态异常(上穿文件时该文件正在打开状态)</li></ul><p>在controller包下创子包ex,在ex包里面创建文件异常类的基类和上述五个文件异常类,创建的六个类都重写其父类的五个构造方法</p><h4 id="3-2处理异常"><a href="#3-2处理异常" class="headerlink" title="3.2处理异常"></a>3.2处理异常</h4><p>在基类BaseController中进行编写和统一处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> FileEmptyException) &#123;<br>    result.setState(<span class="hljs-number">6000</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> FileSizeException) &#123;<br>    result.setState(<span class="hljs-number">6001</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> FileTypeException) &#123;<br>    result.setState(<span class="hljs-number">6002</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> FileStateException) &#123;<br>    result.setState(<span class="hljs-number">6003</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> FileUploadIOException) &#123;<br>    result.setState(<span class="hljs-number">6004</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>异常统一处理方法的修饰符@ExceptionHandler(ServiceException.class)表明我们现在创建的FileUploadException异常类不会被拦截到该方法中,点进@ExceptionHandler注解可以发现传参可以传数组类型,所以可以将异常统一处理方法上的注解改为:</p><p>@ExceptionHandler({ServiceException.class,FileUploadException.class})</p><h4 id="3-3设计请求"><a href="#3-3设计请求" class="headerlink" title="3.3设计请求"></a>3.3设计请求</h4><ul><li>&#x2F;users&#x2F;change_avatar</li><li>POST(GET请求提交数据只有2KB左右)</li><li>HttpSession session(获取uid和username),MultipartFile file</li><li>JsonResult<String>(不能是JsonResult<Void>:如果上传头像后浏览别的页面,然后再回到上传头像的页面就展示不出来了,所以图片一旦上传成功,就要保存该图片在服务器的哪个位置,这样的话一旦检测到进入上传头像的页面就可以通过保存的路径拿到图片,最后展示在页面上)</li></ul><h4 id="3-4处理请求"><a href="#3-4处理请求" class="headerlink" title="3.4处理请求"></a>3.4处理请求</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;change_avatar&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult&lt;String&gt; <span class="hljs-title function_">changeAvatar</span><span class="hljs-params">(HttpSession session,</span><br><span class="hljs-params">                                       MultipartFile file)</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 1.参数名为什么必须用file:在upload.html页面的147行&lt;input type=</span><br><span class="hljs-comment">     * &quot;file&quot; name=&quot;file&quot;&gt;中的name=&quot;file&quot;,所以必须有一个方法的参数名</span><br><span class="hljs-comment">     * 为file用于接收前端传递的该文件.如果想要参数名和前端的name不一</span><br><span class="hljs-comment">     * 样:<span class="hljs-doctag">@RequestParam</span>(&quot;file&quot;)MultipartFile ffff:把表单中name=</span><br><span class="hljs-comment">     * &quot;file&quot;的控件值传递到变量ffff上</span><br><span class="hljs-comment">     * 2.参数类型为什么必须是MultipartFile:这是springmvc中封装的一个</span><br><span class="hljs-comment">     * 包装接口,如果类型是MultipartFile并且参数名和前端上传文件的name</span><br><span class="hljs-comment">     * 相同,则会自动把整体的数据包传递给file</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">//判断文件是否为null</span><br>    <span class="hljs-keyword">if</span> (file.isEmpty()) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileEmptyException</span>(<span class="hljs-string">&quot;文件为空&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (file.getSize()&gt;AVATAR_MAX_SIZE) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileSizeException</span>(<span class="hljs-string">&quot;文件超出限制&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//判断文件的类型是否是我们规定的后缀类型</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">contentType</span> <span class="hljs-operator">=</span> file.getContentType();<br>    <span class="hljs-comment">//如果集合包含某个元素则返回值为true</span><br>    <span class="hljs-keyword">if</span> (!AVATAR_TYPE.contains(contentType)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileTypeException</span>(<span class="hljs-string">&quot;文件类型不支持&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//上传的文件路径:.../upload/文件名.png</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * session.getServletContext()获取当前Web应用程序的上下文</span><br><span class="hljs-comment">     * 对象(每次启动tomcat都会创建一个新的上下文对象)</span><br><span class="hljs-comment">     * getRealPath(&quot;/upload&quot;)的/代表当前web应用程序的根目录,通过该相</span><br><span class="hljs-comment">     * 对路径获取绝对路径,返回一个路径字符串,如果不能进行映射返回null,单</span><br><span class="hljs-comment">     * 斜杠可要可不要</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span><br>            session.getServletContext().getRealPath(<span class="hljs-string">&quot;/upload&quot;</span>);<br>    System.out.println(parent);<span class="hljs-comment">//调试用</span><br><br>    <span class="hljs-comment">//File对象指向这个路径,通过判断File是否存在得到该路径是否存在</span><br>    <span class="hljs-type">File</span> <span class="hljs-variable">dir</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(parent);<br>    <span class="hljs-keyword">if</span> (!dir.exists()) &#123;<span class="hljs-comment">//检测目录是否存在</span><br>        dir.mkdirs();<span class="hljs-comment">//创建当前目录</span><br>    &#125;<br><br>    <span class="hljs-comment">//获取这个文件名称(文件名+后缀,如avatar01.png,不包含父目录结构)用UUID</span><br>    <span class="hljs-comment">// 工具生成一个新的字符串作为文件名(好处:避免了因文件名重复发生的覆盖)</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">originalFilename</span> <span class="hljs-operator">=</span> file.getOriginalFilename();<br>    System.out.println(<span class="hljs-string">&quot;OriginalFilename=&quot;</span>+originalFilename);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> originalFilename.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">suffix</span> <span class="hljs-operator">=</span> originalFilename.substring(index);<br>    <span class="hljs-comment">//filename形如SAFS1-56JHIOHI-HIUGHUI-5565TYRF.png</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">filename</span> <span class="hljs-operator">=</span><br>            UUID.randomUUID().toString().toUpperCase()+suffix;<br><br>    <span class="hljs-comment">//在dir目录下创建filename文件(此时是空文件)</span><br>    <span class="hljs-type">File</span> <span class="hljs-variable">dest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(dir, filename);<br><br>    <span class="hljs-comment">//java可以把一个文件的数据直接写到同类型的文件中,这里将参数file中的数据写入到空文件dest中</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        file.transferTo(dest);<span class="hljs-comment">//transferTo是一个封装的方法,用来将file文件中的数据写入到dest文件</span><br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 先捕获FileStateException再捕获IOException是</span><br><span class="hljs-comment">         * 因为后者包含前者,如果先捕获IOException那么</span><br><span class="hljs-comment">         * FileStateException就永远不可能会被捕获</span><br><span class="hljs-comment">         */</span><br>    &#125; <span class="hljs-keyword">catch</span> (FileStateException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileStateException</span>(<span class="hljs-string">&quot;文件状态异常&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        <span class="hljs-comment">//这里不用打印e,而是用自己写的FileUploadIOException类并</span><br>        <span class="hljs-comment">// 抛出文件读写异常</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileUploadIOException</span>(<span class="hljs-string">&quot;文件读写异常&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">uid</span> <span class="hljs-operator">=</span> getUidFromSession(session);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> getUsernameFromSession(session);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">avatar</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/upload/&quot;</span>+filename;<br>    userService.changeAvatar(uid,avatar,username);<br>    <span class="hljs-comment">//返回用户头像的路径给前端页面,将来用于头像展示使用</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonResult</span>&lt;&gt;(OK,avatar);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-上传头像-前端页面"><a href="#4-上传头像-前端页面" class="headerlink" title="4.上传头像-前端页面"></a>4.上传头像-前端页面</h3><p>1.在upload.html的上传头像的表单加上三个属性:</p><ul><li>action&#x3D;“&#x2F;users&#x2F;change_avatar”</li><li>method&#x3D;“post”(get请求提交数据只有2KB左右)</li><li>enctype&#x3D;“multipart&#x2F;form-data”(如果直接使用表单进行文件的上传,需要给表单加该属性,这样不会将目标文件的数据结构做修改后再上传,这不同于字符串,字符串随意切割修改也能拼在一起,但文件不行)</li></ul><p>2.确认<input type=“file” name=“file”>的type和name以及&lt;input type&#x3D;“submit” class&#x3D;“btn btn-primary” value&#x3D;“上传” &#x2F;&gt;中的type</p><h3 id="5-前端页面优化——修复bug"><a href="#5-前端页面优化——修复bug" class="headerlink" title="5.前端页面优化——修复bug"></a>5.前端页面优化——修复bug</h3><h4 id="5-1更改默认的大小限制"><a href="#5-1更改默认的大小限制" class="headerlink" title="5.1更改默认的大小限制"></a>5.1更改默认的大小限制</h4><p>springmvc默认为1MB文件可以进行上传,如果刚好是1024<em>1024&#x3D;1048576 bytes则会报代码错误,自己在控制层设置的public static final int AVATAR_MAX_SIZE &#x3D; 10</em>1024*1024;需要在不超过原有大小的情况下才会起作用,所以要手动修改springmvc默认上传文件的大小</p><p>方式1:直接在配置文件application.properties中进行配置:</p><ul><li>spring.servlet.multipart.max-file-size&#x3D;10MB(表示上传的文件最大是多大)</li><li>spring.servlet.multipart.max-request-size&#x3D;15MB(整个文件是放在了request中发送给服务器的,请求当中还会有消息头等其他携带的信息,这里设置请求最大为15MB)</li></ul><p>方式2:采用java代码的形式来设置文件的上传大小的限制:</p><p>1.该代码必须在主类中进行配置,因为主类是最早加载的,而配置文件必须是最早加载的</p><p>2.在主类中定义一个方法,方法名无所谓,但方法需要用@bean修饰,表示该方法返回值是一个bean对象,并且该bean对象被bean修饰,也就是这个方法返回了一个对象,然后把该对象交给bean管理,类似spring中的bean标签,含义是一样的,只是这里改为了注解</p><p>3.用@Configuration修饰主类使@bean注解生效,但其实@SpringBootApplication是@SpringBootConfiguration,@EnableAutoConfiguration,@ComponentScan三个注解的合并,所以可以不需要@Configuration</p><p>4.方法返回值是MultipartConfigElement类型,表示所要配置的目标的元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> MultipartConfigElement <span class="hljs-title function_">getMultipartConfigElement</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//1.创建一个配置的工厂类对象</span><br>    <span class="hljs-type">MultipartConfigFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MultipartConfigFactory</span>();<br><br>    <span class="hljs-comment">//2.设置需要创建的对象的相关信息</span><br>    factory.setMaxFileSize(DataSize.of(<span class="hljs-number">10</span>, DataUnit.MEGABYTES));<br>    factory.setMaxRequestSize(DataSize.of(<span class="hljs-number">15</span>,DataUnit.MEGABYTES));<br><br>    <span class="hljs-comment">//3.通过工厂类创建MultipartConfigElement对象</span><br>    <span class="hljs-keyword">return</span> factory.createMultipartConfig();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-2上传后显示头像"><a href="#5-2上传后显示头像" class="headerlink" title="5.2上传后显示头像"></a>5.2上传后显示头像</h4><p>上传头像成功后不能显示头像.</p><p>在页面中通过ajax请求来提交文件,提交完成后返回了json串,解析出json串中的data数据设置到img标签的src属性上</p><p>1.删掉在upload.html的上传头像的表单中加的三个属性:action&#x3D;“&#x2F;users&#x2F;change_avatar”,method&#x3D;“post”,enctype&#x3D;“multipart&#x2F;form-data”.加上id属性:id&#x3D;“form-change-avatar”</p><p>2.把153行的input标签里面的type&#x3D;”submit”改为type&#x3D;“button”(因为submit按钮不能添加事件,所以要改为普通的按钮)并加上属性id&#x3D;“btn-change-avatar”</p><blockquote><p>1.serialize():可以将表单数据自动拼接成key&#x3D;value的结构提交给服务器,一般提交的是普通的控件类型中的数据(type&#x3D;text&#x2F;password&#x2F;radio&#x2F;checkbox等等)</p><p>2.FormData类:将表单中数据保持原有的结构进行数据提交.文件类型的数据可以使用FormData对象进行存储</p><p>使用方法:new FormData($(“form”)[0]);</p><p>这行代码的含义是将id&#x3D;”form”的表单的第一个元素的整体值作为创建FormData对象的数据</p><p>3.虽然我们把文件的数据保护下来了,但是ajax默认处理数据时按照字符串的形式进行处理,以及默认会采用字符串的形式进行数据提交.手动关闭这两个功能:</p><ul><li>processData: false,&#x2F;&#x2F;处理数据的形式,关闭处理数据</li><li>contentType: false,&#x2F;&#x2F;提交数据的形式,关闭默认提交数据的形式</li></ul></blockquote><p>下面给提交表单加上事件:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    $(<span class="hljs-string">&quot;#btn-change-avatar&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        $.<span class="hljs-title function_">ajax</span>(&#123;<br>            <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/users/change_avatar&quot;</span>,<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>            <span class="hljs-attr">data</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">FormData</span>($(<span class="hljs-string">&quot;#form-change-avatar&quot;</span>)[<span class="hljs-number">0</span>]),<br>            <span class="hljs-attr">processData</span>: <span class="hljs-literal">false</span>,<span class="hljs-comment">//处理数据的形式,关闭处理数据</span><br>            <span class="hljs-attr">contentType</span>: <span class="hljs-literal">false</span>,<span class="hljs-comment">//提交数据的形式,关闭默认提交数据的形式</span><br>            <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;JSON&quot;</span>,<br>            <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">json</span>) &#123;<br>                <span class="hljs-keyword">if</span> (json.<span class="hljs-property">state</span> == <span class="hljs-number">200</span>) &#123;<br>                    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;头像修改成功&quot;</span>)<br>                    <span class="hljs-comment">//将服务器端返回的头像地址设置到img标签的src属性上</span><br>                    <span class="hljs-comment">//attr(属性,属性值)用来给某个属性设值</span><br>                    $(<span class="hljs-string">&quot;#img-avatar&quot;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;src&quot;</span>,json.<span class="hljs-property">data</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;头像修改失败&quot;</span>)<br>                &#125;<br>            &#125;,<br>            <span class="hljs-attr">error</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">xhr</span>) &#123;<br>                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;修改头像时产生未知的异常!&quot;</span>+xhr.<span class="hljs-property">message</span>);<br>            &#125;<br>        &#125;);<br>    &#125;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="5-3登录后显示头像"><a href="#5-3登录后显示头像" class="headerlink" title="5.3登录后显示头像"></a>5.3登录后显示头像</h4><p>将头像上传后会显示头像,但是关闭浏览器后再进入个人头像页面就不会显示头像了,因为只有点击”上传”才能发送ajax请求并显示头像.</p><p>可以在每次用户登录成功后将avatar保存在cookie中,登录的业务层返回给控制层user对象,该对象包含uid,username,avatar.所以要在登录页面login.html中将服务器返回的头像路径设置到cookie中,然后每次检测到用户打开上传头像页面,在这个页面中通过ready()方法来自动读取cookie中头像路径并设到src属性上</p><p>1.需要在login.html页面头部导入cookie.js文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script src=<span class="hljs-string">&quot;../bootstrap3/js/jquery.cookie.js&quot;</span> type=<span class="hljs-string">&quot;text/javascript&quot;</span> charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>2.调用cookie方法保存路径</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$.<span class="hljs-title function_">cookie</span>(key,value,time);<span class="hljs-comment">//time单位:天</span><br></code></pre></td></tr></table></figure><p>在ajax请求原有的代码上加$.cookie(“avatar”,json.data.avatar,{expires: 7});</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">json</span>) &#123;<br>    <span class="hljs-keyword">if</span> (json.<span class="hljs-property">state</span> == <span class="hljs-number">200</span>) &#123;<br>        location.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;index.html&quot;</span>;<br>        $.<span class="hljs-title function_">cookie</span>(<span class="hljs-string">&quot;avatar&quot;</span>,json.<span class="hljs-property">data</span>.<span class="hljs-property">avatar</span>,&#123;<span class="hljs-attr">expires</span>: <span class="hljs-number">7</span>&#125;);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;登录失败&quot;</span>)<br>    &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><p>3.需要在upload.html获取cookie中的值,所以要在页面头部导入cookie.js文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script src=<span class="hljs-string">&quot;../bootstrap3/js/jquery.cookie.js&quot;</span> type=<span class="hljs-string">&quot;text/javascript&quot;</span> charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>4.在upload.html的script标签中加ready()自动读取cookie数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> avatar = $.<span class="hljs-title function_">cookie</span>(<span class="hljs-string">&quot;avatar&quot;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(avatar);<span class="hljs-comment">//调试用</span><br>    $(<span class="hljs-string">&quot;#img-avatar&quot;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;src&quot;</span>,avatar);<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="5-4显示最新头像"><a href="#5-4显示最新头像" class="headerlink" title="5.4显示最新头像"></a>5.4显示最新头像</h4><p>上传头像后不重新登录而是浏览其他页面,然后再进入个人头像页面时展示的头像是上次上传的,因为此时cookie中的值是上次上传的头像的路径,所以需要上传头像后使用同名覆盖更改cookie中路径</p><p>在ajax函数的success属性值的if语句加:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$.<span class="hljs-title function_">cookie</span>(<span class="hljs-string">&quot;avatar&quot;</span>,json.<span class="hljs-property">data</span>,&#123;<span class="hljs-attr">expires</span>: <span class="hljs-number">7</span>&#125;);<br></code></pre></td></tr></table></figure><p>完善后重启服务测试,结果若和预测的不一样,则参考项目环境搭建-&gt;项目测试-&gt;测试静态资源能否正常加载里面的四种解决方法</p><h2 id="新增收货地址"><a href="#新增收货地址" class="headerlink" title="新增收货地址"></a>新增收货地址</h2><h3 id="1-创建数据表"><a href="#1-创建数据表" class="headerlink" title="1.创建数据表"></a>1.创建数据表</h3><p>1.选中数据表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">use store<br></code></pre></td></tr></table></figure><p>2.在store数据库中创建t_address表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t_address (<br>aid <span class="hljs-type">INT</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;收货地址id&#x27;</span>,<br>uid <span class="hljs-type">INT</span> COMMENT <span class="hljs-string">&#x27;归属的用户id&#x27;</span>,<br>`name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) COMMENT <span class="hljs-string">&#x27;收货人姓名&#x27;</span>,<br>province_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">15</span>) COMMENT <span class="hljs-string">&#x27;省-名称&#x27;</span>,<br>province_code <span class="hljs-type">CHAR</span>(<span class="hljs-number">6</span>) COMMENT <span class="hljs-string">&#x27;省-行政代号&#x27;</span>,<br>city_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">15</span>) COMMENT <span class="hljs-string">&#x27;市-名称&#x27;</span>,<br>city_code <span class="hljs-type">CHAR</span>(<span class="hljs-number">6</span>) COMMENT <span class="hljs-string">&#x27;市-行政代号&#x27;</span>,<br>area_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">15</span>) COMMENT <span class="hljs-string">&#x27;区-名称&#x27;</span>,<br>area_code <span class="hljs-type">CHAR</span>(<span class="hljs-number">6</span>) COMMENT <span class="hljs-string">&#x27;区-行政代号&#x27;</span>,<br>zip <span class="hljs-type">CHAR</span>(<span class="hljs-number">6</span>) COMMENT <span class="hljs-string">&#x27;邮政编码&#x27;</span>,<br>address <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) COMMENT <span class="hljs-string">&#x27;详细地址&#x27;</span>,<br>phone <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) COMMENT <span class="hljs-string">&#x27;手机&#x27;</span>,<br>tel <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) COMMENT <span class="hljs-string">&#x27;固话&#x27;</span>,<br>tag <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">6</span>) COMMENT <span class="hljs-string">&#x27;标签&#x27;</span>,<br>is_default <span class="hljs-type">INT</span> COMMENT <span class="hljs-string">&#x27;是否默认：0-不默认，1-默认&#x27;</span>,<br>created_user <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) COMMENT <span class="hljs-string">&#x27;创建人&#x27;</span>,<br>created_time DATETIME COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>modified_user <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) COMMENT <span class="hljs-string">&#x27;修改人&#x27;</span>,<br>modified_time DATETIME COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br><span class="hljs-keyword">PRIMARY</span> KEY (aid)<br>) ENGINE<span class="hljs-operator">=</span>INNODB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br></code></pre></td></tr></table></figure><p>注意name是关键字,所以需要用&#96;&#96;</p><h3 id="2-创建收货地址的实体类"><a href="#2-创建收货地址的实体类" class="headerlink" title="2.创建收货地址的实体类"></a>2.创建收货地址的实体类</h3><p>在entity包下创建实体类Address继承BaseEntity类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**收货地址额实体类*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Address</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseEntity</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer aid;<br>    <span class="hljs-keyword">private</span> Integer uid;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String provinceName;<br>    <span class="hljs-keyword">private</span> String provinceCode;<br>    <span class="hljs-keyword">private</span> String cityName;<br>    <span class="hljs-keyword">private</span> String cityCode;<br>    <span class="hljs-keyword">private</span> String areaName;<br>    <span class="hljs-keyword">private</span> String areaCode;<br>    <span class="hljs-keyword">private</span> String zip;<br>    <span class="hljs-keyword">private</span> String address;<br>    <span class="hljs-keyword">private</span> String phone;<br>    <span class="hljs-keyword">private</span> String tel;<br>    <span class="hljs-keyword">private</span> String tag;<br>    <span class="hljs-keyword">private</span> Integer isDefault;<br> <span class="hljs-comment">/**</span><br><span class="hljs-comment"> * get,set</span><br><span class="hljs-comment"> * equals和hashCode</span><br><span class="hljs-comment"> * toString</span><br><span class="hljs-comment"> */</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-新增收货地址-持久层"><a href="#3-新增收货地址-持久层" class="headerlink" title="3.新增收货地址-持久层"></a>3.新增收货地址-持久层</h3><h4 id="3-1各功能的开发顺序"><a href="#3-1各功能的开发顺序" class="headerlink" title="3.1各功能的开发顺序"></a>3.1各功能的开发顺序</h4><p>当前收货地址功能模块:</p><ul><li>第一个页面:列表的展示,修改,删除,设置默认</li><li>第二个页面:新增收货地址</li></ul><p>开发顺序:新增收货地址-&gt;列表的展示-&gt;设置默认收货地址-&gt;删除收货地址-&gt;修改收货地址</p><h4 id="3-2规划需要执行的SQL语句"><a href="#3-2规划需要执行的SQL语句" class="headerlink" title="3.2规划需要执行的SQL语句"></a>3.2规划需要执行的SQL语句</h4><p>1.新增收货地址对应的是插入语句:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t_address (aid以外的所有字段) <span class="hljs-keyword">values</span> (字段值)<br></code></pre></td></tr></table></figure><p>2.大部分平台都会规定一个用户的收货地址数量,这里规定最多20个.那么在插入用户新的地址之前就要先做查询操作.如果查询到的是刚好20,这并不是一个java语法的异常,可以认为是业务控制的异常,这个异常随后在service抛,在controller捕获</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> t_address <span class="hljs-keyword">where</span> uid<span class="hljs-operator">=</span>?<br></code></pre></td></tr></table></figure><h4 id="3-3设计接口和抽象方法"><a href="#3-3设计接口和抽象方法" class="headerlink" title="3.3设计接口和抽象方法"></a>3.3设计接口和抽象方法</h4><p>创建接口AddressMapper,在这个接口中定义上面两个SQL语句抽象方法定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**收货地址持久层的接口*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AddressMapper</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 插入用户的收货地址数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> address 收货地址数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 受影响的行数</span><br><span class="hljs-comment">     */</span><br>    Integer <span class="hljs-title function_">insert</span> <span class="hljs-params">(Address address)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据用户的uid统计收货地址数量</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> uid 用户的uid</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 当前用户的收货地址总数</span><br><span class="hljs-comment">     */</span><br>    Integer <span class="hljs-title function_">countByUid</span><span class="hljs-params">(Integer uid)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-4编写映射"><a href="#3-4编写映射" class="headerlink" title="3.4编写映射"></a>3.4编写映射</h4><p>1.快速创建一个AddressMapper.xml映射文件:</p><ul><li>鼠标放在UserMapper.xml文件上并ctrl+c,再把鼠标放到mapper文件夹上ctrl+v,在弹出的窗口中把UserMapper改为AddressMapper.</li><li>进入AddressMapper.xml文件将mapper标签下的代码全部删除并修改mapper标签属性值为namespace&#x3D;“com.cy.store.mapper.AddressMapper”</li></ul><p>结果如下所示:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.cy.store.mapper.AddressMapper&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.在mapper标签中配置Address类属性与数据库中表的字段映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;AddressEntityMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.cy.store.entity.Address&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;aid&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;aid&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;province_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;provinceName&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;province_code&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;provinceCode&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;city_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;cityName&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;city_code&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;cityCode&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;area_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;areaName&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;area_code&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;areaCode&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;is_default&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;isDefault&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;created_user&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;createdUser&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;created_time&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;createdTime&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;modified_user&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;modifiedUser&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;modified_time&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;modifiedTime&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><p>判断该映射是否配置成功:按着ctrl并点击type&#x3D;”com.cy.store.entity.Address”中的Address,如果能跳转到Address类说明映射成功</p><p>3.在AddressMapper.xml中配置以上两个抽象方法的映射</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">&lt;</span><span class="hljs-keyword">insert</span> id<span class="hljs-operator">=</span>&quot;insert&quot; useGeneratedKeys<span class="hljs-operator">=</span>&quot;true&quot; keyProperty<span class="hljs-operator">=</span>&quot;aid&quot;<span class="hljs-operator">&gt;</span><br>    <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t_address (<br>        uid, `name`, province_name, province_code, city_name, city_code, area_name, area_code, zip,<br>        address, phone, tel,tag, is_default, created_user, created_time, modified_user, modified_time<br>    ) <span class="hljs-keyword">VALUES</span> (<br>        #&#123;uid&#125;, #&#123;name&#125;, #&#123;provinceName&#125;, #&#123;provinceCode&#125;, #&#123;cityName&#125;, #&#123;cityCode&#125;, #&#123;areaName&#125;,<br>        #&#123;areaCode&#125;, #&#123;zip&#125;, #&#123;address&#125;, #&#123;phone&#125;, #&#123;tel&#125;, #&#123;tag&#125;, #&#123;isDefault&#125;, #&#123;createdUser&#125;,<br>        #&#123;createdTime&#125;, #&#123;modifiedUser&#125;, #&#123;modifiedTime&#125;<br>    )<br><span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span><span class="hljs-keyword">insert</span><span class="hljs-operator">&gt;</span><br><br><span class="hljs-operator">&lt;</span><span class="hljs-operator">!</span><span class="hljs-comment">--resultType=&quot;java.lang.Integer&quot;不写会报错,因为Integer不是基本数据类型--&gt;</span><br><span class="hljs-operator">&lt;</span><span class="hljs-keyword">select</span> id<span class="hljs-operator">=</span>&quot;countByUid&quot;  resultType<span class="hljs-operator">=</span>&quot;java.lang.Integer&quot;<span class="hljs-operator">&gt;</span><br>    <span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> t_address <span class="hljs-keyword">where</span> uid<span class="hljs-operator">=</span>#&#123;uid&#125;<br><span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span><span class="hljs-keyword">select</span><span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-5单元测试"><a href="#3-5单元测试" class="headerlink" title="3.5单元测试"></a>3.5单元测试</h4><p>在test下的mapper文件夹下创建AddressMapperTests测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AddressMapperTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AddressMapper addressMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Address</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Address</span>();<br>        address.setUid(<span class="hljs-number">11</span>);<br>        address.setPhone(<span class="hljs-string">&quot;133336&quot;</span>);<br>        address.setName(<span class="hljs-string">&quot;女朋友&quot;</span>);<br>        addressMapper.insert(address);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">countByUid</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> addressMapper.countByUid(<span class="hljs-number">11</span>);<br>        System.out.println(count);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-新增收货地址-业务层"><a href="#4-新增收货地址-业务层" class="headerlink" title="4.新增收货地址-业务层"></a>4.新增收货地址-业务层</h3><h4 id="4-1规划异常"><a href="#4-1规划异常" class="headerlink" title="4.1规划异常"></a>4.1规划异常</h4><ul><li><p>插入数据时用户不存在(被管理员误删等等),抛UsernameNotFoundException异常(已经有了,不需要重复创建)</p></li><li><p>当用户插入的地址是第一条时,需要将当前地址作为默认收货地址</p><p>实现办法:如果查询到统计总数为0则将当前地址的is_default值设置为1</p></li><li><p>如果查询的结果&gt;&#x3D;20,这时需要抛出业务控制的异常AddressCountLimitException</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**收货地址总数超出限制的异常(20条)*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AddressCountLimitException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceException</span> &#123;<br>    <span class="hljs-comment">/**重写ServiceException的所有构造方法*/</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>插入数据时产生未知的异常InsertException(已经有了,不需要重复创建)</p></li></ul><h4 id="4-2设计接口和抽象方法及实现"><a href="#4-2设计接口和抽象方法及实现" class="headerlink" title="4.2设计接口和抽象方法及实现"></a>4.2设计接口和抽象方法及实现</h4><p>1.创建一个IAddressService接口,在接口中定义业务的抽象方法</p><p>因为mapper层接口该功能模块定义了两个抽象方法,所以就要在service层接口该功能模块也定义两个抽象方法?不是这样的,要看mapper层的这两个方法是依赖关系还是独立关系,如果某一个抽象方法依赖于另一个抽象方法,那就需要在业务层将这两个方法整合到一个方法中.一句话来说就是:一个功能模块可能需要多条sql语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**收货地址的业务层接口*/</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IAddressService</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *这三个参数的由来:</span><br><span class="hljs-comment">     * 1.首先肯定要有address</span><br><span class="hljs-comment">     * 2.业务层需要根据uid查询该用户收货地址总数及新建地址时给字段uid赋值</span><br><span class="hljs-comment">     * 但新建收货地址的表单中并没有哪个控件让输入用户uid,所以需要控制层将uid传给业务层</span><br><span class="hljs-comment">     * 3.业务层在创建/修改收货地址时需要同时修改数据库中创建人/修改人的字段</span><br><span class="hljs-comment">     * 但新建收货地址的表单中并没有哪个控件让输入用户username,所以需要控制层将username传给业务层</span><br><span class="hljs-comment">     * 注意:&gt; 可以用HttpSession session代替Integer uid, String username,但</span><br><span class="hljs-comment">     * 这样写的话就需要把BaseController类下获取uid,username的方法重新封装到一个</span><br><span class="hljs-comment">     * 类中并让IAddressServiceImp实现类继承该类,这样就需要微调一下代码逻辑,太麻</span><br><span class="hljs-comment">     * 烦,并且,最好每一层只处理该层需要做的事情,session对象是控制层传递的,所以就</span><br><span class="hljs-comment">     * 把session对象定义封装在控制层中,不需要在业务层中额外处理以降低耦合</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">addNewAddress</span><span class="hljs-params">(Integer uid, String username, Address address)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>方法addNewAddress中三个参数的由来:</p><ul><li><p>首先肯定要有address</p></li><li><p>业务层需要根据uid查询该用户收货地址总数及新建地址时给字段uid赋值</p><p>但新建收货地址的表单中并没有哪个控件让输入用户uid,所以需要控制层将uid传给业务层并在业务层封装到address对象中</p></li><li><p>业务层在创建&#x2F;修改收货地址时需要同时修改数据库中创建人&#x2F;修改人的字段</p><p>但新建收货地址的表单中并没有哪个控件让输入用户username,所以需要控制层将username传给业务层并在业务层封装到address对象中</p></li></ul><blockquote><p>可以用HttpSession session代替Integer uid, String username,但这样写的话就需要把BaseController类下获取uid,username的方法重新封装到一个类中并让AddressServiceImpl实现类继承该类,这样就需要微调一下代码逻辑,太麻烦,并且,最好每一层只处理该层需要做的事情,session对象是控制层传递的,所以就把session对象定义封装在控制层中,不需要在业务层中额外处理,这样可以降低耦合</p></blockquote><p>2.创建一个AddressServiceImpl类实现接口中抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**新增收货地址的实现类*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AddressServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IAddressService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AddressMapper addressMapper;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 为了方便日后修改最大收货地址数量,可以在配置文件</span><br><span class="hljs-comment">     * application.properties中定义user.address.max-count=20</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">//spring读取配置文件中数据:@Value(&quot;$&#123;user.address.max-count&#125;&quot;)</span><br>    <span class="hljs-meta">@Value(&quot;$&#123;user.address.max-count&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer maxCount;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addNewAddress</span><span class="hljs-params">(Integer uid, String username, Address address)</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> userMapper.findByUid(uid);<br>        <span class="hljs-keyword">if</span> (result ==<span class="hljs-literal">null</span> || result.getIsDelete() == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernameNotFoundException</span>(<span class="hljs-string">&quot;用户数据不存在&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//调用统计收货地址数量的方法</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> addressMapper.countByUid(uid);<br>        <span class="hljs-keyword">if</span> (count &gt;= maxCount) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AddressCountLimitException</span>(<span class="hljs-string">&quot;用户收货地址超出上限&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//uid,isDefault</span><br>        address.setUid(uid);<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">isDefault</span> <span class="hljs-operator">=</span> count == <span class="hljs-number">0</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<span class="hljs-comment">//1表示默认收货地址,0反之</span><br>        address.setIsDefault(isDefault);<br><br>        <span class="hljs-comment">//补全四项日志</span><br>        address.setCreatedUser(username);<br>        address.setModifiedUser(username);<br>        address.setCreatedTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        address.setModifiedTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br><br>        <span class="hljs-comment">//调用插入收货地址的方法</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> addressMapper.insert(address);<br>        <span class="hljs-keyword">if</span> (rows != <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InsertException</span>(<span class="hljs-string">&quot;插入用户的收货地址时产生未知异常&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>别忘了在配置文件application.properties中定义user.address.max-count&#x3D;20</p><h4 id="4-3单元测试"><a href="#4-3单元测试" class="headerlink" title="4.3单元测试"></a>4.3单元测试</h4><p>在test下的service文件夹下创建AddressServiceTests测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AddressServiceTests</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IAddressService addressService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addNewAddress</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Address</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Address</span>();<br>        address.setPhone(<span class="hljs-string">&quot;175726&quot;</span>);<br>        address.setName(<span class="hljs-string">&quot;男朋友&quot;</span>);<br>        addressService.addNewAddress(<span class="hljs-number">11</span>,<span class="hljs-string">&quot;mxy&quot;</span>,address);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-新增收货地址-控制层"><a href="#5-新增收货地址-控制层" class="headerlink" title="5.新增收货地址-控制层"></a>5.新增收货地址-控制层</h3><h4 id="5-1处理异常"><a href="#5-1处理异常" class="headerlink" title="5.1处理异常"></a>5.1处理异常</h4><p>义务层抛出了收货地址总数超出上限的异常,在BaseController中进行捕获处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> AddressCountLimitException) &#123;<br>    result.setState(<span class="hljs-number">4003</span>);<br>    result.setMessage(<span class="hljs-string">&quot;用户的收货地址超出上限的异常&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-2设计请求"><a href="#5-2设计请求" class="headerlink" title="5.2设计请求"></a>5.2设计请求</h4><ul><li>&#x2F;addresses&#x2F;add_new_address</li><li>post</li><li>Address address,HttpSession session</li><li>JsonResult<Void></li></ul><h4 id="5-3处理请求"><a href="#5-3处理请求" class="headerlink" title="5.3处理请求"></a>5.3处理请求</h4><p>在controller包下创建AddressController并继承BaseController,该类用来处理用户收货地址的请求和响应</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;addresses&quot;)</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AddressController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseController</span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IAddressService addressService;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;add_new_address&quot;)</span><br>    <span class="hljs-keyword">public</span> JsonResult&lt;Void&gt; <span class="hljs-title function_">addNewAddress</span><span class="hljs-params">(Address address, HttpSession session)</span> &#123;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">uid</span> <span class="hljs-operator">=</span> getUidFromSession(session);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> getUsernameFromSession(session);<br>        addressService.addNewAddress(uid,username,address);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonResult</span>&lt;&gt;(OK);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>启动服务器,登录账号后在地址栏输入<a href="http://localhost:8080/addresses/add_new_address?name=tom&amp;phone=98745612%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95">http://localhost:8080/addresses/add_new_address?name=tom&amp;phone=98745612进行测试</a></p><h3 id="6-新增收货地址-前端页面"><a href="#6-新增收货地址-前端页面" class="headerlink" title="6.新增收货地址-前端页面"></a>6.新增收货地址-前端页面</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    $(<span class="hljs-string">&quot;#btn-add-new-address&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        $.<span class="hljs-title function_">ajax</span>(&#123;<br>            <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/addresses/add_new_address&quot;</span>,<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>            <span class="hljs-attr">data</span>: $(<span class="hljs-string">&quot;#form-add-new-address&quot;</span>).<span class="hljs-title function_">serialize</span>(),<br>            <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;JSON&quot;</span>,<br>            <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">json</span>) &#123;<br>                <span class="hljs-keyword">if</span> (json.<span class="hljs-property">state</span> == <span class="hljs-number">200</span>) &#123;<br>                    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;新增收货地址成功&quot;</span>)<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;新增收货地址失败&quot;</span>)<br>                &#125;<br>            &#125;,<br>            <span class="hljs-attr">error</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">xhr</span>) &#123;<br>                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;新增收货地址时产生未知的异常!&quot;</span>+xhr.<span class="hljs-property">message</span>);<br>            &#125;<br>        &#125;);<br>    &#125;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="获取省市区列表"><a href="#获取省市区列表" class="headerlink" title="获取省市区列表"></a>获取省市区列表</h2><p>新增收货地址页面的三个下拉列表的内容展示没有和数据库进行交互,而是通过前端实现的(将代码逻辑放在了distpicker.data.js文件中),实现方法是在加载新增收货地址页面时加载该js文件,这种做法不可取(我不知道为啥)</p><p>正确做法是:把这些数据保存到数据库中,用户点击下拉列表时相应的数据会被详细的展示出来,然后监听用户选择了哪一项以便后面的下拉列表进行二级关联</p><h3 id="1-创建数据表-1"><a href="#1-创建数据表-1" class="headerlink" title="1.创建数据表"></a>1.创建数据表</h3><p>1.创建t_dict_district表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t_dict_district (<br>  id <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  parent <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">6</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `code` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">6</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">16</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (id)<br>) ENGINE<span class="hljs-operator">=</span>INNODB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br></code></pre></td></tr></table></figure><ul><li>code和name需要加&#96;&#96;</li><li>parent代表父区域的代码号</li><li>code代表自身的代码号</li><li>省的父代码号是+86,代表中国</li></ul><p>2.向该表中插入省市区数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">LOCK TABLES t_dict_district WRITE;<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t_dict_district <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;110100&#x27;</span>,<span class="hljs-string">&#x27;110101&#x27;</span>,<span class="hljs-string">&#x27;东城区&#x27;</span>),(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;110100&#x27;</span>,<span class="hljs-string">&#x27;110102&#x27;</span>,<span class="hljs-string">&#x27;西城区&#x27;</span>)等等等等;<br>UNLOCK TABLES;<br></code></pre></td></tr></table></figure><p>LOCK和UNLOVK干嘛用的?</p><h3 id="2-创建省市区的实体类"><a href="#2-创建省市区的实体类" class="headerlink" title="2.创建省市区的实体类"></a>2.创建省市区的实体类</h3><p>在包entity下创建实体类District(不需要继承BaseEntity,但因为没有继承BaseEntity所以需要实现接口Serializable序列化)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**省市区的数据实体类*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">District</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String parent;<br>    <span class="hljs-keyword">private</span> String code;<br>    <span class="hljs-keyword">private</span> String name;<br> <span class="hljs-comment">/**</span><br><span class="hljs-comment"> * get,set</span><br><span class="hljs-comment"> * equals和hashCode</span><br><span class="hljs-comment"> * toString</span><br><span class="hljs-comment"> */</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-获取省市区列表-持久层"><a href="#3-获取省市区列表-持久层" class="headerlink" title="3.获取省市区列表-持久层"></a>3.获取省市区列表-持久层</h3><h4 id="3-1规划需执行的SQL语句"><a href="#3-1规划需执行的SQL语句" class="headerlink" title="3.1规划需执行的SQL语句"></a>3.1规划需执行的SQL语句</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t_dict_district <span class="hljs-keyword">where</span> parent<span class="hljs-operator">=</span>? <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-keyword">ASC</span><br></code></pre></td></tr></table></figure><h4 id="3-2设计接口和抽象方法"><a href="#3-2设计接口和抽象方法" class="headerlink" title="3.2设计接口和抽象方法"></a>3.2设计接口和抽象方法</h4><p>日后可能开发新的模块仍要用到省市区列表,那么为了降低耦合性,就要创建新的接口</p><p>在mapper层下创建接口DistrictMapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">DistrictMapper</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据父代码号查询区域信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> parent 父代码号</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 某个父区域下所有的区域列表</span><br><span class="hljs-comment">     */</span><br>    List&lt;District&gt; <span class="hljs-title function_">findByParent</span><span class="hljs-params">(String parent)</span>;<span class="hljs-comment">//查询的结果可能是多个,所以放在集合中</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-3编写映射"><a href="#3-3编写映射" class="headerlink" title="3.3编写映射"></a>3.3编写映射</h4><p>创建一个DistrictMapper.xml映射文件并配置上述抽象方法的映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.cy.store.mapper.DistrictMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findByParent&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.cy.store.entity.District&quot;</span>&gt;</span><br>        select * from t_dict_district where parent=#&#123;parent&#125;<br>        order by code ASC<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-4单元测试"><a href="#3-4单元测试" class="headerlink" title="3.4单元测试"></a>3.4单元测试</h4><p>创建DistrictMapperTests测试类编写代码进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DistrictMapperTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DistrictMapper districtMapper;<br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findByParent</span><span class="hljs-params">()</span> &#123;<br>        List&lt;District&gt; list = districtMapper.findByParent(<span class="hljs-string">&quot;210100&quot;</span>);<br>        <span class="hljs-keyword">for</span> (District district : list) &#123;<br>            System.out.println(district);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-获取省市区列表-业务层"><a href="#4-获取省市区列表-业务层" class="headerlink" title="4.获取省市区列表-业务层"></a>4.获取省市区列表-业务层</h3><h4 id="4-1规划异常-1"><a href="#4-1规划异常-1" class="headerlink" title="4.1规划异常"></a>4.1规划异常</h4><p>没有异常需要处理</p><h4 id="4-2设计接口和抽象方法及实现-1"><a href="#4-2设计接口和抽象方法及实现-1" class="headerlink" title="4.2设计接口和抽象方法及实现"></a>4.2设计接口和抽象方法及实现</h4><p>1.创建一个接口IDistrictService,并定义抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IDistrictService</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据父代码号来查询区域信息(省或市或区)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> parent 父代码号</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 多个区域的信息</span><br><span class="hljs-comment">     */</span><br>    List&lt;District&gt; <span class="hljs-title function_">getByParent</span><span class="hljs-params">(String parent)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.创建DistrictServiceImpl实现类来实现抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DistrictServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IDistrictService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DistrictMapper districtMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;District&gt; <span class="hljs-title function_">getByParent</span><span class="hljs-params">(String parent)</span> &#123;<br>        List&lt;District&gt; list = districtMapper.findByParent(parent);<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 在进行网络数据传输时,为了尽量避免无效数据的传递,可以将无效数据</span><br><span class="hljs-comment">         * 设置为null,这样既节省流量,又提升了效率</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">for</span> (District district : list) &#123;<br>            district.setId(<span class="hljs-literal">null</span>);<br>            district.setParent(<span class="hljs-literal">null</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-3单元测试-1"><a href="#4-3单元测试-1" class="headerlink" title="4.3单元测试"></a>4.3单元测试</h4><p>在test下的service文件夹下创建DistrictServiceTests测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DistrictServiceTests</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IDistrictService districtService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getByParent</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//86代表中国,所有的省父代码号都是86</span><br>        List&lt;District&gt; list = districtService.getByParent(<span class="hljs-string">&quot;86&quot;</span>);<br>        <span class="hljs-keyword">for</span> (District district : list) &#123;<br>            System.err.println(district);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-获取省市区列表-控制层"><a href="#5-获取省市区列表-控制层" class="headerlink" title="5.获取省市区列表-控制层"></a>5.获取省市区列表-控制层</h3><h4 id="5-1设计请求"><a href="#5-1设计请求" class="headerlink" title="5.1设计请求"></a>5.1设计请求</h4><ul><li>&#x2F;districts&#x2F;</li><li>GET</li><li>String parent</li><li>JsonResult&lt;List<District>&gt;</li></ul><h4 id="5-2处理请求"><a href="#5-2处理请求" class="headerlink" title="5.2处理请求"></a>5.2处理请求</h4><p>1.创建一个DistrictController类,在类中编写处理请求的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;districts&quot;)</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DistrictController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseController</span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IDistrictService districtService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 请求路径和父路径相同时用<span class="hljs-doctag">@RequestMapping</span>(&#123;&quot;/&quot;,&quot;&quot;&#125;),表</span><br><span class="hljs-comment">     * 示districts后面跟/或者什么也不跟都会进入这个方法</span><br><span class="hljs-comment">     * 点进RequestMapping发现参数类型是String[],且传入一</span><br><span class="hljs-comment">     * 个路径时默认有&#123;&#125;,传入一个以上路径时需要手动添加&#123;&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@RequestMapping(&#123;&quot;/&quot;,&quot;&quot;&#125;)</span><br>    <span class="hljs-keyword">public</span> JsonResult&lt;List&lt;District&gt;&gt; <span class="hljs-title function_">getByParent</span><span class="hljs-params">(String parent)</span> &#123;<br>        List&lt;District&gt; data = districtService.getByParent(parent);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonResult</span>&lt;&gt;(OK,data);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.为了能不登录也可以访问该数据,需要将districts请求添加到白名单中:</p><p>在LoginInterceptorConfigure类的addInterceptors方法中添加代码:patterns.add(“&#x2F;districts&#x2F;**”);</p><p>3.启动服务器,不登录账号,直接在地址栏输入<a href="http://localhost:8080/districts?parent=86%E6%B5%8B%E8%AF%95%E8%83%BD%E5%90%A6%E6%AD%A3%E5%B8%B8%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE">http://localhost:8080/districts?parent=86测试能否正常获取数据</a></p><h3 id="6-获取省市区列表-前端页面"><a href="#6-获取省市区列表-前端页面" class="headerlink" title="6.获取省市区列表-前端页面"></a>6.获取省市区列表-前端页面</h3><p>1.原始的下拉列表展示是将数据放在js,再动态获取js中的数据,而目前为止我们已经将数据放在了数据库,所以不能让它再使用这种办法了,所以需要注释掉addAddress.html页面的这两行js代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../js/distpicker.data.js&quot;</span>&gt;&lt;/script&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/distpicker.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>关于这两行js代码:前者是为了获取数据,后者是为了将获取到的数据展示到下拉列表中</p><p>2.检查前端页面在提交省市区数据时是否有相关name属性和id属性(name用于提交数据,id用于监听用户的点击)</p><p>3.启动服务器,在前端验证一下是否还可以正常保存数据(除了省市区)</p><h2 id="获取省市区名称"><a href="#获取省市区名称" class="headerlink" title="获取省市区名称"></a>获取省市区名称</h2><p>上一个模块获取省市区列表是通过父代码号获取子代码号完成联动,该模块获取省市区名称是通过自身的code获取自身的name</p><h3 id="1-获取省市区名称-持久层"><a href="#1-获取省市区名称-持久层" class="headerlink" title="1.获取省市区名称-持久层"></a>1.获取省市区名称-持久层</h3><h4 id="3-1规划需要执行的SQL语句"><a href="#3-1规划需要执行的SQL语句" class="headerlink" title="3.1规划需要执行的SQL语句"></a>3.1规划需要执行的SQL语句</h4><p>根据当前code来获取当前省市区的名称,对应就是一条查询语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t_dict_district <span class="hljs-keyword">where</span> code<span class="hljs-operator">=</span>?<br></code></pre></td></tr></table></figure><h4 id="3-2设计接口和抽象方法-1"><a href="#3-2设计接口和抽象方法-1" class="headerlink" title="3.2设计接口和抽象方法"></a>3.2设计接口和抽象方法</h4><p>在DistrictMapper接口定义findNameByCode方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">String <span class="hljs-title function_">findNameByCode</span><span class="hljs-params">(String code)</span>;<br></code></pre></td></tr></table></figure><h4 id="3-3编写映射-1"><a href="#3-3编写映射-1" class="headerlink" title="3.3编写映射"></a>3.3编写映射</h4><p>在DistrictMapper.xml文件中添加findNameByCode方法的映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findNameByCode&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span>&gt;</span><br>    select name from t_dict_district where code=#&#123;code&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-4单元测试-1"><a href="#3-4单元测试-1" class="headerlink" title="3.4单元测试"></a>3.4单元测试</h4><p>在DistrictMapperTests编写测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findNameByCode</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> districtMapper.findNameByCode(<span class="hljs-string">&quot;610000&quot;</span>);<br>    System.out.println(name);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-获取省市区名称-业务层"><a href="#2-获取省市区名称-业务层" class="headerlink" title="2.获取省市区名称-业务层"></a>2.获取省市区名称-业务层</h3><h4 id="2-1规划异常-1"><a href="#2-1规划异常-1" class="headerlink" title="2.1规划异常"></a>2.1规划异常</h4><p>没有异常需要处理</p><h4 id="2-2设计接口和抽象方法及实现-1"><a href="#2-2设计接口和抽象方法及实现-1" class="headerlink" title="2.2设计接口和抽象方法及实现"></a>2.2设计接口和抽象方法及实现</h4><p>1.在IDistrictService接口定义对应的业务层接口中的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">String <span class="hljs-title function_">getNameByCode</span><span class="hljs-params">(String code)</span>;<br></code></pre></td></tr></table></figure><p>2.在DistrictServiceImpl实现此方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getNameByCode</span><span class="hljs-params">(String code)</span> &#123;<br>    <span class="hljs-keyword">return</span> districtMapper.findNameByCode(code);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-3单元测试-1"><a href="#2-3单元测试-1" class="headerlink" title="2.3单元测试"></a>2.3单元测试</h4><p>业务层只是调用持久层对应的方法然后返回,没有什么额外的实现,可以不用测试(一般超过8行的代码都要进行测试)</p><h3 id="3-获取省市区名称-控制层"><a href="#3-获取省市区名称-控制层" class="headerlink" title="3.获取省市区名称-控制层"></a>3.获取省市区名称-控制层</h3><p>实际开发中在获取省市区名称时并不需要前端传控制层,然后传业务层,再传持久层,而是在新增收货地址的业务层需要获取省市区名称,也就是说获取省市区名称的模块不需要控制层,只是需要被新增收货地址的业务层所依赖</p><h3 id="4-获取省市区名称-业务层优化"><a href="#4-获取省市区名称-业务层优化" class="headerlink" title="4.获取省市区名称-业务层优化"></a>4.获取省市区名称-业务层优化</h3><p>1.<strong>在新增收货地址的业务层需要对address进行封装,使其存有所有数据,然后将address传给持久层(记住,持久层只会根据传过来的参数调用某个方法与数据库交互,永远不会有额外的实现),而此时新增收货地址的业务层并没有省市区的数据,所以需要依赖于获取省市区列表的业务层对应的接口中的getNameByCode方法</strong></p><p>所以需要在业务层实现类AddressServiceImpl中加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> IDistrictService districtService;<br></code></pre></td></tr></table></figure><p>2.在AddressServiceImpl的方法中将DistrictService接口中获取到的省市区数据封装到address对象,此时address就包含了所有用户收货地址的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 对address对象中的数据进行补全:省市区的名字看前端代码发现前端传递过来的省市区的name分别为:</span><br><span class="hljs-comment">* provinceCode,cityCode,areaCode,所以这里可以用address对象的get方法获取这三个的数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">String</span> <span class="hljs-variable">provinceName</span> <span class="hljs-operator">=</span> districtService.getNameByCode(address.getProvinceCode());<br><span class="hljs-type">String</span> <span class="hljs-variable">cityName</span> <span class="hljs-operator">=</span> districtService.getNameByCode(address.getCityCode());<br><span class="hljs-type">String</span> <span class="hljs-variable">areaName</span> <span class="hljs-operator">=</span> districtService.getNameByCode(address.getAreaCode());<br>address.setProvinceName(provinceName);<br>address.setCityName(cityName);<br>address.setAreaName(areaName);<br></code></pre></td></tr></table></figure><h3 id="5-获取省市区名称-前端页面"><a href="#5-获取省市区名称-前端页面" class="headerlink" title="5.获取省市区名称-前端页面"></a>5.获取省市区名称-前端页面</h3><p><strong>在addAddress.html页面中来编写对应的省市区展示及根据用户的不同选择来限制对应的标签中的内容</strong></p><p>分析:</p><ul><li>在加载该页面时三个下拉列表的内容都显示为”—–请选择—–”</li><li>没有选择市时如果点击区的下拉列表则列表中只有一个”—–请选择—–”</li><li>加载该页面时需要自动发送一个请求把parent&#x3D;86发送出去,然后将返回的省&#x2F;直辖市填充到select标签中</li><li>点击四川省后发送请求获取其下的市,并且将获取到的市罗列在市区域下拉列表中</li><li>省点击”—–请选择—–“则需要把市,县内容填充为”—–请选择—–”终止请求而不是程序继续跑下去</li><li>切换省份时,市,县内容更换为”—–请选择—–”</li></ul><p>在addAddress.html中编写js代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**因为清空后下拉列表的select标签没有option标签,所以需要设置一个默认的option标</span><br><span class="hljs-comment"> * 签并给市,县加上该标签.option标签并不会把内容发送到后端,而是将value值发</span><br><span class="hljs-comment"> * 送给后端,所以用value表示当前这个区域的code值</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-keyword">var</span> defaultOption=<span class="hljs-string">&quot;&lt;option value=&#x27;0&#x27;&gt;-----请选择-----&lt;/option&gt;&quot;</span>;<br>$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">//加载省的数据罗列时代码量较多,建议定义在外部方法中,然后在这里调用定义的方法</span><br>    <span class="hljs-title function_">showProvinceList</span>();<br><br>    <span class="hljs-comment">//将省,市,县的下拉列表内容设为&quot;-----请选择-----&quot;</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * select标签默认获取第一个option的内容填充到下拉列表中,所以即使加载</span><br><span class="hljs-comment">     * 页面时省区域的下拉列表中已经有了所有省但仍然会显示-----请选择-----</span><br><span class="hljs-comment">     * */</span><br>    $(<span class="hljs-string">&quot;#province-list&quot;</span>).<span class="hljs-title function_">append</span>(defaultOption);<br><br>    $(<span class="hljs-string">&quot;#city-list&quot;</span>).<span class="hljs-title function_">append</span>(defaultOption);<br>    $(<span class="hljs-string">&quot;#area-list&quot;</span>).<span class="hljs-title function_">append</span>(defaultOption);<br>&#125;);<br><br><span class="hljs-comment">//省的下拉列表数据展示</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">showProvinceList</span>(<span class="hljs-params"></span>) &#123;<br>    $.<span class="hljs-title function_">ajax</span>(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/districts&quot;</span>,<span class="hljs-comment">//发送请求用于获取所有省对象</span><br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>        <span class="hljs-attr">data</span>: <span class="hljs-string">&quot;parent=86&quot;</span>,<br>        <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;JSON&quot;</span>,<br>        <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">json</span>) &#123;<br>            <span class="hljs-keyword">if</span> (json.<span class="hljs-property">state</span> == <span class="hljs-number">200</span>) &#123;<br>                <span class="hljs-keyword">var</span> list = json.<span class="hljs-property">data</span>;<span class="hljs-comment">//获取所有省对象的List集合</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; list.<span class="hljs-property">length</span>; i++) &#123;<br>                    <span class="hljs-keyword">var</span> opt =<br>                        <span class="hljs-string">&quot;&lt;option value=&#x27;&quot;</span>+list[i].<span class="hljs-property">code</span>+<span class="hljs-string">&quot;&#x27;&gt;&quot;</span>+list[i].<span class="hljs-property">name</span>+<span class="hljs-string">&quot;&lt;/option&gt;&quot;</span>;<br>                    $(<span class="hljs-string">&quot;#province-list&quot;</span>).<span class="hljs-title function_">append</span>(opt);<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                &lt;!--这个其实永远不会执行,因为没有编写<br>                异常,控制层返回的状态码永远是<span class="hljs-variable constant_">OK</span>--&gt;<br>                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;省/直辖区的信息加载失败&quot;</span>)<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//这里没有写属性error,不知道为啥不用写,感觉写了更好</span><br>    &#125;);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * change()函数用于监听某个控件是否发生改变,一旦发生改变就</span><br><span class="hljs-comment"> * 会触发参数形式的函数,所以参数需要是function()&#123;&#125;</span><br><span class="hljs-comment"> * */</span><br>$(<span class="hljs-string">&quot;#province-list&quot;</span>).<span class="hljs-title function_">change</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">//先获取到省区域父代码号</span><br>    <span class="hljs-keyword">var</span> parent = $(<span class="hljs-string">&quot;#province-list&quot;</span>).<span class="hljs-title function_">val</span>();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 如果我选择了河南省洛阳市涧西区,然后又选择了河北省,此时需要</span><br><span class="hljs-comment">     * 将市,县下拉列表的所有option清除并显示内容-----请选择-----</span><br><span class="hljs-comment">     * empty()表示某标签的所有子标签(针对此页面来说select的子标</span><br><span class="hljs-comment">     * 签只有option)</span><br><span class="hljs-comment">     * */</span><br>    $(<span class="hljs-string">&quot;#city-list&quot;</span>).<span class="hljs-title function_">empty</span>();<br>    $(<span class="hljs-string">&quot;#area-list&quot;</span>).<span class="hljs-title function_">empty</span>();<br>    <span class="hljs-comment">//填充默认值:-----请选择-----</span><br>    $(<span class="hljs-string">&quot;#city-list&quot;</span>).<span class="hljs-title function_">append</span>(defaultOption);<br>    $(<span class="hljs-string">&quot;#area-list&quot;</span>).<span class="hljs-title function_">append</span>(defaultOption);<br><br>    <span class="hljs-keyword">if</span> (parent == <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">//如果继续程序,后面的ajax接收的json数据中的data是</span><br>        <span class="hljs-keyword">return</span>;<span class="hljs-comment">//空集合[],进不了for循环,没有任何意义,所以直接在这里终止程序</span><br>    &#125;<br>    $.<span class="hljs-title function_">ajax</span>(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/districts&quot;</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>        <span class="hljs-attr">data</span>: <span class="hljs-string">&quot;parent=&quot;</span>+parent,<br>        <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;JSON&quot;</span>,<br>        <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">json</span>) &#123;<br>            <span class="hljs-keyword">if</span> (json.<span class="hljs-property">state</span> == <span class="hljs-number">200</span>) &#123;<br>                <span class="hljs-keyword">var</span> list = json.<span class="hljs-property">data</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; list.<span class="hljs-property">length</span>; i++) &#123;<br>                    <span class="hljs-keyword">var</span> opt =<br>                        <span class="hljs-string">&quot;&lt;option value=&#x27;&quot;</span>+list[i].<span class="hljs-property">code</span>+<span class="hljs-string">&quot;&#x27;&gt;&quot;</span>+list[i].<span class="hljs-property">name</span>+<span class="hljs-string">&quot;&lt;/option&gt;&quot;</span>;<br>                    $(<span class="hljs-string">&quot;#city-list&quot;</span>).<span class="hljs-title function_">append</span>(opt);<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;市的信息加载失败&quot;</span>)<br>            &#125;<br>        &#125;<br>    &#125;);<br>&#125;);<br><br>$(<span class="hljs-string">&quot;#city-list&quot;</span>).<span class="hljs-title function_">change</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> parent = $(<span class="hljs-string">&quot;#city-list&quot;</span>).<span class="hljs-title function_">val</span>();<br>    $(<span class="hljs-string">&quot;#area-list&quot;</span>).<span class="hljs-title function_">empty</span>();<br>    $(<span class="hljs-string">&quot;#area-list&quot;</span>).<span class="hljs-title function_">append</span>(defaultOption);<br><br>    <span class="hljs-keyword">if</span> (parent == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    $.<span class="hljs-title function_">ajax</span>(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/districts&quot;</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>        <span class="hljs-attr">data</span>: <span class="hljs-string">&quot;parent=&quot;</span>+parent,<br>        <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;JSON&quot;</span>,<br>        <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">json</span>) &#123;<br>            <span class="hljs-keyword">if</span> (json.<span class="hljs-property">state</span> == <span class="hljs-number">200</span>) &#123;<br>                <span class="hljs-keyword">var</span> list = json.<span class="hljs-property">data</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; list.<span class="hljs-property">length</span>; i++) &#123;<br>                    <span class="hljs-keyword">var</span> opt =<br>                        <span class="hljs-string">&quot;&lt;option value=&#x27;&quot;</span>+list[i].<span class="hljs-property">code</span>+<span class="hljs-string">&quot;&#x27;&gt;&quot;</span>+list[i].<span class="hljs-property">name</span>+<span class="hljs-string">&quot;&lt;/option&gt;&quot;</span>;<br>                    $(<span class="hljs-string">&quot;#area-list&quot;</span>).<span class="hljs-title function_">append</span>(opt);<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;县的信息加载失败&quot;</span>)<br>            &#125;<br>        &#125;<br>    &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>电脑商城项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>电脑商城项目02用户注册登录和资料修改</title>
    <link href="/2022/07/22/%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE02%E7%94%A8%E6%88%B7%E6%B3%A8%E5%86%8C%E7%99%BB%E5%BD%95%E5%92%8C%E8%B5%84%E6%96%99%E4%BF%AE%E6%94%B9/"/>
    <url>/2022/07/22/%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE02%E7%94%A8%E6%88%B7%E6%B3%A8%E5%86%8C%E7%99%BB%E5%BD%95%E5%92%8C%E8%B5%84%E6%96%99%E4%BF%AE%E6%94%B9/</url>
    
    <content type="html"><![CDATA[<h2 id="用户注册"><a href="#用户注册" class="headerlink" title="用户注册"></a>用户注册</h2><h3 id="1-用户-创建数据表"><a href="#1-用户-创建数据表" class="headerlink" title="1 用户-创建数据表"></a>1 用户-创建数据表</h3><p>1.使用use命令先选中store数据库。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">USE store;<br></code></pre></td></tr></table></figure><p>2.在store数据库中创建t_user用户数据表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE t_user (<br>uid INT AUTO_INCREMENT COMMENT &#x27;用户id&#x27;,<br>username VARCHAR(20) NOT NULL UNIQUE COMMENT &#x27;用户名&#x27;,<br>password CHAR(32) NOT NULL COMMENT &#x27;密码&#x27;,<br>salt CHAR(36) COMMENT &#x27;盐值&#x27;,<br>phone VARCHAR(20) COMMENT &#x27;电话号码&#x27;,<br>email VARCHAR(30) COMMENT &#x27;电子邮箱&#x27;,<br>gender INT COMMENT &#x27;性别:0-女，1-男&#x27;,<br>avatar VARCHAR(50) COMMENT &#x27;头像&#x27;,<br>is_delete INT COMMENT &#x27;是否删除：0-未删除，1-已删除&#x27;,<br>created_user VARCHAR(20) COMMENT &#x27;日志-创建人&#x27;,<br>created_time DATETIME COMMENT &#x27;日志-创建时间&#x27;,<br>modified_user VARCHAR(20) COMMENT &#x27;日志-最后修改执行人&#x27;,<br>modified_time DATETIME COMMENT &#x27;日志-最后修改时间&#x27;,<br>PRIMARY KEY (uid)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8;<br></code></pre></td></tr></table></figure><h3 id="2-用户-创建实体类"><a href="#2-用户-创建实体类" class="headerlink" title="2 用户-创建实体类"></a>2 用户-创建实体类</h3><p>1.项目中许多实体类都会有日志相关的四个属性，所以在创建实体类之前，应先创建这些实体类的基类，将4个日志属性声明在基类中。在com.cy.store.entity包下创建BaseEntity类，作为实体类的基类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.entity;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/** 实体类的基类 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseEntity</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> String createdUser;<br>    <span class="hljs-keyword">private</span> Date createdTime;<br>    <span class="hljs-keyword">private</span> String modifiedUser;<br>    <span class="hljs-keyword">private</span> Date modifiedTime;<br><br>    <span class="hljs-comment">// Generate: Getter and Setter、toString()</span><br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>因为这个基类的作用就是用于被其它实体类继承的，所以应声明为抽象类。</p></blockquote><p>2.创建com.cy.store.entity.User用户数据的实体类，继承自BaseEntity类，在类中声明与数据表中对应的属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.entity;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.util.Objects;<br><br><span class="hljs-comment">/** 用户数据的实体类 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseEntity</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer uid;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> String salt;<br>    <span class="hljs-keyword">private</span> String phone;<br>    <span class="hljs-keyword">private</span> String email;<br>    <span class="hljs-keyword">private</span> Integer gender;<br>    <span class="hljs-keyword">private</span> String avatar;<br>    <span class="hljs-keyword">private</span> Integer isDelete;<br><br><span class="hljs-comment">// Generate: Getter and Setter、Generate hashCode() and equals()、toString()</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-用户-注册-持久层"><a href="#3-用户-注册-持久层" class="headerlink" title="3 用户-注册-持久层"></a>3 用户-注册-持久层</h3><h4 id="3-1-准备工作"><a href="#3-1-准备工作" class="headerlink" title="3.1 准备工作"></a>3.1 准备工作</h4><p>1.在src&#x2F;test&#x2F;java下的com.cy.store.StoreApplicationTests测试类中编写并执行“获取数据库连接”的单元测试，以检查数据库连接的配置是否正确。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> DataSource dataSource;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>System.out.println(dataSource.getConnection());<br>&#125;<br></code></pre></td></tr></table></figure><p>2.执行src&#x2F;test&#x2F;java下的com.cy.toreApplicationTests测试类中的contextLoads()测试方法，以检查测试环境是否正常。</p><h4 id="3-2-规划需要执行的SQL语句"><a href="#3-2-规划需要执行的SQL语句" class="headerlink" title="3.2 规划需要执行的SQL语句"></a>3.2 规划需要执行的SQL语句</h4><p>1.用户注册的本质是向用户表中插入数据，需要执行的SQL语句大致是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO t_user (除了uid以外的字段列表) VALUES (匹配的值列表)<br></code></pre></td></tr></table></figure><p>2.由于数据表中用户名字段被设计为UNIQUE，在执行插入数据之前，还应该检查该用户名是否已经被注册，因此需要有“根据用户名查询用户数据”的功能。需要执行的SQL语句大致是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT * FROM t_user WHERE username=?<br></code></pre></td></tr></table></figure><h4 id="3-3-接口与抽象方法"><a href="#3-3-接口与抽象方法" class="headerlink" title="3.3 接口与抽象方法"></a>3.3 接口与抽象方法</h4><p>1.创建com.cy.store.mapper.UserMapper接口，并在接口中添加抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.mapper;<br><span class="hljs-keyword">import</span> com.cy.store.entity.User;<br><br><span class="hljs-comment">/** 处理用户数据操作的持久层接口 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 插入用户数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> user 用户数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 受影响的行数</span><br><span class="hljs-comment">     */</span><br>    Integer <span class="hljs-title function_">insert</span><span class="hljs-params">(User user)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据用户名查询用户数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> username 用户名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 匹配的用户数据，如果没有匹配的数据，则返回null</span><br><span class="hljs-comment">     */</span><br>    User <span class="hljs-title function_">findByUsername</span><span class="hljs-params">(String username)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.由于这是项目中第一次创建持久层接口，还应在StoreApplication启动类之前添加@MapperScan(“com.cy.store.mapper”)注解，以配置接口文件的位置。</p><blockquote><p>MyBatis与Spring整合后需要实现实体和数据表的映射关系。实现实体和数据表的映射关系可以在Mapper接口上添加@Mapper注解。但建议以后直接在SpringBoot启动类中加@MapperScan(“mapper包”) 注解，这样会比较方便，不需要对每个Mapper都添加@Mapper注解。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@MapperScan(&quot;com.cy.store.mapper&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StoreApplication</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>SpringApplication.run(StoreApplication.class, args);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-4-配置SQL映射"><a href="#3-4-配置SQL映射" class="headerlink" title="3.4 配置SQL映射"></a>3.4 配置SQL映射</h4><p>1.在src&#x2F;main&#x2F;resources下创建mapper文件夹，并在该文件夹下创建UserMapper.xml映射文件，进行以上两个抽象方法的映射配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.cy.store.mapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;UserEntityMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.cy.store.entity.User&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;uid&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;uid&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;is_delete&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;isDelete&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;created_user&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;createdUser&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;created_time&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;createdTime&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;modified_user&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;modifiedUser&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;modified_time&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;modifiedTime&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 插入用户数据：Integer insert(User user) --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insert&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;uid&quot;</span>&gt;</span><br>        INSERT INTO<br>            t_user (username, password, salt, phone, email, gender, avatar, is_delete, created_user, created_time, modified_user, modified_time)<br>        VALUES<br>        (#&#123;username&#125;, #&#123;password&#125;, #&#123;salt&#125;, #&#123;phone&#125;, #&#123;email&#125;, #&#123;gender&#125;, #&#123;avatar&#125;, #&#123;isDelete&#125;, #&#123;createdUser&#125;, #&#123;createdTime&#125;, #&#123;modifiedUser&#125;, #&#123;modifiedTime&#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 根据用户名查询用户数据：User findByUsername(String username) --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findByUsername&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;UserEntityMap&quot;</span>&gt;</span><br>        SELECT<br>            *<br>        FROM<br>            t_user<br>        WHERE<br>            username = #&#123;username&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.由于这是项目中第一次使用SQL映射，所以需要在application.properties中添加mybatis.mapper-locations属性的配置，以指定XML文件的位置。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">mybatis.mapper-locations</span>=<span class="hljs-string">classpath:mapper/*.xml</span><br></code></pre></td></tr></table></figure><p>3.完成后及时执行单元测试，检查以上开发的功能是否可正确运行。在src&#x2F;test&#x2F;java下创建com.cy.store.mapper.UserMapperTests单元测试类，在测试类的声明之前添加@RunWith(SpringRunner.class)和@SpringBootTest注解，并在测试类中声明持久层对象，通过自动装配来注入值。</p><blockquote><p>@RunWith(SpringRunner.class)注解是一个测试启动器，可以加载SpringBoot测试注解。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.mapper;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><br><span class="hljs-comment">// @RunWith(SpringRunner.class)注解是一个测试启动器，可以加载Springboot测试注解</span><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserMapperTests</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>4.如果在第四步自动装配userMapper时，报“Could not autowire. No beans of ‘UserMapper’ type found”错，无法进行自动装配。解决方案是，将Autowiring for bean class选项下的Severity设置为Warning即可。</p><p><img src="E:\SSM\项目\源码\SpringBoot电脑商城项目-V1.0\unit02-用户注册登录\img\1.png"></p><p>5.然后编写两个测试方法，对以上完成的两个功能进行单元测试。</p><blockquote><p>单元测试方法必须为public修饰，方法的返回值类型必须为void，方法不能有参数列表，并且方法被@Test注解修饰。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    user.setUsername(<span class="hljs-string">&quot;user01&quot;</span>);<br>    user.setPassword(<span class="hljs-string">&quot;123456&quot;</span>);<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> userMapper.insert(user);<br>    System.out.println(<span class="hljs-string">&quot;rows=&quot;</span> + rows);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findByUsername</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;user01&quot;</span>;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> userMapper.findByUsername(username);<br>    System.out.println(result);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>如果出现org.apache.ibatis.binding.BindingException: Invalid bound statement (not found)异常可能原因：</p><p>1.在resources文件加下创建的mapper文件夹类型没有正确选择（eclipse选择Folder，idea选择Directory）。</p><p>2.映射文件的mapper标签的namespace属性没有正确映射到dao层接口，或者application.properties中的属性mybatis.mapper-locations没有正确配置xml映射文件。</p></blockquote><h3 id="4-用户-注册-业务层"><a href="#4-用户-注册-业务层" class="headerlink" title="4 用户-注册-业务层"></a>4 用户-注册-业务层</h3><h4 id="4-1-业务的定位"><a href="#4-1-业务的定位" class="headerlink" title="4.1 业务的定位"></a>4.1 业务的定位</h4><p>1.业务：一套完整的数据处理过程，通常表现为用户认为的一个功能，但是在开发时对应多项数据操作。在项目中，通过业务控制每个“功能”（例如注册、登录等）的处理流程和相关逻辑。</p><p>2.流程：先做什么，再做什么。例如：注册时，需要先判断用户名是否被占用，再决定是否完成注册。</p><p>3.逻辑：能干什么，不能干什么。例如：注册时，如果用户名被占用，则不允许注册；反之，则允许注册。</p><p>4.业务的主要作用是保障数据安全和数据的完整性、有效性。</p><h4 id="4-2-规划异常"><a href="#4-2-规划异常" class="headerlink" title="4.2 规划异常"></a>4.2 规划异常</h4><p><strong>1.关于异常</strong></p><p>1.请列举你认识的不少于十种异常：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-built_in">Throwable</span><br><span class="hljs-built_in">Error</span><br><span class="hljs-title function_ invoke__">OutOfMemoryError</span>(OOM)<br><span class="hljs-built_in">Exception</span><br>SQLException<br>IOException<br>FileNotFoundException<br><span class="hljs-built_in">RuntimeException</span><br>NullPointerException<br>ArithmeticException<br>ClassCastException<br>IndexOutOfBoundsException<br>ArrayIndexOutOfBoundsException<br>StringIndexOutOfBoundsException<br></code></pre></td></tr></table></figure><p>2.异常的处理方式和处理原则：</p><p>异常的处理方式有：捕获处理(try…catch…finally)，声明抛出(throw&#x2F;throws)。如果当前方法适合处理，则捕获处理；如果当前方法不适合处理，则声明抛出。</p><p><strong>2.异常规划</strong></p><p>1.为了便于统一管理自定义异常，应先创建com.cy.store.service.ex.ServiceException自定义异常的基类异常，继承自RuntimeException类，并从父类生成子类的五个构造方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.service.ex;<br><br><span class="hljs-comment">/** 业务异常的基类 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServiceException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RuntimeException</span> &#123;<br><span class="hljs-comment">// Override Methods...  </span><br>&#125;<br></code></pre></td></tr></table></figure><p>2.当用户进行注册时，可能会因为用户名被占用而导致无法正常注册，此时需要抛出用户名被占用的异常，因此可以设计一个用户名重复的com.cy.store.service.ex.UsernameDuplicateException异常类，继承自ServiceException类，并从父类生成子类的五个构造方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.service.ex;<br><br><span class="hljs-comment">/** 用户名重复的异常 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UsernameDuplicateException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceException</span> &#123;<br>    <span class="hljs-comment">// Override Methods...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>3.在用户进行注册时，会执行数据库的INSERT操作，该操作也是有可能失败的。则创建cn.tedu.store.service.ex.InsertException&#96;异常类，继承自ServiceException类，并从父类生成子类的5个构造方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.service.ex;<br><br><span class="hljs-comment">/** 插入数据的异常 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InsertException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceException</span> &#123;<br>    <span class="hljs-comment">// Override Methods...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>4.所有的自定义异常，都应是RuntimeException的子孙类异常。项目中目前异常的继承结构是见下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">RuntimeException<br>-- ServiceException<br>-- UsernameDuplicateException<br>-- InsertException<br></code></pre></td></tr></table></figure><h4 id="4-3-接口与抽象方法"><a href="#4-3-接口与抽象方法" class="headerlink" title="4.3 接口与抽象方法"></a>4.3 接口与抽象方法</h4><p>1.先创建com.cy.store.service.IUserService业务层接口，并在接口中添加抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.service;<br><span class="hljs-keyword">import</span> com.cy.store.entity.User;<br><br><span class="hljs-comment">/** 处理用户数据的业务层接口 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IUserService</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户注册</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> user 用户数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">reg</span><span class="hljs-params">(User user)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.创建业务层接口目的是为了解耦。关于业务层的抽象方法的设计原则。</p><pre><code class="hljs">1.仅以操作成功为前提来设计返回值类型，不考虑操作失败的情况；2.方法名称可以自定义，通常与用户操作的功能相关；3.方法的参数列表根据执行的具体业务功能来确定，需要哪些数据就设计哪些数据。通常情况下，参数需要足以调用持久层对应的相关功能；同时还要满足参数是客户端可以传递给控制器的；4.方法中使用抛出异常的方式来表示操作失败。</code></pre><h4 id="4-4-实现抽象方法"><a href="#4-4-实现抽象方法" class="headerlink" title="4.4 实现抽象方法"></a>4.4 实现抽象方法</h4><p>1.创建com.cy.store.service.impl.UserServiceImpl业务层实现类，并实现IUserService接口。在类之前添加@Service注解，并在类中添加持久层UserMapper对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.service.impl;<br><span class="hljs-keyword">import</span> com.cy.store.entity.User;<br><span class="hljs-keyword">import</span> com.cy.store.mapper.UserMapper;<br><span class="hljs-keyword">import</span> com.cy.store.service.IUserService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-comment">/** 处理用户数据的业务层实现类 */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IUserService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reg</span><span class="hljs-params">(User user)</span> &#123;<br>        <span class="hljs-comment">// TODO</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.UserServiceImpl类需要重写IUserService接口中的抽象方法，实现步骤大致是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reg</span><span class="hljs-params">(User user)</span> &#123;<br><span class="hljs-comment">// 根据参数user对象获取注册的用户名</span><br><span class="hljs-comment">// 调用持久层的User findByUsername(String username)方法，根据用户名查询用户数据</span><br><span class="hljs-comment">// 判断查询结果是否不为null</span><br><span class="hljs-comment">// 是：表示用户名已被占用，则抛出UsernameDuplicateException异常</span><br><br><span class="hljs-comment">// 创建当前时间对象</span><br><span class="hljs-comment">// 补全数据：加密后的密码</span><br><span class="hljs-comment">// 补全数据：盐值</span><br><span class="hljs-comment">// 补全数据：isDelete(0)</span><br><span class="hljs-comment">// 补全数据：4项日志属性</span><br><br><span class="hljs-comment">// 表示用户名没有被占用，则允许注册</span><br><span class="hljs-comment">// 调用持久层Integer insert(User user)方法，执行注册并获取返回值(受影响的行数)</span><br><span class="hljs-comment">// 判断受影响的行数是否不为1</span><br><span class="hljs-comment">// 是：插入数据时出现某种错误，则抛出InsertException异常</span><br><br>&#125;<br></code></pre></td></tr></table></figure><p>3.reg()方法的具体实现过程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IUserService</span> &#123;<br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> UserMapper userMapper;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reg</span><span class="hljs-params">(User user)</span> &#123;<br><span class="hljs-comment">// 根据参数user对象获取注册的用户名</span><br><span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> user.getUsername();<br><span class="hljs-comment">// 调用持久层的User findByUsername(String username)方法，根据用户名查询用户数据</span><br><span class="hljs-type">User</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> userMapper.findByUsername(username);<br><span class="hljs-comment">// 判断查询结果是否不为null</span><br><span class="hljs-keyword">if</span> (result != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-comment">// 是：表示用户名已被占用，则抛出UsernameDuplicateException异常</span><br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernameDuplicateException</span>(<span class="hljs-string">&quot;尝试注册的用户名[&quot;</span> + username + <span class="hljs-string">&quot;]已经被占用&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// 创建当前时间对象</span><br><span class="hljs-type">Date</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><span class="hljs-comment">// 补全数据：加密后的密码</span><br><span class="hljs-type">String</span> <span class="hljs-variable">salt</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString().toUpperCase();<br><span class="hljs-type">String</span> <span class="hljs-variable">md5Password</span> <span class="hljs-operator">=</span> getMd5Password(user.getPassword(), salt);<br>user.setPassword(md5Password);<br><span class="hljs-comment">// 补全数据：盐值</span><br>user.setSalt(salt);<br><span class="hljs-comment">// 补全数据：isDelete(0)</span><br>user.setIsDelete(<span class="hljs-number">0</span>);<br><span class="hljs-comment">// 补全数据：4项日志属性</span><br>user.setCreatedUser(username);<br>user.setCreatedTime(now);<br>user.setModifiedUser(username);<br>user.setModifiedTime(now);<br><br><span class="hljs-comment">// 表示用户名没有被占用，则允许注册</span><br><span class="hljs-comment">// 调用持久层Integer insert(User user)方法，执行注册并获取返回值(受影响的行数)</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> userMapper.insert(user);<br><span class="hljs-comment">// 判断受影响的行数是否不为1</span><br><span class="hljs-keyword">if</span> (rows != <span class="hljs-number">1</span>) &#123;<br><span class="hljs-comment">// 是：插入数据时出现某种错误，则抛出InsertException异常</span><br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InsertException</span>(<span class="hljs-string">&quot;添加用户数据出现未知错误，请联系系统管理员&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 执行密码加密</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> password 原始密码</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> salt 盐值</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 加密后的密文</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> String <span class="hljs-title function_">getMd5Password</span><span class="hljs-params">(String password, String salt)</span> &#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 加密规则：</span><br><span class="hljs-comment"> * 1、无视原始密码的强度</span><br><span class="hljs-comment"> * 2、使用UUID作为盐值，在原始密码的左右两侧拼接</span><br><span class="hljs-comment"> * 3、循环加密3次</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>password = DigestUtils.md5DigestAsHex((salt + password + salt).getBytes()).toUpperCase();<br>&#125;<br><span class="hljs-keyword">return</span> password;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.完成后在src&#x2F;test&#x2F;java下创建com.cy.store.service.UserServiceTests测试类，编写并执行用户注册业务层的单元测试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceTests</span> &#123;<br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> IUserService iUserService;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reg</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>user.setUsername(<span class="hljs-string">&quot;lower&quot;</span>);<br>user.setPassword(<span class="hljs-string">&quot;123456&quot;</span>);<br>user.setGender(<span class="hljs-number">1</span>);<br>user.setPhone(<span class="hljs-string">&quot;17858802974&quot;</span>);<br>user.setEmail(<span class="hljs-string">&quot;lower@tedu.cn&quot;</span>);<br>user.setAvatar(<span class="hljs-string">&quot;xxxx&quot;</span>);<br>iUserService.reg(user);<br>System.out.println(<span class="hljs-string">&quot;注册成功！&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (ServiceException e) &#123;<br>System.out.println(<span class="hljs-string">&quot;注册失败！&quot;</span> + e.getClass().getSimpleName());<br>            System.out.println(e.getMessage());<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-5-密码加密介绍"><a href="#4-5-密码加密介绍" class="headerlink" title="4.5 密码加密介绍"></a>4.5 密码加密介绍</h4><p>密码加密可以有效的防止数据泄密后带来的账号安全问题。通常，程序员不需要考虑加密过程中使用的算法，因为已经存在非常多成熟的加密算法可以直接使用。但是所有的加密算法都不适用于对密码进行加密，因为加密算法都是可以进行逆向运算的。即：如果能够获取加密过程中所有的参数，就可以根据密文得到原文。</p><p>对密码进行加密时，需使用消息摘要算法。消息摘要算法的特点是：</p><pre><code class="hljs">1.原文相同时，使用相同的摘要算法得到的摘要数据一定相同；2.使用相同的摘要算法进行运算，无论原文的长度是多少，得到的摘要数据长度是固定的；3.如果摘要数据相同，则原文几乎相同，但也可能不同，可能性极低。</code></pre><p>不同的原文，在一定的概率上能够得到相同的摘要数据，发生这种现象时称为碰撞。</p><p>以MD5算法为例，运算得到的结果是128位的二进制数。在密码的应用领域中，通常会限制密码长度的最小值和最大值，可是密码的种类是有限的，发生碰撞在概率上可以认为是不存在的。</p><p>常见的摘要算法有SHA(Secure Hash Argorithm)家族和MD(Message Digest)系列的算法。</p><p>关于MD5算法的破解主要来自两方面。一个是王小云教授的破解，学术上的破解其实是研究消息摘要算法的碰撞，也就是更快的找到两个不同的原文却对应相同的摘要，并不是假想中的“根据密文逆向运算得到原文”。另一个是所谓的“在线破解”，是使用数据库记录大量的原文与摘要的对应关系，当尝试“破解”时本质上是查询这个数据库，根据摘要查询原文。</p><p>为进一步保障密码安全，需满足以下加密规则：</p><pre><code class="hljs">1.要求用户使用安全强度更高的原始密码；2.加盐；3.多重加密；4.综合以上所有应用方式。</code></pre><h3 id="5-用户-注册-控制器"><a href="#5-用户-注册-控制器" class="headerlink" title="5 用户-注册-控制器"></a>5 用户-注册-控制器</h3><h4 id="5-1-创建响应结果类"><a href="#5-1-创建响应结果类" class="headerlink" title="5.1 创建响应结果类"></a>5.1 创建响应结果类</h4><p>创建com.cy.store.util.JsonResult响应结果类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.util;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 响应结果类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;E&gt; 响应数据的类型</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JsonResult</span>&lt;E&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-comment">/** 状态码 */</span><br>    <span class="hljs-keyword">private</span> Integer state;<br>    <span class="hljs-comment">/** 状态描述信息 */</span><br>    <span class="hljs-keyword">private</span> String message;<br>    <span class="hljs-comment">/** 数据 */</span><br>    <span class="hljs-keyword">private</span> E data;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">JsonResult</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">JsonResult</span><span class="hljs-params">(Integer state)</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>        <span class="hljs-built_in">this</span>.state = state;<br>    &#125;<br><br>    <span class="hljs-comment">/** 出现异常时调用 */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">JsonResult</span><span class="hljs-params">(Throwable e)</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>        <span class="hljs-comment">// 获取异常对象中的异常信息</span><br>        <span class="hljs-built_in">this</span>.message = e.getMessage();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">JsonResult</span><span class="hljs-params">(Integer state, E data)</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>        <span class="hljs-built_in">this</span>.state = state;<br>        <span class="hljs-built_in">this</span>.data = data;<br>    &#125;<br><br>    <span class="hljs-comment">// Generate: Getter and Setter</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-2-设计请求"><a href="#5-2-设计请求" class="headerlink" title="5.2 设计请求"></a>5.2 设计请求</h4><p>设计用户提交的请求，并设计响应的方式：</p><pre><code class="hljs">请求路径：/users/reg请求参数：User user请求类型：POST响应结果：JsonResult&lt;Void&gt;</code></pre><h4 id="5-3-处理请求"><a href="#5-3-处理请求" class="headerlink" title="5.3 处理请求"></a>5.3 处理请求</h4><p>1.创建com.cy.store.controller.UserController控制器类，在类的声明之前添加@RestController和@RequestMapping(“users”)注解，在类中添加IUserService业务对象并使用@Autowired注解修饰。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.controller;<br><span class="hljs-keyword">import</span> com.cy.store.service.IUserService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-comment">/** 处理用户相关请求的控制器类 */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;users&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IUserService userService;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.然后在类中添加处理请求的用户注册方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;reg&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult&lt;Void&gt; <span class="hljs-title function_">reg</span><span class="hljs-params">(User user)</span> &#123;<br>    <span class="hljs-comment">// 创建返回值</span><br>    JsonResult&lt;Void&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonResult</span>&lt;Void&gt;();<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 调用业务对象执行注册</span><br>        userService.reg(user);<br>        <span class="hljs-comment">// 响应成功</span><br>        result.setState(<span class="hljs-number">200</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (UsernameDuplicateException e) &#123;<br>        <span class="hljs-comment">// 用户名被占用</span><br>        result.setState(<span class="hljs-number">4000</span>);<br>        result.setMessage(<span class="hljs-string">&quot;用户名已经被占用&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (InsertException e) &#123;<br>        <span class="hljs-comment">// 插入数据异常</span><br>        result.setState(<span class="hljs-number">5000</span>);<br>        result.setMessage(<span class="hljs-string">&quot;注册失败，请联系系统管理员&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.完成后启动项目，打开浏览器访问<a href="http://localhost:8080/users/reg?username=controller&amp;password=123456%E8%AF%B7%E6%B1%82%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95%E3%80%82">http://localhost:8080/users/reg?username=controller&amp;password=123456请求进行测试。</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    state<span class="hljs-punctuation">:</span> <span class="hljs-number">200</span><span class="hljs-punctuation">,</span><br>    message<span class="hljs-punctuation">:</span> <span class="hljs-keyword">null</span><span class="hljs-punctuation">,</span><br>    data<span class="hljs-punctuation">:</span> <span class="hljs-keyword">null</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="5-4-控制器层的调整"><a href="#5-4-控制器层的调整" class="headerlink" title="5.4 控制器层的调整"></a>5.4 控制器层的调整</h4><p>1.然后创建提供控制器类的基类com.cy.store.controller.BaseController，在其中定义表示响应成功的状态码及统一处理异常的方法。</p><blockquote><p>@ExceptionHandler注解用于统一处理方法抛出的异常。当我们使用这个注解时，需要定义一个异常的处理方法，再给这个方法加上@ExceptionHandler注解，这个方法就会处理类中其他方法（被@RequestMapping注解）抛出的异常。@ExceptionHandler注解中可以添加参数，参数是某个异常类的class，代表这个方法专门处理该类异常。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.controller;<br><span class="hljs-keyword">import</span> com.cy.store.service.ex.InsertException;<br><span class="hljs-keyword">import</span> com.cy.store.service.ex.ServiceException;<br><span class="hljs-keyword">import</span> com.cy.store.service.ex.UsernameDuplicateException;<br><span class="hljs-keyword">import</span> com.cy.store.util.JsonResult;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;<br><br><span class="hljs-comment">/** 控制器类的基类 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseController</span> &#123;<br>    <span class="hljs-comment">/** 操作成功的状态码 */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">OK</span> <span class="hljs-operator">=</span> <span class="hljs-number">200</span>;<br><br>    <span class="hljs-comment">/** <span class="hljs-doctag">@ExceptionHandler</span>用于统一处理方法抛出的异常 */</span><br>    <span class="hljs-meta">@ExceptionHandler(ServiceException.class)</span><br>    <span class="hljs-keyword">public</span> JsonResult&lt;Void&gt; <span class="hljs-title function_">handleException</span><span class="hljs-params">(Throwable e)</span> &#123;<br>        JsonResult&lt;Void&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonResult</span>&lt;Void&gt;(e);<br>        <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> UsernameDuplicateException) &#123;<br>            result.setState(<span class="hljs-number">4000</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> InsertException) &#123;<br>            result.setState(<span class="hljs-number">5000</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.最后简化UserController控制器类中的用户注册reg()方法的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** 处理用户相关请求的控制器类 */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;users&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IUserService userService;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;reg&quot;)</span><br>    <span class="hljs-keyword">public</span> JsonResult&lt;Void&gt; <span class="hljs-title function_">reg</span><span class="hljs-params">(User user)</span> &#123;<br>        <span class="hljs-comment">// 调用业务对象执行注册</span><br>        userService.reg(user);<br>        <span class="hljs-comment">// 返回</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonResult</span>&lt;Void&gt;(OK);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.完成后启动项目，打开浏览器访问<a href="http://localhost:8080/users/reg?username=controller&amp;password=123456%E8%AF%B7%E6%B1%82%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95%E3%80%82">http://localhost:8080/users/reg?username=controller&amp;password=123456请求进行测试。</a></p><h3 id="6-用户-注册-前端页面"><a href="#6-用户-注册-前端页面" class="headerlink" title="6 用户-注册-前端页面"></a>6 用户-注册-前端页面</h3><p>1.将电脑商城前端资源页面pages文件夹下的静态资源：bootstrap3、css、images、js、web、index.html相关的资源复制到项目src&#x2F;main&#x2F;resources&#x2F;static文件夹下。如图所示。</p><p><img src="E:\SSM\项目\源码\SpringBoot电脑商城项目-V1.0\unit02-用户注册登录\img\2.png"></p><p>2.在register.html页面中body标签内部的最后，添加script标签用于编写JavaScript程序。请求的url中需要添加项目的访问名称。</p><blockquote><p>serialize()方法通过序列化表单值，创建URL编码文本字符串。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>    $(<span class="hljs-string">&quot;#btn-reg&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&quot;#form-reg&quot;</span>).<span class="hljs-title function_">serialize</span>());<br>        $.<span class="hljs-title function_">ajax</span>(&#123;<br>            <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/users/reg&quot;</span>,<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>            <span class="hljs-attr">data</span>: $(<span class="hljs-string">&quot;#form-reg&quot;</span>).<span class="hljs-title function_">serialize</span>(),<br>            <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;json&quot;</span>,<br>            <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">json</span>) &#123;<br>                <span class="hljs-keyword">if</span> (json.<span class="hljs-property">state</span> == <span class="hljs-number">200</span>) &#123;<br>                    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;注册成功！&quot;</span>);<br>                    <span class="hljs-comment">// location.href = &quot;login.html&quot;;</span><br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;注册失败！&quot;</span> + json.<span class="hljs-property">message</span>);<br>                &#125;<br>            &#125;<br>        &#125;);<br>&#125;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>3.完成后启动项目，打开浏览器访问<a href="http://localhost:8080/web/register.html%E9%A1%B5%E9%9D%A2%E5%B9%B6%E8%BF%9B%E8%A1%8C%E6%B3%A8%E5%86%8C%E3%80%82">http://localhost:8080/web/register.html页面并进行注册。</a></p><blockquote><p>注意：由于没有验证数据，即使没有填写用户名或密码，也可以注册成功。</p></blockquote><h2 id="用户登录"><a href="#用户登录" class="headerlink" title="用户登录"></a>用户登录</h2><h3 id="1-用户-登录-持久层"><a href="#1-用户-登录-持久层" class="headerlink" title="1 用户-登录-持久层"></a>1 用户-登录-持久层</h3><h4 id="1-1-规划需要执行的SQL语句"><a href="#1-1-规划需要执行的SQL语句" class="headerlink" title="1.1 规划需要执行的SQL语句"></a>1.1 规划需要执行的SQL语句</h4><p>用户登录功能需要执行的SQL语句是根据用户名查询用户数据，再判断密码是否正确。SQL语句大致是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT * FROM t_user WHERE username=?<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：以上SQL语句对应的后台开发已经完成，无需再次开发。</p></blockquote><h4 id="1-2-接口与抽象方法"><a href="#1-2-接口与抽象方法" class="headerlink" title="1.2 接口与抽象方法"></a>1.2 接口与抽象方法</h4><blockquote><p><strong>说明</strong>：无需再次开发。</p></blockquote><h4 id="1-3-配置SQL映射"><a href="#1-3-配置SQL映射" class="headerlink" title="1.3 配置SQL映射"></a>1.3 配置SQL映射</h4><blockquote><p><strong>说明</strong>：无需再次开发。</p></blockquote><h3 id="2-用户-登录-业务层"><a href="#2-用户-登录-业务层" class="headerlink" title="2 用户-登录-业务层"></a>2 用户-登录-业务层</h3><h4 id="2-1-规划异常"><a href="#2-1-规划异常" class="headerlink" title="2.1 规划异常"></a>2.1 规划异常</h4><p>1.如果用户名不存在则登录失败，抛出com.cy.store.service.ex.UserNotFoundException异常，并从父类生成子类的五个构造方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.service.ex;<br><br><span class="hljs-comment">/** 用户数据不存在的异常 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserNotFoundException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceException</span> &#123;<br>    <span class="hljs-comment">// Override Methods...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>2.如果用户的isDelete字段的值为1，则表示当前用户数据被标记为“已删除”，需进行登录失败操作同时抛出UserNotFoundException。</p><p>3.如果密码错误则进行登录失败操作，同时抛出com.cy.store.service.ex.PasswordNotMatchException异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.service.ex;<br><br><span class="hljs-comment">/** 密码验证失败的异常 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PasswordNotMatchException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceException</span> &#123;<br>    <span class="hljs-comment">// Override Methods...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>4.创建以上UserNotFoundException和PasswordNotMatchException异常类，以上异常类应继承自ServiceException类。</p><h4 id="2-2-接口与抽象方法"><a href="#2-2-接口与抽象方法" class="headerlink" title="2.2 接口与抽象方法"></a>2.2 接口与抽象方法</h4><p>在IUserService接口中添加登录功能的抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用户登录</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> username 用户名</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> password 密码</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 登录成功的用户数据</span><br><span class="hljs-comment"> */</span><br>User <span class="hljs-title function_">login</span><span class="hljs-params">(String username, String password)</span>;<br></code></pre></td></tr></table></figure><blockquote><p>当登录成功后需要获取该用户的id，以便于后续识别该用户的身份，并且还需要获取该用户的用户名、头像等数据，用于显示在软件的界面中，需使用可以封装用于id、用户名和头像的数据的类型来作为登录方法的返回值类型。</p></blockquote><h4 id="2-3-实现抽象方法"><a href="#2-3-实现抽象方法" class="headerlink" title="2.3 实现抽象方法"></a>2.3 实现抽象方法</h4><p>1.在UserServiceImpl类中添加login(String username, String password)方法并分析业务逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">login</span><span class="hljs-params">(String username, String password)</span> &#123;<br><span class="hljs-comment">// 调用userMapper的findByUsername()方法，根据参数username查询用户数据</span><br><br><span class="hljs-comment">// 判断查询结果是否为null</span><br><span class="hljs-comment">// 是：抛出UserNotFoundException异常</span><br><br><span class="hljs-comment">// 判断查询结果中的isDelete是否为1</span><br><span class="hljs-comment">// 是：抛出UserNotFoundException异常</span><br><br><span class="hljs-comment">// 从查询结果中获取盐值</span><br><span class="hljs-comment">// 调用getMd5Password()方法，将参数password和salt结合起来进行加密</span><br><span class="hljs-comment">// 判断查询结果中的密码，与以上加密得到的密码是否不一致</span><br><span class="hljs-comment">// 是：抛出PasswordNotMatchException异常</span><br><br><span class="hljs-comment">// 创建新的User对象</span><br><span class="hljs-comment">// 将查询结果中的uid、username、avatar封装到新的user对象中</span><br><span class="hljs-comment">// 返回新的user对象</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.login(String username, String password)方法中代码的具体实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">login</span><span class="hljs-params">(String username, String password)</span> &#123;<br>    <span class="hljs-comment">// 调用userMapper的findByUsername()方法，根据参数username查询用户数据</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> userMapper.findByUsername(username);<br>    <span class="hljs-comment">// 判断查询结果是否为null</span><br>    <span class="hljs-keyword">if</span> (result == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 是：抛出UserNotFoundException异常</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserNotFoundException</span>(<span class="hljs-string">&quot;用户数据不存在的错误&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 判断查询结果中的isDelete是否为1</span><br>    <span class="hljs-keyword">if</span> (result.getIsDelete() == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">// 是：抛出UserNotFoundException异常</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserNotFoundException</span>(<span class="hljs-string">&quot;用户数据不存在的错误&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 从查询结果中获取盐值</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">salt</span> <span class="hljs-operator">=</span> result.getSalt();<br>    <span class="hljs-comment">// 调用getMd5Password()方法，将参数password和salt结合起来进行加密</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">md5Password</span> <span class="hljs-operator">=</span> getMd5Password(password, salt);<br>    <span class="hljs-comment">// 判断查询结果中的密码，与以上加密得到的密码是否不一致</span><br>    <span class="hljs-keyword">if</span> (!result.getPassword().equals(md5Password)) &#123;<br>        <span class="hljs-comment">// 是：抛出PasswordNotMatchException异常</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PasswordNotMatchException</span>(<span class="hljs-string">&quot;密码验证失败的错误&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 创建新的User对象</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    <span class="hljs-comment">// 将查询结果中的uid、username、avatar封装到新的user对象中</span><br>    user.setUid(result.getUid());<br>    user.setUsername(result.getUsername());<br>    user.setAvatar(result.getAvatar());<br>    <span class="hljs-comment">// 返回新的user对象</span><br>    <span class="hljs-keyword">return</span> user;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.完成后在UserServiceTests中编写并完成单元测试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">login</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;lower&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123456&quot;</span>;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> iUserService.login(username, password);<br>        System.out.println(<span class="hljs-string">&quot;登录成功！&quot;</span> + user);<br>    &#125; <span class="hljs-keyword">catch</span> (ServiceException e) &#123;<br>        System.out.println(<span class="hljs-string">&quot;登录失败！&quot;</span> + e.getClass().getSimpleName());<br>        System.out.println(e.getMessage());<br>    &#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：不要使用错误的数据尝试登录，例如早期通过持久层测试新增用户的数据，将这些数据从表中删除。</p></blockquote><h3 id="3-用户-登录-控制器"><a href="#3-用户-登录-控制器" class="headerlink" title="3 用户-登录-控制器"></a>3 用户-登录-控制器</h3><h4 id="3-1-处理异常"><a href="#3-1-处理异常" class="headerlink" title="3.1 处理异常"></a>3.1 处理异常</h4><p>处理用户登录功能时，在业务层抛出了UserNotFoundException和PasswordNotMatchException异常，而这两个异常均未被处理过。则应在BaseController类的处理异常的方法中，添加这两个分支进行处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ExceptionHandler(ServiceException.class)</span><br><span class="hljs-keyword">public</span> JsonResult&lt;Void&gt; <span class="hljs-title function_">handleException</span><span class="hljs-params">(Throwable e)</span> &#123;<br>JsonResult&lt;Void&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonResult</span>&lt;Void&gt;(e);<br><span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> UsernameDuplicateException) &#123;<br>result.setState(<span class="hljs-number">4000</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> UserNotFoundException) &#123;<br>result.setState(<span class="hljs-number">4001</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> PasswordNotMatchException) &#123;<br>result.setState(<span class="hljs-number">4002</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> InsertException) &#123;<br>result.setState(<span class="hljs-number">5000</span>);<br>&#125;<br><span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-2-设计请求"><a href="#3-2-设计请求" class="headerlink" title="3.2 设计请求"></a>3.2 设计请求</h4><p>设计用户提交的请求，并设计响应的方式：</p><pre><code class="hljs">请求路径：/users/login请求参数：String username, String password请求类型：POST响应结果：JsonResult&lt;User&gt;</code></pre><h4 id="3-3-处理请求"><a href="#3-3-处理请求" class="headerlink" title="3.3 处理请求"></a>3.3 处理请求</h4><p>1.在UserController类中添加处理登录请求的login(String username, String password)方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;login&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult&lt;User&gt; <span class="hljs-title function_">login</span><span class="hljs-params">(String username, String password)</span> &#123;<br><span class="hljs-comment">// 调用业务对象的方法执行登录，并获取返回值</span><br><br><span class="hljs-comment">// 将以上返回值和状态码OK封装到响应结果中并返回</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.处理登录请求的login(String username, String password)方法代码具体实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;login&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult&lt;User&gt; <span class="hljs-title function_">login</span><span class="hljs-params">(String username, String password)</span> &#123;<br><span class="hljs-comment">// 调用业务对象的方法执行登录，并获取返回值</span><br><span class="hljs-type">User</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> userService.login(username, password);<br><span class="hljs-comment">// 将以上返回值和状态码OK封装到响应结果中并返回</span><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonResult</span>&lt;User&gt;(OK, data);<br>&#125;<br></code></pre></td></tr></table></figure><p>4.完成后启动项目，访问<a href="http://localhost:8080/users/login?username=Tom&amp;password=1234%E8%AF%B7%E6%B1%82%E8%BF%9B%E8%A1%8C%E7%99%BB%E5%BD%95%E3%80%82">http://localhost:8080/users/login?username=Tom&amp;password=1234请求进行登录。</a></p><p><img src="E:\SSM\项目\源码\SpringBoot电脑商城项目-V1.0\unit02-用户注册登录\img\4.png"></p><h3 id="4-用户-登录-前端页面"><a href="#4-用户-登录-前端页面" class="headerlink" title="4 用户-登录-前端页面"></a>4 用户-登录-前端页面</h3><p>1.在login.html页面中body标签内部的最后，添加script标签用于编写JavaScript程序。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>    $(<span class="hljs-string">&quot;#btn-login&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    $.<span class="hljs-title function_">ajax</span>(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/users/login&quot;</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>        <span class="hljs-attr">data</span>: $(<span class="hljs-string">&quot;#form-login&quot;</span>).<span class="hljs-title function_">serialize</span>(),<br>        <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;json&quot;</span>,<br>        <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">json</span>) &#123;<br>            <span class="hljs-keyword">if</span> (json.<span class="hljs-property">state</span> == <span class="hljs-number">200</span>) &#123;<br>                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;登录成功！&quot;</span>);<br>                location.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;index.html&quot;</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;登录失败！&quot;</span> + json.<span class="hljs-property">message</span>);<br>            &#125;<br>        &#125;<br>    &#125;);<br>&#125;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>2.完成后启动项目，打开浏览器访问<a href="http://localhost:8080/web/login.html%E9%A1%B5%E9%9D%A2%E5%B9%B6%E8%BF%9B%E8%A1%8C%E7%99%BB%E5%BD%95%E3%80%82">http://localhost:8080/web/login.html页面并进行登录。</a></p><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>在Spring MVC中拦截请求是通过处理器拦截器HandlerInterceptor来实现的，它拦截的目标是请求的地址。在Spring MVC中定义一个拦截器，需要实现HandlerInterceptor接口。</p><h3 id="1-HandlerInterceptor"><a href="#1-HandlerInterceptor" class="headerlink" title="1 HandlerInterceptor"></a>1 HandlerInterceptor</h3><h4 id="1-1-preHandle-方法"><a href="#1-1-preHandle-方法" class="headerlink" title="1.1 preHandle()方法"></a>1.1 preHandle()方法</h4><p>该方法将在请求处理之前被调用。SpringMVC中的Interceptor是链式的调用，在一个应用或一个请求中可以同时存在多个Interceptor。每个Interceptor的调用会依据它的声明顺序依次执行，而且最先执行的都是Interceptor中的preHandle()方法，所以可以在这个方法中进行一些前置初始化操作或者是对当前请求的一个预处理，也可以在这个方法中进行一些判断来决定请求是否要继续进行下去。该方法的返回值是布尔值类型，当返回false时，表示请求结束，后续的Interceptor和Controller都不会再执行；当返回值true时，就会继续调用下一个Interceptor的preHandle方法，如果已经是最后一个Interceptor的时，就会调用当前请求的Controller方法。</p><h4 id="1-2-postHandle-方法"><a href="#1-2-postHandle-方法" class="headerlink" title="1.2  postHandle()方法"></a>1.2  postHandle()方法</h4><p>该方法将在当前请求进行处理之后，也就是Controller方法调用之后执行，但是它会在DispatcherServlet进行视图返回渲染之前被调用，所以我们可以在这个方法中对Controller处理之后的ModelAndView对象进行操作。postHandle方法被调用的方向跟preHandle是相反的，也就是说先声明的Interceptor的postHandle方法反而会后执行。如果当前Interceptor的preHandle()方法返回值为false，则此方法不会被调用。</p><h4 id="1-3-afterCompletion-方法"><a href="#1-3-afterCompletion-方法" class="headerlink" title="1.3 afterCompletion()方法"></a>1.3 afterCompletion()方法</h4><p>该方法将在整个当前请求结束之后，也就是在DispatcherServlet渲染了对应的视图之后执行。这个方法的主要作用是用于进行资源清理工作。如果当前Interceptor的preHandle()方法返回值为false，则此方法不会被调用。</p><h3 id="2-WebMvcConfigurer"><a href="#2-WebMvcConfigurer" class="headerlink" title="2 WebMvcConfigurer"></a>2 WebMvcConfigurer</h3><p>在SpringBoot项目中，如果想要自定义一些Interceptor、ViewResolver、MessageConverter，该如何实现呢？在SpringBoot 1.5版本都是靠重写WebMvcConfigurerAdapter类中的方法来添加自定义拦截器、视图解析器、消息转换器等。而在SpringBoot 2.0版本之后，该类被标记为@Deprecated。因此我们只能靠实现WebMvcConfigurer接口来实现。</p><p>WebMvcConfigurer接口中的核心方法之一addInterceptors(InterceptorRegistry registry)方法表示添加拦截器。主要用于进行用户登录状态的拦截，日志的拦截等。</p><ul><li><p>addInterceptor：需要一个实现HandlerInterceptor接口的拦截器实例</p></li><li><p>addPathPatterns：用于设置拦截器的过滤路径规则；addPathPatterns(“&#x2F;**”)对所有请求都拦截</p></li><li><p>excludePathPatterns：用于设置不需要拦截的过滤规则</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-项目添加拦截器功能"><a href="#3-项目添加拦截器功能" class="headerlink" title="3 项目添加拦截器功能"></a>3 项目添加拦截器功能</h3><p>1.分析：项目中很多操作都是需要先登录才可以执行的，如果在每个请求处理之前都编写代码检查Session中有没有登录信息，是不现实的。所以应使用拦截器解决该问题。</p><p>2.创建拦截器类com.cy.store.interceptor.LoginInterceptor，并实现org.springframework.web.servlet.HandlerInterceptor接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.interceptor;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class="hljs-comment">/** 定义处理器拦截器 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">if</span> (request.getSession().getAttribute(<span class="hljs-string">&quot;uid&quot;</span>) == <span class="hljs-literal">null</span>) &#123;<br>            response.sendRedirect(<span class="hljs-string">&quot;/web/login.html&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.创建LoginInterceptorConfigurer拦截器的配置类并实现org.springframework.web.servlet.config.annotation.WebMvcConfigurer接口，配置类需要添加@Configruation注解修饰。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.config;<br><span class="hljs-keyword">import</span> com.cy.store.interceptor.LoginInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/** 注册处理器拦截器 */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginInterceptorConfigurer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br>    <span class="hljs-comment">/** 拦截器配置 */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>        <span class="hljs-comment">// 创建拦截器对象</span><br>        <span class="hljs-type">HandlerInterceptor</span> <span class="hljs-variable">interceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginInterceptor</span>();<br><br>        <span class="hljs-comment">// 白名单</span><br>        List&lt;String&gt; patterns = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>        patterns.add(<span class="hljs-string">&quot;/bootstrap3/**&quot;</span>);<br>        patterns.add(<span class="hljs-string">&quot;/css/**&quot;</span>);<br>        patterns.add(<span class="hljs-string">&quot;/images/**&quot;</span>);<br>        patterns.add(<span class="hljs-string">&quot;/js/**&quot;</span>);<br>        patterns.add(<span class="hljs-string">&quot;/web/register.html&quot;</span>);<br>        patterns.add(<span class="hljs-string">&quot;/web/login.html&quot;</span>);<br>        patterns.add(<span class="hljs-string">&quot;/web/index.html&quot;</span>);<br>        patterns.add(<span class="hljs-string">&quot;/web/product.html&quot;</span>);<br>        patterns.add(<span class="hljs-string">&quot;/users/reg&quot;</span>);<br>        patterns.add(<span class="hljs-string">&quot;/users/login&quot;</span>);<br>        patterns.add(<span class="hljs-string">&quot;/districts/**&quot;</span>);<br>        patterns.add(<span class="hljs-string">&quot;/products/**&quot;</span>);<br><br>        <span class="hljs-comment">// 通过注册工具添加拦截器</span><br>        registry.addInterceptor(interceptor).addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>).excludePathPatterns(patterns);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h2><p>1.重新构建login()方法，登录成功后将uid和username存入到HttpSession对象中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;login&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult&lt;User&gt; <span class="hljs-title function_">login</span><span class="hljs-params">(String username, String password, HttpSession session)</span> &#123;<br>    <span class="hljs-comment">// 调用业务对象的方法执行登录，并获取返回值</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> userService.login(username, password);<br><br>    <span class="hljs-comment">//登录成功后，将uid和username存入到HttpSession中</span><br>    session.setAttribute(<span class="hljs-string">&quot;uid&quot;</span>, data.getUid());<br>    session.setAttribute(<span class="hljs-string">&quot;username&quot;</span>, data.getUsername());<br>    <span class="hljs-comment">// System.out.println(&quot;Session中的uid=&quot; + getUidFromSession(session));</span><br>    <span class="hljs-comment">// System.out.println(&quot;Session中的username=&quot; + getUsernameFromSession(session));</span><br><br>    <span class="hljs-comment">// 将以上返回值和状态码OK封装到响应结果中并返回</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonResult</span>&lt;User&gt;(OK, data);<br>&#125;<br></code></pre></td></tr></table></figure><p>2.在父类BaseController中添加从HttpSession对象中获取uid和username的方法，以便于后续快捷的获取这两个属性的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 从HttpSession对象中获取uid</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> session HttpSession对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 当前登录的用户的id</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> Integer <span class="hljs-title function_">getUidFromSession</span><span class="hljs-params">(HttpSession session)</span> &#123;<br><span class="hljs-keyword">return</span> Integer.valueOf(session.getAttribute(<span class="hljs-string">&quot;uid&quot;</span>).toString());<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 从HttpSession对象中获取用户名</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> session HttpSession对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 当前登录的用户名</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> String <span class="hljs-title function_">getUsernameFromSession</span><span class="hljs-params">(HttpSession session)</span> &#123;<br><span class="hljs-keyword">return</span> session.getAttribute(<span class="hljs-string">&quot;username&quot;</span>).toString();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h2><h3 id="1-用户-修改密码-持久层"><a href="#1-用户-修改密码-持久层" class="headerlink" title="1 用户-修改密码-持久层"></a>1 用户-修改密码-持久层</h3><h4 id="1-1-规划需要执行的SQL语句-1"><a href="#1-1-规划需要执行的SQL语句-1" class="headerlink" title="1.1 规划需要执行的SQL语句"></a>1.1 规划需要执行的SQL语句</h4><p>用户修改密码时需要执行的SQL语句大致是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">UPDATE t_user SET password=?, modified_user=?, modified_time=? WHERE uid=?<br></code></pre></td></tr></table></figure><p>在执行修改密码之前，还应检查用户数据是否存在、并检查用户数据是否被标记为“已删除”、并检查原密码是否正确，这些检查都可以通过查询用户数据来辅助完成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT * FROM t_user WHERE uid=?<br></code></pre></td></tr></table></figure><h4 id="1-2-接口与抽象方法-1"><a href="#1-2-接口与抽象方法-1" class="headerlink" title="1.2 接口与抽象方法"></a>1.2 接口与抽象方法</h4><p>在UserMapper接口添加updatePasswordByUid(Integer uid,String password,String modifiedUser,Date modifiedTime)抽象方法。</p><blockquote><p>用注解来简化xml配置时，@Param注解的作用是给参数命名，参数命名后就能根据名字得到参数值，正确的将参数传入sql语句中。@Param(“参数名”)注解中的参数名需要和sql语句中的#{参数名}的参数名保持一致。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据uid更新用户的密码</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> uid 用户的id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> password 新密码</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> modifiedUser 最后修改执行人</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> modifiedTime 最后修改时间</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 受影响的行数</span><br><span class="hljs-comment"> */</span><br>Integer <span class="hljs-title function_">updatePasswordByUid</span><span class="hljs-params">(</span><br><span class="hljs-params"><span class="hljs-meta">@Param(&quot;uid&quot;)</span> Integer uid, </span><br><span class="hljs-params"><span class="hljs-meta">@Param(&quot;password&quot;)</span> String password, </span><br><span class="hljs-params"><span class="hljs-meta">@Param(&quot;modifiedUser&quot;)</span> String modifiedUser, </span><br><span class="hljs-params"><span class="hljs-meta">@Param(&quot;modifiedTime&quot;)</span> Date modifiedTime)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据用户id查询用户数据</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> uid 用户id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 匹配的用户数据，如果没有匹配的用户数据，则返回null</span><br><span class="hljs-comment"> */</span><br>User <span class="hljs-title function_">findByUid</span><span class="hljs-params">(Integer uid)</span>;<br></code></pre></td></tr></table></figure><h4 id="1-3-配置SQL映射-1"><a href="#1-3-配置SQL映射-1" class="headerlink" title="1.3 配置SQL映射"></a>1.3 配置SQL映射</h4><p>1.在UserMapper.xml中配置updatePasswordByUid()、findByUid()抽象方法的映射。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 根据uid更新用户的密码：</span><br><span class="hljs-comment"> Integer updatePasswordByUid(</span><br><span class="hljs-comment">@Param(&quot;uid&quot;) Integer uid, </span><br><span class="hljs-comment">@Param(&quot;password&quot;) String password, </span><br><span class="hljs-comment">@Param(&quot;modifiedUser&quot;) String modifiedUser, </span><br><span class="hljs-comment">@Param(&quot;modifiedTime&quot;) Date modifiedTime) --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updatePasswordByUid&quot;</span>&gt;</span><br>UPDATE<br>t_user <br>SET<br>password = #&#123;password&#125;,<br>modified_user = #&#123;modifiedUser&#125;,<br>modified_time = #&#123;modifiedTime&#125; <br>WHERE<br>uid = #&#123;uid&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 根据用户id查询用户数据：User findByUid(Integer uid) --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findByUid&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;UserEntityMap&quot;</span>&gt;</span><br>SELECT<br>*<br>FROM<br>t_user<br>WHERE<br>uid = #&#123;uid&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.在UserMapperTests中编写并执行单元测试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updatePasswordByUid</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">uid</span> <span class="hljs-operator">=</span> <span class="hljs-number">7</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123456&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">modifiedUser</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;超级管理员&quot;</span>;<br><span class="hljs-type">Date</span> <span class="hljs-variable">modifiedTime</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><span class="hljs-type">Integer</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> userMapper.updatePasswordByUid(uid, password, modifiedUser, modifiedTime);<br>System.out.println(<span class="hljs-string">&quot;rows=&quot;</span> + rows);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findByUid</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">uid</span> <span class="hljs-operator">=</span> <span class="hljs-number">7</span>;<br><span class="hljs-type">User</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> userMapper.findByUid(uid);<br>System.out.println(result);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-用户-修改密码-业务层"><a href="#2-用户-修改密码-业务层" class="headerlink" title="2 用户-修改密码-业务层"></a>2 用户-修改密码-业务层</h3><h4 id="2-1-规划异常-1"><a href="#2-1-规划异常-1" class="headerlink" title="2.1 规划异常"></a>2.1 规划异常</h4><p>1.用户在修改密码前，需要检查用户数据是否存在及是否被标记为“已删除”。如果检查不通过则应抛出UserNotFoundException异常。</p><p>2.用户修改密码时，可能会因为输入的原密码错误导致修改失败，则应抛出PasswordNotMatchException异常。</p><p>3.在执行修改密码时，如果返回的受影响行数与预期值不同，则应抛出UpdateException异常。</p><p>4.创建com.cy.store.service.ex.UpdateException异常类，继承自ServiceException类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** 更新数据的异常 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UpdateException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceException</span> &#123;<br><span class="hljs-comment">// Override Methods...</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-接口与抽象方法-1"><a href="#2-2-接口与抽象方法-1" class="headerlink" title="2.2 接口与抽象方法"></a>2.2 接口与抽象方法</h4><p>在IUserService中添加changePassword(Integer uid, String username, String oldPassword, String newPassword)抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 修改密码</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> uid 当前登录的用户id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> username 用户名</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> oldPassword 原密码</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> newPassword 新密码</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changePassword</span><span class="hljs-params">(Integer uid, String username, String oldPassword, String newPassword)</span>;<br></code></pre></td></tr></table></figure><h4 id="2-3-实现抽象方法-1"><a href="#2-3-实现抽象方法-1" class="headerlink" title="2.3 实现抽象方法"></a>2.3 实现抽象方法</h4><p>1.在UserServiceImpl类中实现changePassword()抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changePassword</span><span class="hljs-params">(Integer uid, String username, String oldPassword, String newPassword)</span> &#123;<br><span class="hljs-comment">// 调用userMapper的findByUid()方法，根据参数uid查询用户数据</span><br><span class="hljs-comment">// 检查查询结果是否为null</span><br><span class="hljs-comment">// 是：抛出UserNotFoundException异常</span><br><br><span class="hljs-comment">// 检查查询结果中的isDelete是否为1</span><br><span class="hljs-comment">// 是：抛出UserNotFoundException异常</span><br><br><span class="hljs-comment">// 从查询结果中取出盐值</span><br><span class="hljs-comment">// 将参数oldPassword结合盐值加密，得到oldMd5Password</span><br><span class="hljs-comment">// 判断查询结果中的password与oldMd5Password是否不一致</span><br><span class="hljs-comment">// 是：抛出PasswordNotMatchException异常</span><br><br><span class="hljs-comment">// 将参数newPassword结合盐值加密，得到newMd5Password</span><br><span class="hljs-comment">// 创建当前时间对象</span><br><span class="hljs-comment">// 调用userMapper的updatePasswordByUid()更新密码，并获取返回值</span><br><span class="hljs-comment">// 判断以上返回的受影响行数是否不为1</span><br><span class="hljs-comment">// 是：抛了UpdateException异常</span><br>&#125;<br></code></pre></td></tr></table></figure><p>2.changePassword()方法的具体代码。</p><blockquote><p>String中的equals与contentEquals方法，都可以用来比较String对象内容是否相同。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changePassword</span><span class="hljs-params">(Integer uid, String username, String oldPassword, String newPassword)</span> &#123;<br><span class="hljs-comment">// 调用userMapper的findByUid()方法，根据参数uid查询用户数据</span><br><span class="hljs-type">User</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> userMapper.findByUid(uid);<br><span class="hljs-comment">// 检查查询结果是否为null</span><br><span class="hljs-keyword">if</span> (result == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-comment">// 是：抛出UserNotFoundException异常</span><br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserNotFoundException</span>(<span class="hljs-string">&quot;用户数据不存在&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// 检查查询结果中的isDelete是否为1</span><br><span class="hljs-keyword">if</span> (result.getIsDelete().equals(<span class="hljs-number">1</span>)) &#123;<br><span class="hljs-comment">// 是：抛出UserNotFoundException异常</span><br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserNotFoundException</span>(<span class="hljs-string">&quot;用户数据不存在&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// 从查询结果中取出盐值</span><br><span class="hljs-type">String</span> <span class="hljs-variable">salt</span> <span class="hljs-operator">=</span> result.getSalt();<br><span class="hljs-comment">// 将参数oldPassword结合盐值加密，得到oldMd5Password</span><br><span class="hljs-type">String</span> <span class="hljs-variable">oldMd5Password</span> <span class="hljs-operator">=</span> getMd5Password(oldPassword, salt);<br><span class="hljs-comment">// 判断查询结果中的password与oldMd5Password是否不一致</span><br><span class="hljs-keyword">if</span> (!result.getPassword().contentEquals(oldMd5Password)) &#123;<br><span class="hljs-comment">// 是：抛出PasswordNotMatchException异常</span><br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PasswordNotMatchException</span>(<span class="hljs-string">&quot;原密码错误&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// 将参数newPassword结合盐值加密，得到newMd5Password</span><br><span class="hljs-type">String</span> <span class="hljs-variable">newMd5Password</span> <span class="hljs-operator">=</span> getMd5Password(newPassword, salt);<br><span class="hljs-comment">// 创建当前时间对象</span><br><span class="hljs-type">Date</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><span class="hljs-comment">// 调用userMapper的updatePasswordByUid()更新密码，并获取返回值</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> userMapper.updatePasswordByUid(uid, newMd5Password, username, now);<br><span class="hljs-comment">// 判断以上返回的受影响行数是否不为1</span><br><span class="hljs-keyword">if</span> (rows != <span class="hljs-number">1</span>) &#123;<br><span class="hljs-comment">// 是：抛出UpdateException异常</span><br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UpdateException</span>(<span class="hljs-string">&quot;更新用户数据时出现未知错误，请联系系统管理员&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.在UserServiceTests中编写并执行单元测试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changePassword</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">uid</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;lower&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">oldPassword</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123456&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">newPassword</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;888888&quot;</span>;<br>        userService.changePassword(uid, username, oldPassword, newPassword);<br>        System.out.println(<span class="hljs-string">&quot;密码修改成功！&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (ServiceException e) &#123;<br>        System.out.println(<span class="hljs-string">&quot;密码修改失败！&quot;</span> + e.getClass().getSimpleName());<br>        System.out.println(e.getMessage());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-用户-修改密码-控制器"><a href="#3-用户-修改密码-控制器" class="headerlink" title="3 用户-修改密码-控制器"></a>3 用户-修改密码-控制器</h3><h4 id="3-1-处理异常-1"><a href="#3-1-处理异常-1" class="headerlink" title="3.1 处理异常"></a>3.1 处理异常</h4><p>在用户修改密码的业务中抛出了新的UpdateException异常，需要在BaseController类中进行处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ExceptionHandler(ServiceException.class)</span><br><span class="hljs-keyword">public</span> JsonResult&lt;Void&gt; <span class="hljs-title function_">handleException</span><span class="hljs-params">(Throwable e)</span> &#123;<br>JsonResult&lt;Void&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonResult</span>&lt;Void&gt;(e);<br><span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> UsernameDuplicateException) &#123;<br>result.setState(<span class="hljs-number">4000</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> UserNotFoundException) &#123;<br>result.setState(<span class="hljs-number">4001</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> PasswordNotMatchException) &#123;<br>result.setState(<span class="hljs-number">4002</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> InsertException) &#123;<br>result.setState(<span class="hljs-number">5000</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> UpdateException) &#123;<br>result.setState(<span class="hljs-number">5001</span>);<br>&#125;<br><span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-2-设计请求-1"><a href="#3-2-设计请求-1" class="headerlink" title="3.2 设计请求"></a>3.2 设计请求</h4><p>设计用户提交的请求，并设计响应的方式。</p><pre><code class="hljs">请求路径：/users/change_password请求参数：String oldPassword, String newPassword, HttpSession session请求类型：POST响应结果：JsonResult&lt;Void&gt;</code></pre><h4 id="3-3-处理请求-1"><a href="#3-3-处理请求-1" class="headerlink" title="3.3 处理请求"></a>3.3 处理请求</h4><p>1.在UserController类中添加处理请求的changePassword(String oldPassword, String newPassword, HttpSession session)方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;change_password&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult&lt;Void&gt; <span class="hljs-title function_">changePassword</span><span class="hljs-params">(String oldPassword, String newPassword, HttpSession session)</span> &#123;<br><span class="hljs-comment">// 调用session.getAttribute(&quot;&quot;)获取uid和username</span><br><span class="hljs-comment">// 调用业务对象执行修改密码</span><br><span class="hljs-comment">// 返回成功</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.实现UserController控制器中的修改密码方法的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;change_password&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult&lt;Void&gt; <span class="hljs-title function_">changePassword</span><span class="hljs-params">(String oldPassword, String newPassword, HttpSession session)</span> &#123;<br><span class="hljs-comment">// 调用session.getAttribute(&quot;&quot;)获取uid和username</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">uid</span> <span class="hljs-operator">=</span> getUidFromSession(session);<br><span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> getUsernameFromSession(session);<br><span class="hljs-comment">// 调用业务对象执行修改密码</span><br>iUserService.changePassword(uid, username, oldPassword, newPassword);<br><span class="hljs-comment">// 返回成功</span><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonResult</span>&lt;Void&gt;(OK);<br>&#125;<br></code></pre></td></tr></table></figure><p>3.启动项目先登录，再访问<a href="http://localhost:8080/users/change_password?oldPassword=xx&amp;newPassword=xx%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95%E3%80%82">http://localhost:8080/users/change_password?oldPassword=xx&amp;newPassword=xx进行测试。</a></p><h3 id="4-用户-修改密码-前端页面"><a href="#4-用户-修改密码-前端页面" class="headerlink" title="4 用户-修改密码-前端页面"></a>4 用户-修改密码-前端页面</h3><p>1.在password.html页面中body标签内部的最后，添加script标签用于编写JavaScript程序。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>    $(<span class="hljs-string">&quot;#btn-change-password&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        $.<span class="hljs-title function_">ajax</span>(&#123;<br>            <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/users/change_password&quot;</span>,<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>            <span class="hljs-attr">data</span>: $(<span class="hljs-string">&quot;#form-change-password&quot;</span>).<span class="hljs-title function_">serialize</span>(),<br>            <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;json&quot;</span>,<br>            <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">json</span>) &#123;<br>                <span class="hljs-keyword">if</span> (json.<span class="hljs-property">state</span> == <span class="hljs-number">200</span>) &#123;<br>                    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;修改成功！&quot;</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;修改失败！&quot;</span> + json.<span class="hljs-property">message</span>);<br>                &#125;<br>            &#125;<br>        &#125;);<br>&#125;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>2.启动项目先登录，再访问<a href="http://localhost:8080/web/password.html%E9%A1%B5%E9%9D%A2%E5%B9%B6%E8%BF%9B%E8%A1%8C%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81%E3%80%82">http://localhost:8080/web/password.html页面并进行修改密码。</a></p><blockquote><p>问题：如果无法正常将数据传递给后台，重启动系统和IDEA开发工具，登陆后便可修改密码。</p></blockquote><p>3.问题：在操作前端页面时用户进入修改密码页面，长时间停留在当前页面未进行任何操作，将导致登录信息过期。此时点击修改按钮时，仍会向&#x2F;users&#x2F;change_password发送请求，会被拦截器重定向到登录页面。由于整个过程是由$.ajax()函数采用异步的方式处理的，所以重定向也是由异步任务完成的，在页面中没有任何表现就会出现“用户登录信息超时后点击按钮没有任何反应”的问题。</p><blockquote><p>解决方案：可以在password.html页面的$.ajax()中补充error属性的配置，该属性的值是一个回调函数。当服务器未正常响应状态码时，例如出现302、400、404、405、500等状态码时，将会调用该函数。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">error</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">xhr</span>) &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;您的登录信息已经过期，请重新登录！HTTP响应码：&quot;</span> + xhr.<span class="hljs-property">status</span>);<br>    location.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;login.html&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="个人资料"><a href="#个人资料" class="headerlink" title="个人资料"></a>个人资料</h2><h3 id="1-用户-个人资料-持久层"><a href="#1-用户-个人资料-持久层" class="headerlink" title="1 用户-个人资料-持久层"></a>1 用户-个人资料-持久层</h3><h4 id="1-1-规划需要执行的SQL语句-2"><a href="#1-1-规划需要执行的SQL语句-2" class="headerlink" title="1.1 规划需要执行的SQL语句"></a>1.1 规划需要执行的SQL语句</h4><p>1.执行修改用户个人资料的SQL语句大致是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">UPDATE t_user SET phone=?, email=?, gender=?, modified_user=?, modified_time=? WHERE uid=?<br></code></pre></td></tr></table></figure><p>2.在执行修改用户资料之前，当用户刚打开修改资料的页面时，就应把当前登录的用户信息显示到页面中。显示用户资料可以通过：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT * FROM t_user WHERE uid=?<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明：</strong></p><p>1.该查询功能已经实现，无需再次开发；</p><p>2.在执行修改用户资料之前，还应检查用户数据是否存在、是否标记为“已删除”，也可以通过以上查询来实现。</p></blockquote><h4 id="1-2-接口与抽象方法-2"><a href="#1-2-接口与抽象方法-2" class="headerlink" title="1.2 接口与抽象方法"></a>1.2 接口与抽象方法</h4><p>在UserMapper接口中添加updateInfoByUid(User user)方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据uid更新用户资料</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> user 封装了用户id和新个人资料的对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 受影响的行数</span><br><span class="hljs-comment"> */</span><br>Integer <span class="hljs-title function_">updateInfoByUid</span><span class="hljs-params">(User user)</span>;<br></code></pre></td></tr></table></figure><h4 id="1-3-配置SQL映射-2"><a href="#1-3-配置SQL映射-2" class="headerlink" title="1.3 配置SQL映射"></a>1.3 配置SQL映射</h4><p>1.在UserMapper.xml中配置Integer updateInfoByUid(User user)抽象方法的映射。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 根据uid更新用户个人资料：Integer updateInfoByUid(User user) --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateInfoByUid&quot;</span>&gt;</span><br>UPDATE<br>t_user <br>SET<br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;phone != null&quot;</span>&gt;</span>phone = #&#123;phone&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;email != null&quot;</span>&gt;</span>email = #&#123;email&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;gender != null&quot;</span>&gt;</span>gender = #&#123;gender&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>modified_user = #&#123;modifiedUser&#125;,<br>modified_time = #&#123;modifiedTime&#125;<br>WHERE<br>uid = #&#123;uid&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.在UserMapperTests中编写并执行单元测试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateInfoByUid</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    user.setUid(<span class="hljs-number">20</span>);<br>    user.setPhone(<span class="hljs-string">&quot;17858802222&quot;</span>);<br>    user.setEmail(<span class="hljs-string">&quot;admin@cy.com&quot;</span>);<br>    user.setGender(<span class="hljs-number">1</span>);<br>    user.setModifiedUser(<span class="hljs-string">&quot;系统管理员&quot;</span>);<br>    user.setModifiedTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> userMapper.updateInfoByUid(user);<br>    System.out.println(<span class="hljs-string">&quot;rows=&quot;</span> + rows);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-用户-个人资料-业务层"><a href="#2-用户-个人资料-业务层" class="headerlink" title="2 用户-个人资料-业务层"></a>2 用户-个人资料-业务层</h3><h4 id="2-1-规划异常-2"><a href="#2-1-规划异常-2" class="headerlink" title="2.1 规划异常"></a>2.1 规划异常</h4><p>1.关于用户修改个人资料是由两个功能组成的。</p><ul><li><p>打开页面时显示当前登录的用户的信息；</p></li><li><p>点击修改按钮时更新用户的信息。</p></li></ul><p>2.关于打开页面时显示当前登录的用户的信息，可能会因为用户数据不存在、用户被标记为“已删除”而无法正确的显示页面，则抛出UserNotFoundException异常。</p><p>3.关于点击修改按钮时更新用户的信息，在执行修改资料之前仍需再次检查用户数据是否存在、用户是否被标记为“已删除”，则可能抛出UserNotFoundException异常。并且在执行修改资料过程中，还可能抛出UpdateException异常。</p><h4 id="2-2-接口与抽象方法-2"><a href="#2-2-接口与抽象方法-2" class="headerlink" title="2.2 接口与抽象方法"></a>2.2 接口与抽象方法</h4><p>在IUserService接口中添加两个抽象方法，分别对应以上两个功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取当前登录的用户的信息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> uid 当前登录的用户的id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 当前登录的用户的信息</span><br><span class="hljs-comment"> */</span><br>User <span class="hljs-title function_">getByUid</span><span class="hljs-params">(Integer uid)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 修改用户资料</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> uid 当前登录的用户的id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> username 当前登录的用户名</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> user 用户的新的数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">changeInfo</span><span class="hljs-params">(Integer uid, String username, User user)</span>;<br></code></pre></td></tr></table></figure><h4 id="2-3-实现抽象方法-2"><a href="#2-3-实现抽象方法-2" class="headerlink" title="2.3 实现抽象方法"></a>2.3 实现抽象方法</h4><p>1.在UserServiceImpl实现类中实现getByUid(Integer uid)和changeInfo(Integer uid, String username, User user)以上两个抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">getByUid</span><span class="hljs-params">(Integer uid)</span> &#123;<br><span class="hljs-comment">// 调用userMapper的findByUid()方法，根据参数uid查询用户数据</span><br><span class="hljs-comment">// 判断查询结果是否为null</span><br><span class="hljs-comment">// 是：抛出UserNotFoundException异常</span><br><br><span class="hljs-comment">// 判断查询结果中的isDelete是否为1</span><br><span class="hljs-comment">// 是：抛出UserNotFoundException异常</span><br><br><span class="hljs-comment">// 创建新的User对象</span><br><span class="hljs-comment">// 将以上查询结果中的username/phone/email/gender封装到新User对象中</span><br><br><span class="hljs-comment">// 返回新的User对象</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changeInfo</span><span class="hljs-params">(Integer uid, String username, User user)</span> &#123;<br><span class="hljs-comment">// 调用userMapper的findByUid()方法，根据参数uid查询用户数据</span><br><span class="hljs-comment">// 判断查询结果是否为null</span><br><span class="hljs-comment">// 是：抛出UserNotFoundException异常</span><br><br><span class="hljs-comment">// 判断查询结果中的isDelete是否为1</span><br><span class="hljs-comment">// 是：抛出UserNotFoundException异常</span><br><br><span class="hljs-comment">// 向参数user中补全数据：uid</span><br><span class="hljs-comment">// 向参数user中补全数据：modifiedUser(username)</span><br><span class="hljs-comment">// 向参数user中补全数据：modifiedTime(new Date())</span><br><span class="hljs-comment">// 调用userMapper的updateInfoByUid(User user)方法执行修改，并获取返回值</span><br><span class="hljs-comment">// 判断以上返回的受影响行数是否不为1</span><br><span class="hljs-comment">// 是：抛出UpdateException异常</span><br><br>&#125;<br></code></pre></td></tr></table></figure><p>2.getByUid(Integer uid)和changeInfo(Integer uid, String username, User user)方法的具体代码实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">getByUid</span><span class="hljs-params">(Integer uid)</span> &#123;<br><span class="hljs-comment">// 调用userMapper的findByUid()方法，根据参数uid查询用户数据</span><br><span class="hljs-type">User</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> userMapper.findByUid(uid);<br><span class="hljs-comment">// 判断查询结果是否为null</span><br><span class="hljs-keyword">if</span> (result == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-comment">// 是：抛出UserNotFoundException异常</span><br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserNotFoundException</span>(<span class="hljs-string">&quot;用户数据不存在&quot;</span>);<br>&#125;<br> <br><span class="hljs-comment">// 判断查询结果中的isDelete是否为1</span><br><span class="hljs-keyword">if</span> (result.getIsDelete().equals(<span class="hljs-number">1</span>)) &#123;<br><span class="hljs-comment">// 是：抛出UserNotFoundException异常</span><br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserNotFoundException</span>(<span class="hljs-string">&quot;用户数据不存在&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// 创建新的User对象</span><br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br><span class="hljs-comment">// 将以上查询结果中的username/phone/email/gender封装到新User对象中</span><br>user.setUsername(result.getUsername());<br>user.setPhone(result.getPhone());<br>user.setEmail(result.getEmail());<br>user.setGender(result.getGender());<br><br><span class="hljs-comment">// 返回新的User对象</span><br><span class="hljs-keyword">return</span> user;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changeInfo</span><span class="hljs-params">(Integer uid, String username, User user)</span> &#123;<br><span class="hljs-comment">// 调用userMapper的findByUid()方法，根据参数uid查询用户数据</span><br><span class="hljs-type">User</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> userMapper.findByUid(uid);<br><span class="hljs-comment">// 判断查询结果是否为null</span><br><span class="hljs-keyword">if</span> (result == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-comment">// 是：抛出UserNotFoundException异常</span><br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserNotFoundException</span>(<span class="hljs-string">&quot;用户数据不存在&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// 判断查询结果中的isDelete是否为1</span><br><span class="hljs-keyword">if</span> (result.getIsDelete().equals(<span class="hljs-number">1</span>)) &#123;<br><span class="hljs-comment">// 是：抛出UserNotFoundException异常</span><br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserNotFoundException</span>(<span class="hljs-string">&quot;用户数据不存在&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// 向参数user中补全数据：uid</span><br>user.setUid(uid);<br><span class="hljs-comment">// 向参数user中补全数据：modifiedUser(username)</span><br>user.setModifiedUser(username);<br><span class="hljs-comment">// 向参数user中补全数据：modifiedTime(new Date())</span><br>user.setModifiedTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br><span class="hljs-comment">// 调用userMapper的updateInfoByUid(User user)方法执行修改，并获取返回值</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> userMapper.updateInfoByUid(user);<br><span class="hljs-comment">// 判断以上返回的受影响行数是否不为1</span><br><span class="hljs-keyword">if</span> (rows != <span class="hljs-number">1</span>) &#123;<br><span class="hljs-comment">// 是：抛出UpdateException异常</span><br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UpdateException</span>(<span class="hljs-string">&quot;更新用户数据时出现未知错误，请联系系统管理员&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.在UserServiceTests类中进行单元测试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getByUid</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">uid</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> iUserService.getByUid(uid);<br>        System.out.println(user);<br>    &#125; <span class="hljs-keyword">catch</span> (ServiceException e) &#123;<br>        System.out.println(e.getClass().getSimpleName());<br>        System.out.println(e.getMessage());<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changeInfo</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">uid</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;数据管理员&quot;</span>;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setPhone(<span class="hljs-string">&quot;15512328888&quot;</span>);<br>        user.setEmail(<span class="hljs-string">&quot;admin03@cy.cn&quot;</span>);<br>        user.setGender(<span class="hljs-number">2</span>);<br>        iUserService.changeInfo(uid, username, user);<br>        System.out.println(<span class="hljs-string">&quot;OK.&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (ServiceException e) &#123;<br>        System.out.println(e.getClass().getSimpleName());<br>        System.out.println(e.getMessage());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-用户-个人资料-控制器"><a href="#3-用户-个人资料-控制器" class="headerlink" title="3 用户-个人资料-控制器"></a>3 用户-个人资料-控制器</h3><h4 id="3-1-处理异常-2"><a href="#3-1-处理异常-2" class="headerlink" title="3.1 处理异常"></a>3.1 处理异常</h4><blockquote><p><strong>说明</strong>：无需再次开发。</p></blockquote><h4 id="3-2-设计请求-2"><a href="#3-2-设计请求-2" class="headerlink" title="3.2 设计请求"></a>3.2 设计请求</h4><p>1.设计用户提交显示当前登录的用户信息的请求，并设计响应的方式。</p><pre><code class="hljs">请求路径：/users/get_by_uid请求参数：HttpSession session请求类型：GET响应结果：JsonResult&lt;User&gt;</code></pre><p>2.设计用户提交执行修改用户信息的请求，并设计响应的方式。</p><pre><code class="hljs">请求路径：/users/change_info请求参数：User user, HttpSession session请求类型：POST响应结果：JsonResult&lt;Void&gt;</code></pre><h4 id="3-3-处理请求-2"><a href="#3-3-处理请求-2" class="headerlink" title="3.3 处理请求"></a>3.3 处理请求</h4><p><strong>1.处理获取用户信息请求</strong></p><p>1.在UserController类中添加处理请求的getByUid()方法，并导入org.springframework.web.bind.annotation.GetMapping包。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;get_by_uid&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult&lt;User&gt; <span class="hljs-title function_">getByUid</span><span class="hljs-params">(HttpSession session)</span> &#123;<br><span class="hljs-comment">// 从HttpSession对象中获取uid</span><br><span class="hljs-comment">// 调用业务对象执行获取数据</span><br><span class="hljs-comment">// 响应成功和数据</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.getByUid(HttpSession session)方法中具体代码实现为。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;get_by_uid&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult&lt;User&gt; <span class="hljs-title function_">getByUid</span><span class="hljs-params">(HttpSession session)</span> &#123;<br>    <span class="hljs-comment">// 从HttpSession对象中获取uid</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">uid</span> <span class="hljs-operator">=</span> getUidFromSession(session);<br>    <span class="hljs-comment">// 调用业务对象执行获取数据</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> userService.getByUid(uid);<br>    <span class="hljs-comment">// 响应成功和数据</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonResult</span>&lt;User&gt;(OK, data);<br>&#125;<br></code></pre></td></tr></table></figure><p>3.完成后启动项目，打开浏览器先登录，再访问<a href="http://localhost:8080/users/get_by_uid%E8%AF%B7%E6%B1%82%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95%E3%80%82">http://localhost:8080/users/get_by_uid请求进行测试。</a></p><p><strong>2.处理修改用户个人信息请求</strong></p><p>1.在UserController类中添加处理请求的changeInfo(User user, HttpSession session)方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;change_info&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult&lt;Void&gt; <span class="hljs-title function_">changeInfo</span><span class="hljs-params">(User user, HttpSession session)</span> &#123;<br><span class="hljs-comment">// 从HttpSession对象中获取uid和username</span><br><span class="hljs-comment">// 调用业务对象执行修改用户资料</span><br><span class="hljs-comment">// 响应成功</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.changeInfo(User user, HttpSession session)方法中具体代码实现为。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;change_info&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult&lt;Void&gt; <span class="hljs-title function_">changeInfo</span><span class="hljs-params">(User user, HttpSession session)</span> &#123;<br><span class="hljs-comment">// 从HttpSession对象中获取uid和username</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">uid</span> <span class="hljs-operator">=</span> getUidFromSession(session);<br><span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> getUsernameFromSession(session);<br><span class="hljs-comment">// 调用业务对象执行修改用户资料</span><br>userService.changeInfo(uid, username, user);<br><span class="hljs-comment">// 响应成功</span><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonResult</span>&lt;Void&gt;(OK);<br>&#125;<br></code></pre></td></tr></table></figure><p>3.完成后启动项目，打开浏览器先登录，再访问<a href="http://localhost:8080/users/change_info?phone=17858800000&amp;email=admin07@cy.com&amp;gender=1%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95%E3%80%82">http://localhost:8080/users/change_info?phone=17858800000&amp;email=admin07@cy.com&amp;gender=1进行测试。</a></p><h3 id="4-用户-个人资料-前端页面"><a href="#4-用户-个人资料-前端页面" class="headerlink" title="4 用户-个人资料-前端页面"></a>4 用户-个人资料-前端页面</h3><p>1.在userdata.html页面中body标签内部的最后，添加script标签用于编写JavaScript程序。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>    $(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        $.<span class="hljs-title function_">ajax</span>(&#123;<br>            <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/users/get_by_uid&quot;</span>,<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;GET&quot;</span>,<br>            <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;json&quot;</span>,<br>            <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">json</span>) &#123;<br>                <span class="hljs-keyword">if</span> (json.<span class="hljs-property">state</span> == <span class="hljs-number">200</span>) &#123;<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;username=&quot;</span> + json.<span class="hljs-property">data</span>.<span class="hljs-property">username</span>);<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;phone=&quot;</span> + json.<span class="hljs-property">data</span>.<span class="hljs-property">phone</span>);<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;email=&quot;</span> + json.<span class="hljs-property">data</span>.<span class="hljs-property">email</span>);<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;gender=&quot;</span> + json.<span class="hljs-property">data</span>.<span class="hljs-property">gender</span>);<br><br>                    $(<span class="hljs-string">&quot;#username&quot;</span>).<span class="hljs-title function_">val</span>(json.<span class="hljs-property">data</span>.<span class="hljs-property">username</span>);<br>                    $(<span class="hljs-string">&quot;#phone&quot;</span>).<span class="hljs-title function_">val</span>(json.<span class="hljs-property">data</span>.<span class="hljs-property">phone</span>);<br>                    $(<span class="hljs-string">&quot;#email&quot;</span>).<span class="hljs-title function_">val</span>(json.<span class="hljs-property">data</span>.<span class="hljs-property">email</span>);<br><br>                    <span class="hljs-keyword">let</span> radio = json.<span class="hljs-property">data</span>.<span class="hljs-property">gender</span> == <span class="hljs-number">0</span> ? $(<span class="hljs-string">&quot;#gender-female&quot;</span>) : $(<span class="hljs-string">&quot;#gender-male&quot;</span>);<br>                    radio.<span class="hljs-title function_">prop</span>(<span class="hljs-string">&quot;checked&quot;</span>, <span class="hljs-string">&quot;checked&quot;</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;获取用户信息失败！&quot;</span> + json.<span class="hljs-property">message</span>);<br>                &#125;<br>            &#125;<br>        &#125;);<br>&#125;);<br><br>    $(<span class="hljs-string">&quot;#btn-change-info&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        $.<span class="hljs-title function_">ajax</span>(&#123;<br>            <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/users/change_info&quot;</span>,<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>            <span class="hljs-attr">data</span>: $(<span class="hljs-string">&quot;#form-change-info&quot;</span>).<span class="hljs-title function_">serialize</span>(),<br>            <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;json&quot;</span>,<br>            <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">json</span>) &#123;<br>                <span class="hljs-keyword">if</span> (json.<span class="hljs-property">state</span> == <span class="hljs-number">200</span>) &#123;<br>                    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;修改成功！&quot;</span>);<br>                    location.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;login.html&quot;</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;修改失败！&quot;</span> + json.<span class="hljs-property">message</span>);<br>                &#125;<br>            &#125;,<br>            <span class="hljs-attr">error</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">xhr</span>) &#123;<br>                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;您的登录信息已经过期，请重新登录！HTTP响应码：&quot;</span> + xhr.<span class="hljs-property">status</span>);<br>                location.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;login.html&quot;</span>;<br>            &#125;<br>        &#125;);<br>    &#125;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>2.完成后启动项目，打开浏览器先登录，再访问<a href="http://localhost:8080/web/userdata.html%E9%A1%B5%E9%9D%A2%E5%B9%B6%E8%BF%9B%E8%A1%8C%E7%94%A8%E6%88%B7%E4%B8%AA%E4%BA%BA%E8%B5%84%E6%96%99%E7%9A%84%E4%BF%AE%E6%94%B9%E6%B5%8B%E8%AF%95%E3%80%82">http://localhost:8080/web/userdata.html页面并进行用户个人资料的修改测试。</a></p>]]></content>
    
    
    <categories>
      
      <category>电脑商城项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>电脑商城项目01系统概述与环境搭建</title>
    <link href="/2022/07/18/%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE01%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0%E4%B8%8E%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2022/07/18/%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE01%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0%E4%B8%8E%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="系统概述与环境搭建"><a href="#系统概述与环境搭建" class="headerlink" title="系统概述与环境搭建"></a>系统概述与环境搭建</h2><h3 id="1-系统开发及运行环境"><a href="#1-系统开发及运行环境" class="headerlink" title="1 系统开发及运行环境"></a>1 系统开发及运行环境</h3><p>电脑商城系统开发所需的环境及相关软件进行介绍。</p><p>1.操作系统：Windows 10</p><p>2.Java开发包：JDK 8</p><p>3.项目管理工具：Maven 3.6.3</p><p>4.项目开发工具：IntelliJ IDEA 2020.3.2 x64</p><p>5.数据库：MariaDB-10.3.7-winx64</p><p>6.浏览器：Google Chrome</p><p>7.服务器架构：Spring Boot 2.4.7 + MyBatis 2.1.4 + AJAX</p><h3 id="2-项目分析"><a href="#2-项目分析" class="headerlink" title="2 项目分析"></a>2 项目分析</h3><p>1.在开发某个项目之前，应先分析这个项目中可能涉及哪些种类的数据。本项目中涉及的数据：用户、商品、商品类别、收藏、订单、购物车、收货地址。</p><p>2.关于数据，还应该要确定这些数据的开发顺序。设计开发顺序的原则是：先开发基础、简单或熟悉的数据。以上需要处理的数据的开发流程是：用户-收货地址-商品类别-商品-收藏-购物车-订单。</p><p>3.在开发每种数据的相关功能时，先分析该数据涉及哪些功能。在本项目中以用户数据为例，需要开发的功能有：登录、注册、修改密码、修改资料、上传头像。</p><p>4.然后，在确定这些功能的开发顺序。原则上，应先做基础功能，并遵循增查删改的顺序来开发。则用户相关功能的开发顺序应该是：注册-登录-修改密码-修改个人资料-上传头像。</p><p>5.在实际开发中，应先创建该项目的数据库，当每次处理一种新的数据时，应先创建该数据在数据库中的数据表，然后在项目中创建该数据表对应的实体类。</p><p>6.在开发某个具体的功能时，应遵循开发顺序：持久层-业务层-控制器-前端页面。</p><h3 id="3-创建数据库"><a href="#3-创建数据库" class="headerlink" title="3 创建数据库"></a>3 创建数据库</h3><p>1.首先确保计算机上安装了MariaDB-10.3.7-winx64数据库，将来在数据库中创建与项目相关的表。</p><p>2.创建电脑商城项目对应的后台数据库系统store。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE DATABASE store character SET utf8;<br></code></pre></td></tr></table></figure><h3 id="4-创建Spring-Initializr项目"><a href="#4-创建Spring-Initializr项目" class="headerlink" title="4 创建Spring Initializr项目"></a>4 创建Spring Initializr项目</h3><p>本质上Spring Initializr是一个Web应用程序，它提供了一个基本的项目结构，能够帮助开发者快速构建一个基础的Spring Boot项目。在创建Spring Initializr类型的项目时需在计算机连网的状态下进行创建。</p><p><span style="color:red;">1.首先确保计算机上安装了JDK、IDEA、MariaDB等开发需要使用的软件，并在IDEA中配置了Maven 3.6.3项目管理工具。</span></p><p>2.在IDEA欢迎界面，点击【New Project】按钮创建项目，左侧选择【Spring Initializr】选项进行Spring Boot项目快速构建。</p><p><img src="E:\SSM\项目\源码\SpringBoot电脑商城项目-V1.0\unit01-系统概述与环境搭建\img\2.png"></p><p>3.将Group设置为com.cy，Artifact设置为store，其余选项使用默认值。单击【Next】进入Spring Boot场景依赖选择界面。</p><p><img src="E:\SSM\项目\源码\SpringBoot电脑商城项目-V1.0\unit01-系统概述与环境搭建\img\3.png"></p><p>4.给项目添加Spring Web、MyBatis Framework、MySQL Driver的依赖。点击【Next】按钮完成项目创建。</p><p><img src="E:\SSM\项目\源码\SpringBoot电脑商城项目-V1.0\unit01-系统概述与环境搭建\img\1.png"></p><p>5.首次创建完Spring Initializr项目时，解析项目依赖需消耗一定时间（Resolving dependencies of store…）。</p><p><img src="E:\SSM\项目\源码\SpringBoot电脑商城项目-V1.0\unit01-系统概述与环境搭建\img\4.png"></p><h3 id="5-配置并运行项目"><a href="#5-配置并运行项目" class="headerlink" title="5 配置并运行项目"></a>5 配置并运行项目</h3><h4 id="5-1-运行项目"><a href="#5-1-运行项目" class="headerlink" title="5.1 运行项目"></a>5.1 运行项目</h4><p>找到项目的入口类（被@SpringBootApplication注解修饰），然后运行启动类；启动过程如果控制台输出Spring图形则表示启动成功。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store;<br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StoreApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(StoreApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="E:\SSM\项目\源码\SpringBoot电脑商城项目-V1.0\unit01-系统概述与环境搭建\img\6.png"></p><h4 id="5-2-配置项目"><a href="#5-2-配置项目" class="headerlink" title="5.2 配置项目"></a>5.2 配置项目</h4><p>1.如果启动项目时提示：“配置数据源失败:’url’属性未指定，无法配置内嵌的数据源”。有如下的错误提示。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Failed to configure a DataSource: <span class="hljs-string">&#x27;url&#x27;</span> attribute is not specified and no embedded datasource could be configured.<br></code></pre></td></tr></table></figure><p><img src="E:\SSM\项目\源码\SpringBoot电脑商城项目-V1.0\unit01-系统概述与环境搭建\img\5.png"></p><p>2.解决以上操作提示的方法：在resources文件夹下的application.properties文件中添加数据源的配置。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/store?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=Asia/Shanghai</span><br><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string">123456</span><br></code></pre></td></tr></table></figure><p>3.为了便于查询JSON数据，隐藏没有值的属性，减少流量的消耗，服务器不应该向客户端响应为NULL的属性。可以在属性或类之前添加@JsonInclude(value&#x3D;Include.NON_NULL)，也可以在application.properties中添加全局的配置。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 服务器向客户端不响应为null的属性</span><br><span class="hljs-attr">spring.jackson.default-property-inclusion</span>=<span class="hljs-string">NON_NULL</span><br></code></pre></td></tr></table></figure><p>4.SpringBoot项目的默认访问名称是“&#x2F;”，如果需要修改可以手动在配置文件中指定SpringBoot 2.x访问项目路径的项目名。不建议修改。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">server.servlet.context-path</span>=<span class="hljs-string">/store</span><br></code></pre></td></tr></table></figure><p>5.重新启动项目，则不在提示配置数据源失败的问题。</p>]]></content>
    
    
    <categories>
      
      <category>电脑商城项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot学习笔记(5)</title>
    <link href="/2022/07/14/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(5)/"/>
    <url>/2022/07/14/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(5)/</url>
    
    <content type="html"><![CDATA[<h2 id="数据库场景的自动配置分析与整合测试"><a href="#数据库场景的自动配置分析与整合测试" class="headerlink" title="数据库场景的自动配置分析与整合测试"></a>数据库场景的自动配置分析与整合测试</h2><h3 id="导入JDBC场景"><a href="#导入JDBC场景" class="headerlink" title="导入JDBC场景"></a>导入JDBC场景</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>接着导入数据库驱动包（MySQL为例）。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--默认版本：--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mysql.version</span>&gt;</span>8.0.22<span class="hljs-tag">&lt;/<span class="hljs-name">mysql.version</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;version&gt;5.1.49&lt;/version&gt;--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">想要修改版本</span><br><span class="hljs-comment">1、直接依赖引入具体版本（maven的就近依赖原则）</span><br><span class="hljs-comment">2、重新声明版本（maven的属性的就近优先原则）</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mysql.version</span>&gt;</span>5.1.49<span class="hljs-tag">&lt;/<span class="hljs-name">mysql.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="相关数据源配置类"><a href="#相关数据源配置类" class="headerlink" title="相关数据源配置类"></a>相关数据源配置类</h3><ul><li><code>DataSourceAutoConfiguration</code> ： 数据源的自动配置。<ul><li>修改数据源相关的配置：<code>spring.datasource</code>。</li><li><strong>数据库连接池的配置，是自己容器中没有DataSource才自动配置的</strong>。</li><li>底层配置好的连接池是：<code>HikariDataSource</code>。</li></ul></li><li><code>DataSourceTransactionManagerAutoConfiguration</code>： 事务管理器的自动配置。</li><li><code>JdbcTemplateAutoConfiguration</code>： <code>JdbcTemplate</code>的自动配置，可以来对数据库进行CRUD。<ul><li>可以修改前缀为<code>spring.jdbc</code>的配置项来修改<code>JdbcTemplate</code>。</li><li><code>@Bean @Primary JdbcTemplate</code>：Spring容器中有这个<code>JdbcTemplate</code>组件，使用<code>@Autowired</code>。</li></ul></li><li><code>JndiDataSourceAutoConfiguration</code>： JNDI的自动配置。</li><li><code>XADataSourceAutoConfiguration</code>： 分布式事务相关的。</li></ul><h3 id="修改配置项"><a href="#修改配置项" class="headerlink" title="修改配置项"></a>修改配置项</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/db_account</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br></code></pre></td></tr></table></figure><h3 id="单元测试数据源"><a href="#单元测试数据源" class="headerlink" title="单元测试数据源"></a>单元测试数据源</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Boot05WebAdminApplicationTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    JdbcTemplate jdbcTemplate;<br><br>    <span class="hljs-meta">@Test</span><span class="hljs-comment">//用@org.junit.Test会报空指针异常，可能跟JUnit新版本有关</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//        jdbcTemplate.queryForObject(&quot;select * from account_tbl&quot;)</span><br><span class="hljs-comment">//        jdbcTemplate.queryForList(&quot;select * from account_tbl&quot;,)</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">aLong</span> <span class="hljs-operator">=</span> jdbcTemplate.queryForObject(<span class="hljs-string">&quot;select count(*) from account_tbl&quot;</span>, Long.class);<br>        log.info(<span class="hljs-string">&quot;记录总数：&#123;&#125;&quot;</span>,aLong);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="自定义方式整合druid数据源"><a href="#自定义方式整合druid数据源" class="headerlink" title="自定义方式整合druid数据源"></a>自定义方式整合druid数据源</h2><p><a href="https://github.com/alibaba/druid">Druid官网</a></p><h3 id="Druid是什么？"><a href="#Druid是什么？" class="headerlink" title="Druid是什么？"></a>Druid是什么？</h3><p>它是数据库连接池，它能够提供强大的监控和扩展功能。</p><p><a href="https://github.com/alibaba/druid/wiki/Druid%E8%BF%9E%E6%8E%A5%E6%B1%A0%E4%BB%8B%E7%BB%8D">官方文档 - Druid连接池介绍</a></p><p>Spring Boot整合第三方技术的两种方式：</p><ul><li>自定义</li><li>找starter场景</li></ul><h3 id="自定义方式"><a href="#自定义方式" class="headerlink" title="自定义方式"></a>自定义方式</h3><p><strong>添加依赖</strong>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>配置Druid数据源</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@ConfigurationProperties(&quot;spring.datasource&quot;)</span><span class="hljs-comment">//复用配置文件的数据源配置</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">dataSource</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">druidDataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br><br><span class="hljs-comment">//        druidDataSource.setUrl();</span><br><span class="hljs-comment">//        druidDataSource.setUsername();</span><br><span class="hljs-comment">//        druidDataSource.setPassword();</span><br><br>        <span class="hljs-keyword">return</span> druidDataSource;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE">更多配置项</a></p><p><strong>配置Druid的监控页功能</strong>：</p><ul><li>Druid内置提供了一个<code>StatViewServlet</code>用于展示Druid的统计信息。<a href="https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_StatViewServlet%E9%85%8D%E7%BD%AE">官方文档 - 配置_StatViewServlet配置</a>。这个<code>StatViewServlet</code>的用途包括：<ul><li>提供监控信息展示的html页面</li><li>提供监控信息的JSON API</li></ul></li><li>Druid内置提供一个<code>StatFilter</code>，用于统计监控信息。<a href="https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_StatFilter">官方文档 - 配置_StatFilter</a></li><li><code>WebStatFilter</code>用于采集web-jdbc关联监控的数据，如SQL监控、URI监控。<a href="https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_%E9%85%8D%E7%BD%AEWebStatFilter">官方文档 - 配置_配置WebStatFilter</a></li><li>Druid提供了<code>WallFilter</code>，它是基于SQL语义分析来实现防御SQL注入攻击的。<a href="https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE-wallfilter">官方文档 - 配置 wallfilter</a></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@ConfigurationProperties(&quot;spring.datasource&quot;)</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">dataSource</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">druidDataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br><br>        <span class="hljs-comment">//加入监控和防火墙功能功能</span><br>        druidDataSource.setFilters(<span class="hljs-string">&quot;stat,wall&quot;</span>);<br>        <br>        <span class="hljs-keyword">return</span> druidDataSource;<br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 配置 druid的监控页功能</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ServletRegistrationBean <span class="hljs-title function_">statViewServlet</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">StatViewServlet</span> <span class="hljs-variable">statViewServlet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StatViewServlet</span>();<br>        ServletRegistrationBean&lt;StatViewServlet&gt; registrationBean = <br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletRegistrationBean</span>&lt;&gt;(statViewServlet, <span class="hljs-string">&quot;/druid/*&quot;</span>);<br><br>        <span class="hljs-comment">//监控页账号密码：</span><br>        registrationBean.addInitParameter(<span class="hljs-string">&quot;loginUsername&quot;</span>,<span class="hljs-string">&quot;admin&quot;</span>);<br>        registrationBean.addInitParameter(<span class="hljs-string">&quot;loginPassword&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>);<br><br>        <span class="hljs-keyword">return</span> registrationBean;<br>    &#125;<br>    <br>     <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * WebStatFilter 用于采集web-jdbc关联监控的数据。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> FilterRegistrationBean <span class="hljs-title function_">webStatFilter</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">WebStatFilter</span> <span class="hljs-variable">webStatFilter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebStatFilter</span>();<br><br>        FilterRegistrationBean&lt;WebStatFilter&gt; filterRegistrationBean = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterRegistrationBean</span>&lt;&gt;(webStatFilter);<br>        filterRegistrationBean.setUrlPatterns(Arrays.asList(<span class="hljs-string">&quot;/*&quot;</span>));<br>        filterRegistrationBean.addInitParameter(<span class="hljs-string">&quot;exclusions&quot;</span>,<span class="hljs-string">&quot;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*&quot;</span>);<br><br>        <span class="hljs-keyword">return</span> filterRegistrationBean;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="druid数据源starter整合方式"><a href="#druid数据源starter整合方式" class="headerlink" title="druid数据源starter整合方式"></a>druid数据源starter整合方式</h2><p><a href="https://blog.csdn.net/u011863024/article/details/113667946">官方文档 - Druid Spring Boot Starter</a></p><p><strong>引入依赖</strong>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>分析自动配置</strong>：</p><ul><li>扩展配置项 <code>spring.datasource.druid</code></li><li>自动配置类<code>DruidDataSourceAutoConfigure</code></li><li><code>DruidSpringAopConfiguration.class</code>, 监控SpringBean的；配置项：<code>spring.datasource.druid.aop-patterns</code></li><li><code>DruidStatViewServletConfiguration.class</code>, 监控页的配置。<code>spring.datasource.druid.stat-view-servlet</code>默认开启。</li><li><code>DruidWebStatFilterConfiguration.class</code>，web监控配置。<code>spring.datasource.druid.web-stat-filter</code>默认开启。</li><li><code>DruidFilterConfiguration.class</code>所有Druid的filter的配置：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">FILTER_STAT_PREFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;spring.datasource.druid.filter.stat&quot;</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">FILTER_CONFIG_PREFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;spring.datasource.druid.filter.config&quot;</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">FILTER_ENCODING_PREFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;spring.datasource.druid.filter.encoding&quot;</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">FILTER_SLF4J_PREFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;spring.datasource.druid.filter.slf4j&quot;</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">FILTER_LOG4J_PREFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;spring.datasource.druid.filter.log4j&quot;</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">FILTER_LOG4J2_PREFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;spring.datasource.druid.filter.log4j2&quot;</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">FILTER_COMMONS_LOG_PREFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;spring.datasource.druid.filter.commons-log&quot;</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">FILTER_WALL_PREFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;spring.datasource.druid.filter.wall&quot;</span>;<br><span class="hljs-number">12345678</span><br></code></pre></td></tr></table></figure><p><strong>配置示例</strong>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/db_account</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br><br>    <span class="hljs-attr">druid:</span><br>      <span class="hljs-attr">aop-patterns:</span> <span class="hljs-string">com.atguigu.admin.*</span>  <span class="hljs-comment">#监控SpringBean</span><br>      <span class="hljs-attr">filters:</span> <span class="hljs-string">stat,wall</span>     <span class="hljs-comment"># 底层开启功能，stat（sql监控），wall（防火墙）</span><br><br>      <span class="hljs-attr">stat-view-servlet:</span>   <span class="hljs-comment"># 配置监控页功能</span><br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">login-username:</span> <span class="hljs-string">admin</span><br>        <span class="hljs-attr">login-password:</span> <span class="hljs-string">admin</span><br>        <span class="hljs-attr">resetEnable:</span> <span class="hljs-literal">false</span><br><br>      <span class="hljs-attr">web-stat-filter:</span>  <span class="hljs-comment"># 监控web</span><br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">urlPattern:</span> <span class="hljs-string">/*</span><br>        <span class="hljs-attr">exclusions:</span> <span class="hljs-string">&#x27;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*&#x27;</span><br><br><br>      <span class="hljs-attr">filter:</span><br>        <span class="hljs-attr">stat:</span>    <span class="hljs-comment"># 对上面filters里面的stat的详细配置</span><br>          <span class="hljs-attr">slow-sql-millis:</span> <span class="hljs-number">1000</span><br>          <span class="hljs-attr">logSlowSql:</span> <span class="hljs-literal">true</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">wall:</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>          <span class="hljs-attr">config:</span><br>            <span class="hljs-attr">drop-table-allow:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h2 id="整合MyBatis-配置版"><a href="#整合MyBatis-配置版" class="headerlink" title="整合MyBatis-配置版"></a>整合MyBatis-配置版</h2><p><a href="https://github.com/mybatis">MyBatis的GitHub仓库</a></p><p><a href="https://mybatis.org/mybatis-3/zh/index.html">MyBatis官方</a></p><p><strong>starter的命名方式</strong>：</p><ol><li>SpringBoot官方的Starter：<code>spring-boot-starter-*</code></li><li>第三方的： <code>*-spring-boot-starter</code></li></ol><p><strong>引入依赖</strong>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>配置模式</strong>:</p><ul><li>全局配置文件</li><li><code>SqlSessionFactory</code>：自动配置好了</li><li><code>SqlSession</code>：自动配置了<code>SqlSessionTemplate</code> 组合了<code>SqlSession</code></li><li><code>@Import(AutoConfiguredMapperScannerRegistrar.class)</code></li><li><code>Mapper</code>： 只要我们写的操作MyBatis的接口标准了<code>@Mapper</code>就会被自动扫描进来</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableConfigurationProperties(MybatisProperties.class)</span> ： MyBatis配置项绑定类。<br><span class="hljs-meta">@AutoConfigureAfter(&#123; DataSourceAutoConfiguration.class, MybatisLanguageDriverAutoConfiguration.class &#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisAutoConfiguration</span>&#123;<br>    ...<br>&#125;<br><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;mybatis&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisProperties</span>&#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><hr><p><strong>配置文件</strong>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">1234</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/my</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br><br><span class="hljs-comment"># 配置mybatis规则</span><br><span class="hljs-attr">mybatis:</span><br>  <span class="hljs-attr">config-location:</span> <span class="hljs-string">classpath:mybatis/mybatis-config.xml</span>  <span class="hljs-comment">#全局配置文件位置</span><br>  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath:mybatis/*.xml</span>  <span class="hljs-comment">#sql映射文件位置</span><br></code></pre></td></tr></table></figure><p><strong>mybatis-config.xml</strong>:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">  <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">  <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 由于Spring Boot自动配置缘故，此处不必配置，只用来做做样。--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>Mapper接口</strong>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.lun.boot.mapper.UserMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUser&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.lun.boot.bean.User&quot;</span>&gt;</span><br>        select * from user where id=#&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br>12345678910<br>import com.lun.boot.bean.User;<br>import org.apache.ibatis.annotations.Mapper;<br><br>@Mapper<br>public interface UserMapper &#123;<br>    public User getUser(Integer id);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>POJO</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <br><span class="hljs-comment">//getters and setters...</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>DB</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `<span class="hljs-keyword">user</span>` (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `name` <span class="hljs-type">varchar</span>(<span class="hljs-number">45</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">3</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4;<br></code></pre></td></tr></table></figure><p><strong>Controller and Service</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUser</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;<br><br>        <span class="hljs-keyword">return</span> userService.getUser(id);<br>    &#125;<br><br>&#125;<br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<span class="hljs-comment">//IDEA下标红线，可忽视这红线</span><br><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUser</span><span class="hljs-params">(Integer id)</span>&#123;<br>        <span class="hljs-keyword">return</span> userMapper.getUser(id);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>配置<code>private Configuration configuration;</code> 也就是配置<code>mybatis.configuration</code>相关的，就是相当于改mybatis全局配置文件中的值。（也就是说配置了<code>mybatis.configuration</code>，就不需配置mybatis全局配置文件了）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 配置mybatis规则</span><br><span class="hljs-attr">mybatis:</span><br>  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath:mybatis/mapper/*.xml</span><br>  <span class="hljs-comment"># 可以不写全局配置文件，所有全局配置文件的配置都放在configuration配置项中了。</span><br>  <span class="hljs-comment"># config-location: classpath:mybatis/mybatis-config.xml</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-attr">map-underscore-to-camel-case:</span> <span class="hljs-literal">true</span><br><span class="hljs-number">1234567</span><br></code></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>导入MyBatis官方Starter。</li><li>编写Mapper接口，需<code>@Mapper</code>注解。</li><li>编写SQL映射文件并绑定Mapper接口。</li><li>在<code>application.yaml</code>中指定Mapper配置文件的所处位置，以及指定全局配置文件的信息 （建议：**配置在<code>mybatis.configuration</code>**）。</li></ul><h2 id="整合MyBatis-注解配置混合版"><a href="#整合MyBatis-注解配置混合版" class="headerlink" title="整合MyBatis-注解配置混合版"></a>整合MyBatis-注解配置混合版</h2><p>你可以通过Spring Initializr添加MyBatis的Starer。</p><p><strong>注解与配置混合搭配，干活不累</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUser</span><span class="hljs-params">(Integer id)</span>;<br><br>    <span class="hljs-meta">@Select(&quot;select * from user where id=#&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUser2</span><span class="hljs-params">(Integer id)</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveUser</span><span class="hljs-params">(User user)</span>;<br><br>    <span class="hljs-meta">@Insert(&quot;insert into user(`name`) values(#&#123;name&#125;)&quot;)</span><br>    <span class="hljs-meta">@Options(useGeneratedKeys = true, keyProperty = &quot;id&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveUser2</span><span class="hljs-params">(User user)</span>;<br><br>&#125;<br>&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;<br>&lt;!DOCTYPE mapper<br>        PUBLIC <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br>        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;<br>&lt;mapper namespace=<span class="hljs-string">&quot;com.lun.boot.mapper.UserMapper&quot;</span>&gt;<br><br>    &lt;select id=<span class="hljs-string">&quot;getUser&quot;</span> resultType=<span class="hljs-string">&quot;com.lun.boot.bean.User&quot;</span>&gt;<br>        select * from user where id=#&#123;id&#125;<br>    &lt;/select&gt;<br><br>    &lt;insert id=<span class="hljs-string">&quot;saveUser&quot;</span> useGeneratedKeys=<span class="hljs-string">&quot;true&quot;</span> keyProperty=<span class="hljs-string">&quot;id&quot;</span>&gt;<br>        insert into <span class="hljs-title function_">user</span><span class="hljs-params">(`name`)</span> values(#&#123;name&#125;)<br>    &lt;/insert&gt;<br><br>&lt;/mapper&gt;<br></code></pre></td></tr></table></figure><ul><li>简单DAO方法就写在注解上。复杂的就写在配置文件里。</li><li>使用<code>@MapperScan(&quot;com.lun.boot.mapper&quot;)</code> 简化，Mapper接口就可以不用标注<code>@Mapper</code>注解。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@MapperScan(&quot;com.lun.boot.mapper&quot;)</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(MainApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="整合MyBatisPlus操作数据库"><a href="#整合MyBatisPlus操作数据库" class="headerlink" title="整合MyBatisPlus操作数据库"></a>整合MyBatisPlus操作数据库</h2><p><a href="https://plugins.jetbrains.com/plugin/10119-mybatisx">IDEA的MyBatis的插件 - MyBatisX</a></p><p><a href="https://baomidou.com/">MyBatisPlus官网</a></p><p><a href="https://baomidou.com/guide/">MyBatisPlus官方文档</a></p><h3 id="MyBatisPlus是什么"><a href="#MyBatisPlus是什么" class="headerlink" title="MyBatisPlus是什么"></a>MyBatisPlus是什么</h3><p><a href="https://github.com/baomidou/mybatis-plus">MyBatis-Plus</a>（简称 MP）是一个 <a href="http://www.mybatis.org/mybatis-3/">MyBatis</a>的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p><hr><p>添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>MybatisPlusAutoConfiguration</code>配置类，<code>MybatisPlusProperties</code>配置项绑定。</li><li><code>SqlSessionFactory</code>自动配置好，底层是容器中默认的数据源。</li><li><code>mapperLocations</code>自动配置好的，有默认值<code>classpath*:/mapper/**/*.xml</code>，这表示任意包的类路径下的所有mapper文件夹下任意路径下的所有xml都是sql映射文件。 建议以后sql映射文件放在 mapper下。</li><li>容器中也自动配置好了<code>SqlSessionTemplate</code>。</li><li><code>@Mapper</code> 标注的接口也会被自动扫描，建议直接 <code>@MapperScan(&quot;com.lun.boot.mapper&quot;)</code>批量扫描。</li><li>MyBatisPlus<strong>优点</strong>之一：只需要我们的Mapper继承MyBatisPlus的<code>BaseMapper</code> 就可以拥有CRUD能力，减轻开发工作。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;<br><span class="hljs-keyword">import</span> com.lun.hellomybatisplus.model.User;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;User&gt; &#123;&#125;<br></code></pre></td></tr></table></figure><h2 id="CRUD实验-数据列表展示"><a href="#CRUD实验-数据列表展示" class="headerlink" title="CRUD实验-数据列表展示"></a>CRUD实验-数据列表展示</h2><p><a href="https://baomidou.com/guide/crud-interface.html">官方文档 - CRUD接口</a></p><p>使用MyBatis Plus提供的<code>IService</code>，<code>ServiceImpl</code>，减轻Service层开发工作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.lun.hellomybatisplus.model.User;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  Service 的CRUD也不用写了</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IService</span>&lt;User&gt; &#123;<br><span class="hljs-comment">//此处故意为空</span><br>&#125;<br><span class="hljs-keyword">import</span> com.lun.hellomybatisplus.model.User;<br><span class="hljs-keyword">import</span> com.lun.hellomybatisplus.mapper.UserMapper;<br><span class="hljs-keyword">import</span> com.lun.hellomybatisplus.service.UserService;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;UserMapper,User&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br><span class="hljs-comment">//此处故意为空</span><br>&#125;<br></code></pre></td></tr></table></figure><p>与下一节联合在一起</p><h2 id="分页数据展示"><a href="#分页数据展示" class="headerlink" title="分页数据展示"></a>分页数据展示</h2><p>与下一节联合在一起</p><h2 id="删除用户完成"><a href="#删除用户完成" class="headerlink" title="删除用户完成"></a>删除用户完成</h2><p>添加分页插件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBatisConfig</span> &#123;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * MybatisPlusInterceptor</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MybatisPlusInterceptor <span class="hljs-title function_">paginationInterceptor</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">MybatisPlusInterceptor</span> <span class="hljs-variable">mybatisPlusInterceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MybatisPlusInterceptor</span>();<br>        <span class="hljs-comment">// 设置请求的页面大于最大页后操作， true调回到首页，false 继续请求  默认false</span><br>        <span class="hljs-comment">// paginationInterceptor.setOverflow(false);</span><br>        <span class="hljs-comment">// 设置最大单页限制数量，默认 500 条，-1 不受限制</span><br>        <span class="hljs-comment">// paginationInterceptor.setLimit(500);</span><br>        <span class="hljs-comment">// 开启 count 的 join 优化,只针对部分 left join</span><br><br>        <span class="hljs-comment">//这是分页拦截器</span><br>        <span class="hljs-type">PaginationInnerInterceptor</span> <span class="hljs-variable">paginationInnerInterceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PaginationInnerInterceptor</span>();<br>        paginationInnerInterceptor.setOverflow(<span class="hljs-literal">true</span>);<br>        paginationInnerInterceptor.setMaxLimit(<span class="hljs-number">500L</span>);<br>        mybatisPlusInterceptor.addInnerInterceptor(paginationInnerInterceptor);<br><br>        <span class="hljs-keyword">return</span> mybatisPlusInterceptor;<br>    &#125;<br>&#125;<br>&lt;table class=<span class="hljs-string">&quot;display table table-bordered table-striped&quot;</span> id=<span class="hljs-string">&quot;dynamic-table&quot;</span>&gt;<br>    &lt;thead&gt;<br>        &lt;tr&gt;<br>            &lt;th&gt;#&lt;/th&gt;<br>            &lt;th&gt;name&lt;/th&gt;<br>            &lt;th&gt;age&lt;/th&gt;<br>            &lt;th&gt;email&lt;/th&gt;<br>            &lt;th&gt;操作&lt;/th&gt;<br>        &lt;/tr&gt;<br>    &lt;/thead&gt;<br>    &lt;tbody&gt;<br>        &lt;tr class=<span class="hljs-string">&quot;gradeX&quot;</span> th:each=<span class="hljs-string">&quot;user: $&#123;users.records&#125;&quot;</span>&gt;<br>            &lt;td th:text=<span class="hljs-string">&quot;$&#123;user.id&#125;&quot;</span>&gt;&lt;/td&gt;<br>            &lt;td&gt;[[$&#123;user.name&#125;]]&lt;/td&gt;<br>            &lt;td th:text=<span class="hljs-string">&quot;$&#123;user.age&#125;&quot;</span>&gt;Win <span class="hljs-number">95</span>+&lt;/td&gt;<br>            &lt;td th:text=<span class="hljs-string">&quot;$&#123;user.email&#125;&quot;</span>&gt;<span class="hljs-number">4</span>&lt;/td&gt;<br>            &lt;td&gt;<br>                &lt;a th:href=<span class="hljs-string">&quot;@&#123;/user/delete/&#123;id&#125;(id=$&#123;user.id&#125;,pn=$&#123;users.current&#125;)&#125;&quot;</span> <br>                   class=<span class="hljs-string">&quot;btn btn-danger btn-sm&quot;</span> type=<span class="hljs-string">&quot;button&quot;</span>&gt;删除&lt;/a&gt;<br>            &lt;/td&gt;<br>        &lt;/tr&gt;<br>    &lt;/tfoot&gt;<br>&lt;/table&gt;<br><br>&lt;div class=<span class="hljs-string">&quot;row-fluid&quot;</span>&gt;<br>    &lt;div class=<span class="hljs-string">&quot;span6&quot;</span>&gt;<br>        &lt;div class=<span class="hljs-string">&quot;dataTables_info&quot;</span> id=<span class="hljs-string">&quot;dynamic-table_info&quot;</span>&gt;<br>            当前第[[$&#123;users.current&#125;]]页  总计 [[$&#123;users.pages&#125;]]页  共[[$&#123;users.total&#125;]]条记录<br>        &lt;/div&gt;<br>    &lt;/div&gt;<br>    &lt;div class=<span class="hljs-string">&quot;span6&quot;</span>&gt;<br>        &lt;div class=<span class="hljs-string">&quot;dataTables_paginate paging_bootstrap pagination&quot;</span>&gt;<br>            &lt;ul&gt;<br>                &lt;li class=<span class="hljs-string">&quot;prev disabled&quot;</span>&gt;&lt;a href=<span class="hljs-string">&quot;#&quot;</span>&gt;← 前一页&lt;/a&gt;&lt;/li&gt;<br>                &lt;li th:class=<span class="hljs-string">&quot;$&#123;num == users.current?&#x27;active&#x27;:&#x27;&#x27;&#125;&quot;</span> <br>                    th:each=<span class="hljs-string">&quot;num:$&#123;#numbers.sequence(1,users.pages)&#125;&quot;</span> &gt;<br>                    &lt;a th:href=<span class="hljs-string">&quot;@&#123;/dynamic_table(pn=$&#123;num&#125;)&#125;&quot;</span>&gt;[[$&#123;num&#125;]]&lt;/a&gt;<br>                &lt;/li&gt;<br>                &lt;li class=<span class="hljs-string">&quot;next disabled&quot;</span>&gt;&lt;a href=<span class="hljs-string">&quot;#&quot;</span>&gt;下一页 → &lt;/a&gt;&lt;/li&gt;<br>            &lt;/ul&gt;<br>        &lt;/div&gt;<br>    &lt;/div&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p><code>#numbers</code>表示methods for formatting numeric objects.<a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#expression-utility-objects">link</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/user/delete/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">deleteUser</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id,</span><br><span class="hljs-params">                         <span class="hljs-meta">@RequestParam(value = &quot;pn&quot;,defaultValue = &quot;1&quot;)</span>Integer pn,</span><br><span class="hljs-params">                         RedirectAttributes ra)</span>&#123;<br><br>    userService.removeById(id);<br><br>    ra.addAttribute(<span class="hljs-string">&quot;pn&quot;</span>,pn);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/dynamic_table&quot;</span>;<br>&#125;<br><br><span class="hljs-meta">@GetMapping(&quot;/dynamic_table&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">dynamic_table</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value=&quot;pn&quot;,defaultValue = &quot;1&quot;)</span> Integer pn,Model model)</span>&#123;<br>    <span class="hljs-comment">//表格内容的遍历</span><br><br>    <span class="hljs-comment">//从数据库中查出user表中的用户进行展示</span><br><br>    <span class="hljs-comment">//构造分页参数</span><br>    Page&lt;User&gt; page = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(pn, <span class="hljs-number">2</span>);<br>    <span class="hljs-comment">//调用page进行分页</span><br>    Page&lt;User&gt; userPage = userService.page(page, <span class="hljs-literal">null</span>);<br><br>    model.addAttribute(<span class="hljs-string">&quot;users&quot;</span>,userPage);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;table/dynamic_table&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="准备阿里云Redis环境"><a href="#准备阿里云Redis环境" class="headerlink" title="准备阿里云Redis环境"></a>准备阿里云Redis环境</h2><p><strong>添加依赖</strong>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--导入jedis--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>redis.clients<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jedis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>RedisAutoConfiguration</code>自动配置类，RedisProperties 属性类 –&gt; spring.redis.xxx是对redis的配置。</li><li>连接工厂<code>LettuceConnectionConfiguration</code>、<code>JedisConnectionConfiguration</code>是准备好的。</li><li>自动注入了<code>RedisTemplate&lt;Object, Object&gt;</code>，<code>xxxTemplate</code>。</li><li>自动注入了<code>StringRedisTemplate</code>，key，value都是String</li><li>底层只要我们使用<code>StringRedisTemplate</code>、<code>RedisTemplate</code>就可以操作Redis。</li></ul><p><strong>外网Redis环境搭建</strong>：</p><ol><li>阿里云按量付费Redis，其中选择<strong>经典网络</strong>。</li><li>申请Redis的公网连接地址。</li><li>修改白名单，允许<code>0.0.0.0/0</code>访问。</li></ol><h2 id="Redis操作与统计小实验"><a href="#Redis操作与统计小实验" class="headerlink" title="Redis操作与统计小实验"></a>Redis操作与统计小实验</h2><p>相关Redis配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">spring:<br>  redis:<br>#   url: redis:<span class="hljs-comment">//lfy:Lfy123456@r-bp1nc7reqesxisgxpipd.redis.rds.aliyuncs.com:6379</span><br>    host: r-bp1nc7reqesxisgxpipd.redis.rds.aliyuncs.com<br>    port: <span class="hljs-number">6379</span><br>    password: lfy:Lfy123456<br>    client-type: jedis<br>    jedis:<br>      pool:<br>        max-active: <span class="hljs-number">10</span><br>#   lettuce:# 另一个用来连接redis的java框架<br>#      pool:<br>#        max-active: <span class="hljs-number">10</span><br>#        min-idle: <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>测试Redis连接：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Boot05WebAdminApplicationTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    StringRedisTemplate redisTemplate;<br><br><br>    <span class="hljs-meta">@Autowired</span><br>    RedisConnectionFactory redisConnectionFactory;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testRedis</span><span class="hljs-params">()</span>&#123;<br>        ValueOperations&lt;String, String&gt; operations = redisTemplate.opsForValue();<br><br>        operations.set(<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-string">&quot;world&quot;</span>);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">hello</span> <span class="hljs-operator">=</span> operations.get(<span class="hljs-string">&quot;hello&quot;</span>);<br>        System.out.println(hello);<br><br>        System.out.println(redisConnectionFactory.getClass());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Redis Desktop Manager：可视化Redis管理软件。</p><p>URL统计拦截器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisUrlCountInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    StringRedisTemplate redisTemplate;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> request.getRequestURI();<br><br>        <span class="hljs-comment">//默认每次访问当前uri就会计数+1</span><br>        redisTemplate.opsForValue().increment(uri);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注册URL统计拦截器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AdminWebConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    RedisUrlCountInterceptor redisUrlCountInterceptor;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br><br>        registry.addInterceptor(redisUrlCountInterceptor)<br>                .addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/&quot;</span>,<span class="hljs-string">&quot;/login&quot;</span>,<span class="hljs-string">&quot;/css/**&quot;</span>,<span class="hljs-string">&quot;/fonts/**&quot;</span>,<span class="hljs-string">&quot;/images/**&quot;</span>,<br>                        <span class="hljs-string">&quot;/js/**&quot;</span>,<span class="hljs-string">&quot;/aa/**&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Filter、Interceptor 几乎拥有相同的功能？</p><ul><li>Filter是Servlet定义的原生组件，它的好处是脱离Spring应用也能使用。</li><li>Interceptor是Spring定义的接口，可以使用Spring的自动装配等功能。</li></ul><p>调用Redis内的统计数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IndexController</span> &#123;<br><br><span class="hljs-meta">@Autowired</span><br>    StringRedisTemplate redisTemplate;<br>    <br><span class="hljs-meta">@GetMapping(&quot;/main.html&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">mainPage</span><span class="hljs-params">(HttpSession session,Model model)</span>&#123;<br><br>        log.info(<span class="hljs-string">&quot;当前方法是：&#123;&#125;&quot;</span>,<span class="hljs-string">&quot;mainPage&quot;</span>);<br><br>        ValueOperations&lt;String, String&gt; opsForValue =<br>                redisTemplate.opsForValue();<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> opsForValue.get(<span class="hljs-string">&quot;/main.html&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> opsForValue.get(<span class="hljs-string">&quot;/sql&quot;</span>);<br><br>        model.addAttribute(<span class="hljs-string">&quot;mainCount&quot;</span>,s);<br>        model.addAttribute(<span class="hljs-string">&quot;sqlCount&quot;</span>,s1);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;main&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="JUnit5简介"><a href="#JUnit5简介" class="headerlink" title="JUnit5简介"></a>JUnit5简介</h2><p><strong>Spring Boot 2.2.0 版本开始引入 JUnit 5 作为单元测试默认库</strong></p><p><a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-annotations">JUnit 5官方文档</a></p><p>作为最新版本的JUnit框架，JUnit5与之前版本的JUnit框架有很大的不同。由三个不同子项目的几个不同模块组成。</p><p><strong>JUnit 5 &#x3D; JUnit Platform + JUnit Jupiter + JUnit Vintage</strong></p><ul><li><strong>JUnit Platform</strong>: Junit Platform是在JVM上启动测试框架的基础，不仅支持Junit自制的测试引擎，其他测试引擎也都可以接入。</li><li><strong>JUnit Jupiter</strong>: JUnit Jupiter提供了JUnit5的新的编程模型，是JUnit5新特性的核心。内部包含了一个<strong>测试引擎</strong>，用于在Junit Platform上运行。</li><li><strong>JUnit Vintage</strong>: 由于JUint已经发展多年，为了照顾老的项目，JUnit Vintage提供了兼容JUnit4.x，JUnit3.x的测试引擎。</li></ul><p><strong>注意</strong>：</p><ul><li>SpringBoot 2.4 以上版本移除了默认对 Vintage 的依赖。如果需要兼容JUnit4需要自行引入（不能使用JUnit4的功能 @Test）</li><li>JUnit 5’s Vintage已经从<code>spring-boot-starter-test</code>从移除。如果需要继续兼容Junit4需要自行引入Vintage依赖：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.vintage<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-vintage-engine<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.hamcrest<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hamcrest-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>使用添加JUnit 5，添加对应的starter：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>Spring的JUnit 5的基本单元测试模板（Spring的JUnit4的是<code>@SpringBootTest</code>+<code>@RunWith(SpringRunner.class)</code>）：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.jupiter.api.Assertions;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<span class="hljs-comment">//注意不是org.junit.Test（这是JUnit4版本的）</span><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringBootApplicationTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> Component component;<br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-comment">//@Transactional 标注后连接数据库有回滚功能</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> &#123;<br>Assertions.assertEquals(<span class="hljs-number">5</span>, component.getFive());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="常用测试注解"><a href="#常用测试注解" class="headerlink" title="常用测试注解"></a>常用测试注解</h2><p><a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-annotations">官方文档 - Annotations</a></p><ul><li><strong>@Test</strong>：表示方法是测试方法。但是与JUnit4的@Test不同，他的职责非常单一不能声明任何属性，拓展的测试将会由Jupiter提供额外测试</li><li><strong>@ParameterizedTest</strong>：表示方法是参数化测试。</li><li><strong>@RepeatedTest</strong>：表示方法可重复执行。</li><li><strong>@DisplayName</strong>：为测试类或者测试方法设置展示名称。</li><li><strong>@BeforeEach</strong>：表示在<strong>每个</strong>单元测试<strong>之前</strong>执行。</li><li><strong>@AfterEach</strong>：表示在<strong>每个</strong>单元测试<strong>之后</strong>执行。</li><li><strong>@BeforeAll</strong>：表示在<strong>所有</strong>单元测试<strong>之前</strong>执行。</li><li><strong>@AfterAll</strong>：表示在<strong>所有</strong>单元测试<strong>之后</strong>执行。</li><li><strong>@Tag</strong>：表示单元测试类别，类似于JUnit4中的@Categories。</li><li><strong>@Disabled</strong>：表示测试类或测试方法不执行，类似于JUnit4中的@Ignore。</li><li><strong>@Timeout</strong>：表示测试方法运行如果超过了指定时间将会返回错误。</li><li><strong>@ExtendWith</strong>：为测试类或测试方法提供扩展类引用。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.jupiter.api.*;<br><br><span class="hljs-meta">@DisplayName(&quot;junit5功能测试类&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Junit5Test</span> &#123;<br><br><br>    <span class="hljs-meta">@DisplayName(&quot;测试displayname注解&quot;)</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDisplayName</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-number">1</span>);<br>        System.out.println(jdbcTemplate);<br>    &#125;<br>    <br>    <span class="hljs-meta">@ParameterizedTest</span><br>    <span class="hljs-meta">@ValueSource(strings = &#123; &quot;racecar&quot;, &quot;radar&quot;, &quot;able was I ere I saw elba&quot; &#125;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">palindromes</span><span class="hljs-params">(String candidate)</span> &#123;<br>        assertTrue(StringUtils.isPalindrome(candidate));<br>    &#125;<br>    <br><br>    <span class="hljs-meta">@Disabled</span><br>    <span class="hljs-meta">@DisplayName(&quot;测试方法2&quot;)</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-number">2</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@RepeatedTest(5)</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-number">5</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 规定方法超时时间。超出时间测试出异常</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> InterruptedException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Timeout(value = 500, unit = TimeUnit.MILLISECONDS)</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testTimeout</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        Thread.sleep(<span class="hljs-number">600</span>);<br>    &#125;<br><br><br>    <span class="hljs-meta">@BeforeEach</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testBeforeEach</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;测试就要开始了...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@AfterEach</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAfterEach</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;测试结束了...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@BeforeAll</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testBeforeAll</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;所有测试就要开始了...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@AfterAll</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAfterAll</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;所有测试以及结束了...&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="断言机制"><a href="#断言机制" class="headerlink" title="断言机制"></a>断言机制</h2><p>断言Assertion是测试方法中的核心部分，用来对测试需要满足的条件进行验证。这些断言方法都是org.junit.jupiter.api.Assertions的静态方法。检查业务逻辑返回的数据是否合理。所有的测试运行结束以后，会有一个详细的测试报告。</p><p>JUnit 5 内置的断言可以分成如下几个类别：</p><h3 id="简单断言"><a href="#简单断言" class="headerlink" title="简单断言"></a>简单断言</h3><p>用来对单个值进行简单的验证。如：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>assertEquals</td><td>判断两个对象或两个原始类型是否相等</td></tr><tr><td>assertNotEquals</td><td>判断两个对象或两个原始类型是否不相等</td></tr><tr><td>assertSame</td><td>判断两个对象引用是否指向同一个对象</td></tr><tr><td>assertNotSame</td><td>判断两个对象引用是否指向不同的对象</td></tr><tr><td>assertTrue</td><td>判断给定的布尔值是否为 true</td></tr><tr><td>assertFalse</td><td>判断给定的布尔值是否为 false</td></tr><tr><td>assertNull</td><td>判断给定的对象引用是否为 null</td></tr><tr><td>assertNotNull</td><td>判断给定的对象引用是否不为 null</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-meta">@DisplayName(&quot;simple assertion&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">simple</span><span class="hljs-params">()</span> &#123;<br>     assertEquals(<span class="hljs-number">3</span>, <span class="hljs-number">1</span> + <span class="hljs-number">2</span>, <span class="hljs-string">&quot;simple math&quot;</span>);<br>     assertNotEquals(<span class="hljs-number">3</span>, <span class="hljs-number">1</span> + <span class="hljs-number">1</span>);<br><br>     assertNotSame(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>());<br>     <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>     assertSame(obj, obj);<br><br>     assertFalse(<span class="hljs-number">1</span> &gt; <span class="hljs-number">2</span>);<br>     assertTrue(<span class="hljs-number">1</span> &lt; <span class="hljs-number">2</span>);<br><br>     assertNull(<span class="hljs-literal">null</span>);<br>     assertNotNull(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>());<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="数组断言"><a href="#数组断言" class="headerlink" title="数组断言"></a>数组断言</h3><p>通过 assertArrayEquals 方法来判断两个对象或原始类型的数组是否相等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-meta">@DisplayName(&quot;array assertion&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">array</span><span class="hljs-params">()</span> &#123;<br>assertArrayEquals(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[] &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="组合断言"><a href="#组合断言" class="headerlink" title="组合断言"></a>组合断言</h3><p><code>assertAll()</code>方法接受多个 <code>org.junit.jupiter.api.Executable</code> 函数式接口的实例作为要验证的断言，可以通过 lambda 表达式很容易的提供这些断言。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-meta">@DisplayName(&quot;assert all&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">all</span><span class="hljs-params">()</span> &#123;<br> assertAll(<span class="hljs-string">&quot;Math&quot;</span>,<br>    () -&gt; assertEquals(<span class="hljs-number">2</span>, <span class="hljs-number">1</span> + <span class="hljs-number">1</span>),<br>    () -&gt; assertTrue(<span class="hljs-number">1</span> &gt; <span class="hljs-number">0</span>)<br> );<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="异常断言"><a href="#异常断言" class="headerlink" title="异常断言"></a>异常断言</h3><p>在JUnit4时期，想要测试方法的异常情况时，需要用<code>@Rule</code>注解的<code>ExpectedException</code>变量还是比较麻烦的。而JUnit5提供了一种新的断言方式<code>Assertions.assertThrows()</code>，配合函数式编程就可以进行使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-meta">@DisplayName(&quot;异常测试&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exceptionTest</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ArithmeticException</span> <span class="hljs-variable">exception</span> <span class="hljs-operator">=</span> Assertions.assertThrows(<br>           <span class="hljs-comment">//扔出断言异常</span><br>            ArithmeticException.class, () -&gt; System.out.println(<span class="hljs-number">1</span> % <span class="hljs-number">0</span>));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="超时断言"><a href="#超时断言" class="headerlink" title="超时断言"></a>超时断言</h3><p>JUnit5还提供了Assertions.assertTimeout()为测试方法设置了超时时间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-meta">@DisplayName(&quot;超时测试&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">timeoutTest</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//如果测试方法时间超过1s将会异常</span><br>    Assertions.assertTimeout(Duration.ofMillis(<span class="hljs-number">1000</span>), () -&gt; Thread.sleep(<span class="hljs-number">500</span>));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="快速失败"><a href="#快速失败" class="headerlink" title="快速失败"></a>快速失败</h3><p>通过 fail 方法直接使得测试失败。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-meta">@DisplayName(&quot;fail&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shouldFail</span><span class="hljs-params">()</span> &#123;<br>fail(<span class="hljs-string">&quot;This should fail&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><p>JUnit 5 中的前置条件（assumptions【假设】）类似于断言，不同之处在于不满足的<strong>断言assertions</strong>会使得测试方法失败，而<strong>不满足的前置条件只会使得测试方法的执行终止</strong>。</p><p>前置条件可以看成是测试方法执行的前提，当该前提不满足时，就没有继续执行的必要。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@DisplayName(&quot;前置条件&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AssumptionsTest</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">environment</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;DEV&quot;</span>;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-meta">@DisplayName(&quot;simple&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">simpleAssume</span><span class="hljs-params">()</span> &#123;<br>        assumeTrue(Objects.equals(<span class="hljs-built_in">this</span>.environment, <span class="hljs-string">&quot;DEV&quot;</span>));<br>        assumeFalse(() -&gt; Objects.equals(<span class="hljs-built_in">this</span>.environment, <span class="hljs-string">&quot;PROD&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-meta">@DisplayName(&quot;assume then do&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">assumeThenDo</span><span class="hljs-params">()</span> &#123;<br>        assumingThat(<br>            Objects.equals(<span class="hljs-built_in">this</span>.environment, <span class="hljs-string">&quot;DEV&quot;</span>),<br>            () -&gt; System.out.println(<span class="hljs-string">&quot;In DEV&quot;</span>)<br>        );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>assumeTrue</code> 和 <code>assumFalse</code> 确保给定的条件为 <code>true</code> 或 <code>false</code>，不满足条件会使得测试执行终止。</p><p><code>assumingThat</code> 的参数是表示条件的布尔值和对应的 Executable 接口的实现对象。只有条件满足时，<code>Executable</code> 对象才会被执行；当条件不满足时，测试执行并不会终止。</p><h2 id="嵌套测试"><a href="#嵌套测试" class="headerlink" title="嵌套测试"></a>嵌套测试</h2><p><a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-nested">官方文档 - Nested Tests</a></p><p>JUnit 5 可以通过 Java 中的内部类和<code>@Nested</code> 注解实现嵌套测试，从而可以更好的把相关的测试方法组织在一起。在内部类中可以使用<code>@BeforeEach</code> 和<code>@AfterEach</code>注解，而且嵌套的层次没有限制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@DisplayName(&quot;A stack&quot;)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestingAStackDemo</span> &#123;<br><br>    Stack&lt;Object&gt; stack;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-meta">@DisplayName(&quot;is instantiated with new Stack()&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">isInstantiatedWithNew</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>    &#125;<br><br>    <span class="hljs-meta">@Nested</span><br>    <span class="hljs-meta">@DisplayName(&quot;when new&quot;)</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">WhenNew</span> &#123;<br><br>        <span class="hljs-meta">@BeforeEach</span><br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">createNewStack</span><span class="hljs-params">()</span> &#123;<br>            stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>        &#125;<br><br>        <span class="hljs-meta">@Test</span><br>        <span class="hljs-meta">@DisplayName(&quot;is empty&quot;)</span><br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>            assertTrue(stack.isEmpty());<br>        &#125;<br><br>        <span class="hljs-meta">@Test</span><br>        <span class="hljs-meta">@DisplayName(&quot;throws EmptyStackException when popped&quot;)</span><br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">throwsExceptionWhenPopped</span><span class="hljs-params">()</span> &#123;<br>            assertThrows(EmptyStackException.class, stack::pop);<br>        &#125;<br><br>        <span class="hljs-meta">@Test</span><br>        <span class="hljs-meta">@DisplayName(&quot;throws EmptyStackException when peeked&quot;)</span><br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">throwsExceptionWhenPeeked</span><span class="hljs-params">()</span> &#123;<br>            assertThrows(EmptyStackException.class, stack::peek);<br>        &#125;<br><br>        <span class="hljs-meta">@Nested</span><br>        <span class="hljs-meta">@DisplayName(&quot;after pushing an element&quot;)</span><br>        <span class="hljs-keyword">class</span> <span class="hljs-title class_">AfterPushing</span> &#123;<br><br>            <span class="hljs-type">String</span> <span class="hljs-variable">anElement</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;an element&quot;</span>;<br><br>            <span class="hljs-meta">@BeforeEach</span><br>            <span class="hljs-keyword">void</span> <span class="hljs-title function_">pushAnElement</span><span class="hljs-params">()</span> &#123;<br>                stack.push(anElement);<br>            &#125;<br><br>            <span class="hljs-meta">@Test</span><br>            <span class="hljs-meta">@DisplayName(&quot;it is no longer empty&quot;)</span><br>            <span class="hljs-keyword">void</span> <span class="hljs-title function_">isNotEmpty</span><span class="hljs-params">()</span> &#123;<br>                assertFalse(stack.isEmpty());<br>            &#125;<br><br>            <span class="hljs-meta">@Test</span><br>            <span class="hljs-meta">@DisplayName(&quot;returns the element when popped and is empty&quot;)</span><br>            <span class="hljs-keyword">void</span> <span class="hljs-title function_">returnElementWhenPopped</span><span class="hljs-params">()</span> &#123;<br>                assertEquals(anElement, stack.pop());<br>                assertTrue(stack.isEmpty());<br>            &#125;<br><br>            <span class="hljs-meta">@Test</span><br>            <span class="hljs-meta">@DisplayName(&quot;returns the element when peeked but remains not empty&quot;)</span><br>            <span class="hljs-keyword">void</span> <span class="hljs-title function_">returnElementWhenPeeked</span><span class="hljs-params">()</span> &#123;<br>                assertEquals(anElement, stack.peek());<br>                assertFalse(stack.isEmpty());<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="参数化测试"><a href="#参数化测试" class="headerlink" title="参数化测试"></a>参数化测试</h2><p><a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-parameterized-tests">官方文档 - Parameterized Tests</a></p><p>参数化测试是JUnit5很重要的一个新特性，它使得用不同的参数多次运行测试成为了可能，也为我们的单元测试带来许多便利。</p><p>利用@ValueSource等注解，指定入参，我们将可以使用不同的参数进行多次单元测试，而不需要每新增一个参数就新增一个单元测试，省去了很多冗余代码。</p><p>利用**@ValueSource**等注解，指定入参，我们将可以使用不同的参数进行多次单元测试，而不需要每新增一个参数就新增一个单元测试，省去了很多冗余代码。</p><ul><li><strong>@ValueSource</strong>: 为参数化测试指定入参来源，支持八大基础类以及String类型,Class类型</li><li><strong>@NullSource</strong>: 表示为参数化测试提供一个null的入参</li><li><strong>@EnumSource</strong>: 表示为参数化测试提供一个枚举入参</li><li><strong>@CsvFileSource</strong>：表示读取指定CSV文件内容作为参数化测试入参</li><li><strong>@MethodSource</strong>：表示读取指定方法的返回值作为参数化测试入参(注意方法返回需要是一个流)</li></ul><p>当然如果参数化测试仅仅只能做到指定普通的入参还达不到让我觉得惊艳的地步。让我真正感到他的强大之处的地方在于他可以支持外部的各类入参。如:CSV,YML,JSON 文件甚至方法的返回值也可以作为入参。只需要去实现**<code>ArgumentsProvider</code>**接口，任何外部文件都可以作为它的入参。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ParameterizedTest</span><br><span class="hljs-meta">@ValueSource(strings = &#123;&quot;one&quot;, &quot;two&quot;, &quot;three&quot;&#125;)</span><br><span class="hljs-meta">@DisplayName(&quot;参数化测试1&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parameterizedTest1</span><span class="hljs-params">(String string)</span> &#123;<br>    System.out.println(string);<br>    Assertions.assertTrue(StringUtils.isNotBlank(string));<br>&#125;<br><br><br><span class="hljs-meta">@ParameterizedTest</span><br><span class="hljs-meta">@MethodSource(&quot;method&quot;)</span>    <span class="hljs-comment">//指定方法名</span><br><span class="hljs-meta">@DisplayName(&quot;方法来源参数&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testWithExplicitLocalMethodSource</span><span class="hljs-params">(String name)</span> &#123;<br>    System.out.println(name);<br>    Assertions.assertNotNull(name);<br>&#125;<br><br><span class="hljs-keyword">static</span> Stream&lt;String&gt; <span class="hljs-title function_">method</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> Stream.of(<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;banana&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="迁移指南"><a href="#迁移指南" class="headerlink" title="迁移指南"></a>迁移指南</h3><p><a href="https://junit.org/junit5/docs/current/user-guide/#migrating-from-junit4">官方文档 - Migrating from JUnit 4</a></p><p>在进行迁移的时候需要注意如下的变化：</p><ul><li>注解在 <code>org.junit.jupiter.api</code> 包中，断言在 <code>org.junit.jupiter.api.Assertions</code> 类中，前置条件在 <code>org.junit.jupiter.api.Assumptions</code> 类中。</li><li>把<code>@Before</code> 和<code>@After</code> 替换成<code>@BeforeEach</code> 和<code>@AfterEach</code>。</li><li>把<code>@BeforeClass</code> 和<code>@AfterClass</code> 替换成<code>@BeforeAll</code> 和@AfterAll。</li><li>把<code>@Ignore</code> 替换成<code>@Disabled</code>。</li><li>把<code>@Category</code> 替换成<code>@Tag</code>。</li><li>把<code>@RunWith</code>、<code>@Rule</code> 和<code>@ClassRule</code> 替换成<code>@ExtendWith</code>。</li></ul><h2 id="SpringBoot-Actuator与Endpoint"><a href="#SpringBoot-Actuator与Endpoint" class="headerlink" title="SpringBoot Actuator与Endpoint"></a>SpringBoot Actuator与Endpoint</h2><p>未来每一个微服务在云上部署以后，我们都需要对其进行监控、追踪、审计、控制等。SpringBoot就抽取了Actuator场景，使得我们每个微服务快速引用即可获得生产级别的应用监控、审计等功能。</p><p><a href="https://docs.spring.io/spring-boot/docs/2.4.2/reference/htmlsingle/#production-ready">官方文档 - Spring Boot Actuator: Production-ready Features</a></p><p><strong>1.x与2.x的不同</strong>：</p><ul><li>SpringBoot Actuator 1.x<ul><li>支持SpringMVC</li><li>基于继承方式进行扩展</li><li>层级Metrics配置</li><li>自定义Metrics收集</li><li>默认较少的安全策略</li></ul></li><li>SpringBoot Actuator 2.x<ul><li>支持SpringMVC、JAX-RS以及Webflux</li><li>注解驱动进行扩展</li><li>层级&amp;名称空间Metrics</li><li>底层使用MicroMeter，强大、便捷默认丰富的安全策略</li></ul></li></ul><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><ul><li>添加依赖：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>访问<code>http://localhost:8080/actuator/**</code>。</li><li>暴露所有监控信息为HTTP。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">management:</span><br>  <span class="hljs-attr">endpoints:</span><br>    <span class="hljs-attr">enabled-by-default:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#暴露所有端点信息</span><br>    <span class="hljs-attr">web:</span><br>      <span class="hljs-attr">exposure:</span><br>        <span class="hljs-attr">include:</span> <span class="hljs-string">&#x27;*&#x27;</span>  <span class="hljs-comment">#以web方式暴露</span><br></code></pre></td></tr></table></figure><ul><li>测试例子<ul><li><a href="http://localhost:8080/actuator/beans">http://localhost:8080/actuator/beans</a></li><li><a href="http://localhost:8080/actuator/configprops">http://localhost:8080/actuator/configprops</a></li><li><a href="http://localhost:8080/actuator/metrics">http://localhost:8080/actuator/metrics</a></li><li><a href="http://localhost:8080/actuator/metrics/jvm.gc.pause">http://localhost:8080/actuator/metrics/jvm.gc.pause</a></li><li><a href="http://localhost:8080/actuator/metrics/endpointName/detailPath">http://localhost:8080/actuator/metrics/endpointName/detailPath</a></li></ul></li></ul><blockquote><p>actuator</p><p>英 [ˈæktjʊeɪtə] 美 [ˈæktjuˌeɪtər]</p><p>n. 致动（促动，激励，调节）器；传动（装置，机构）；拖动装置；马达；操作机构；执行机构（元件）；（电磁铁）螺线管；操纵装置（阀门）；调速控制器；往复运动油（气）缸；作动筒</p></blockquote><blockquote><p>metric</p><p>英 [ˈmetrɪk] 美 [ˈmetrɪk]</p><p>adj. 米制的;公制的;按公制制作的;用公制测量的</p><p>n. 度量标准;[数学]度量;诗体;韵文;诗韵</p></blockquote><h2 id="常使用的端点及开启与禁用"><a href="#常使用的端点及开启与禁用" class="headerlink" title="常使用的端点及开启与禁用"></a>常使用的端点及开启与禁用</h2><h3 id="常使用的端点"><a href="#常使用的端点" class="headerlink" title="常使用的端点"></a>常使用的端点</h3><table><thead><tr><th>ID</th><th>描述</th></tr></thead><tbody><tr><td><code>auditevents</code></td><td>暴露当前应用程序的审核事件信息。需要一个<code>AuditEventRepository组件</code>。</td></tr><tr><td><code>beans</code></td><td>显示应用程序中所有Spring Bean的完整列表。</td></tr><tr><td><code>caches</code></td><td>暴露可用的缓存。</td></tr><tr><td><code>conditions</code></td><td>显示自动配置的所有条件信息，包括匹配或不匹配的原因。</td></tr><tr><td><code>configprops</code></td><td>显示所有<code>@ConfigurationProperties</code>。</td></tr><tr><td><code>env</code></td><td>暴露Spring的属性<code>ConfigurableEnvironment</code></td></tr><tr><td><code>flyway</code></td><td>显示已应用的所有Flyway数据库迁移。 需要一个或多个<code>Flyway</code>组件。</td></tr><tr><td><code>health</code></td><td>显示应用程序运行状况信息。</td></tr><tr><td><code>httptrace</code></td><td>显示HTTP跟踪信息（默认情况下，最近100个HTTP请求-响应）。需要一个<code>HttpTraceRepository</code>组件。</td></tr><tr><td><code>info</code></td><td>显示应用程序信息。</td></tr><tr><td><code>integrationgraph</code></td><td>显示Spring <code>integrationgraph</code> 。需要依赖<code>spring-integration-core</code>。</td></tr><tr><td><code>loggers</code></td><td>显示和修改应用程序中日志的配置。</td></tr><tr><td><code>liquibase</code></td><td>显示已应用的所有Liquibase数据库迁移。需要一个或多个<code>Liquibase</code>组件。</td></tr><tr><td><code>metrics</code></td><td>显示当前应用程序的“指标”信息。</td></tr><tr><td><code>mappings</code></td><td>显示所有<code>@RequestMapping</code>路径列表。</td></tr><tr><td><code>scheduledtasks</code></td><td>显示应用程序中的计划任务。</td></tr><tr><td><code>sessions</code></td><td>允许从Spring Session支持的会话存储中检索和删除用户会话。需要使用Spring Session的基于Servlet的Web应用程序。</td></tr><tr><td><code>shutdown</code></td><td>使应用程序正常关闭。默认禁用。</td></tr><tr><td><code>startup</code></td><td>显示由<code>ApplicationStartup</code>收集的启动步骤数据。需要使用<code>SpringApplication</code>进行配置<code>BufferingApplicationStartup</code>。</td></tr><tr><td><code>threaddump</code></td><td>执行线程转储。</td></tr></tbody></table><p>如果您的应用程序是Web应用程序（Spring MVC，Spring WebFlux或Jersey），则可以使用以下附加端点：</p><table><thead><tr><th>ID</th><th>描述</th></tr></thead><tbody><tr><td><code>heapdump</code></td><td>返回<code>hprof</code>堆转储文件。</td></tr><tr><td><code>jolokia</code></td><td>通过HTTP暴露JMX bean（需要引入Jolokia，不适用于WebFlux）。需要引入依赖<code>jolokia-core</code>。</td></tr><tr><td><code>logfile</code></td><td>返回日志文件的内容（如果已设置<code>logging.file.name</code>或<code>logging.file.path</code>属性）。支持使用HTTP<code>Range</code>标头来检索部分日志文件的内容。</td></tr><tr><td><code>prometheus</code></td><td>以Prometheus服务器可以抓取的格式公开指标。需要依赖<code>micrometer-registry-prometheus</code>。</td></tr></tbody></table><p>其中最常用的Endpoint：</p><ul><li><strong>Health：监控状况</strong></li><li><strong>Metrics：运行时指标</strong></li><li><strong>Loggers：日志记录</strong></li></ul><h3 id="Health-Endpoint"><a href="#Health-Endpoint" class="headerlink" title="Health Endpoint"></a>Health Endpoint</h3><p>健康检查端点，我们一般用于在云平台，平台会定时的检查应用的健康状况，我们就需要Health Endpoint可以为平台返回当前应用的一系列组件健康状况的集合。</p><p>重要的几点：</p><ul><li>health endpoint返回的结果，应该是一系列健康检查后的一个汇总报告。</li><li>很多的健康检查默认已经自动配置好了，比如：数据库、redis等。</li><li>可以很容易的添加自定义的健康检查机制。</li></ul><h3 id="Metrics-Endpoint"><a href="#Metrics-Endpoint" class="headerlink" title="Metrics Endpoint"></a>Metrics Endpoint</h3><p>提供详细的、层级的、空间指标信息，这些信息可以被pull（主动推送）或者push（被动获取）方式得到：</p><ul><li>通过Metrics对接多种监控系统。</li><li>简化核心Metrics开发。</li><li>添加自定义Metrics或者扩展已有Metrics。</li></ul><h3 id="开启与禁用Endpoints"><a href="#开启与禁用Endpoints" class="headerlink" title="开启与禁用Endpoints"></a>开启与禁用Endpoints</h3><ul><li>默认所有的Endpoint除过shutdown都是开启的。</li><li>需要开启或者禁用某个Endpoint。配置模式为<code>management.endpoint.&lt;endpointName&gt;.enabled = true</code></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">management:</span><br>  <span class="hljs-attr">endpoint:</span><br>    <span class="hljs-attr">beans:</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><ul><li>或者禁用所有的Endpoint然后手动开启指定的Endpoint。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">management:</span><br>  <span class="hljs-attr">endpoints:</span><br>    <span class="hljs-attr">enabled-by-default:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">endpoint:</span><br>    <span class="hljs-attr">beans:</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">health:</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="暴露Endpoints"><a href="#暴露Endpoints" class="headerlink" title="暴露Endpoints"></a>暴露Endpoints</h3><p>支持的暴露方式</p><ul><li>HTTP：默认只暴露health和info。</li><li>JMX：默认暴露所有Endpoint。</li><li>除过health和info，剩下的Endpoint都应该进行保护访问。如果引入Spring Security，则会默认配置安全访问规则。</li></ul><table><thead><tr><th>ID</th><th>JMX</th><th>Web</th></tr></thead><tbody><tr><td><code>auditevents</code></td><td>Yes</td><td>No</td></tr><tr><td><code>beans</code></td><td>Yes</td><td>No</td></tr><tr><td><code>caches</code></td><td>Yes</td><td>No</td></tr><tr><td><code>conditions</code></td><td>Yes</td><td>No</td></tr><tr><td><code>configprops</code></td><td>Yes</td><td>No</td></tr><tr><td><code>env</code></td><td>Yes</td><td>No</td></tr><tr><td><code>flyway</code></td><td>Yes</td><td>No</td></tr><tr><td><code>health</code></td><td>Yes</td><td>Yes</td></tr><tr><td><code>heapdump</code></td><td>N&#x2F;A</td><td>No</td></tr><tr><td><code>httptrace</code></td><td>Yes</td><td>No</td></tr><tr><td><code>info</code></td><td>Yes</td><td>Yes</td></tr><tr><td><code>integrationgraph</code></td><td>Yes</td><td>No</td></tr><tr><td><code>jolokia</code></td><td>N&#x2F;A</td><td>No</td></tr><tr><td><code>logfile</code></td><td>N&#x2F;A</td><td>No</td></tr><tr><td><code>loggers</code></td><td>Yes</td><td>No</td></tr><tr><td><code>liquibase</code></td><td>Yes</td><td>No</td></tr><tr><td><code>metrics</code></td><td>Yes</td><td>No</td></tr><tr><td><code>mappings</code></td><td>Yes</td><td>No</td></tr><tr><td><code>prometheus</code></td><td>N&#x2F;A</td><td>No</td></tr><tr><td><code>scheduledtasks</code></td><td>Yes</td><td>No</td></tr><tr><td><code>sessions</code></td><td>Yes</td><td>No</td></tr><tr><td><code>shutdown</code></td><td>Yes</td><td>No</td></tr><tr><td><code>startup</code></td><td>Yes</td><td>No</td></tr><tr><td><code>threaddump</code></td><td>Yes</td><td>No</td></tr></tbody></table><p>若要更改公开的Endpoint，请配置以下的包含和排除属性：</p><table><thead><tr><th>Property</th><th>Default</th></tr></thead><tbody><tr><td><code>management.endpoints.jmx.exposure.exclude</code></td><td></td></tr><tr><td><code>management.endpoints.jmx.exposure.include</code></td><td><code>*</code></td></tr><tr><td><code>management.endpoints.web.exposure.exclude</code></td><td></td></tr><tr><td><code>management.endpoints.web.exposure.include</code></td><td><code>info, health</code></td></tr></tbody></table><p><a href="https://docs.spring.io/spring-boot/docs/2.4.2/reference/htmlsingle/#production-ready-endpoints-exposing-endpoints">官方文档 - Exposing Endpoints</a></p><h2 id="定制Endpoint"><a href="#定制Endpoint" class="headerlink" title="定制Endpoint"></a>定制Endpoint</h2><h3 id="定制-Health-信息"><a href="#定制-Health-信息" class="headerlink" title="定制 Health 信息"></a>定制 Health 信息</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">management:</span><br>    <span class="hljs-attr">health:</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">show-details:</span> <span class="hljs-string">always</span> <span class="hljs-comment">#总是显示详细信息。可显示每个模块的状态信息</span><br></code></pre></td></tr></table></figure><p>通过实现<code>HealthIndicator</code>接口，或继承<code>MyComHealthIndicator</code>类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.boot.actuate.health.Health;<br><span class="hljs-keyword">import</span> org.springframework.boot.actuate.health.HealthIndicator;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyHealthIndicator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HealthIndicator</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Health <span class="hljs-title function_">health</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">errorCode</span> <span class="hljs-operator">=</span> check(); <span class="hljs-comment">// perform some specific health check</span><br>        <span class="hljs-keyword">if</span> (errorCode != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> Health.down().withDetail(<span class="hljs-string">&quot;Error Code&quot;</span>, errorCode).build();<br>        &#125;<br>        <span class="hljs-keyword">return</span> Health.up().build();<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">构建Health</span><br><span class="hljs-comment">Health build = Health.down()</span><br><span class="hljs-comment">                .withDetail(&quot;msg&quot;, &quot;error service&quot;)</span><br><span class="hljs-comment">                .withDetail(&quot;code&quot;, &quot;500&quot;)</span><br><span class="hljs-comment">                .withException(new RuntimeException())</span><br><span class="hljs-comment">                .build();</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyComHealthIndicator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractHealthIndicator</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 真实的检查方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> builder</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doHealthCheck</span><span class="hljs-params">(Health.Builder builder)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//mongodb。  获取连接进行测试</span><br>        Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-comment">// 检查完成</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-number">1</span> == <span class="hljs-number">2</span>)&#123;<br><span class="hljs-comment">//            builder.up(); //健康</span><br>            builder.status(Status.UP);<br>            map.put(<span class="hljs-string">&quot;count&quot;</span>,<span class="hljs-number">1</span>);<br>            map.put(<span class="hljs-string">&quot;ms&quot;</span>,<span class="hljs-number">100</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">//            builder.down();</span><br>            builder.status(Status.OUT_OF_SERVICE);<br>            map.put(<span class="hljs-string">&quot;err&quot;</span>,<span class="hljs-string">&quot;连接超时&quot;</span>);<br>            map.put(<span class="hljs-string">&quot;ms&quot;</span>,<span class="hljs-number">3000</span>);<br>        &#125;<br><br><br>        builder.withDetail(<span class="hljs-string">&quot;code&quot;</span>,<span class="hljs-number">100</span>)<br>                .withDetails(map);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="定制info信息"><a href="#定制info信息" class="headerlink" title="定制info信息"></a>定制info信息</h3><p>常用两种方式：</p><ul><li>编写配置文件</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">info:</span><br>  <span class="hljs-attr">appName:</span> <span class="hljs-string">boot-admin</span><br>  <span class="hljs-attr">version:</span> <span class="hljs-number">2.0</span><span class="hljs-number">.1</span><br>  <span class="hljs-attr">mavenProjectName:</span> <span class="hljs-string">@project.artifactId@</span>  <span class="hljs-comment">#使用@@可以获取maven的pom文件值</span><br>  <span class="hljs-attr">mavenProjectVersion:</span> <span class="hljs-string">@project.version@</span><br></code></pre></td></tr></table></figure><ul><li>编写InfoContributor</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Collections;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.actuate.info.Info;<br><span class="hljs-keyword">import</span> org.springframework.boot.actuate.info.InfoContributor;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExampleInfoContributor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InfoContributor</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contribute</span><span class="hljs-params">(Info.Builder builder)</span> &#123;<br>        builder.withDetail(<span class="hljs-string">&quot;example&quot;</span>,<br>                Collections.singletonMap(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;value&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="http://localhost:8080/actuator/info">http://localhost:8080/actuator/info</a> 会输出以上方式返回的所有info信息</p><h3 id="定制Metrics信息"><a href="#定制Metrics信息" class="headerlink" title="定制Metrics信息"></a>定制Metrics信息</h3><p><a href="https://docs.spring.io/spring-boot/docs/2.4.2/reference/htmlsingle/#production-ready-metrics-meter">Spring Boot支持的metrics</a></p><p>增加定制Metrics：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyService</span>&#123;<br>    Counter counter;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyService</span><span class="hljs-params">(MeterRegistry meterRegistry)</span>&#123;<br>         counter = meterRegistry.counter(<span class="hljs-string">&quot;myservice.method.running.counter&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>        counter.increment();<br>    &#125;<br>&#125;<br><span class="hljs-number">12345678910</span><br><span class="hljs-comment">//也可以使用下面的方式</span><br><span class="hljs-meta">@Bean</span><br>MeterBinder <span class="hljs-title function_">queueSize</span><span class="hljs-params">(Queue queue)</span> &#123;<br>    <span class="hljs-keyword">return</span> (registry) -&gt; Gauge.builder(<span class="hljs-string">&quot;queueSize&quot;</span>, queue::size).register(registry);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="定制Endpoint-1"><a href="#定制Endpoint-1" class="headerlink" title="定制Endpoint"></a>定制Endpoint</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Endpoint(id = &quot;container&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DockerEndpoint</span> &#123;<br><br>    <span class="hljs-meta">@ReadOperation</span><br>    <span class="hljs-keyword">public</span> Map <span class="hljs-title function_">getDockerInfo</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> Collections.singletonMap(<span class="hljs-string">&quot;info&quot;</span>,<span class="hljs-string">&quot;docker started...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@WriteOperation</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">restartDocker</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;docker restarted....&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>场景：</p><ul><li>开发ReadinessEndpoint来管理程序是否就绪。</li><li>开发LivenessEndpoint来管理程序是否存活。</li></ul><h2 id="Boot-Admin-Server"><a href="#Boot-Admin-Server" class="headerlink" title="Boot Admin Server"></a>Boot Admin Server</h2><p><a href="https://blog.csdn.net/u011863024/article/details/113667946">官方Github</a></p><p><a href="https://codecentric.github.io/spring-boot-admin/2.3.1/#getting-started">官方文档</a></p><p><a href="https://codecentric.github.io/spring-boot-admin/2.3.1/#getting-started">开始使用方法</a></p><h2 id="Profile环境切换"><a href="#Profile环境切换" class="headerlink" title="Profile环境切换"></a>Profile环境切换</h2><p>为了方便多环境适配，Spring Boot简化了profile功能。</p><ul><li>默认配置文件<code>application.yaml</code>任何时候都会加载。</li><li>指定环境配置文件<code>application-&#123;env&#125;.yaml</code>，<code>env</code>通常替代为<code>test</code>，</li><li>激活指定环境<ul><li>配置文件激活：<code>spring.profiles.active=prod</code></li><li>命令行激活：<code>java -jar xxx.jar --spring.profiles.active=prod --person.name=haha</code>（修改配置文件的任意值，<strong>命令行优先</strong>）</li></ul></li><li>默认配置与环境配置同时生效</li><li>同名配置项，profile配置优先</li></ul><h3 id="Profile条件装配功能"><a href="#Profile条件装配功能" class="headerlink" title="@Profile条件装配功能"></a>@Profile条件装配功能</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(&quot;person&quot;)</span><span class="hljs-comment">//在配置文件中配置</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>&#125;<br></code></pre></td></tr></table></figure><p>application.properties</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">person:</span> <br>  <span class="hljs-attr">name:</span> <span class="hljs-string">lun</span><br>  <span class="hljs-attr">age:</span> <span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Person</span> &#123;<br><br>   String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>;<br>   Integer <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span>;<br><br>&#125;<br><br><span class="hljs-meta">@Profile(&quot;test&quot;)</span><span class="hljs-comment">//加载application-test.yaml里的</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(&quot;person&quot;)</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Worker</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Person</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>&#125;<br><br><span class="hljs-meta">@Profile(value = &#123;&quot;prod&quot;,&quot;default&quot;&#125;)</span><span class="hljs-comment">//加载application-prod.yaml里的</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(&quot;person&quot;)</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Boss</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Person</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>&#125;<br></code></pre></td></tr></table></figure><p>application-test.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">person:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">test-张三</span><br><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">7000</span><br></code></pre></td></tr></table></figure><p>application-prod.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">person:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">prod-张三</span><br><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8000</span><br></code></pre></td></tr></table></figure><p>application.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 激活prod配置文件</span><br><span class="hljs-attr">spring.profiles.active</span>=<span class="hljs-string">prod</span><br><span class="hljs-attr">12</span><br><span class="hljs-attr">@Autowired</span><br><span class="hljs-attr">private</span> <span class="hljs-string">Person person;</span><br><br><span class="hljs-attr">@GetMapping(&quot;/&quot;)</span><br><span class="hljs-attr">public</span> <span class="hljs-string">String hello()&#123;</span><br>    <span class="hljs-attr">//激活了prod，则返回Boss；激活了test，则返回Worker</span><br>    <span class="hljs-attr">return</span> <span class="hljs-string">person.getClass().toString();</span><br><span class="hljs-attr">&#125;</span><br></code></pre></td></tr></table></figure><hr><p>@Profile还可以修饰在方法上：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Color</span> &#123;<br>&#125;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConfig</span> &#123;<br><br>    <span class="hljs-meta">@Profile(&quot;prod&quot;)</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Color <span class="hljs-title function_">red</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Color</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Profile(&quot;test&quot;)</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Color <span class="hljs-title function_">green</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Color</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>可以激活一组：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.profiles.active</span>=<span class="hljs-string">production</span><br><br><span class="hljs-attr">spring.profiles.group.production[0]</span>=<span class="hljs-string">proddb</span><br><span class="hljs-attr">spring.profiles.group.production[1]</span>=<span class="hljs-string">prodmq</span><br><span class="hljs-attr">1234</span><br></code></pre></td></tr></table></figure><h2 id="配置加载优先级"><a href="#配置加载优先级" class="headerlink" title="配置加载优先级"></a>配置加载优先级</h2><h3 id="外部化配置"><a href="#外部化配置" class="headerlink" title="外部化配置"></a>外部化配置</h3><p><a href="https://docs.spring.io/spring-boot/docs/2.4.2/reference/htmlsingle/#boot-features-external-config">官方文档 - Externalized Configuration</a></p><p>Spring Boot uses a very particular <code>PropertySource</code> order that is designed to allow sensible overriding of values. Properties are considered in the following order (with values from lower items overriding earlier ones)（1优先级最低，14优先级最高）:</p><ol><li>Default properties (specified by setting <code>SpringApplication.setDefaultProperties</code>).</li><li><a href="https://docs.spring.io/spring/docs/5.3.3/javadoc-api/org/springframework/context/annotation/PropertySource.html"><code>@PropertySource</code></a> annotations on your <code>@Configuration</code> classes. Please note that such property sources are not added to the <code>Environment</code> until the application context is being refreshed. This is too late to configure certain properties such as <code>logging.*</code> and <code>spring.main.*</code> which are read before refresh begins.</li><li>Config data (such as <code>application.properties</code> files)</li><li>A <code>RandomValuePropertySource</code> that has properties only in <code>random.*</code>.</li><li>OS environment variables.</li><li>Java System properties (<code>System.getProperties()</code>).</li><li>JNDI attributes from <code>java:comp/env</code>.</li><li><code>ServletContext</code> init parameters.</li><li><code>ServletConfig</code> init parameters.</li><li>Properties from <code>SPRING_APPLICATION_JSON</code> (inline JSON embedded in an environment variable or system property).</li><li>Command line arguments.</li><li><code>properties</code> attribute on your tests. Available on <a href="https://docs.spring.io/spring-boot/docs/2.4.2/api/org/springframework/boot/test/context/SpringBootTest.html"><code>@SpringBootTest</code></a> and the <a href="https://docs.spring.io/spring-boot/docs/2.4.2/reference/htmlsingle/#boot-features-testing-spring-boot-applications-testing-autoconfigured-tests">test annotations for testing a particular slice of your application</a>.</li><li><a href="https://docs.spring.io/spring/docs/5.3.3/javadoc-api/org/springframework/test/context/TestPropertySource.html"><code>@TestPropertySource</code></a> annotations on your tests.</li><li><a href="https://docs.spring.io/spring-boot/docs/2.4.2/reference/htmlsingle/#using-boot-devtools-globalsettings">Devtools global settings properties</a> in the <code>$HOME/.config/spring-boot</code> directory when devtools is active.</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.stereotype.*;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.*;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBean</span> &#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;name&#125;&quot;)</span><span class="hljs-comment">//以这种方式可以获得配置值</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-comment">// ...</span><br><br>&#125;<br></code></pre></td></tr></table></figure><hr><ul><li>外部配置源<ul><li>Java属性文件。</li><li>YAML文件。</li><li>环境变量。</li><li>命令行参数。</li></ul></li><li>配置文件查找位置<ol><li>classpath 根路径。</li><li>classpath 根路径下config目录。</li><li>jar包当前目录。</li><li>jar包当前目录的config目录。</li><li>&#x2F;config子目录的直接子目录。</li></ol></li><li>配置文件加载顺序：<ol><li>当前jar包内部的<code>application.properties</code>和<code>application.yml</code>。</li><li>当前jar包内部的<code>application-&#123;profile&#125;.properties</code> 和 <code>application-&#123;profile&#125;.yml</code>。</li><li>引用的外部jar包的<code>application.properties</code>和<code>application.yml</code>。</li><li>引用的外部jar包的<code>application-&#123;profile&#125;.properties</code>和<code>application-&#123;profile&#125;.yml</code>。</li></ol></li><li>指定环境优先，外部优先，后面的可以覆盖前面的同名配置项。</li></ul><h2 id="自定义starter细节"><a href="#自定义starter细节" class="headerlink" title="自定义starter细节"></a>自定义starter细节</h2><h3 id="starter启动原理"><a href="#starter启动原理" class="headerlink" title="starter启动原理"></a>starter启动原理</h3><ul><li>starter的pom.xml引入autoconfigure依赖</li></ul><p>starterautoconfigurespring-boot-starter</p><ul><li>autoconfigure包中配置使用<code>META-INF/spring.factories</code>中<code>EnableAutoConfiguration</code>的值，使得项目启动加载指定的自动配置类</li><li>编写自动配置类 <code>xxxAutoConfiguration</code> -&gt; <code>xxxxProperties</code></li><li><ul><li><code>@Configuration</code></li><li><code>@Conditional</code></li><li><code>@EnableConfigurationProperties</code></li><li><code>@Bean</code></li><li>…</li></ul></li><li>引入starter — <code>xxxAutoConfiguration</code> — 容器中放入组件 —- <code>绑定xxxProperties</code> —- 配置项</li></ul><h3 id="自定义starter"><a href="#自定义starter" class="headerlink" title="自定义starter"></a>自定义starter</h3><ul><li>目标：创建<code>HelloService</code>的自定义starter。</li><li>创建两个工程，分别命名为<code>hello-spring-boot-starter</code>（普通Maven工程），<code>hello-spring-boot-starter-autoconfigure</code>（需用用到Spring Initializr创建的Maven工程）。</li><li><code>hello-spring-boot-starter</code>无需编写什么代码，只需让该工程引入<code>hello-spring-boot-starter-autoconfigure</code>依赖：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lun<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hello-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lun<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hello-spring-boot-starter-autoconfigure<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>hello-spring-boot-starter-autoconfigure</code>的pom.xml如下：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.4.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lun<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hello-spring-boot-starter-autoconfigure<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hello-spring-boot-starter-autoconfigure<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Demo project for Spring Boot<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>创建4个文件：<ul><li><code>com/lun/hello/auto/HelloServiceAutoConfiguration</code></li><li><code>com/lun/hello/bean/HelloProperties</code></li><li><code>com/lun/hello/service/HelloService</code></li><li><code>src/main/resources/META-INF/spring.factories</code></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.lun.hello.bean.HelloProperties;<br><span class="hljs-keyword">import</span> com.lun.hello.service.HelloService;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ConditionalOnMissingBean(HelloService.class)</span><br><span class="hljs-meta">@EnableConfigurationProperties(HelloProperties.class)</span><span class="hljs-comment">//默认HelloProperties放在容器中</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServiceAutoConfiguration</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> HelloService <span class="hljs-title function_">helloService</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HelloService</span>();<br>    &#125;<br><br>&#125;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><br><span class="hljs-meta">@ConfigurationProperties(&quot;hello&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloProperties</span> &#123;<br>    <span class="hljs-keyword">private</span> String prefix;<br>    <span class="hljs-keyword">private</span> String suffix;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPrefix</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> prefix;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPrefix</span><span class="hljs-params">(String prefix)</span> &#123;<br>        <span class="hljs-built_in">this</span>.prefix = prefix;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSuffix</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> suffix;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSuffix</span><span class="hljs-params">(String suffix)</span> &#123;<br>        <span class="hljs-built_in">this</span>.suffix = suffix;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">import</span> com.lun.hello.bean.HelloProperties;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 默认不要放在容器中</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> HelloProperties helloProperties;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">sayHello</span><span class="hljs-params">(String userName)</span>&#123;<br>        <span class="hljs-keyword">return</span> helloProperties.getPrefix() + <span class="hljs-string">&quot;: &quot;</span> + userName + <span class="hljs-string">&quot; &gt; &quot;</span> + helloProperties.getSuffix();<br>    &#125;<br>&#125;<br># Auto Configure<br>org.springframework.boot.autoconfigure.EnableAutoConfiguration=\<br>com.lun.hello.auto.HelloServiceAutoConfiguration<br><span class="hljs-number">123</span><br></code></pre></td></tr></table></figure><ul><li>用maven插件，将两工程install到本地。</li><li>接下来，测试使用自定义starter，用Spring Initializr创建名为<code>hello-spring-boot-starter-test</code>工程，引入<code>hello-spring-boot-starter</code>依赖，其pom.xml如下：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.4.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lun<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hello-spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hello-spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Demo project for Spring Boot<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 引入`hello-spring-boot-starter`依赖 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lun<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hello-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>添加配置文件<code>application.properties</code>：</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">hello.prefix</span>=<span class="hljs-string">hello</span><br><span class="hljs-attr">hello.suffix</span>=<span class="hljs-string">666</span><br></code></pre></td></tr></table></figure><ul><li>添加单元测试类：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.lun.hello.service.HelloService;<span class="hljs-comment">//来自自定义starter</span><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Assertions;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloSpringBootStarterTestApplicationTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> HelloService helloService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// System.out.println(helloService.sayHello(&quot;lun&quot;));</span><br>        Assertions.assertEquals(<span class="hljs-string">&quot;hello: lun &gt; 666&quot;</span>, helloService.sayHello(<span class="hljs-string">&quot;lun&quot;</span>));<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="SpringApplication创建初始化流程"><a href="#SpringApplication创建初始化流程" class="headerlink" title="SpringApplication创建初始化流程"></a>SpringApplication创建初始化流程</h2><h3 id="SpringBoot启动过程"><a href="#SpringBoot启动过程" class="headerlink" title="SpringBoot启动过程"></a>SpringBoot启动过程</h3><p>Spring Boot应用的启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloSpringBootStarterTestApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(HelloSpringBootStarterTestApplication.class, args);<br>    &#125;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringApplication</span> &#123;<br>    <br>    ...<br>    <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ConfigurableApplicationContext <span class="hljs-title function_">run</span><span class="hljs-params">(Class&lt;?&gt; primarySource, String... args)</span> &#123;<br><span class="hljs-keyword">return</span> run(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>&lt;?&gt;[] &#123; primarySource &#125;, args);<br>&#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ConfigurableApplicationContext <span class="hljs-title function_">run</span><span class="hljs-params">(Class&lt;?&gt;[] primarySources, String[] args)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringApplication</span>(primarySources).run(args);<br>&#125;<br>    <br>    <span class="hljs-comment">//先看看new SpringApplication(primarySources)，下一节再看看run()</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">SpringApplication</span><span class="hljs-params">(Class&lt;?&gt;... primarySources)</span> &#123;<br><span class="hljs-built_in">this</span>(<span class="hljs-literal">null</span>, primarySources);<br>&#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SpringApplication</span><span class="hljs-params">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> &#123;<br><span class="hljs-built_in">this</span>.resourceLoader = resourceLoader;<br>Assert.notNull(primarySources, <span class="hljs-string">&quot;PrimarySources must not be null&quot;</span>);<br><span class="hljs-built_in">this</span>.primarySources = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>&lt;&gt;(Arrays.asList(primarySources));<br>        <span class="hljs-comment">//WebApplicationType是枚举类，有NONE,SERVLET,REACTIVE,下行webApplicationType是SERVLET</span><br><span class="hljs-built_in">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();<br>        <br>        <span class="hljs-comment">//初始启动引导器，去spring.factories文件中找org.springframework.boot.Bootstrapper，但我找不到实现Bootstrapper接口的类</span><br><span class="hljs-built_in">this</span>.bootstrappers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(getSpringFactoriesInstances(Bootstrapper.class));<br><br>        <span class="hljs-comment">//去spring.factories找 ApplicationContextInitializer</span><br>        setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));<br><br>        <span class="hljs-comment">//去spring.factories找 ApplicationListener</span><br>        setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));<br><br>        <span class="hljs-built_in">this</span>.mainApplicationClass = deduceMainApplicationClass();<br>&#125;<br> <br>    <span class="hljs-keyword">private</span> Class&lt;?&gt; deduceMainApplicationClass() &#123;<br><span class="hljs-keyword">try</span> &#123;<br>StackTraceElement[] stackTrace = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>().getStackTrace();<br><span class="hljs-keyword">for</span> (StackTraceElement stackTraceElement : stackTrace) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;main&quot;</span>.equals(stackTraceElement.getMethodName())) &#123;<br><span class="hljs-keyword">return</span> Class.forName(stackTraceElement.getClassName());<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">catch</span> (ClassNotFoundException ex) &#123;<br><span class="hljs-comment">// Swallow and continue</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br>    <br>    ...<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>spring.factories：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">...</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># Application Context Initializers</span><br><span class="hljs-attr">org.springframework.context.ApplicationContextInitializer</span>=<span class="hljs-string">\</span><br><span class="hljs-string">org.springframework.boot.context.ConfigurationWarningsApplicationContextInitializer,\</span><br><span class="hljs-string">org.springframework.boot.context.ContextIdApplicationContextInitializer,\</span><br><span class="hljs-string">org.springframework.boot.context.config.DelegatingApplicationContextInitializer,\</span><br><span class="hljs-string">org.springframework.boot.rsocket.context.RSocketPortInfoApplicationContextInitializer,\</span><br><span class="hljs-string">org.springframework.boot.web.context.ServerPortInfoApplicationContextInitializer</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># Application Listeners</span><br><span class="hljs-attr">org.springframework.context.ApplicationListener</span>=<span class="hljs-string">\</span><br><span class="hljs-string">org.springframework.boot.ClearCachesApplicationListener,\</span><br><span class="hljs-string">org.springframework.boot.builder.ParentContextCloserApplicationListener,\</span><br><span class="hljs-string">org.springframework.boot.context.FileEncodingApplicationListener,\</span><br><span class="hljs-string">org.springframework.boot.context.config.AnsiOutputApplicationListener,\</span><br><span class="hljs-string">org.springframework.boot.context.config.DelegatingApplicationListener,\</span><br><span class="hljs-string">org.springframework.boot.context.logging.LoggingApplicationListener,\</span><br><span class="hljs-string">org.springframework.boot.env.EnvironmentPostProcessorApplicationListener,\</span><br><span class="hljs-string">org.springframework.boot.liquibase.LiquibaseServiceLocatorApplicationListener</span><br><br><span class="hljs-attr">...</span><br></code></pre></td></tr></table></figure><h2 id="SpringBoot完整启动过程"><a href="#SpringBoot完整启动过程" class="headerlink" title="SpringBoot完整启动过程"></a>SpringBoot完整启动过程</h2><p>继续上一节，接着讨论<code>return new SpringApplication(primarySources).run(args)</code>的<code>run</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringApplication</span> &#123;<br>    <br>    ...<br>    <br><span class="hljs-keyword">public</span> ConfigurableApplicationContext <span class="hljs-title function_">run</span><span class="hljs-params">(String... args)</span> &#123;<br><span class="hljs-type">StopWatch</span> <span class="hljs-variable">stopWatch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StopWatch</span>();<span class="hljs-comment">//开始计时器</span><br>stopWatch.start();<span class="hljs-comment">//开始计时</span><br>        <br>        <span class="hljs-comment">//1.</span><br>        <span class="hljs-comment">//创建引导上下文（Context环境）createBootstrapContext()</span><br>        <span class="hljs-comment">//获取到所有之前的 bootstrappers 挨个执行 intitialize() 来完成对引导启动器上下文环境设置</span><br><span class="hljs-type">DefaultBootstrapContext</span> <span class="hljs-variable">bootstrapContext</span> <span class="hljs-operator">=</span> createBootstrapContext();<br><br>        <span class="hljs-comment">//2.到最后该方法会返回这context</span><br>        <span class="hljs-type">ConfigurableApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-comment">//3.让当前应用进入headless模式</span><br>        configureHeadlessProperty();<br>        <br>        <span class="hljs-comment">//4.获取所有 RunListener（运行监听器）,为了方便所有Listener进行事件感知</span><br><span class="hljs-type">SpringApplicationRunListeners</span> <span class="hljs-variable">listeners</span> <span class="hljs-operator">=</span> getRunListeners(args);<br><br>        <span class="hljs-comment">//5. 遍历 SpringApplicationRunListener 调用 starting 方法；</span><br><span class="hljs-comment">// 相当于通知所有感兴趣系统正在启动过程的人，项目正在 starting。</span><br>        listeners.starting(bootstrapContext, <span class="hljs-built_in">this</span>.mainApplicationClass);<br><span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//6.保存命令行参数 ApplicationArguments</span><br><span class="hljs-type">ApplicationArguments</span> <span class="hljs-variable">applicationArguments</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultApplicationArguments</span>(args);<br><br>            <span class="hljs-comment">//7.准备环境</span><br>            <span class="hljs-type">ConfigurableEnvironment</span> <span class="hljs-variable">environment</span> <span class="hljs-operator">=</span> prepareEnvironment(listeners, bootstrapContext, applicationArguments);<br>configureIgnoreBeanInfo(environment);<br><br>            <span class="hljs-comment">/*打印标志</span><br><span class="hljs-comment">              .   ____          _            __ _ _</span><br><span class="hljs-comment">             /\\ / ___&#x27;_ __ _ _(_)_ __  __ _ \ \ \ \</span><br><span class="hljs-comment">            ( ( )\___ | &#x27;_ | &#x27;_| | &#x27;_ \/ _` | \ \ \ \</span><br><span class="hljs-comment">             \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="hljs-comment">              &#x27;  |____| .__|_| |_|_| |_\__, | / / / /</span><br><span class="hljs-comment">             =========|_|==============|___/=/_/_/_/</span><br><span class="hljs-comment">             :: Spring Boot ::                (v2.4.2)</span><br><span class="hljs-comment">            */</span><br>            <span class="hljs-type">Banner</span> <span class="hljs-variable">printedBanner</span> <span class="hljs-operator">=</span> printBanner(environment);<br>            <br>            <span class="hljs-comment">// 创建IOC容器（createApplicationContext（））</span><br><span class="hljs-comment">// 根据项目类型webApplicationType（NONE,SERVLET,REACTIVE）创建容器，</span><br><span class="hljs-comment">// 当前会创建 AnnotationConfigServletWebServerApplicationContext</span><br>context = createApplicationContext();<br>context.setApplicationStartup(<span class="hljs-built_in">this</span>.applicationStartup);<br>            <br>            <span class="hljs-comment">//8.准备ApplicationContext IOC容器的基本信息</span><br>prepareContext(bootstrapContext, context, environment, listeners, applicationArguments, printedBanner);<br><span class="hljs-comment">//9.刷新IOC容器,创建容器中的所有组件,Spring框架的内容</span><br>            refreshContext(context);<br><span class="hljs-comment">//该方法没内容，大概为将来填入</span><br>afterRefresh(context, applicationArguments);<br>stopWatch.stop();<span class="hljs-comment">//停止计时</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.logStartupInfo) &#123;<span class="hljs-comment">//this.logStartupInfo默认是true</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">StartupInfoLogger</span>(<span class="hljs-built_in">this</span>.mainApplicationClass).logStarted(getApplicationLog(), stopWatch);<br>&#125;<br>            <span class="hljs-comment">//10.</span><br>listeners.started(context);<br>            <br>            <span class="hljs-comment">//11.调用所有runners</span><br>callRunners(context, applicationArguments);<br>&#125;<br><span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br>            <span class="hljs-comment">//13.</span><br>handleRunFailure(context, ex, listeners);<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(ex);<br>&#125;<br><br><span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//12.</span><br>listeners.running(context);<br>&#125;<br><span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br>            <span class="hljs-comment">//13.</span><br>handleRunFailure(context, ex, <span class="hljs-literal">null</span>);<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(ex);<br>&#125;<br><span class="hljs-keyword">return</span> context;<br>&#125;<br> <br>    <span class="hljs-comment">//1. </span><br>    <span class="hljs-keyword">private</span> DefaultBootstrapContext <span class="hljs-title function_">createBootstrapContext</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">DefaultBootstrapContext</span> <span class="hljs-variable">bootstrapContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultBootstrapContext</span>();<br><span class="hljs-built_in">this</span>.bootstrappers.forEach((initializer) -&gt; initializer.intitialize(bootstrapContext));<br><span class="hljs-keyword">return</span> bootstrapContext;<br>&#125;<br>    <br>    <span class="hljs-comment">//3.</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configureHeadlessProperty</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//this.headless默认为true</span><br>System.setProperty(SYSTEM_PROPERTY_JAVA_AWT_HEADLESS,<br>System.getProperty(SYSTEM_PROPERTY_JAVA_AWT_HEADLESS, Boolean.toString(<span class="hljs-built_in">this</span>.headless)));<br>&#125;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SYSTEM_PROPERTY_JAVA_AWT_HEADLESS</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;java.awt.headless&quot;</span>;<br>    <br>    <span class="hljs-comment">//4.</span><br>    <span class="hljs-keyword">private</span> SpringApplicationRunListeners <span class="hljs-title function_">getRunListeners</span><span class="hljs-params">(String[] args)</span> &#123;<br>Class&lt;?&gt;[] types = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>&lt;?&gt;[] &#123; SpringApplication.class, String[].class &#125;;<br><span class="hljs-comment">//getSpringFactoriesInstances 去 spring.factories 找 SpringApplicationRunListener</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringApplicationRunListeners</span>(logger,<br>getSpringFactoriesInstances(SpringApplicationRunListener.class, types, <span class="hljs-built_in">this</span>, args),<br><span class="hljs-built_in">this</span>.applicationStartup);<br>&#125;<br>    <br>    <span class="hljs-comment">//7.准备环境</span><br>    <span class="hljs-keyword">private</span> ConfigurableEnvironment <span class="hljs-title function_">prepareEnvironment</span><span class="hljs-params">(SpringApplicationRunListeners listeners,</span><br><span class="hljs-params">DefaultBootstrapContext bootstrapContext, ApplicationArguments applicationArguments)</span> &#123;<br><span class="hljs-comment">// Create and configure the environment</span><br>        <span class="hljs-comment">//返回或者创建基础环境信息对象，如：StandardServletEnvironment, StandardReactiveWebEnvironment</span><br><span class="hljs-type">ConfigurableEnvironment</span> <span class="hljs-variable">environment</span> <span class="hljs-operator">=</span> getOrCreateEnvironment();<br>        <span class="hljs-comment">//配置环境信息对象,读取所有的配置源的配置属性值。</span><br>configureEnvironment(environment, applicationArguments.getSourceArgs());<br><span class="hljs-comment">//绑定环境信息</span><br>        ConfigurationPropertySources.attach(environment);<br>        <span class="hljs-comment">//7.1 通知所有的监听器当前环境准备完成</span><br>listeners.environmentPrepared(bootstrapContext, environment);<br>DefaultPropertiesPropertySource.moveToEnd(environment);<br>configureAdditionalProfiles(environment);<br>bindToSpringApplication(environment);<br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.isCustomEnvironment) &#123;<br>environment = <span class="hljs-keyword">new</span> <span class="hljs-title class_">EnvironmentConverter</span>(getClassLoader()).convertEnvironmentIfNecessary(environment,<br>deduceEnvironmentClass());<br>&#125;<br>ConfigurationPropertySources.attach(environment);<br><span class="hljs-keyword">return</span> environment;<br>&#125;<br>    <br>    <span class="hljs-comment">//8.</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">prepareContext</span><span class="hljs-params">(DefaultBootstrapContext bootstrapContext, ConfigurableApplicationContext context,</span><br><span class="hljs-params">ConfigurableEnvironment environment, SpringApplicationRunListeners listeners,</span><br><span class="hljs-params">ApplicationArguments applicationArguments, Banner printedBanner)</span> &#123;<br><span class="hljs-comment">//保存环境信息</span><br>        context.setEnvironment(environment);<br>        <span class="hljs-comment">//IOC容器的后置处理流程</span><br>postProcessApplicationContext(context);<br>        <span class="hljs-comment">//应用初始化器</span><br>applyInitializers(context);<br>        <span class="hljs-comment">//8.1 遍历所有的 listener 调用 contextPrepared。</span><br>        <span class="hljs-comment">//EventPublishRunListenr通知所有的监听器contextPrepared</span><br>listeners.contextPrepared(context);<br>bootstrapContext.close(context);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.logStartupInfo) &#123;<br>logStartupInfo(context.getParent() == <span class="hljs-literal">null</span>);<br>logStartupProfileInfo(context);<br>&#125;<br><span class="hljs-comment">// Add boot specific singleton beans</span><br><span class="hljs-type">ConfigurableListableBeanFactory</span> <span class="hljs-variable">beanFactory</span> <span class="hljs-operator">=</span> context.getBeanFactory();<br>beanFactory.registerSingleton(<span class="hljs-string">&quot;springApplicationArguments&quot;</span>, applicationArguments);<br><span class="hljs-keyword">if</span> (printedBanner != <span class="hljs-literal">null</span>) &#123;<br>beanFactory.registerSingleton(<span class="hljs-string">&quot;springBootBanner&quot;</span>, printedBanner);<br>&#125;<br><span class="hljs-keyword">if</span> (beanFactory <span class="hljs-keyword">instanceof</span> DefaultListableBeanFactory) &#123;<br>((DefaultListableBeanFactory) beanFactory)<br>.setAllowBeanDefinitionOverriding(<span class="hljs-built_in">this</span>.allowBeanDefinitionOverriding);<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.lazyInitialization) &#123;<br>context.addBeanFactoryPostProcessor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LazyInitializationBeanFactoryPostProcessor</span>());<br>&#125;<br><span class="hljs-comment">// Load the sources</span><br>Set&lt;Object&gt; sources = getAllSources();<br>Assert.notEmpty(sources, <span class="hljs-string">&quot;Sources must not be empty&quot;</span>);<br>load(context, sources.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>]));<br>        <span class="hljs-comment">//8.2</span><br>listeners.contextLoaded(context);<br>&#125;<br><br>    <span class="hljs-comment">//11.调用所有runners</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">callRunners</span><span class="hljs-params">(ApplicationContext context, ApplicationArguments args)</span> &#123;<br>List&lt;Object&gt; runners = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <br>        <span class="hljs-comment">//获取容器中的 ApplicationRunner</span><br>runners.addAll(context.getBeansOfType(ApplicationRunner.class).values());<br><span class="hljs-comment">//获取容器中的  CommandLineRunner</span><br>        runners.addAll(context.getBeansOfType(CommandLineRunner.class).values());<br>        <span class="hljs-comment">//合并所有runner并且按照@Order进行排序</span><br>AnnotationAwareOrderComparator.sort(runners);<br>        <span class="hljs-comment">//遍历所有的runner。调用 run 方法</span><br><span class="hljs-keyword">for</span> (Object runner : <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>&lt;&gt;(runners)) &#123;<br><span class="hljs-keyword">if</span> (runner <span class="hljs-keyword">instanceof</span> ApplicationRunner) &#123;<br>callRunner((ApplicationRunner) runner, args);<br>&#125;<br><span class="hljs-keyword">if</span> (runner <span class="hljs-keyword">instanceof</span> CommandLineRunner) &#123;<br>callRunner((CommandLineRunner) runner, args);<br>&#125;<br>&#125;<br>&#125;<br>    <br>    <span class="hljs-comment">//13.</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleRunFailure</span><span class="hljs-params">(ConfigurableApplicationContext context, Throwable exception,</span><br><span class="hljs-params">SpringApplicationRunListeners listeners)</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br>handleExitCode(context, exception);<br><span class="hljs-keyword">if</span> (listeners != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-comment">//14.</span><br>listeners.failed(context, exception);<br>&#125;<br>&#125;<br><span class="hljs-keyword">finally</span> &#123;<br>reportFailure(getExceptionReporters(context), exception);<br><span class="hljs-keyword">if</span> (context != <span class="hljs-literal">null</span>) &#123;<br>context.close();<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>logger.warn(<span class="hljs-string">&quot;Unable to close ApplicationContext&quot;</span>, ex);<br>&#125;<br>ReflectionUtils.rethrowRuntimeException(exception);<br>&#125;<br>    <br>    ...<br>&#125;<br><span class="hljs-comment">//2. new SpringApplication(primarySources).run(args) 最后返回的接口类型</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ConfigurableApplicationContext</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ApplicationContext</span>, Lifecycle, Closeable &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">CONFIG_LOCATION_DELIMITERS</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;,; \t\n&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">CONVERSION_SERVICE_BEAN_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;conversionService&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">LOAD_TIME_WEAVER_BEAN_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;loadTimeWeaver&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">ENVIRONMENT_BEAN_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;environment&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">SYSTEM_PROPERTIES_BEAN_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;systemProperties&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">SYSTEM_ENVIRONMENT_BEAN_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;systemEnvironment&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">APPLICATION_STARTUP_BEAN_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;applicationStartup&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">SHUTDOWN_HOOK_THREAD_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SpringContextShutdownHook&quot;</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(String var1)</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">setParent</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> ApplicationContext var1)</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEnvironment</span><span class="hljs-params">(ConfigurableEnvironment var1)</span>;<br><br>    ConfigurableEnvironment <span class="hljs-title function_">getEnvironment</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">setApplicationStartup</span><span class="hljs-params">(ApplicationStartup var1)</span>;<br><br>    ApplicationStartup <span class="hljs-title function_">getApplicationStartup</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">addBeanFactoryPostProcessor</span><span class="hljs-params">(BeanFactoryPostProcessor var1)</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">addApplicationListener</span><span class="hljs-params">(ApplicationListener&lt;?&gt; var1)</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">setClassLoader</span><span class="hljs-params">(ClassLoader var1)</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">addProtocolResolver</span><span class="hljs-params">(ProtocolResolver var1)</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">refresh</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> BeansException, IllegalStateException;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerShutdownHook</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isActive</span><span class="hljs-params">()</span>;<br><br>    ConfigurableListableBeanFactory <span class="hljs-title function_">getBeanFactory</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IllegalStateException;<br>&#125;<br>#<span class="hljs-number">4.</span><br>#spring.factories<br># Run Listeners<br>org.springframework.boot.SpringApplicationRunListener=\<br>org.springframework.boot.context.event.EventPublishingRunListener<br><span class="hljs-number">12345</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringApplicationRunListeners</span> &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Log log;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> List&lt;SpringApplicationRunListener&gt; listeners;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ApplicationStartup applicationStartup;<br><br>SpringApplicationRunListeners(Log log, Collection&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SpringApplicationRunListener</span>&gt; listeners,<br>ApplicationStartup applicationStartup) &#123;<br><span class="hljs-built_in">this</span>.log = log;<br><span class="hljs-built_in">this</span>.listeners = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(listeners);<br><span class="hljs-built_in">this</span>.applicationStartup = applicationStartup;<br>&#125;<br><br>    <span class="hljs-comment">//5.遍历 SpringApplicationRunListener 调用 starting 方法；</span><br><span class="hljs-comment">//相当于通知所有感兴趣系统正在启动过程的人，项目正在 starting。</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">starting</span><span class="hljs-params">(ConfigurableBootstrapContext bootstrapContext, Class&lt;?&gt; mainApplicationClass)</span> &#123;<br>doWithListeners(<span class="hljs-string">&quot;spring.boot.application.starting&quot;</span>, (listener) -&gt; listener.starting(bootstrapContext),<br>(step) -&gt; &#123;<br><span class="hljs-keyword">if</span> (mainApplicationClass != <span class="hljs-literal">null</span>) &#123;<br>step.tag(<span class="hljs-string">&quot;mainApplicationClass&quot;</span>, mainApplicationClass.getName());<br>&#125;<br>&#125;);<br>&#125;<br>    <br>    <span class="hljs-comment">//7.1</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">environmentPrepared</span><span class="hljs-params">(ConfigurableBootstrapContext bootstrapContext, ConfigurableEnvironment environment)</span> &#123;<br>doWithListeners(<span class="hljs-string">&quot;spring.boot.application.environment-prepared&quot;</span>,<br>(listener) -&gt; listener.environmentPrepared(bootstrapContext, environment));<br>&#125;<br>    <br>    <span class="hljs-comment">//8.1</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextPrepared</span><span class="hljs-params">(ConfigurableApplicationContext context)</span> &#123;<br>doWithListeners(<span class="hljs-string">&quot;spring.boot.application.context-prepared&quot;</span>, (listener) -&gt; listener.contextPrepared(context));<br>&#125;<br>    <br>    <span class="hljs-comment">//8.2</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoaded</span><span class="hljs-params">(ConfigurableApplicationContext context)</span> &#123;<br>doWithListeners(<span class="hljs-string">&quot;spring.boot.application.context-loaded&quot;</span>, (listener) -&gt; listener.contextLoaded(context));<br>&#125;<br>    <br>    <span class="hljs-comment">//10.</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">started</span><span class="hljs-params">(ConfigurableApplicationContext context)</span> &#123;<br>doWithListeners(<span class="hljs-string">&quot;spring.boot.application.started&quot;</span>, (listener) -&gt; listener.started(context));<br>&#125;<br>    <br>    <span class="hljs-comment">//12.</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">running</span><span class="hljs-params">(ConfigurableApplicationContext context)</span> &#123;<br>doWithListeners(<span class="hljs-string">&quot;spring.boot.application.running&quot;</span>, (listener) -&gt; listener.running(context));<br>&#125;<br>    <br>    <span class="hljs-comment">//14.</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">failed</span><span class="hljs-params">(ConfigurableApplicationContext context, Throwable exception)</span> &#123;<br>doWithListeners(<span class="hljs-string">&quot;spring.boot.application.failed&quot;</span>,<br>(listener) -&gt; callFailedListener(listener, context, exception), (step) -&gt; &#123;<br>step.tag(<span class="hljs-string">&quot;exception&quot;</span>, exception.getClass().toString());<br>step.tag(<span class="hljs-string">&quot;message&quot;</span>, exception.getMessage());<br>&#125;);<br>&#125;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doWithListeners</span><span class="hljs-params">(String stepName, Consumer&lt;SpringApplicationRunListener&gt; listenerAction,</span><br><span class="hljs-params">Consumer&lt;StartupStep&gt; stepAction)</span> &#123;<br><span class="hljs-type">StartupStep</span> <span class="hljs-variable">step</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.applicationStartup.start(stepName);<br><span class="hljs-built_in">this</span>.listeners.forEach(listenerAction);<br><span class="hljs-keyword">if</span> (stepAction != <span class="hljs-literal">null</span>) &#123;<br>stepAction.accept(step);<br>&#125;<br>step.end();<br>&#125;<br>    <br>    ...<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="自定义事件监听组件"><a href="#自定义事件监听组件" class="headerlink" title="自定义事件监听组件"></a>自定义事件监听组件</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-title class_">MyApplicationContextInitializer</span>.<span class="hljs-property">java</span><br><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">context</span>.<span class="hljs-property">ApplicationContextInitializer</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">context</span>.<span class="hljs-property">ConfigurableApplicationContext</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyApplicationContextInitializer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApplicationContextInitializer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">initialize</span>(<span class="hljs-params">ConfigurableApplicationContext applicationContext</span>) &#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;MyApplicationContextInitializer ....initialize.... &quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-title class_">MyApplicationListener</span>.<span class="hljs-property">java</span><br><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">context</span>.<span class="hljs-property">ApplicationEvent</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">context</span>.<span class="hljs-property">ApplicationListener</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyApplicationListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApplicationListener</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">onApplicationEvent</span>(<span class="hljs-params">ApplicationEvent event</span>) &#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;MyApplicationListener.....onApplicationEvent...&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-title class_">MyApplicationRunner</span>.<span class="hljs-property">java</span><br><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">boot</span>.<span class="hljs-property">ApplicationArguments</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">boot</span>.<span class="hljs-property">ApplicationRunner</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">core</span>.<span class="hljs-property">annotation</span>.<span class="hljs-property">Order</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">stereotype</span>.<span class="hljs-property">Component</span>;<br><br><br><span class="hljs-meta">@Order</span>(<span class="hljs-number">1</span>)<br><span class="hljs-meta">@Component</span><span class="hljs-comment">//放入容器</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyApplicationRunner</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApplicationRunner</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">run</span>(<span class="hljs-title class_">ApplicationArguments</span> args) throws <span class="hljs-title class_">Exception</span> &#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;MyApplicationRunner...run...&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-title class_">MyCommandLineRunner</span>.<span class="hljs-property">java</span><br><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">boot</span>.<span class="hljs-property">CommandLineRunner</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">core</span>.<span class="hljs-property">annotation</span>.<span class="hljs-property">Order</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">stereotype</span>.<span class="hljs-property">Component</span>;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 应用启动做一个一次性事情</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Order</span>(<span class="hljs-number">2</span>)<br><span class="hljs-meta">@Component</span><span class="hljs-comment">//放入容器</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCommandLineRunner</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CommandLineRunner</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">run</span>(<span class="hljs-title class_">String</span>... args) throws <span class="hljs-title class_">Exception</span> &#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;MyCommandLineRunner....run....&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-title class_">MySpringApplicationRunListener</span>.<span class="hljs-property">java</span><br><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">boot</span>.<span class="hljs-property">ConfigurableBootstrapContext</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">boot</span>.<span class="hljs-property">SpringApplication</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">boot</span>.<span class="hljs-property">SpringApplicationRunListener</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">context</span>.<span class="hljs-property">ConfigurableApplicationContext</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">core</span>.<span class="hljs-property">env</span>.<span class="hljs-property">ConfigurableEnvironment</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MySpringApplicationRunListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SpringApplicationRunListener</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">SpringApplication</span> application;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">MySpringApplicationRunListener</span>(<span class="hljs-title class_">SpringApplication</span> application, <span class="hljs-title class_">String</span>[] args)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">application</span> = application;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">starting</span>(<span class="hljs-params">ConfigurableBootstrapContext bootstrapContext</span>) &#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;MySpringApplicationRunListener....starting....&quot;</span>);<br><br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">environmentPrepared</span>(<span class="hljs-params">ConfigurableBootstrapContext bootstrapContext, ConfigurableEnvironment environment</span>) &#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;MySpringApplicationRunListener....environmentPrepared....&quot;</span>);<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">contextPrepared</span>(<span class="hljs-params">ConfigurableApplicationContext context</span>) &#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;MySpringApplicationRunListener....contextPrepared....&quot;</span>);<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">contextLoaded</span>(<span class="hljs-params">ConfigurableApplicationContext context</span>) &#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;MySpringApplicationRunListener....contextLoaded....&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">started</span>(<span class="hljs-params">ConfigurableApplicationContext context</span>) &#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;MySpringApplicationRunListener....started....&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">running</span>(<span class="hljs-params">ConfigurableApplicationContext context</span>) &#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;MySpringApplicationRunListener....running....&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">failed</span>(<span class="hljs-params">ConfigurableApplicationContext context, Throwable exception</span>) &#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;MySpringApplicationRunListener....failed....&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注册<code>MyApplicationContextInitializer</code>，<code>MyApplicationListener</code>，<code>MySpringApplicationRunListener</code>:</p><p><code>resources / META-INF / spring.factories</code>:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">org.springframework.context.ApplicationContextInitializer</span>=<span class="hljs-string">\</span><br><span class="hljs-string">  com.lun.boot.listener.MyApplicationContextInitializer</span><br><br><span class="hljs-attr">org.springframework.context.ApplicationListener</span>=<span class="hljs-string">\</span><br><span class="hljs-string">  com.lun.boot.listener.MyApplicationListener</span><br><br><span class="hljs-attr">org.springframework.boot.SpringApplicationRunListener</span>=<span class="hljs-string">\</span><br><span class="hljs-string">  com.lun.boot.listener.MySpringApplicationRunListener</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot学习笔记(4)</title>
    <link href="/2022/07/10/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(4)/"/>
    <url>/2022/07/10/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(4)/</url>
    
    <content type="html"><![CDATA[<h2 id="Thymeleaf初体验"><a href="#Thymeleaf初体验" class="headerlink" title="Thymeleaf初体验"></a>Thymeleaf初体验</h2><p><a href="https://www.thymeleaf.org/documentation.html">Thymeleaf官方文档</a></p><h3 id="thymeleaf使用"><a href="#thymeleaf使用" class="headerlink" title="thymeleaf使用"></a>thymeleaf使用</h3><h4 id="引入Starter"><a href="#引入Starter" class="headerlink" title="引入Starter"></a>引入Starter</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="自动配置好了thymeleaf"><a href="#自动配置好了thymeleaf" class="headerlink" title="自动配置好了thymeleaf"></a>自动配置好了thymeleaf</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@EnableConfigurationProperties(ThymeleafProperties.class)</span><br><span class="hljs-meta">@ConditionalOnClass(&#123; TemplateMode.class, SpringTemplateEngine.class &#125;)</span><br><span class="hljs-meta">@AutoConfigureAfter(&#123; WebMvcAutoConfiguration.class, WebFluxAutoConfiguration.class &#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThymeleafAutoConfiguration</span> &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>自动配好的策略</p><ol><li>所有thymeleaf的配置值都在 ThymeleafProperties</li><li>配置好了 <strong>SpringTemplateEngine</strong></li><li>配好了 <strong>ThymeleafViewResolver</strong></li><li>我们只需要直接开发页面</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_PREFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;classpath:/templates/&quot;</span>;<span class="hljs-comment">//模板放置处</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_SUFFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;.html&quot;</span>;<span class="hljs-comment">//文件的后缀名</span><br></code></pre></td></tr></table></figure><p>编写一个控制层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ViewTestController</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">(Model model)</span>&#123;<br>        <span class="hljs-comment">//model中的数据会被放在请求域中 request.setAttribute(&quot;a&quot;,aa)</span><br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;一定要大力发展工业文化&quot;</span>);<br>        model.addAttribute(<span class="hljs-string">&quot;link&quot;</span>,<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>/templates/success.html</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span>nice<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;www.baidu.com&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;$&#123;link&#125;&quot;</span>&gt;</span>去百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;www.google.com&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/link&#125;&quot;</span>&gt;</span>去百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">servlet:</span><br>    <span class="hljs-attr">context-path:</span> <span class="hljs-string">/app</span> <span class="hljs-comment">#设置应用名</span><br></code></pre></td></tr></table></figure><p>这个设置后，URL要插入<code>/app</code>, 如<code>http://localhost:8080/app/hello.html</code>。</p><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><h4 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h4><table><thead><tr><th>表达式名字</th><th>语法</th><th>用途</th></tr></thead><tbody><tr><td>变量取值</td><td>${…}</td><td>获取请求域、session域、对象等值</td></tr><tr><td>选择变量</td><td>*{…}</td><td>获取上下文对象值</td></tr><tr><td>消息</td><td>#{…}</td><td>获取国际化等值</td></tr><tr><td>链接</td><td>@{…}</td><td>生成链接</td></tr><tr><td>片段表达式</td><td>~{…}</td><td>jsp:include 作用，引入公共页面片段</td></tr></tbody></table><h4 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h4><ul><li>文本值: <strong>‘one text’</strong> <strong>,</strong> <strong>‘Another one!’</strong> <strong>,…</strong></li><li>数字: <strong>0</strong> <strong>,</strong> <strong>34</strong> <strong>,</strong> <strong>3.0</strong> <strong>,</strong> <strong>12.3</strong> <strong>,…</strong></li><li>布尔值: <strong>true</strong> <strong>,</strong> <strong>false</strong></li><li>空值: <strong>null</strong></li><li>变量： one，two，… 变量不能有空格</li></ul><h4 id="文本操作"><a href="#文本操作" class="headerlink" title="文本操作"></a>文本操作</h4><ul><li>字符串拼接: <strong>+</strong></li><li>变量替换: <strong>|The name is ${name}|</strong></li></ul><h4 id="数学运算"><a href="#数学运算" class="headerlink" title="数学运算"></a>数学运算</h4><ul><li>运算符: + , - , * , &#x2F; , %</li></ul><h4 id="布尔运算"><a href="#布尔运算" class="headerlink" title="布尔运算"></a>布尔运算</h4><ul><li>运算符: <strong>and</strong> <strong>,</strong> <strong>or</strong></li><li>一元运算: <strong>!</strong> <strong>,</strong> <strong>not</strong></li></ul><h4 id="比较运算"><a href="#比较运算" class="headerlink" title="比较运算"></a>比较运算</h4><ul><li>比较: <strong>&gt;</strong> <strong>,</strong> <strong>&lt;** **,** **&gt;&#x3D;</strong> <strong>,</strong> <strong>&lt;&#x3D;</strong> <strong>(</strong> <strong>gt</strong> <strong>,</strong> <strong>lt</strong> <strong>,</strong> <strong>ge</strong> <strong>,</strong> <strong>le</strong> <strong>)</strong></li><li>等式: <strong>&#x3D;&#x3D;</strong> <strong>,</strong> <strong>!&#x3D;</strong> <strong>(</strong> <strong>eq</strong> <strong>,</strong> <strong>ne</strong> <strong>)</strong></li></ul><h4 id="条件运算"><a href="#条件运算" class="headerlink" title="条件运算"></a>条件运算</h4><ul><li>If-then: <strong>(if) ? (then)</strong></li><li>If-then-else: <strong>(if) ? (then) : (else)</strong></li><li>Default: (value) <strong>?: (defaultvalue)</strong></li></ul><h4 id="特殊操作"><a href="#特殊操作" class="headerlink" title="特殊操作"></a>特殊操作</h4><ul><li>无操作： _</li></ul><h3 id="设置属性值-th-attr"><a href="#设置属性值-th-attr" class="headerlink" title="设置属性值-th:attr"></a>设置属性值-th:attr</h3><ul><li>设置单个值</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;subscribe.html&quot;</span> <span class="hljs-attr">th:attr</span>=<span class="hljs-string">&quot;action=@&#123;/subscribe&#125;&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Subscribe!&quot;</span> <span class="hljs-attr">th:attr</span>=<span class="hljs-string">&quot;value=#&#123;subscribe.submit&#125;&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>设置多个值</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../../images/gtvglogo.png&quot;</span>  </span><br><span class="hljs-tag">     <span class="hljs-attr">th:attr</span>=<span class="hljs-string">&quot;src=@&#123;/images/gtvglogo.png&#125;,title=#&#123;logo&#125;,alt=#&#123;logo&#125;&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p><a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#setting-attribute-values">官方文档 - 5 Setting Attribute Values</a></p><h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;prod : $&#123;prods&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;prod.name&#125;&quot;</span>&gt;</span>Onions<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;prod.price&#125;&quot;</span>&gt;</span>2.41<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;prod.inStock&#125;? #&#123;true&#125; : #&#123;false&#125;&quot;</span>&gt;</span>yes<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;prod,iterStat : $&#123;prods&#125;&quot;</span> <span class="hljs-attr">th:class</span>=<span class="hljs-string">&quot;$&#123;iterStat.odd&#125;? &#x27;odd&#x27;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;prod.name&#125;&quot;</span>&gt;</span>Onions<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;prod.price&#125;&quot;</span>&gt;</span>2.41<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;prod.inStock&#125;? #&#123;true&#125; : #&#123;false&#125;&quot;</span>&gt;</span>yes<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="条件运算-1"><a href="#条件运算-1" class="headerlink" title="条件运算"></a>条件运算</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;comments.html&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/product/comments(prodId=$&#123;prod.id&#125;)&#125;&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;not #lists.isEmpty(prod.comments)&#125;&quot;</span>&gt;</span>view<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:switch</span>=<span class="hljs-string">&quot;$&#123;user.role&#125;&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:case</span>=<span class="hljs-string">&quot;&#x27;admin&#x27;&quot;</span>&gt;</span>User is an administrator<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:case</span>=<span class="hljs-string">&quot;#&#123;roles.manager&#125;&quot;</span>&gt;</span>User is a manager<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:case</span>=<span class="hljs-string">&quot;*&quot;</span>&gt;</span>User is some other thing<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="属性优先级"><a href="#属性优先级" class="headerlink" title="属性优先级"></a>属性优先级</h3><table><thead><tr><th>Order</th><th>Feature</th><th>Attributes</th></tr></thead><tbody><tr><td>1</td><td>Fragment inclusion</td><td><code>th:insert</code> <code>th:replace</code></td></tr><tr><td>2</td><td>Fragment iteration</td><td><code>th:each</code></td></tr><tr><td>3</td><td>Conditional evaluation</td><td><code>th:if</code> <code>th:unless</code> <code>th:switch</code> <code>th:case</code></td></tr><tr><td>4</td><td>Local variable definition</td><td><code>th:object</code> <code>th:with</code></td></tr><tr><td>5</td><td>General attribute modification</td><td><code>th:attr</code> <code>th:attrprepend</code> <code>th:attrappend</code></td></tr><tr><td>6</td><td>Specific attribute modification</td><td><code>th:value</code> <code>th:href</code> <code>th:src</code> <code>...</code></td></tr><tr><td>7</td><td>Text (tag body modification)</td><td><code>th:text</code> <code>th:utext</code></td></tr><tr><td>8</td><td>Fragment specification</td><td><code>th:fragment</code></td></tr><tr><td>9</td><td>Fragment removal</td><td><code>th:remove</code></td></tr></tbody></table><p><a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#attribute-precedence">官方文档 - 10 Attribute Precedence</a></p><h2 id="后台管理系统基本功能"><a href="#后台管理系统基本功能" class="headerlink" title="后台管理系统基本功能"></a>后台管理系统基本功能</h2><h3 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h3><p>使用IDEA的Spring Initializr。</p><ul><li>thymeleaf、</li><li>web-starter、</li><li>devtools、</li><li>lombok</li></ul><h3 id="登陆页面"><a href="#登陆页面" class="headerlink" title="登陆页面"></a>登陆页面</h3><ul><li><code>/static</code> 放置 css，js等静态资源</li><li><code>/templates/login.html</code> 登录页</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><span class="hljs-comment">&lt;!-- 要加这玩意thymeleaf才能用 --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-signin&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;index.html&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/login&#125;&quot;</span>&gt;</span><br><br>    ...<br>    <br>    <span class="hljs-comment">&lt;!-- 消息提醒 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: red&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userName&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;User ID&quot;</span> <span class="hljs-attr">autofocus</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Password&quot;</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-lg btn-login btn-block&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-check&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <br>    ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>/templates/main.html</code> 主页</li></ul><p>thymeleaf内联写法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Hello, [[$&#123;session.user.name&#125;]]!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="登录控制层"><a href="#登录控制层" class="headerlink" title="登录控制层"></a>登录控制层</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IndexController</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 来登录页</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(value = &#123;&quot;/&quot;,&quot;/login&quot;&#125;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">loginPage</span><span class="hljs-params">()</span>&#123;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/login&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">main</span><span class="hljs-params">(User user, HttpSession session, Model model)</span>&#123; <span class="hljs-comment">//RedirectAttributes</span><br><br>        <span class="hljs-keyword">if</span>(StringUtils.hasLength(user.getUserName()) &amp;&amp; <span class="hljs-string">&quot;123456&quot;</span>.equals(user.getPassword()))&#123;<br>            <span class="hljs-comment">//把登陆成功的用户保存起来</span><br>            session.setAttribute(<span class="hljs-string">&quot;loginUser&quot;</span>,user);<br>            <span class="hljs-comment">//登录成功重定向到main.html;  重定向防止表单重复提交</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/main.html&quot;</span>;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;账号密码错误&quot;</span>);<br>            <span class="hljs-comment">//回到登录页面</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;<br>        &#125;<br>    &#125;<br>    <br>     <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 去main页面</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/main.html&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">mainPage</span><span class="hljs-params">(HttpSession session, Model model)</span>&#123;<br>        <br>        <span class="hljs-comment">//最好用拦截器,过滤器</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">loginUser</span> <span class="hljs-operator">=</span> session.getAttribute(<span class="hljs-string">&quot;loginUser&quot;</span>);<br>        <span class="hljs-keyword">if</span>(loginUser != <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;main&quot;</span>;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//session过期，没有登陆过</span><br>        <span class="hljs-comment">//回到登录页面</span><br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;请重新登录&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String userName;<br>    <span class="hljs-keyword">private</span> String password;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="抽取公共页面"><a href="#抽取公共页面" class="headerlink" title="抽取公共页面"></a>抽取公共页面</h2><p><a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#template-layout">官方文档 - Template Layout</a></p><ul><li>公共页面<code>/templates/common.html</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--注意要添加xmlns:th才能添加thymeleaf的标签--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span> <span class="hljs-attr">th:fragment</span>=<span class="hljs-string">&quot;commonheader&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--common--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/style.css&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/css/style.css&#125;&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/style-responsive.css&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/css/style-responsive.css&#125;&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span><br>    ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- left side start--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;leftmenu&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left-side sticky-left-side&quot;</span>&gt;</span><br>...<br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left-side-inner&quot;</span>&gt;</span><br>...<br><br>        <span class="hljs-comment">&lt;!--sidebar nav start--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav nav-pills nav-stacked custom-nav&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/main.html&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-home&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Dashboard<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            ...<br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;menu-list nav-active&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-th-list&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Data Tables<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sub-menu-list&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/basic_table&#125;&quot;</span>&gt;</span> Basic Table<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/dynamic_table&#125;&quot;</span>&gt;</span> Advanced Table<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/responsive_table&#125;&quot;</span>&gt;</span> Responsive Table<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/editable_table&#125;&quot;</span>&gt;</span> Edit Table<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            ...<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--sidebar nav end--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!-- left side end--&gt;</span><br><br><br><span class="hljs-comment">&lt;!-- header section start--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:fragment</span>=<span class="hljs-string">&quot;headermenu&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header-section&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--toggle button start--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;toggle-btn&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-bars&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--toggle button end--&gt;</span><br>...<br><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!-- header section end--&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;commonscript&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Placed js at the end of the document so the pages load faster --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/js/jquery-1.10.2.min.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/js/jquery-ui-1.9.2.custom.min.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/js/jquery-migrate-1.2.1.min.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/js/bootstrap.min.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/js/modernizr.min.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/js/jquery.nicescroll.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--common scripts for all pages--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/js/scripts.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>/templates/table/basic_table.html</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;description&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;author&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ThemeBucket&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;shortcut icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;image/png&quot;</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Basic Table<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:include</span>=<span class="hljs-string">&quot;common :: commonheader&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!--将common.html的代码段 插进来--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sticky-header&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:replace</span>=<span class="hljs-string">&quot;common :: #leftmenu&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- main content start--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;main-content&quot;</span> &gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:replace</span>=<span class="hljs-string">&quot;common :: headermenu&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        ...<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- main content end--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- Placed js at the end of the document so the pages load faster --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:replace</span>=<span class="hljs-string">&quot;common :: #commonscript&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="遍历数据与页面bug修改"><a href="#遍历数据与页面bug修改" class="headerlink" title="遍历数据与页面bug修改"></a>遍历数据与页面bug修改</h2><p>控制层代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/dynamic_table&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">dynamic_table</span><span class="hljs-params">(Model model)</span>&#123;<br>    <span class="hljs-comment">//表格内容的遍历</span><br>    List&lt;User&gt; users = Arrays.asList(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;zhangsan&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>),<br>                                     <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;lisi&quot;</span>, <span class="hljs-string">&quot;123444&quot;</span>),<br>                                     <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;haha&quot;</span>, <span class="hljs-string">&quot;aaaaa&quot;</span>),<br>                                     <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;hehe &quot;</span>, <span class="hljs-string">&quot;aaddd&quot;</span>));<br>    model.addAttribute(<span class="hljs-string">&quot;users&quot;</span>,users);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;table/dynamic_table&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>页面代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;display table table-bordered&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hidden-table-info&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>#<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;gradeX&quot;</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;user,stats:$&#123;users&#125;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;stats.count&#125;&quot;</span>&gt;</span>Trident<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.userName&#125;&quot;</span>&gt;</span>Internet<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> &gt;</span>[[$&#123;user.password&#125;]]<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="视图解析器与视图"><a href="#视图解析器与视图" class="headerlink" title="视图解析器与视图"></a>视图解析器与视图</h2><p><strong>视图解析原理流程</strong>：</p><ol><li><p>目标方法处理的过程中（阅读<code>DispatcherServlet</code>源码），所有数据都会被放在 <code>ModelAndViewContainer</code> 里面，其中包括数据和视图地址。</p></li><li><p>方法的参数是一个自定义类型对象（从请求参数中确定的），把他重新放在 <code>ModelAndViewContainer</code> 。</p></li><li><p>任何目标方法执行完成以后都会返回<code>ModelAndView</code>（数据和视图地址）。</p></li><li><p>&#96;&#96;&#96;<br>processDispatchResult()</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>处理派发结果（页面改如何响应）<br><br>- ```<br>  render(mv, request, response)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>  进行页面渲染逻辑</p><ul><li>根据方法的<code>String</code>返回值得到 <code>View</code> 对象【定义了页面的渲染逻辑】</li></ul><ol><li>所有的视图解析器尝试是否能根据当前返回值得到<code>View</code>对象</li><li>得到了 <code>redirect:/main.html --&gt; Thymeleaf new RedirectView()</code>。</li><li><code>ContentNegotiationViewResolver</code> 里面包含了下面所有的视图解析器，内部还是利用下面所有视图解析器得到视图对象。</li><li><code>view.render(mv.getModelInternal(), request, response);</code> 视图对象调用自定义的render进行页面渲染工作。</li></ol><ul><li><code>RedirectView</code> 如何渲染【重定向到一个页面】</li><li>获取目标url地址</li><li><code>response.sendRedirect(encodedURL);</code></li></ul></li></ol><p><strong>视图解析</strong>：<br>- 返回值以 <code>forward:</code> 开始： <code>new InternalResourceView(forwardUrl);</code> –&gt; 转发<code>request.getRequestDispatcher(path).forward(request, response);</code><br>- 返回值以 <code>redirect:</code> 开始： <code>new RedirectView()</code> –&gt; render就是重定向<br>- 返回值是普通字符串：<code>new ThymeleafView()</code>—&gt;</p><hr><p>阅读源码：最好自己在IDE，打断点，且Debug模式运行实例，这样比较没那么沉闷。</p><h2 id="登录检查与静态资源放行"><a href="#登录检查与静态资源放行" class="headerlink" title="登录检查与静态资源放行"></a>登录检查与静态资源放行</h2><ol><li>编写一个拦截器实现<code>HandlerInterceptor</code>接口</li><li>拦截器注册到容器中（实现<code>WebMvcConfigurer</code>的<code>addInterceptors()</code>）</li><li>指定拦截规则（注意，如果是拦截所有，静态资源也会被拦截】</li></ol><p>编写一个实现<code>HandlerInterceptor</code>接口的拦截器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 目标方法执行之前</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">requestURI</span> <span class="hljs-operator">=</span> request.getRequestURI();<br>        log.info(<span class="hljs-string">&quot;preHandle拦截的请求路径是&#123;&#125;&quot;</span>,requestURI);<br><br>        <span class="hljs-comment">//登录检查逻辑</span><br>        <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> request.getSession();<br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">loginUser</span> <span class="hljs-operator">=</span> session.getAttribute(<span class="hljs-string">&quot;loginUser&quot;</span>);<br><br>        <span class="hljs-keyword">if</span>(loginUser != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-comment">//放行</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//拦截住。未登录。跳转到登录页</span><br>        request.setAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;请先登录&quot;</span>);<br><span class="hljs-comment">//        re.sendRedirect(&quot;/&quot;);</span><br>        request.getRequestDispatcher(<span class="hljs-string">&quot;/&quot;</span>).forward(request,response);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 目标方法执行完成以后</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        log.info(<span class="hljs-string">&quot;postHandle执行&#123;&#125;&quot;</span>,modelAndView);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 页面渲染以后</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        log.info(<span class="hljs-string">&quot;afterCompletion执行异常&#123;&#125;&quot;</span>,ex);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>拦截器注册到容器中 &amp;&amp; 指定拦截规则：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AdminWebConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>        registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginInterceptor</span>())<span class="hljs-comment">//拦截器注册到容器中</span><br>                .addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>)  <span class="hljs-comment">//所有请求都被拦截包括静态资源</span><br>                .excludePathPatterns(<span class="hljs-string">&quot;/&quot;</span>,<span class="hljs-string">&quot;/login&quot;</span>,<span class="hljs-string">&quot;/css/**&quot;</span>,<span class="hljs-string">&quot;/fonts/**&quot;</span>,<span class="hljs-string">&quot;/images/**&quot;</span>,<br>                        <span class="hljs-string">&quot;/js/**&quot;</span>,<span class="hljs-string">&quot;/aa/**&quot;</span>); <span class="hljs-comment">//放行的请求</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="拦截器的执行时机和原理"><a href="#拦截器的执行时机和原理" class="headerlink" title="拦截器的执行时机和原理"></a>拦截器的执行时机和原理</h2><ol><li><p>根据当前请求，找到<code>HandlerExecutionChain</code>（可以处理请求的handler以及handler的所有 拦截器）</p></li><li><p>先来顺序执行 所有拦截器的</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">preHandle</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><p>方法。</p><ul><li>如果当前拦截器<code>preHandle()</code>返回为<code>true</code>。则执行下一个拦截器的<code>preHandle()</code></li><li>如果当前拦截器返回为<code>false</code>。直接倒序执行所有已经执行了的拦截器的 <code>afterCompletion();</code>。</li></ul></li><li><p>如果任何一个拦截器返回<code>false</code>，直接跳出不执行目标方法。</p></li><li><p>所有拦截器都返回<code>true</code>，才执行目标方法。</p></li><li><p>倒序执行所有拦截器的<code>postHandle()</code>方法。</p></li><li><p>前面的步骤有任何异常都会直接倒序触发 <code>afterCompletion()</code>。</p></li><li><p>页面成功渲染完成以后，也会倒序触发 <code>afterCompletion()</code>。</p></li></ol><p><img src="https://img-blog.csdnimg.cn/20210205011212637.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE4NjMwMjQ=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><code>DispatcherServlet</code>中涉及到<code>HandlerInterceptor</code>的地方：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DispatcherServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FrameworkServlet</span> &#123;<br>    <br>    ...<br>    <br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doDispatch</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">processedRequest</span> <span class="hljs-operator">=</span> request;<br><span class="hljs-type">HandlerExecutionChain</span> <span class="hljs-variable">mappedHandler</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">multipartRequestParsed</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br><span class="hljs-type">WebAsyncManager</span> <span class="hljs-variable">asyncManager</span> <span class="hljs-operator">=</span> WebAsyncUtils.getAsyncManager(request);<br><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">ModelAndView</span> <span class="hljs-variable">mv</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">Exception</span> <span class="hljs-variable">dispatchException</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>            ...<br>            <br>                <span class="hljs-comment">//该方法内调用HandlerInterceptor的preHandle()</span><br><span class="hljs-keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">// Actually invoke the handler.</span><br>mv = ha.handle(processedRequest, response, mappedHandler.getHandler());<br><br>            ...<br>                <span class="hljs-comment">//该方法内调用HandlerInterceptor的postHandle()</span><br>mappedHandler.applyPostHandle(processedRequest, response, mv);<br>&#125;<br>        processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);<br>&#125;<br><span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>            <span class="hljs-comment">//该方法内调用HandlerInterceptor接口的afterCompletion方法</span><br>triggerAfterCompletion(processedRequest, response, mappedHandler, ex);<br>&#125;<br><span class="hljs-keyword">catch</span> (Throwable err) &#123;<br>            <span class="hljs-comment">//该方法内调用HandlerInterceptor接口的afterCompletion方法</span><br>triggerAfterCompletion(processedRequest, response, mappedHandler,<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">NestedServletException</span>(<span class="hljs-string">&quot;Handler processing failed&quot;</span>, err));<br>&#125;<br><span class="hljs-keyword">finally</span> &#123;<br>...<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">triggerAfterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response,</span><br><span class="hljs-params"><span class="hljs-meta">@Nullable</span> HandlerExecutionChain mappedHandler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br><span class="hljs-keyword">if</span> (mappedHandler != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">//该方法内调用HandlerInterceptor接口的afterCompletion方法</span><br>mappedHandler.triggerAfterCompletion(request, response, ex);<br>&#125;<br><span class="hljs-keyword">throw</span> ex;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processDispatchResult</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response,</span><br><span class="hljs-params"><span class="hljs-meta">@Nullable</span> HandlerExecutionChain mappedHandler, <span class="hljs-meta">@Nullable</span> ModelAndView mv,</span><br><span class="hljs-params"><span class="hljs-meta">@Nullable</span> Exception exception)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        ...<br><br><span class="hljs-keyword">if</span> (mappedHandler != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">//该方法内调用HandlerInterceptor接口的afterCompletion方法</span><br><span class="hljs-comment">// Exception (if any) is already handled..</span><br>mappedHandler.triggerAfterCompletion(request, response, <span class="hljs-literal">null</span>);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HandlerExecutionChain</span> &#123;<br>    <br>    ...<br>    <br><span class="hljs-type">boolean</span> <span class="hljs-title function_">applyPreHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">this</span>.interceptorList.size(); i++) &#123;<br><span class="hljs-type">HandlerInterceptor</span> <span class="hljs-variable">interceptor</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.interceptorList.get(i);<br>            <span class="hljs-comment">//HandlerInterceptor的preHandle方法</span><br><span class="hljs-keyword">if</span> (!interceptor.preHandle(request, response, <span class="hljs-built_in">this</span>.handler)) &#123;<br>                <br>triggerAfterCompletion(request, response, <span class="hljs-literal">null</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-built_in">this</span>.interceptorIndex = i;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>    <br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">applyPostHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, <span class="hljs-meta">@Nullable</span> ModelAndView mv)</span><br><span class="hljs-keyword">throws</span> Exception &#123;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.interceptorList.size() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br><span class="hljs-type">HandlerInterceptor</span> <span class="hljs-variable">interceptor</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.interceptorList.get(i);<br>            <br>            <span class="hljs-comment">//HandlerInterceptor接口的postHandle方法</span><br>interceptor.postHandle(request, response, <span class="hljs-built_in">this</span>.handler, mv);<br>&#125;<br>&#125;<br>    <br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">triggerAfterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, <span class="hljs-meta">@Nullable</span> Exception ex)</span> &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.interceptorIndex; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br><span class="hljs-type">HandlerInterceptor</span> <span class="hljs-variable">interceptor</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.interceptorList.get(i);<br><span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">//HandlerInterceptor接口的afterCompletion方法</span><br>interceptor.afterCompletion(request, response, <span class="hljs-built_in">this</span>.handler, ex);<br>&#125;<br><span class="hljs-keyword">catch</span> (Throwable ex2) &#123;<br>logger.error(<span class="hljs-string">&quot;HandlerInterceptor.afterCompletion threw exception&quot;</span>, ex2);<br>&#125;<br>&#125;<br>&#125;<br>    <br>    <br>&#125; <br></code></pre></td></tr></table></figure><h2 id="单文件与多文件上传的使用"><a href="#单文件与多文件上传的使用" class="headerlink" title="单文件与多文件上传的使用"></a>单文件与多文件上传的使用</h2><ul><li>页面代码<code>/static/form/form_layouts.html</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;form&quot;</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/upload&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;exampleInputEmail1&quot;</span>&gt;</span>邮箱<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;exampleInputEmail1&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Enter email&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;exampleInputPassword1&quot;</span>&gt;</span>名字<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;exampleInputPassword1&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Password&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;exampleInputFile&quot;</span>&gt;</span>头像<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;headerImg&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;exampleInputFile&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;exampleInputFile&quot;</span>&gt;</span>生活照<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;photos&quot;</span> <span class="hljs-attr">multiple</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span> Check me out<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>控制层代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FormTestController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/form_layouts&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">form_layouts</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;form/form_layouts&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/upload&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">upload</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;email&quot;)</span> String email,</span><br><span class="hljs-params">                         <span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String username,</span><br><span class="hljs-params">                         <span class="hljs-meta">@RequestPart(&quot;headerImg&quot;)</span> MultipartFile headerImg,</span><br><span class="hljs-params">                         <span class="hljs-meta">@RequestPart(&quot;photos&quot;)</span> MultipartFile[] photos)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>        log.info(<span class="hljs-string">&quot;上传的信息：email=&#123;&#125;，username=&#123;&#125;，headerImg=&#123;&#125;，photos=&#123;&#125;&quot;</span>,<br>                 email,username,headerImg.getSize(),photos.length);<br><br>        <span class="hljs-keyword">if</span>(!headerImg.isEmpty())&#123;<br>            <span class="hljs-comment">//保存到文件服务器，OSS服务器</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">originalFilename</span> <span class="hljs-operator">=</span> headerImg.getOriginalFilename();<br>            headerImg.transferTo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;H:\\cache\\&quot;</span>+originalFilename));<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(photos.length &gt; <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">for</span> (MultipartFile photo : photos) &#123;<br>                <span class="hljs-keyword">if</span>(!photo.isEmpty())&#123;<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">originalFilename</span> <span class="hljs-operator">=</span> photo.getOriginalFilename();<br>                    photo.transferTo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;H:\\cache\\&quot;</span>+originalFilename));<br>                &#125;<br>            &#125;<br>        &#125;<br><br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;main&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>文件上传相关的配置类：</p><ul><li><code>org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration</code></li><li><code>org.springframework.boot.autoconfigure.web.servlet.MultipartProperties</code></li></ul><p>文件大小相关配置项：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.servlet.multipart.max-file-size</span>=<span class="hljs-string">10MB</span><br><span class="hljs-attr">spring.servlet.multipart.max-request-size</span>=<span class="hljs-string">100MB</span><br><span class="hljs-attr">12</span><br></code></pre></td></tr></table></figure><h2 id="文件上传参数解析器"><a href="#文件上传参数解析器" class="headerlink" title="文件上传参数解析器"></a>文件上传参数解析器</h2><p>文件上传相关的自动配置类<code>MultipartAutoConfiguration</code>有创建文件上传参数解析器<code>StandardServletMultipartResolver</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@ConditionalOnClass(&#123; Servlet.class, StandardServletMultipartResolver.class, MultipartConfigElement.class &#125;)</span><br><span class="hljs-meta">@ConditionalOnProperty(prefix = &quot;spring.servlet.multipart&quot;, name = &quot;enabled&quot;, matchIfMissing = true)</span><br><span class="hljs-meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span><br><span class="hljs-meta">@EnableConfigurationProperties(MultipartProperties.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MultipartAutoConfiguration</span> &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> MultipartProperties multipartProperties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">MultipartAutoConfiguration</span><span class="hljs-params">(MultipartProperties multipartProperties)</span> &#123;<br><span class="hljs-built_in">this</span>.multipartProperties = multipartProperties;<br>&#125;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionalOnMissingBean(&#123; MultipartConfigElement.class, CommonsMultipartResolver.class &#125;)</span><br><span class="hljs-keyword">public</span> MultipartConfigElement <span class="hljs-title function_">multipartConfigElement</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.multipartProperties.createMultipartConfig();<br>&#125;<br><br><span class="hljs-meta">@Bean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME)</span><br><span class="hljs-meta">@ConditionalOnMissingBean(MultipartResolver.class)</span><br><span class="hljs-keyword">public</span> StandardServletMultipartResolver <span class="hljs-title function_">multipartResolver</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//配置好文件上传解析器</span><br><span class="hljs-type">StandardServletMultipartResolver</span> <span class="hljs-variable">multipartResolver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StandardServletMultipartResolver</span>();<br>multipartResolver.setResolveLazily(<span class="hljs-built_in">this</span>.multipartProperties.isResolveLazily());<br><span class="hljs-keyword">return</span> multipartResolver;<br>&#125;<br><br>&#125;<br><span class="hljs-comment">//文件上传解析器</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StandardServletMultipartResolver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MultipartResolver</span> &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">resolveLazily</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setResolveLazily</span><span class="hljs-params">(<span class="hljs-type">boolean</span> resolveLazily)</span> &#123;<br><span class="hljs-built_in">this</span>.resolveLazily = resolveLazily;<br>&#125;<br><br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isMultipart</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br><span class="hljs-keyword">return</span> StringUtils.startsWithIgnoreCase(request.getContentType(), <span class="hljs-string">&quot;multipart/&quot;</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> MultipartHttpServletRequest <span class="hljs-title function_">resolveMultipart</span><span class="hljs-params">(HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> MultipartException &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StandardMultipartHttpServletRequest</span>(request, <span class="hljs-built_in">this</span>.resolveLazily);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cleanupMultipart</span><span class="hljs-params">(MultipartHttpServletRequest request)</span> &#123;<br><span class="hljs-keyword">if</span> (!(request <span class="hljs-keyword">instanceof</span> AbstractMultipartHttpServletRequest) ||<br>((AbstractMultipartHttpServletRequest) request).isResolved()) &#123;<br><span class="hljs-comment">// To be on the safe side: explicitly delete the parts,</span><br><span class="hljs-comment">// but only actual file parts (for Resin compatibility)</span><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">for</span> (Part part : request.getParts()) &#123;<br><span class="hljs-keyword">if</span> (request.getFile(part.getName()) != <span class="hljs-literal">null</span>) &#123;<br>part.delete();<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br>LogFactory.getLog(getClass()).warn(<span class="hljs-string">&quot;Failed to perform cleanup of multipart items&quot;</span>, ex);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DispatcherServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FrameworkServlet</span> &#123;<br>    <br>    <span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">private</span> MultipartResolver multipartResolver;<br>    <br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initMultipartResolver</span><span class="hljs-params">(ApplicationContext context)</span> &#123;<br>...<br>        <br>        <span class="hljs-comment">//这个就是配置类配置的StandardServletMultipartResolver文件上传解析器</span><br><span class="hljs-built_in">this</span>.multipartResolver = context.getBean(MULTIPART_RESOLVER_BEAN_NAME, MultipartResolver.class);<br>...<br>&#125;<br>    <br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doDispatch</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">processedRequest</span> <span class="hljs-operator">=</span> request;<br><span class="hljs-type">HandlerExecutionChain</span> <span class="hljs-variable">mappedHandler</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">multipartRequestParsed</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">//最后finally的回收flag</span><br>...<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">ModelAndView</span> <span class="hljs-variable">mv</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">Exception</span> <span class="hljs-variable">dispatchException</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br><span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">//做预处理,如果有上传文件 就new StandardMultipartHttpServletRequest包装类</span><br>processedRequest = checkMultipart(request);<br>multipartRequestParsed = (processedRequest != request);<br><span class="hljs-comment">// Determine handler for the current request.</span><br>mappedHandler = getHandler(processedRequest);<br><br>                ...<br><br><span class="hljs-comment">// Determine handler adapter for the current request.</span><br><span class="hljs-type">HandlerAdapter</span> <span class="hljs-variable">ha</span> <span class="hljs-operator">=</span> getHandlerAdapter(mappedHandler.getHandler());<br><br>...<br><br><span class="hljs-comment">// Actually invoke the handler.</span><br>mv = ha.handle(processedRequest, response, mappedHandler.getHandler());<br>                <br>            &#125;<br>            ....<br>            <br><span class="hljs-keyword">finally</span> &#123;<br><br>            ...<br>            <br>            <span class="hljs-keyword">if</span> (multipartRequestParsed) &#123;<br>                cleanupMultipart(processedRequest);<br>            &#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">protected</span> HttpServletRequest <span class="hljs-title function_">checkMultipart</span><span class="hljs-params">(HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> MultipartException &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.multipartResolver != <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-built_in">this</span>.multipartResolver.isMultipart(request)) &#123;<br>            ...<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.multipartResolver.resolveMultipart(request);<br>            ...<br>&#125;<br>    &#125;<br><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cleanupMultipart</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.multipartResolver != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-type">MultipartHttpServletRequest</span> <span class="hljs-variable">multipartRequest</span> <span class="hljs-operator">=</span><br>WebUtils.getNativeRequest(request, MultipartHttpServletRequest.class);<br><span class="hljs-keyword">if</span> (multipartRequest != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-built_in">this</span>.multipartResolver.cleanupMultipart(multipartRequest);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</code>跳到以下的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestMappingHandlerAdapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractHandlerMethodAdapter</span><br><span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanFactoryAware</span>, InitializingBean &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> ModelAndView <span class="hljs-title function_">handleInternal</span><span class="hljs-params">(HttpServletRequest request,</span><br><span class="hljs-params">HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>ModelAndView mav;<br>...<br>mav = invokeHandlerMethod(request, response, handlerMethod);<br>        ...<br><span class="hljs-keyword">return</span> mav;<br>&#125;<br>    <br>    <span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">protected</span> ModelAndView <span class="hljs-title function_">invokeHandlerMethod</span><span class="hljs-params">(HttpServletRequest request,</span><br><span class="hljs-params">HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br><span class="hljs-type">ServletWebRequest</span> <span class="hljs-variable">webRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletWebRequest</span>(request, response);<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">WebDataBinderFactory</span> <span class="hljs-variable">binderFactory</span> <span class="hljs-operator">=</span> getDataBinderFactory(handlerMethod);<br><span class="hljs-type">ModelFactory</span> <span class="hljs-variable">modelFactory</span> <span class="hljs-operator">=</span> getModelFactory(handlerMethod, binderFactory);<br><br><span class="hljs-type">ServletInvocableHandlerMethod</span> <span class="hljs-variable">invocableMethod</span> <span class="hljs-operator">=</span> createInvocableHandlerMethod(handlerMethod);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.argumentResolvers != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//关注点</span><br>invocableMethod.setHandlerMethodArgumentResolvers(<span class="hljs-built_in">this</span>.argumentResolvers);<br>&#125;<br>...<br>invocableMethod.invokeAndHandle(webRequest, mavContainer);<br>...<br><br><span class="hljs-keyword">return</span> getModelAndView(mavContainer, modelFactory, webRequest);<br>&#125;<br><span class="hljs-keyword">finally</span> &#123;<br>webRequest.requestCompleted();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>this.argumentResolvers</code>其中主角类<code>RequestPartMethodArgumentResolver</code>用来生成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletInvocableHandlerMethod</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">InvocableHandlerMethod</span> &#123;<br>    <br>    ...<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invokeAndHandle</span><span class="hljs-params">(ServletWebRequest webRequest, ModelAndViewContainer mavContainer,</span><br><span class="hljs-params">Object... providedArgs)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-type">Object</span> <span class="hljs-variable">returnValue</span> <span class="hljs-operator">=</span> invokeForRequest(webRequest, mavContainer, providedArgs);<br>...<br>&#125;<br>    <br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invokeForRequest</span><span class="hljs-params">(NativeWebRequest request, <span class="hljs-meta">@Nullable</span> ModelAndViewContainer mavContainer,</span><br><span class="hljs-params">Object... providedArgs)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>Object[] args = getMethodArgumentValues(request, mavContainer, providedArgs);<br>...<br><span class="hljs-keyword">return</span> doInvoke(args);<span class="hljs-comment">//反射调用</span><br>&#125;<br>    <br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">doInvoke</span><span class="hljs-params">(Object... args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> getBridgedMethod();<br>ReflectionUtils.makeAccessible(method);<br><span class="hljs-keyword">return</span> method.invoke(getBean(), args);<br>...<br>&#125;<br>    <br>    <span class="hljs-comment">//处理得出multipart参数，准备稍后的反射调用（@PostMapping标记的上传方法）</span><br>    <span class="hljs-keyword">protected</span> Object[] getMethodArgumentValues(NativeWebRequest request, <span class="hljs-meta">@Nullable</span> ModelAndViewContainer mavContainer,<br>Object... providedArgs) <span class="hljs-keyword">throws</span> Exception &#123;<br><br>MethodParameter[] parameters = getMethodParameters();<br>...<br>Object[] args = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[parameters.length];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; parameters.length; i++) &#123;<br><span class="hljs-type">MethodParameter</span> <span class="hljs-variable">parameter</span> <span class="hljs-operator">=</span> parameters[i];<br>parameter.initParameterNameDiscovery(<span class="hljs-built_in">this</span>.parameterNameDiscoverer);<br>args[i] = findProvidedArgument(parameter, providedArgs);<br><span class="hljs-keyword">if</span> (args[i] != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br>            <span class="hljs-comment">//关注点1</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.resolvers.supportsParameter(parameter)) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(formatArgumentError(parameter, <span class="hljs-string">&quot;No suitable resolver&quot;</span>));<br>&#125;<br><span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">//关注点2</span><br>args[i] = <span class="hljs-built_in">this</span>.resolvers.resolveArgument(parameter, mavContainer, request, <span class="hljs-built_in">this</span>.dataBinderFactory);<br>&#125;<br><span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>...<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> args;<br>&#125;<br>    <br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestPartMethodArgumentResolver</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractMessageConverterMethodArgumentResolver</span> &#123;<br><br>    <span class="hljs-comment">//对应上面代码关注点1</span><br>    <span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">supportsParameter</span><span class="hljs-params">(MethodParameter parameter)</span> &#123;<br>        <span class="hljs-comment">//标注@RequestPart的参数</span><br><span class="hljs-keyword">if</span> (parameter.hasParameterAnnotation(RequestPart.class)) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> (parameter.hasParameterAnnotation(RequestParam.class)) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">return</span> MultipartResolutionDelegate.isMultipartArgument(parameter.nestedIfOptional());<br>&#125;<br>&#125;<br><br>    <span class="hljs-comment">//对应上面代码关注点2</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">resolveArgument</span><span class="hljs-params">(MethodParameter parameter, <span class="hljs-meta">@Nullable</span> ModelAndViewContainer mavContainer,</span><br><span class="hljs-params">NativeWebRequest request, <span class="hljs-meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br><span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">servletRequest</span> <span class="hljs-operator">=</span> request.getNativeRequest(HttpServletRequest.class);<br>Assert.state(servletRequest != <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;No HttpServletRequest&quot;</span>);<br><br><span class="hljs-type">RequestPart</span> <span class="hljs-variable">requestPart</span> <span class="hljs-operator">=</span> parameter.getParameterAnnotation(RequestPart.class);<br><span class="hljs-type">boolean</span> <span class="hljs-variable">isRequired</span> <span class="hljs-operator">=</span> ((requestPart == <span class="hljs-literal">null</span> || requestPart.required()) &amp;&amp; !parameter.isOptional());<br><br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> getPartName(parameter, requestPart);<br>parameter = parameter.nestedIfOptional();<br><span class="hljs-type">Object</span> <span class="hljs-variable">arg</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-comment">//封装成MultipartFile类型的对象作参数</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">mpArg</span> <span class="hljs-operator">=</span> MultipartResolutionDelegate.resolveMultipartArgument(name, parameter, servletRequest);<br><span class="hljs-keyword">if</span> (mpArg != MultipartResolutionDelegate.UNRESOLVABLE) &#123;<br>arg = mpArg;<br>&#125;<br>        <br>        ...<br><br><span class="hljs-keyword">return</span> adaptArgumentIfNecessary(arg, parameter);<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MultipartResolutionDelegate</span> &#123;<br>    ...<br>    <br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">resolveMultipartArgument</span><span class="hljs-params">(String name, MethodParameter parameter, HttpServletRequest request)</span><br><span class="hljs-keyword">throws</span> Exception &#123;<br><br><span class="hljs-type">MultipartHttpServletRequest</span> <span class="hljs-variable">multipartRequest</span> <span class="hljs-operator">=</span><br>WebUtils.getNativeRequest(request, MultipartHttpServletRequest.class);<br><span class="hljs-type">boolean</span> <span class="hljs-variable">isMultipart</span> <span class="hljs-operator">=</span> (multipartRequest != <span class="hljs-literal">null</span> || isMultipartContent(request));<br><br><span class="hljs-keyword">if</span> (MultipartFile.class == parameter.getNestedParameterType()) &#123;<br><span class="hljs-keyword">if</span> (!isMultipart) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (multipartRequest == <span class="hljs-literal">null</span>) &#123;<br>multipartRequest = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StandardMultipartHttpServletRequest</span>(request);<br>&#125;<br><span class="hljs-keyword">return</span> multipartRequest.getFile(name);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (isMultipartFileCollection(parameter)) &#123;<br><span class="hljs-keyword">if</span> (!isMultipart) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (multipartRequest == <span class="hljs-literal">null</span>) &#123;<br>multipartRequest = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StandardMultipartHttpServletRequest</span>(request);<br>&#125;<br>List&lt;MultipartFile&gt; files = multipartRequest.getFiles(name);<br><span class="hljs-keyword">return</span> (!files.isEmpty() ? files : <span class="hljs-literal">null</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (isMultipartFileArray(parameter)) &#123;<br><span class="hljs-keyword">if</span> (!isMultipart) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (multipartRequest == <span class="hljs-literal">null</span>) &#123;<br>multipartRequest = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StandardMultipartHttpServletRequest</span>(request);<br>&#125;<br>List&lt;MultipartFile&gt; files = multipartRequest.getFiles(name);<br><span class="hljs-keyword">return</span> (!files.isEmpty() ? files.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MultipartFile</span>[<span class="hljs-number">0</span>]) : <span class="hljs-literal">null</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Part.class == parameter.getNestedParameterType()) &#123;<br><span class="hljs-keyword">if</span> (!isMultipart) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><span class="hljs-keyword">return</span> request.getPart(name);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (isPartCollection(parameter)) &#123;<br><span class="hljs-keyword">if</span> (!isMultipart) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br>List&lt;Part&gt; parts = resolvePartList(request, name);<br><span class="hljs-keyword">return</span> (!parts.isEmpty() ? parts : <span class="hljs-literal">null</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (isPartArray(parameter)) &#123;<br><span class="hljs-keyword">if</span> (!isMultipart) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br>List&lt;Part&gt; parts = resolvePartList(request, name);<br><span class="hljs-keyword">return</span> (!parts.isEmpty() ? parts.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Part</span>[<span class="hljs-number">0</span>]) : <span class="hljs-literal">null</span>);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> UNRESOLVABLE;<br>&#125;<br>&#125;<br>    <br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="SpringBoot默认错误处理机制"><a href="#SpringBoot默认错误处理机制" class="headerlink" title="SpringBoot默认错误处理机制"></a>SpringBoot默认错误处理机制</h2><p><a href="https://docs.spring.io/spring-boot/docs/2.4.2/reference/htmlsingle/#boot-features-error-handling">Spring Boot官方文档 - Error Handling</a></p><p><strong>默认规则</strong>：</p><ul><li>默认情况下，Spring Boot提供<code>/error</code>处理所有错误的映射</li><li>机器客户端，它将生成JSON响应，其中包含错误，HTTP状态和异常消息的详细信息。对于浏览器客户端，响应一个“ whitelabel”错误视图，以HTML格式呈现相同的数据</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;timestamp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2020-11-22T05:53:28.416+00:00&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">404</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;error&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Not Found&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;No message available&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/asadada&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>要对其进行自定义，添加<code>View</code>解析为<code>error</code></li><li>要完全替换默认行为，可以实现 <code>ErrorController</code>并注册该类型的Bean定义，或添加<code>ErrorAttributes类型的组件</code>以使用现有机制但替换其内容。</li><li><code>/templates/error/</code>下的4xx，5xx页面会被自动解析</li></ul><h2 id="底层组件功能分析"><a href="#底层组件功能分析" class="headerlink" title="底层组件功能分析"></a>底层组件功能分析</h2><ul><li><p><code>ErrorMvcAutoConfiguration</code> 自动配置异常处理规则</p></li><li><p><strong>容器中的组件</strong>：类型：<code>DefaultErrorAttributes</code> -&gt; id：<code>errorAttributes</code></p></li><li><p>&#96;&#96;&#96;<br>public class DefaultErrorAttributes implements ErrorAttributes, HandlerExceptionResolver</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>  - `DefaultErrorAttributes`：定义错误页面中可以包含数据（异常明细，堆栈信息等）。<br><br>- **容器中的组件**：类型：`BasicErrorController` --&gt; id：`basicErrorController`（json+白页 适配响应）<br><br>- 处理默认 `/error` 路径的请求<br><br>  ，页面响应<br><br>   <br><br></code></pre></td></tr></table></figure><p>new ModelAndView(“error”, model);</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>  - 容器中有组件 `View`-&gt;id是error；（响应默认错误页）<br>  - 容器中放组件 `BeanNameViewResolver`（视图解析器）；按照返回的视图名作为组件的id去容器中找`View`对象。<br><br>- **容器中的组件**：类型：`DefaultErrorViewResolver` -&gt; id：`conventionErrorViewResolver`<br><br>- 如果发生异常错误，会以HTTP的状态码 作为视图页地址（viewName），找到真正的页面<br><br>  （主要作用）。<br><br>  - error/<span class="hljs-number">404</span>、<span class="hljs-number">5</span>xx.html<br>  - 如果想要返回页面，就会找error视图（`StaticView`默认是一个白页）。<br><br>## 异常处理流程<br><br>譬如写一个会抛出异常的控制层：<br><br>```java<br>@Slf4j<br>@RestController<br>public class HelloController &#123;<br><br>    @RequestMapping(<span class="hljs-string">&quot;/hello&quot;</span>)<br>    public String handle01()&#123;<br><br>        int i = <span class="hljs-number">1</span> / <span class="hljs-number">0</span><span class="hljs-comment">;//将会抛出ArithmeticException</span><br><br>        log.info(<span class="hljs-string">&quot;Hello, Spring Boot 2!&quot;</span>)<span class="hljs-comment">;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello, Spring Boot 2!&quot;</span><span class="hljs-comment">;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>当浏览器发出<code>/hello</code>请求，<code>DispatcherServlet</code>的<code>doDispatch()</code>的<code>mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</code>将会抛出<code>ArithmeticException</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DispatcherServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FrameworkServlet</span> &#123;<br>    ...<br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doDispatch</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>...<br><span class="hljs-comment">// Actually invoke the handler.</span><br>            <span class="hljs-comment">//将会抛出ArithmeticException</span><br>mv = ha.handle(processedRequest, response, mappedHandler.getHandler());<br><br>applyDefaultViewName(processedRequest, mv);<br>mappedHandler.applyPostHandle(processedRequest, response, mv);<br>&#125;<br><span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>                <span class="hljs-comment">//将会捕捉ArithmeticException</span><br>dispatchException = ex;<br>&#125;<br><span class="hljs-keyword">catch</span> (Throwable err) &#123;<br>...<br>&#125;<br>    <span class="hljs-comment">//捕捉后，继续运行</span><br>processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);<br>&#125;<br><span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>triggerAfterCompletion(processedRequest, response, mappedHandler, ex);<br>&#125;<br><span class="hljs-keyword">catch</span> (Throwable err) &#123;<br>triggerAfterCompletion(processedRequest, response, mappedHandler,<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">NestedServletException</span>(<span class="hljs-string">&quot;Handler processing failed&quot;</span>, err));<br>&#125;<br><span class="hljs-keyword">finally</span> &#123;<br>...<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processDispatchResult</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response,</span><br><span class="hljs-params"><span class="hljs-meta">@Nullable</span> HandlerExecutionChain mappedHandler, <span class="hljs-meta">@Nullable</span> ModelAndView mv,</span><br><span class="hljs-params"><span class="hljs-meta">@Nullable</span> Exception exception)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br><span class="hljs-type">boolean</span> <span class="hljs-variable">errorView</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br><span class="hljs-keyword">if</span> (exception != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">if</span> (exception <span class="hljs-keyword">instanceof</span> ModelAndViewDefiningException) &#123;<br>...<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-type">Object</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> (mappedHandler != <span class="hljs-literal">null</span> ? mappedHandler.getHandler() : <span class="hljs-literal">null</span>);<br><span class="hljs-comment">//ArithmeticException将在这处理</span><br>                mv = processHandlerException(request, response, handler, exception);<br>errorView = (mv != <span class="hljs-literal">null</span>);<br>&#125;<br>&#125;<br>...<br>&#125;<br><br><span class="hljs-keyword">protected</span> ModelAndView <span class="hljs-title function_">processHandlerException</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response,</span><br><span class="hljs-params"><span class="hljs-meta">@Nullable</span> Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br><span class="hljs-comment">// Success and error responses may use different content types</span><br>request.removeAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE);<br><br><span class="hljs-comment">// Check registered HandlerExceptionResolvers...</span><br><span class="hljs-type">ModelAndView</span> <span class="hljs-variable">exMv</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.handlerExceptionResolvers != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">//遍历所有的 handlerExceptionResolvers，看谁能处理当前异常HandlerExceptionResolver处理器异常解析器</span><br><span class="hljs-keyword">for</span> (HandlerExceptionResolver resolver : <span class="hljs-built_in">this</span>.handlerExceptionResolvers) &#123;<br>exMv = resolver.resolveException(request, response, handler, ex);<br><span class="hljs-keyword">if</span> (exMv != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br>...<br><br>        <span class="hljs-comment">//若只有系统的自带的异常解析器（没有自定义的），异常还是会抛出</span><br><span class="hljs-keyword">throw</span> ex;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>系统自带的<strong>异常解析器</strong>：</p><p><img src="https://img-blog.csdnimg.cn/20210205011338251.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE4NjMwMjQ=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li><code>DefaultErrorAttributes</code>先来处理异常，它主要功能把异常信息保存到request域，并且返回null。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultErrorAttributes</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ErrorAttributes</span>, HandlerExceptionResolver, Ordered &#123;<br>    ...<br>    <span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">resolveException</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> &#123;<br>        <span class="hljs-built_in">this</span>.storeErrorAttributes(request, ex);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">storeErrorAttributes</span><span class="hljs-params">(HttpServletRequest request, Exception ex)</span> &#123;<br>        request.setAttribute(ERROR_ATTRIBUTE, ex);<span class="hljs-comment">//把异常信息保存到request域</span><br>    &#125;<br>    ...<br>    <br>&#125;    <br></code></pre></td></tr></table></figure><ul><li>默认没有任何解析器（上图的<code>HandlerExceptionResolverComposite</code>）能处理异常，所以最后异常会被抛出。</li><li>最终底层就会转发<code>/error</code> 请求。会被底层的<code>BasicErrorController</code>处理。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;$&#123;server.error.path:$&#123;error.path:/error&#125;&#125;&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BasicErrorController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractErrorController</span> &#123;<br><br>    <span class="hljs-meta">@RequestMapping(produces = MediaType.TEXT_HTML_VALUE)</span><br>    <span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">errorHtml</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;<br>       <span class="hljs-type">HttpStatus</span> <span class="hljs-variable">status</span> <span class="hljs-operator">=</span> getStatus(request);<br>       Map&lt;String, Object&gt; model = Collections<br>             .unmodifiableMap(getErrorAttributes(request, getErrorAttributeOptions(request, MediaType.TEXT_HTML)));<br>       response.setStatus(status.value());<br>       <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">modelAndView</span> <span class="hljs-operator">=</span> resolveErrorView(request, response, status, model);<br>       <span class="hljs-comment">//如果/template/error内没有4**.html或5**.html，</span><br>       <span class="hljs-comment">//modelAndView为空，最终还是返回viewName为error的modelAndView</span><br>       <span class="hljs-keyword">return</span> (modelAndView != <span class="hljs-literal">null</span>) ? modelAndView : <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>(<span class="hljs-string">&quot;error&quot;</span>, model);<br>    &#125;<br>    <br>    ...<br>&#125;<br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doDispatch</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <br>    ...<br>    <br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doDispatch</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        ...<br>     <span class="hljs-comment">// Actually invoke the handler.</span><br>mv = ha.handle(processedRequest, response, mappedHandler.getHandler());<br>...<br>        <span class="hljs-comment">//渲染页面</span><br>processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);<br>        ...<br>    &#125;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processDispatchResult</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response,</span><br><span class="hljs-params"><span class="hljs-meta">@Nullable</span> HandlerExecutionChain mappedHandler, <span class="hljs-meta">@Nullable</span> ModelAndView mv,</span><br><span class="hljs-params"><span class="hljs-meta">@Nullable</span> Exception exception)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">errorView</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        ...<br><span class="hljs-comment">// Did the handler return a view to render?</span><br><span class="hljs-keyword">if</span> (mv != <span class="hljs-literal">null</span> &amp;&amp; !mv.wasCleared()) &#123;<br>render(mv, request, response);<br><span class="hljs-keyword">if</span> (errorView) &#123;<br>WebUtils.clearErrorRequestAttributes(request);<br>&#125;<br>&#125;<br>...<br>&#125;<br>    <br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">render</span><span class="hljs-params">(ModelAndView mv, HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>...<br><br>View view;<br><span class="hljs-type">String</span> <span class="hljs-variable">viewName</span> <span class="hljs-operator">=</span> mv.getViewName();<br><span class="hljs-keyword">if</span> (viewName != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-comment">// We need to resolve the view name.</span><br>            <span class="hljs-comment">//找出合适error的View，如果/template/error内没有4**.html或5**.html，</span><br>            <span class="hljs-comment">//将会返回默认异常页面ErrorMvcAutoConfiguration.StaticView</span><br>            <span class="hljs-comment">//这里按需深究代码吧！</span><br>view = resolveViewName(viewName, mv.getModelInternal(), locale, request);<br>...<br>&#125;<br>...<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">if</span> (mv.getStatus() != <span class="hljs-literal">null</span>) &#123;<br>response.setStatus(mv.getStatus().value());<br>&#125;<br>            <span class="hljs-comment">//看下面代码块的StaticView的render块</span><br>view.render(mv.getModelInternal(), request, response);<br>&#125;<br><span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>...<br>&#125;<br>&#125;<br>    <br>&#125;<br><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span><br><span class="hljs-meta">@ConditionalOnClass(&#123; Servlet.class, DispatcherServlet.class &#125;)</span><br><span class="hljs-comment">// Load before the main WebMvcAutoConfiguration so that the error View is available</span><br><span class="hljs-meta">@AutoConfigureBefore(WebMvcAutoConfiguration.class)</span><br><span class="hljs-meta">@EnableConfigurationProperties(&#123; ServerProperties.class, ResourceProperties.class, WebMvcProperties.class &#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ErrorMvcAutoConfiguration</span> &#123;<br>    <br>    ...<br>        <br>   <span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@ConditionalOnProperty(prefix = &quot;server.error.whitelabel&quot;, name = &quot;enabled&quot;, matchIfMissing = true)</span><br><span class="hljs-meta">@Conditional(ErrorTemplateMissingCondition.class)</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WhitelabelErrorViewConfiguration</span> &#123;<br><br>        <span class="hljs-comment">//将创建一个名为error的系统默认异常页面View的Bean</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">StaticView</span> <span class="hljs-variable">defaultErrorView</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StaticView</span>();<br><br><span class="hljs-meta">@Bean(name = &quot;error&quot;)</span><br><span class="hljs-meta">@ConditionalOnMissingBean(name = &quot;error&quot;)</span><br><span class="hljs-keyword">public</span> View <span class="hljs-title function_">defaultErrorView</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.defaultErrorView;<br>&#125;<br><br><span class="hljs-comment">// If the user adds @EnableWebMvc then the bean name view resolver from</span><br><span class="hljs-comment">// WebMvcAutoConfiguration disappears, so add it back in to avoid disappointment.</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionalOnMissingBean</span><br><span class="hljs-keyword">public</span> BeanNameViewResolver <span class="hljs-title function_">beanNameViewResolver</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">BeanNameViewResolver</span> <span class="hljs-variable">resolver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanNameViewResolver</span>();<br>resolver.setOrder(Ordered.LOWEST_PRECEDENCE - <span class="hljs-number">10</span>);<br><span class="hljs-keyword">return</span> resolver;<br>&#125;<br><br>&#125;     <br>   <br>    <br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticView</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">View</span> &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">MediaType</span> <span class="hljs-variable">TEXT_HTML_UTF8</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MediaType</span>(<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;html&quot;</span>, StandardCharsets.UTF_8);<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Log</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LogFactory.getLog(StaticView.class);<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">render</span><span class="hljs-params">(Map&lt;String, ?&gt; model, HttpServletRequest request, HttpServletResponse response)</span><br><span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-keyword">if</span> (response.isCommitted()) &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> getMessage(model);<br>logger.error(message);<br><span class="hljs-keyword">return</span>;<br>&#125;<br>response.setContentType(TEXT_HTML_UTF8.toString());<br><span class="hljs-type">StringBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><span class="hljs-type">Object</span> <span class="hljs-variable">timestamp</span> <span class="hljs-operator">=</span> model.get(<span class="hljs-string">&quot;timestamp&quot;</span>);<br><span class="hljs-type">Object</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> model.get(<span class="hljs-string">&quot;message&quot;</span>);<br><span class="hljs-type">Object</span> <span class="hljs-variable">trace</span> <span class="hljs-operator">=</span> model.get(<span class="hljs-string">&quot;trace&quot;</span>);<br><span class="hljs-keyword">if</span> (response.getContentType() == <span class="hljs-literal">null</span>) &#123;<br>response.setContentType(getContentType());<br>&#125;<br>            <span class="hljs-comment">//系统默认异常页面html代码</span><br>builder.append(<span class="hljs-string">&quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Whitelabel Error Page&lt;/h1&gt;&quot;</span>).append(<br><span class="hljs-string">&quot;&lt;p&gt;This application has no explicit mapping for /error, so you are seeing this as a fallback.&lt;/p&gt;&quot;</span>)<br>.append(<span class="hljs-string">&quot;&lt;div id=&#x27;created&#x27;&gt;&quot;</span>).append(timestamp).append(<span class="hljs-string">&quot;&lt;/div&gt;&quot;</span>)<br>.append(<span class="hljs-string">&quot;&lt;div&gt;There was an unexpected error (type=&quot;</span>).append(htmlEscape(model.get(<span class="hljs-string">&quot;error&quot;</span>)))<br>.append(<span class="hljs-string">&quot;, status=&quot;</span>).append(htmlEscape(model.get(<span class="hljs-string">&quot;status&quot;</span>))).append(<span class="hljs-string">&quot;).&lt;/div&gt;&quot;</span>);<br><span class="hljs-keyword">if</span> (message != <span class="hljs-literal">null</span>) &#123;<br>builder.append(<span class="hljs-string">&quot;&lt;div&gt;&quot;</span>).append(htmlEscape(message)).append(<span class="hljs-string">&quot;&lt;/div&gt;&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (trace != <span class="hljs-literal">null</span>) &#123;<br>builder.append(<span class="hljs-string">&quot;&lt;div style=&#x27;white-space:pre-wrap;&#x27;&gt;&quot;</span>).append(htmlEscape(trace)).append(<span class="hljs-string">&quot;&lt;/div&gt;&quot;</span>);<br>&#125;<br>builder.append(<span class="hljs-string">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);<br>response.getWriter().append(builder.toString());<br>&#125;<br><br><span class="hljs-keyword">private</span> String <span class="hljs-title function_">htmlEscape</span><span class="hljs-params">(Object input)</span> &#123;<br><span class="hljs-keyword">return</span> (input != <span class="hljs-literal">null</span>) ? HtmlUtils.htmlEscape(input.toString()) : <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-keyword">private</span> String <span class="hljs-title function_">getMessage</span><span class="hljs-params">(Map&lt;String, ?&gt; model)</span> &#123;<br><span class="hljs-type">Object</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> model.get(<span class="hljs-string">&quot;path&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Cannot render error page for request [&quot;</span> + path + <span class="hljs-string">&quot;]&quot;</span>;<br><span class="hljs-keyword">if</span> (model.get(<span class="hljs-string">&quot;message&quot;</span>) != <span class="hljs-literal">null</span>) &#123;<br>message += <span class="hljs-string">&quot; and exception [&quot;</span> + model.get(<span class="hljs-string">&quot;message&quot;</span>) + <span class="hljs-string">&quot;]&quot;</span>;<br>&#125;<br>message += <span class="hljs-string">&quot; as the response has already been committed.&quot;</span>;<br>message += <span class="hljs-string">&quot; As a result, the response may have the wrong status code.&quot;</span>;<br><span class="hljs-keyword">return</span> message;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getContentType</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;text/html&quot;</span>;<br>&#125;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="几种异常处理原理"><a href="#几种异常处理原理" class="headerlink" title="几种异常处理原理"></a>几种异常处理原理</h2><ul><li>自定义错误页<ul><li>error&#x2F;404.html error&#x2F;5xx.html；有精确的错误状态码页面就匹配精确，没有就找 4xx.html；如果都没有就触发白页</li></ul></li><li><code>@ControllerAdvice</code>+<code>@ExceptionHandler</code>处理全局异常；底层是 <code>ExceptionHandlerExceptionResolver</code> 支持的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@ControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalExceptionHandler</span> &#123;<br><br>    <span class="hljs-meta">@ExceptionHandler(&#123;ArithmeticException.class,NullPointerException.class&#125;)</span>  <span class="hljs-comment">//处理异常</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">handleArithException</span><span class="hljs-params">(Exception e)</span>&#123;<br><br>        log.error(<span class="hljs-string">&quot;异常是：&#123;&#125;&quot;</span>,e);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>; <span class="hljs-comment">//视图地址</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>@ResponseStatus</code>+自定义异常 ；底层是 <code>ResponseStatusExceptionResolver</code> ，把responseStatus注解的信息底层调用 <code>response.sendError(statusCode, resolvedReason)</code>，tomcat发送的<code>/error</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ResponseStatus(value= HttpStatus.FORBIDDEN,reason = &quot;用户数量太多&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserTooManyException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RuntimeException</span> &#123;<br><br>    <span class="hljs-keyword">public</span>  <span class="hljs-title function_">UserTooManyException</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br>    <span class="hljs-keyword">public</span>  <span class="hljs-title function_">UserTooManyException</span><span class="hljs-params">(String message)</span>&#123;<br>        <span class="hljs-built_in">super</span>(message);<br>    &#125;<br>&#125;<br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TableController</span> &#123;<br>    <br><span class="hljs-meta">@GetMapping(&quot;/dynamic_table&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">dynamic_table</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value=&quot;pn&quot;,defaultValue = &quot;1&quot;)</span> Integer pn,Model model)</span>&#123;<br>        <span class="hljs-comment">//表格内容的遍历</span><br>     List&lt;User&gt; users = Arrays.asList(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;zhangsan&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;lisi&quot;</span>, <span class="hljs-string">&quot;123444&quot;</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;haha&quot;</span>, <span class="hljs-string">&quot;aaaaa&quot;</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;hehe &quot;</span>, <span class="hljs-string">&quot;aaddd&quot;</span>));<br>        model.addAttribute(<span class="hljs-string">&quot;users&quot;</span>,users);<br><br>        <span class="hljs-keyword">if</span>(users.size()&gt;<span class="hljs-number">3</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserTooManyException</span>();<span class="hljs-comment">//抛出自定义异常</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;table/dynamic_table&quot;</span>;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Spring自家异常如 <code>org.springframework.web.bind.MissingServletRequestParameterException</code>，<code>DefaultHandlerExceptionResolver</code> 处理Spring自家异常。</li><li><ul><li><code>response.sendError(HttpServletResponse.SC_BAD_REQUEST/*400*/, ex.getMessage());</code></li></ul></li><li>自定义实现 <code>HandlerExceptionResolver</code> 处理异常；可以作为默认的全局异常处理规则</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Order(value= Ordered.HIGHEST_PRECEDENCE)</span>  <span class="hljs-comment">//优先级，数字越小优先级越高</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomerHandlerExceptionResolver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerExceptionResolver</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">resolveException</span><span class="hljs-params">(HttpServletRequest request,</span><br><span class="hljs-params">                                         HttpServletResponse response,</span><br><span class="hljs-params">                                         Object handler, Exception ex)</span> &#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            response.sendError(<span class="hljs-number">511</span>,<span class="hljs-string">&quot;我喜欢的错误&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>&#96;&#96;&#96;<br>ErrorViewResolver<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><br>   <br><br>  实现自定义处理异常<br><br>  - `response.sendError()`，error请求就会转给controller。<br>  - 你的异常没有任何人能处理，tomcat底层调用`response.sendError()`，error请求就会转给controller。<br>  - `basicErrorController` 要去的页面地址是 `ErrorViewResolver` 。<br><br>```java<br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;$&#123;server.error.path:$&#123;error.path:/error&#125;&#125;&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BasicErrorController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractErrorController</span> &#123;<br><br>    ...<br>    <br><span class="hljs-meta">@RequestMapping(produces = MediaType.TEXT_HTML_VALUE)</span><br><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">errorHtml</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;<br><span class="hljs-type">HttpStatus</span> <span class="hljs-variable">status</span> <span class="hljs-operator">=</span> getStatus(request);<br>Map&lt;String, Object&gt; model = Collections<br>.unmodifiableMap(getErrorAttributes(request, getErrorAttributeOptions(request, MediaType.TEXT_HTML)));<br>response.setStatus(status.value());<br><span class="hljs-type">ModelAndView</span> <span class="hljs-variable">modelAndView</span> <span class="hljs-operator">=</span> resolveErrorView(request, response, status, model);<br><span class="hljs-keyword">return</span> (modelAndView != <span class="hljs-literal">null</span>) ? modelAndView : <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>(<span class="hljs-string">&quot;error&quot;</span>, model);<br>&#125;<br>    <br>    <span class="hljs-keyword">protected</span> ModelAndView <span class="hljs-title function_">resolveErrorView</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, HttpStatus status,</span><br><span class="hljs-params">Map&lt;String, Object&gt; model)</span> &#123;<br>        <span class="hljs-comment">//这里用到ErrorViewResolver接口</span><br><span class="hljs-keyword">for</span> (ErrorViewResolver resolver : <span class="hljs-built_in">this</span>.errorViewResolvers) &#123;<br><span class="hljs-type">ModelAndView</span> <span class="hljs-variable">modelAndView</span> <span class="hljs-operator">=</span> resolver.resolveErrorView(request, status, model);<br><span class="hljs-keyword">if</span> (modelAndView != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">return</span> modelAndView;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br>    <br>    ...<br>    <br>&#125;<br><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ErrorViewResolver</span> &#123;<br><br>ModelAndView <span class="hljs-title function_">resolveErrorView</span><span class="hljs-params">(HttpServletRequest request, HttpStatus status, Map&lt;String, Object&gt; model)</span>;<br><br>&#125;<br><span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="原生注解与Spring方式注入"><a href="#原生注解与Spring方式注入" class="headerlink" title="原生注解与Spring方式注入"></a>原生注解与Spring方式注入</h2><p><a href="https://docs.spring.io/spring-boot/docs/2.4.2/reference/htmlsingle/#howto-add-a-servlet-filter-or-listener">官方文档 - Servlets, Filters, and listeners</a></p><h3 id="使用原生的注解"><a href="#使用原生的注解" class="headerlink" title="使用原生的注解"></a>使用原生的注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(urlPatterns = &quot;/my&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        resp.getWriter().write(<span class="hljs-string">&quot;66666&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@WebFilter(urlPatterns=&#123;&quot;/css/*&quot;,&quot;/images/*&quot;&#125;)</span> <span class="hljs-comment">//my</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        log.info(<span class="hljs-string">&quot;MyFilter初始化完成&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        log.info(<span class="hljs-string">&quot;MyFilter工作&quot;</span>);<br>        chain.doFilter(request,response);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>        log.info(<span class="hljs-string">&quot;MyFilter销毁&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@WebListener</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyServletContextListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ServletContextListener</span> &#123;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextInitialized</span><span class="hljs-params">(ServletContextEvent sce)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;MySwervletContextListener监听到项目初始化完成&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextDestroyed</span><span class="hljs-params">(ServletContextEvent sce)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;MySwervletContextListener监听到项目销毁&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后还要在主启动类添加注解<code>@ServletComponentScan</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ServletComponentScan(basePackages = &quot;com.lun&quot;)</span><span class="hljs-comment">//</span><br><span class="hljs-meta">@SpringBootApplication(exclude = RedisAutoConfiguration.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Boot05WebAdminApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(Boot05WebAdminApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Spring方式注入"><a href="#Spring方式注入" class="headerlink" title="Spring方式注入"></a>Spring方式注入</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-title class_">ServletRegistrationBean</span><span class="hljs-string">`, `</span><span class="hljs-title class_">FilterRegistrationBean</span><span class="hljs-string">`, and `</span><span class="hljs-title class_">ServletListenerRegistrationBean</span><br><span class="hljs-meta">@Configuration</span>(proxyBeanMethods = <span class="hljs-literal">true</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRegistConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">ServletRegistrationBean</span> <span class="hljs-title function_">myServlet</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title class_">MyServlet</span> myServlet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyServlet</span>();<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletRegistrationBean</span>(myServlet,<span class="hljs-string">&quot;/my&quot;</span>,<span class="hljs-string">&quot;/my02&quot;</span>);<br>    &#125;<br><br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">FilterRegistrationBean</span> <span class="hljs-title function_">myFilter</span>(<span class="hljs-params"></span>)&#123;<br><br>        <span class="hljs-title class_">MyFilter</span> myFilter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyFilter</span>();<br><span class="hljs-comment">//        return new FilterRegistrationBean(myFilter,myServlet());</span><br>        <span class="hljs-title class_">FilterRegistrationBean</span> filterRegistrationBean = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterRegistrationBean</span>(myFilter);<br>        filterRegistrationBean.<span class="hljs-title function_">setUrlPatterns</span>(<span class="hljs-title class_">Arrays</span>.<span class="hljs-title function_">asList</span>(<span class="hljs-string">&quot;/my&quot;</span>,<span class="hljs-string">&quot;/css/*&quot;</span>));<br>        <span class="hljs-keyword">return</span> filterRegistrationBean;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">ServletListenerRegistrationBean</span> <span class="hljs-title function_">myListener</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title class_">MySwervletContextListener</span> mySwervletContextListener = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MySwervletContextListener</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletListenerRegistrationBean</span>(mySwervletContextListener);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="DispatcherServlet注入原理"><a href="#DispatcherServlet注入原理" class="headerlink" title="DispatcherServlet注入原理"></a>DispatcherServlet注入原理</h2><p><code>org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration</code>配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)</span><br><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span><br><span class="hljs-meta">@ConditionalOnClass(DispatcherServlet.class)</span><br><span class="hljs-meta">@AutoConfigureAfter(ServletWebServerFactoryAutoConfiguration.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DispatcherServletAutoConfiguration</span> &#123;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * The bean name for a DispatcherServlet that will be mapped to the root URL &quot;/&quot;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_DISPATCHER_SERVLET_BEAN_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;dispatcherServlet&quot;</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * The bean name for a ServletRegistrationBean for the DispatcherServlet &quot;/&quot;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;dispatcherServletRegistration&quot;</span>;<br><br><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@Conditional(DefaultDispatcherServletCondition.class)</span><br><span class="hljs-meta">@ConditionalOnClass(ServletRegistration.class)</span><br><span class="hljs-meta">@EnableConfigurationProperties(WebMvcProperties.class)</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DispatcherServletConfiguration</span> &#123;<br><br>        <span class="hljs-comment">//创建DispatcherServlet类的Bean</span><br><span class="hljs-meta">@Bean(name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)</span><br><span class="hljs-keyword">public</span> DispatcherServlet <span class="hljs-title function_">dispatcherServlet</span><span class="hljs-params">(WebMvcProperties webMvcProperties)</span> &#123;<br><span class="hljs-type">DispatcherServlet</span> <span class="hljs-variable">dispatcherServlet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DispatcherServlet</span>();<br>dispatcherServlet.setDispatchOptionsRequest(webMvcProperties.isDispatchOptionsRequest());<br>dispatcherServlet.setDispatchTraceRequest(webMvcProperties.isDispatchTraceRequest());<br>dispatcherServlet.setThrowExceptionIfNoHandlerFound(webMvcProperties.isThrowExceptionIfNoHandlerFound());<br>dispatcherServlet.setPublishEvents(webMvcProperties.isPublishRequestHandledEvents());<br>dispatcherServlet.setEnableLoggingRequestDetails(webMvcProperties.isLogRequestDetails());<br><span class="hljs-keyword">return</span> dispatcherServlet;<br>&#125;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionalOnBean(MultipartResolver.class)</span><br><span class="hljs-meta">@ConditionalOnMissingBean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME)</span><br><span class="hljs-keyword">public</span> MultipartResolver <span class="hljs-title function_">multipartResolver</span><span class="hljs-params">(MultipartResolver resolver)</span> &#123;<br><span class="hljs-comment">// Detect if the user has created a MultipartResolver but named it incorrectly</span><br><span class="hljs-keyword">return</span> resolver;<br>&#125;<br><br>&#125;<br>    <br>    <span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@Conditional(DispatcherServletRegistrationCondition.class)</span><br><span class="hljs-meta">@ConditionalOnClass(ServletRegistration.class)</span><br><span class="hljs-meta">@EnableConfigurationProperties(WebMvcProperties.class)</span><br><span class="hljs-meta">@Import(DispatcherServletConfiguration.class)</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DispatcherServletRegistrationConfiguration</span> &#123;<br><br>        <span class="hljs-comment">//注册DispatcherServlet类</span><br><span class="hljs-meta">@Bean(name = DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME)</span><br><span class="hljs-meta">@ConditionalOnBean(value = DispatcherServlet.class, name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)</span><br><span class="hljs-keyword">public</span> DispatcherServletRegistrationBean <span class="hljs-title function_">dispatcherServletRegistration</span><span class="hljs-params">(DispatcherServlet dispatcherServlet,</span><br><span class="hljs-params">WebMvcProperties webMvcProperties, ObjectProvider&lt;MultipartConfigElement&gt; multipartConfig)</span> &#123;<br><span class="hljs-type">DispatcherServletRegistrationBean</span> <span class="hljs-variable">registration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DispatcherServletRegistrationBean</span>(dispatcherServlet,<br>webMvcProperties.getServlet().getPath());<br>registration.setName(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);<br>registration.setLoadOnStartup(webMvcProperties.getServlet().getLoadOnStartup());<br>multipartConfig.ifAvailable(registration::setMultipartConfig);<br><span class="hljs-keyword">return</span> registration;<br>&#125;<br><br>&#125;<br>    <br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p><code>DispatcherServlet</code>默认映射的是 <code>/</code> 路径，可以通过在配置文件修改<code>spring.mvc.servlet.path=/mvc</code>。</p><h2 id="切换web服务器与定制化"><a href="#切换web服务器与定制化" class="headerlink" title="切换web服务器与定制化"></a>切换web服务器与定制化</h2><ul><li><p>默认支持的WebServer</p><ul><li><code>Tomcat</code>, <code>Jetty</code>, or <code>Undertow</code>。</li><li><code>ServletWebServerApplicationContext</code>容器启动寻找<code>ServletWebServerFactory</code> 并引导创建服务器。</li></ul></li><li><p>原理</p><ul><li><p>SpringBoot应用启动发现当前是Web应用，web场景包-导入tomcat。</p></li><li><p>web应用会创建一个web版的IOC容器 <code>ServletWebServerApplicationContext</code> 。</p></li><li><p><code>ServletWebServerApplicationContext</code> 启动的时候寻找 <code>ServletWebServerFactory</code> （Servlet 的web服务器工厂——&gt;Servlet 的web服务器）。</p></li><li><p>SpringBoot底层默认有很多的WebServer工厂（</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ServletWebServerFactoryConfiguration</span><br></code></pre></td></tr></table></figure><p>内创建Bean），如：</p><ul><li><code>TomcatServletWebServerFactory</code></li><li><code>JettyServletWebServerFactory</code></li><li><code>UndertowServletWebServerFactory</code></li></ul></li><li><p>底层直接会有一个自动配置类<code>ServletWebServerFactoryAutoConfiguration</code>。</p></li><li><p><code>ServletWebServerFactoryAutoConfiguration</code>导入了<code>ServletWebServerFactoryConfiguration</code>（配置类）。</p></li><li><p><code>ServletWebServerFactoryConfiguration</code>根据动态判断系统中到底导入了那个Web服务器的包。（默认是web-starter导入tomcat包），容器中就有 <code>TomcatServletWebServerFactory</code></p></li><li><p><code>TomcatServletWebServerFactory</code>创建出Tomcat服务器并启动；<code>TomcatWebServer</code> 的构造器拥有初始化方法initialize——<code>this.tomcat.start();</code></p></li><li><p>内嵌服务器，与以前手动把启动服务器相比，改成现在使用代码启动（tomcat核心jar包存在）。</p></li></ul></li></ul><p>Spring Boot默认使用Tomcat服务器，若需更改其他服务器，则修改工程pom.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a href="https://docs.spring.io/spring-boot/docs/2.4.2/reference/htmlsingle/#howto-use-another-web-server">官方文档 - Use Another Web Server</a></p><h3 id="定制Servlet容器"><a href="#定制Servlet容器" class="headerlink" title="定制Servlet容器"></a>定制Servlet容器</h3><ul><li>实现<code>WebServerFactoryCustomizer&lt;ConfigurableServletWebServerFactory&gt;</code></li><li><ul><li>把配置文件的值和<code>ServletWebServerFactory</code>进行绑定</li></ul></li><li>修改配置文件 <code>server.xxx</code></li><li>直接自定义 <code>ConfigurableServletWebServerFactory</code></li></ul><p><code>xxxxxCustomizer</code>：定制化器，可以改变xxxx的默认规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.boot.web.server.WebServerFactoryCustomizer;<br><span class="hljs-keyword">import</span> org.springframework.boot.web.servlet.server.ConfigurableServletWebServerFactory;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomizationBean</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebServerFactoryCustomizer</span>&lt;ConfigurableServletWebServerFactory&gt; &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">customize</span><span class="hljs-params">(ConfigurableServletWebServerFactory server)</span> &#123;<br>        server.setPort(<span class="hljs-number">9000</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="SpringBoot定制化组件的几种方式（小结）"><a href="#SpringBoot定制化组件的几种方式（小结）" class="headerlink" title="SpringBoot定制化组件的几种方式（小结）"></a>SpringBoot定制化组件的几种方式（小结）</h2><h3 id="定制化的常见方式"><a href="#定制化的常见方式" class="headerlink" title="定制化的常见方式"></a>定制化的常见方式</h3><ul><li>修改配置文件</li><li><code>xxxxxCustomizer</code></li><li>编写自定义的配置类 <code>xxxConfiguration</code> + <code>@Bean</code>替换、增加容器中默认组件，视图解析器</li><li>Web应用 编写一个配置类实现 <code>WebMvcConfigurer</code> 即可定制化web功能 + <code>@Bean</code>给容器中再扩展一些组件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AdminWebConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>&#96;&#96;&#96;<br>@EnableWebMvc<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br><span class="hljs-bullet">+</span><br><br></code></pre></td></tr></table></figure>WebMvcConfigurer<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs"><br>—<br><br></code></pre></td></tr></table></figure>@Bean<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>可以全面接管SpringMVC，所有规则全部自己重新配置； 实现定制和扩展功能（<br><br>高级功能，初学者退避三舍<br><br>）。<br><br>- 原理：<br><br>  <span class="hljs-number">1</span>. `WebMvcAutoConfiguration`默认的SpringMVC的自动配置功能类，如静态资源、欢迎页等。<br><br>  <span class="hljs-number">2</span>. 一旦使用 `@EnableWebMvc` ，会`@Import(DelegatingWebMvcConfiguration.class)`。<br><br>  <span class="hljs-number">3</span>. ```<br>     DelegatingWebMvcConfiguration<br></code></pre></td></tr></table></figure><pre><code class="hljs"> 的作用，只保证SpringMVC最基本的使用 - 把所有系统中的`WebMvcConfigurer`拿过来，所有功能的定制都是这些`WebMvcConfigurer`合起来一起生效。 - 自动配置了一些非常底层的组件，如`RequestMappingHandlerMapping`，这些组件依赖的组件都是从容器中获取如。 - `public class DelegatingWebMvcConfiguration extends WebMvcConfigurationSupport`。</code></pre><ol start="4"><li><p><code>WebMvcAutoConfiguration</code>里面的配置要能生效必须 <code>@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</code>。</p></li><li><p>@EnableWebMvc 导致了WebMvcAutoConfiguration 没有生效。</p></li></ol></li></ul><h3 id="原理分析套路"><a href="#原理分析套路" class="headerlink" title="原理分析套路"></a>原理分析套路</h3><p>场景starter - <code>xxxxAutoConfiguration</code> - 导入xxx组件 - 绑定<code>xxxProperties</code> - 绑定配置文件项。</p>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot学习笔记(3)</title>
    <link href="/2022/07/06/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(3)/"/>
    <url>/2022/07/06/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(3)/</url>
    
    <content type="html"><![CDATA[<h2 id="常用参数注解使用"><a href="#常用参数注解使用" class="headerlink" title="常用参数注解使用"></a>常用参数注解使用</h2><p>注解：</p><ul><li><code>@PathVariable</code> 路径变量</li><li><code>@RequestHeader</code> 获取请求头</li><li><code>@RequestParam</code> 获取请求参数（指问号后的参数，url?a&#x3D;1&amp;b&#x3D;2）</li><li><code>@CookieValue</code> 获取Cookie值</li><li><code>@RequestAttribute</code> 获取request域属性</li><li><code>@RequestBody</code> 获取请求体[POST]</li><li><code>@MatrixVariable</code> 矩阵变量</li><li><code>@ModelAttribute</code></li></ul><p>使用用例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ParameterTestController</span> &#123;<br><br><br>    <span class="hljs-comment">//  car/2/owner/zhangsan</span><br>    <span class="hljs-meta">@GetMapping(&quot;/car/&#123;id&#125;/owner/&#123;username&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Map&lt;String,Object&gt; <span class="hljs-title function_">getCar</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id,</span><br><span class="hljs-params">                                     <span class="hljs-meta">@PathVariable(&quot;username&quot;)</span> String name,</span><br><span class="hljs-params">                                     <span class="hljs-meta">@PathVariable</span> Map&lt;String,String&gt; pv,</span><br><span class="hljs-params">                                     <span class="hljs-meta">@RequestHeader(&quot;User-Agent&quot;)</span> String userAgent,</span><br><span class="hljs-params">                                     <span class="hljs-meta">@RequestHeader</span> Map&lt;String,String&gt; header,</span><br><span class="hljs-params">                                     <span class="hljs-meta">@RequestParam(&quot;age&quot;)</span> Integer age,</span><br><span class="hljs-params">                                     <span class="hljs-meta">@RequestParam(&quot;inters&quot;)</span> List&lt;String&gt; inters,</span><br><span class="hljs-params">                                     <span class="hljs-meta">@RequestParam</span> Map&lt;String,String&gt; params,</span><br><span class="hljs-params">                                     <span class="hljs-meta">@CookieValue(&quot;_ga&quot;)</span> String _ga,</span><br><span class="hljs-params">                                     <span class="hljs-meta">@CookieValue(&quot;_ga&quot;)</span> Cookie cookie)</span>&#123;<br><br>        Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br><span class="hljs-comment">//        map.put(&quot;id&quot;,id);</span><br><span class="hljs-comment">//        map.put(&quot;name&quot;,name);</span><br><span class="hljs-comment">//        map.put(&quot;pv&quot;,pv);</span><br><span class="hljs-comment">//        map.put(&quot;userAgent&quot;,userAgent);</span><br><span class="hljs-comment">//        map.put(&quot;headers&quot;,header);</span><br>        map.put(<span class="hljs-string">&quot;age&quot;</span>,age);<br>        map.put(<span class="hljs-string">&quot;inters&quot;</span>,inters);<br>        map.put(<span class="hljs-string">&quot;params&quot;</span>,params);<br>        map.put(<span class="hljs-string">&quot;_ga&quot;</span>,_ga);<br>        System.out.println(cookie.getName()+<span class="hljs-string">&quot;===&gt;&quot;</span>+cookie.getValue());<br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/save&quot;)</span><br>    <span class="hljs-keyword">public</span> Map <span class="hljs-title function_">postMethod</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> String content)</span>&#123;<br>        Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;content&quot;</span>,content);<br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="RequestAttribute"><a href="#RequestAttribute" class="headerlink" title="@RequestAttribute"></a>@RequestAttribute</h2><p>用例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/goto&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">goToPage</span><span class="hljs-params">(HttpServletRequest request)</span>&#123;<br><br>        request.setAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;成功了...&quot;</span>);<br>        request.setAttribute(<span class="hljs-string">&quot;code&quot;</span>,<span class="hljs-number">200</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;forward:/success&quot;</span>;  <span class="hljs-comment">//转发到  /success请求</span><br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/params&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testParam</span><span class="hljs-params">(Map&lt;String,Object&gt; map,</span><br><span class="hljs-params">                            Model model,</span><br><span class="hljs-params">                            HttpServletRequest request,</span><br><span class="hljs-params">                            HttpServletResponse response)</span>&#123;<br>        map.put(<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-string">&quot;world666&quot;</span>);<br>        model.addAttribute(<span class="hljs-string">&quot;world&quot;</span>,<span class="hljs-string">&quot;hello666&quot;</span>);<br>        request.setAttribute(<span class="hljs-string">&quot;message&quot;</span>,<span class="hljs-string">&quot;HelloWorld&quot;</span>);<br><br>        <span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;c1&quot;</span>,<span class="hljs-string">&quot;v1&quot;</span>);<br>        response.addCookie(cookie);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;forward:/success&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">///&lt;-----------------主角@RequestAttribute在这个方法</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@GetMapping(&quot;/success&quot;)</span><br>    <span class="hljs-keyword">public</span> Map <span class="hljs-title function_">success</span><span class="hljs-params">(<span class="hljs-meta">@RequestAttribute(value = &quot;msg&quot;,required = false)</span> String msg,</span><br><span class="hljs-params">                       <span class="hljs-meta">@RequestAttribute(value = &quot;code&quot;,required = false)</span>Integer code,</span><br><span class="hljs-params">                       HttpServletRequest request)</span>&#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">msg1</span> <span class="hljs-operator">=</span> request.getAttribute(<span class="hljs-string">&quot;msg&quot;</span>);<br><br>        Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">hello</span> <span class="hljs-operator">=</span> request.getAttribute(<span class="hljs-string">&quot;hello&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">world</span> <span class="hljs-operator">=</span> request.getAttribute(<span class="hljs-string">&quot;world&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> request.getAttribute(<span class="hljs-string">&quot;message&quot;</span>);<br><br>        map.put(<span class="hljs-string">&quot;reqMethod_msg&quot;</span>,msg1);<br>        map.put(<span class="hljs-string">&quot;annotation_msg&quot;</span>,msg);<br>        map.put(<span class="hljs-string">&quot;hello&quot;</span>,hello);<br>        map.put(<span class="hljs-string">&quot;world&quot;</span>,world);<br>        map.put(<span class="hljs-string">&quot;message&quot;</span>,message);<br><br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="MatrixVariable与UrlPathHelper"><a href="#MatrixVariable与UrlPathHelper" class="headerlink" title="@MatrixVariable与UrlPathHelper"></a>@MatrixVariable与UrlPathHelper</h2><ol><li>语法： 请求路径：<code>/cars/sell;low=34;brand=byd,audi,yd</code></li><li>SpringBoot默认是禁用了矩阵变量的功能<ul><li>手动开启：原理。对于路径的处理。UrlPathHelper的removeSemicolonContent设置为false，让其支持矩阵变量的。</li></ul></li><li>矩阵变量<strong>必须</strong>有url路径变量才能被解析</li></ol><p><strong>手动开启矩阵变量</strong>：</p><ul><li>实现<code>WebMvcConfigurer</code>接口：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configurePathMatch</span><span class="hljs-params">(PathMatchConfigurer configurer)</span> &#123;<br><br>        <span class="hljs-type">UrlPathHelper</span> <span class="hljs-variable">urlPathHelper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UrlPathHelper</span>();<br>        <span class="hljs-comment">// 不移除；后面的内容。矩阵变量功能就可以生效</span><br>        urlPathHelper.setRemoveSemicolonContent(<span class="hljs-literal">false</span>);<br>        configurer.setUrlPathHelper(urlPathHelper);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>创建返回<code>WebMvcConfigurer</code>Bean：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebConfig</span>&#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> WebMvcConfigurer <span class="hljs-title function_">webMvcConfigurer</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebMvcConfigurer</span>() &#123;<br>                        <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configurePathMatch</span><span class="hljs-params">(PathMatchConfigurer configurer)</span> &#123;<br>                <span class="hljs-type">UrlPathHelper</span> <span class="hljs-variable">urlPathHelper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UrlPathHelper</span>();<br>                <span class="hljs-comment">// 不移除；后面的内容。矩阵变量功能就可以生效</span><br>                urlPathHelper.setRemoveSemicolonContent(<span class="hljs-literal">false</span>);<br>                configurer.setUrlPathHelper(urlPathHelper);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong><code>@MatrixVariable</code>的用例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ParameterTestController</span> &#123;<br><br>    <span class="hljs-comment">///cars/sell;low=34;brand=byd,audi,yd</span><br>    <span class="hljs-meta">@GetMapping(&quot;/cars/&#123;path&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Map <span class="hljs-title function_">carsSell</span><span class="hljs-params">(<span class="hljs-meta">@MatrixVariable(&quot;low&quot;)</span> Integer low,</span><br><span class="hljs-params">                        <span class="hljs-meta">@MatrixVariable(&quot;brand&quot;)</span> List&lt;String&gt; brand,</span><br><span class="hljs-params">                        <span class="hljs-meta">@PathVariable(&quot;path&quot;)</span> String path)</span>&#123;<br>        Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>        map.put(<span class="hljs-string">&quot;low&quot;</span>,low);<br>        map.put(<span class="hljs-string">&quot;brand&quot;</span>,brand);<br>        map.put(<span class="hljs-string">&quot;path&quot;</span>,path);<br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br><br>    <span class="hljs-comment">// /boss/1;age=20/2;age=10</span><br><br>    <span class="hljs-meta">@GetMapping(&quot;/boss/&#123;bossId&#125;/&#123;empId&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Map <span class="hljs-title function_">boss</span><span class="hljs-params">(<span class="hljs-meta">@MatrixVariable(value = &quot;age&quot;,pathVar = &quot;bossId&quot;)</span> Integer bossAge,</span><br><span class="hljs-params">                    <span class="hljs-meta">@MatrixVariable(value = &quot;age&quot;,pathVar = &quot;empId&quot;)</span> Integer empAge)</span>&#123;<br>        Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>        map.put(<span class="hljs-string">&quot;bossAge&quot;</span>,bossAge);<br>        map.put(<span class="hljs-string">&quot;empAge&quot;</span>,empAge);<br>        <span class="hljs-keyword">return</span> map;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="各种类型参数解析原理"><a href="#各种类型参数解析原理" class="headerlink" title="各种类型参数解析原理"></a>各种类型参数解析原理</h2><p>这要从<code>DispatcherServlet</code>开始说起：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DispatcherServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FrameworkServlet</span> &#123;<br>    <br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doDispatch</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">processedRequest</span> <span class="hljs-operator">=</span> request;<br>        <span class="hljs-type">HandlerExecutionChain</span> <span class="hljs-variable">mappedHandler</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">multipartRequestParsed</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-type">WebAsyncManager</span> <span class="hljs-variable">asyncManager</span> <span class="hljs-operator">=</span> WebAsyncUtils.getAsyncManager(request);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">mv</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-type">Exception</span> <span class="hljs-variable">dispatchException</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                processedRequest = checkMultipart(request);<br>                multipartRequestParsed = (processedRequest != request);<br><br>                <span class="hljs-comment">// Determine handler for the current request.</span><br>                mappedHandler = getHandler(processedRequest);<br>                <span class="hljs-keyword">if</span> (mappedHandler == <span class="hljs-literal">null</span>) &#123;<br>                    noHandlerFound(processedRequest, response);<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br><br>                <span class="hljs-comment">// Determine handler adapter for the current request.</span><br>                <span class="hljs-type">HandlerAdapter</span> <span class="hljs-variable">ha</span> <span class="hljs-operator">=</span> getHandlerAdapter(mappedHandler.getHandler());<br>                ...<br></code></pre></td></tr></table></figure><ul><li><code>HandlerMapping</code>中找到能处理请求的<code>Handler</code>（Controller.method()）。</li><li>为当前Handler 找一个适配器 <code>HandlerAdapter</code>，用的最多的是<strong>RequestMappingHandlerAdapter</strong>。</li><li>适配器执行目标方法并确定方法参数的每一个值。</li></ul><h3 id="HandlerAdapter"><a href="#HandlerAdapter" class="headerlink" title="HandlerAdapter"></a>HandlerAdapter</h3><p>默认会加载所有<code>HandlerAdapter</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DispatcherServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FrameworkServlet</span> &#123;<br><br>    <span class="hljs-comment">/** Detect all HandlerAdapters or just expect &quot;handlerAdapter&quot; bean?. */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">detectAllHandlerAdapters</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br>    ...<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initHandlerAdapters</span><span class="hljs-params">(ApplicationContext context)</span> &#123;<br>        <span class="hljs-built_in">this</span>.handlerAdapters = <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.detectAllHandlerAdapters) &#123;<br>            <span class="hljs-comment">// Find all HandlerAdapters in the ApplicationContext, including ancestor contexts.</span><br>            Map&lt;String, HandlerAdapter&gt; matchingBeans =<br>                BeanFactoryUtils.beansOfTypeIncludingAncestors(context, HandlerAdapter.class, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>);<br>            <span class="hljs-keyword">if</span> (!matchingBeans.isEmpty()) &#123;<br>                <span class="hljs-built_in">this</span>.handlerAdapters = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(matchingBeans.values());<br>                <span class="hljs-comment">// We keep HandlerAdapters in sorted order.</span><br>                AnnotationAwareOrderComparator.sort(<span class="hljs-built_in">this</span>.handlerAdapters);<br>            &#125;<br>        &#125;<br>     ...<br></code></pre></td></tr></table></figure><p>有这些<code>HandlerAdapter</code>：</p><p><img src="https://img-blog.csdnimg.cn/20210205010047654.png#pic_center" alt="在这里插入图片描述"></p><ol><li>支持方法上标注<code>@RequestMapping</code></li><li>支持函数式编程的</li><li>…</li><li>…</li></ol><h3 id="执行目标方法"><a href="#执行目标方法" class="headerlink" title="执行目标方法"></a>执行目标方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DispatcherServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FrameworkServlet</span> &#123;<br>    <br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doDispatch</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">mv</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <br>        ...<br><br>        <span class="hljs-comment">// Determine handler for the current request.</span><br>        mappedHandler = getHandler(processedRequest);<br>        <span class="hljs-keyword">if</span> (mappedHandler == <span class="hljs-literal">null</span>) &#123;<br>            noHandlerFound(processedRequest, response);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// Determine handler adapter for the current request.</span><br>        <span class="hljs-type">HandlerAdapter</span> <span class="hljs-variable">ha</span> <span class="hljs-operator">=</span> getHandlerAdapter(mappedHandler.getHandler());<br><br>        ...<br><span class="hljs-comment">//本节重点</span><br>        <span class="hljs-comment">// Actually invoke the handler.</span><br>        mv = ha.handle(processedRequest, response, mappedHandler.getHandler());<br></code></pre></td></tr></table></figure><p><code>HandlerAdapter</code>接口实现类<code>RequestMappingHandlerAdapter</code>（主要用来处理<code>@RequestMapping</code>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestMappingHandlerAdapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractHandlerMethodAdapter</span><br><span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanFactoryAware</span>, InitializingBean &#123;<br><br>    ...<br>    <br>    <span class="hljs-comment">//AbstractHandlerMethodAdapter类的方法，RequestMappingHandlerAdapter继承AbstractHandlerMethodAdapter</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> ModelAndView <span class="hljs-title function_">handle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span><br>        <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-keyword">return</span> handleInternal(request, response, (HandlerMethod) handler);<br>    &#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> ModelAndView <span class="hljs-title function_">handleInternal</span><span class="hljs-params">(HttpServletRequest request,</span><br><span class="hljs-params">HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    ModelAndView mav;<br>        <span class="hljs-comment">//handleInternal的核心</span><br>        mav = invokeHandlerMethod(request, response, handlerMethod);<span class="hljs-comment">//解释看下节</span><br><span class="hljs-comment">//...</span><br><span class="hljs-keyword">return</span> mav;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="参数解析器"><a href="#参数解析器" class="headerlink" title="参数解析器"></a>参数解析器</h3><p>确定将要执行的目标方法的每一个参数的值是什么;</p><p>SpringMVC目标方法能写多少种参数类型。取决于<strong>参数解析器argumentResolvers</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">protected</span> ModelAndView <span class="hljs-title function_">invokeHandlerMethod</span><span class="hljs-params">(HttpServletRequest request,</span><br><span class="hljs-params">                                           HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>    <span class="hljs-type">ServletWebRequest</span> <span class="hljs-variable">webRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletWebRequest</span>(request, response);<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">WebDataBinderFactory</span> <span class="hljs-variable">binderFactory</span> <span class="hljs-operator">=</span> getDataBinderFactory(handlerMethod);<br>        <span class="hljs-type">ModelFactory</span> <span class="hljs-variable">modelFactory</span> <span class="hljs-operator">=</span> getModelFactory(handlerMethod, binderFactory);<br><br>        <span class="hljs-type">ServletInvocableHandlerMethod</span> <span class="hljs-variable">invocableMethod</span> <span class="hljs-operator">=</span> createInvocableHandlerMethod(handlerMethod);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.argumentResolvers != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//&lt;-----关注点</span><br>            invocableMethod.setHandlerMethodArgumentResolvers(<span class="hljs-built_in">this</span>.argumentResolvers);<br>        &#125;<br>        <br>        ...<br></code></pre></td></tr></table></figure><p><code>this.argumentResolvers</code>在<code>afterPropertiesSet()</code>方法内初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestMappingHandlerAdapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractHandlerMethodAdapter</span><br><span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanFactoryAware</span>, InitializingBean &#123;<br><br>    <span class="hljs-meta">@Nullable</span><br>    <span class="hljs-keyword">private</span> HandlerMethodArgumentResolverComposite argumentResolvers;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterPropertiesSet</span><span class="hljs-params">()</span> &#123;<br>        ...<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.argumentResolvers == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//初始化argumentResolvers</span><br>        List&lt;HandlerMethodArgumentResolver&gt; resolvers = getDefaultArgumentResolvers();<br>            <span class="hljs-built_in">this</span>.argumentResolvers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HandlerMethodArgumentResolverComposite</span>().addResolvers(resolvers);<br>        &#125;<br>        ...<br>    &#125;<br><br>    <span class="hljs-comment">//初始化了一堆的实现HandlerMethodArgumentResolver接口的</span><br><span class="hljs-keyword">private</span> List&lt;HandlerMethodArgumentResolver&gt; <span class="hljs-title function_">getDefaultArgumentResolvers</span><span class="hljs-params">()</span> &#123;<br>List&lt;HandlerMethodArgumentResolver&gt; resolvers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(<span class="hljs-number">30</span>);<br><br><span class="hljs-comment">// Annotation-based argument resolution</span><br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestParamMethodArgumentResolver</span>(getBeanFactory(), <span class="hljs-literal">false</span>));<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestParamMapMethodArgumentResolver</span>());<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PathVariableMethodArgumentResolver</span>());<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PathVariableMapMethodArgumentResolver</span>());<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MatrixVariableMethodArgumentResolver</span>());<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MatrixVariableMapMethodArgumentResolver</span>());<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletModelAttributeMethodProcessor</span>(<span class="hljs-literal">false</span>));<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestResponseBodyMethodProcessor</span>(getMessageConverters(), <span class="hljs-built_in">this</span>.requestResponseBodyAdvice));<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestPartMethodArgumentResolver</span>(getMessageConverters(), <span class="hljs-built_in">this</span>.requestResponseBodyAdvice));<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestHeaderMethodArgumentResolver</span>(getBeanFactory()));<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestHeaderMapMethodArgumentResolver</span>());<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletCookieValueMethodArgumentResolver</span>(getBeanFactory()));<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ExpressionValueMethodArgumentResolver</span>(getBeanFactory()));<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SessionAttributeMethodArgumentResolver</span>());<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestAttributeMethodArgumentResolver</span>());<br><br><span class="hljs-comment">// Type-based argument resolution</span><br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletRequestMethodArgumentResolver</span>());<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletResponseMethodArgumentResolver</span>());<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpEntityMethodProcessor</span>(getMessageConverters(), <span class="hljs-built_in">this</span>.requestResponseBodyAdvice));<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RedirectAttributesMethodArgumentResolver</span>());<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelMethodProcessor</span>());<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MapMethodProcessor</span>());<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ErrorsMethodArgumentResolver</span>());<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SessionStatusMethodArgumentResolver</span>());<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">UriComponentsBuilderMethodArgumentResolver</span>());<br><span class="hljs-keyword">if</span> (KotlinDetector.isKotlinPresent()) &#123;<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ContinuationHandlerMethodArgumentResolver</span>());<br>&#125;<br><br><span class="hljs-comment">// Custom arguments</span><br><span class="hljs-keyword">if</span> (getCustomArgumentResolvers() != <span class="hljs-literal">null</span>) &#123;<br>resolvers.addAll(getCustomArgumentResolvers());<br>&#125;<br><br><span class="hljs-comment">// Catch-all</span><br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PrincipalMethodArgumentResolver</span>());<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestParamMethodArgumentResolver</span>(getBeanFactory(), <span class="hljs-literal">true</span>));<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletModelAttributeMethodProcessor</span>(<span class="hljs-literal">true</span>));<br><br><span class="hljs-keyword">return</span> resolvers;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>HandlerMethodArgumentResolverComposite</code>类如下：（众多<strong>参数解析器argumentResolvers</strong>的包装类）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HandlerMethodArgumentResolverComposite</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerMethodArgumentResolver</span> &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> List&lt;HandlerMethodArgumentResolver&gt; argumentResolvers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <br>    ...<br>    <br><span class="hljs-keyword">public</span> HandlerMethodArgumentResolverComposite <span class="hljs-title function_">addResolvers</span><span class="hljs-params">(</span><br><span class="hljs-params"><span class="hljs-meta">@Nullable</span> HandlerMethodArgumentResolver... resolvers)</span> &#123;<br><br><span class="hljs-keyword">if</span> (resolvers != <span class="hljs-literal">null</span>) &#123;<br>Collections.addAll(<span class="hljs-built_in">this</span>.argumentResolvers, resolvers);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>&#125;<br>    <br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>我们看看<code>HandlerMethodArgumentResolver</code>的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">HandlerMethodArgumentResolver</span> &#123;<br><br>    <span class="hljs-comment">//当前解析器是否支持解析这种参数</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">supportsParameter</span><span class="hljs-params">(MethodParameter parameter)</span>;<br><br><span class="hljs-meta">@Nullable</span><span class="hljs-comment">//如果支持，就调用 resolveArgument</span><br>Object <span class="hljs-title function_">resolveArgument</span><span class="hljs-params">(MethodParameter parameter, <span class="hljs-meta">@Nullable</span> ModelAndViewContainer mavContainer,</span><br><span class="hljs-params">NativeWebRequest webRequest, <span class="hljs-meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="hljs-keyword">throws</span> Exception;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="返回值处理器"><a href="#返回值处理器" class="headerlink" title="返回值处理器"></a>返回值处理器</h3><p><strong>ValueHandler</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">protected</span> ModelAndView <span class="hljs-title function_">invokeHandlerMethod</span><span class="hljs-params">(HttpServletRequest request,</span><br><span class="hljs-params">                                           HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>    <span class="hljs-type">ServletWebRequest</span> <span class="hljs-variable">webRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletWebRequest</span>(request, response);<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">WebDataBinderFactory</span> <span class="hljs-variable">binderFactory</span> <span class="hljs-operator">=</span> getDataBinderFactory(handlerMethod);<br>        <span class="hljs-type">ModelFactory</span> <span class="hljs-variable">modelFactory</span> <span class="hljs-operator">=</span> getModelFactory(handlerMethod, binderFactory);<br><br>        <span class="hljs-type">ServletInvocableHandlerMethod</span> <span class="hljs-variable">invocableMethod</span> <span class="hljs-operator">=</span> createInvocableHandlerMethod(handlerMethod);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.argumentResolvers != <span class="hljs-literal">null</span>) &#123;<br>            invocableMethod.setHandlerMethodArgumentResolvers(<span class="hljs-built_in">this</span>.argumentResolvers);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.returnValueHandlers != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//&lt;---关注点</span><br>            invocableMethod.setHandlerMethodReturnValueHandlers(<span class="hljs-built_in">this</span>.returnValueHandlers);<br>        &#125;<br>     ...<br></code></pre></td></tr></table></figure><p><code>this.returnValueHandlers</code>在<code>afterPropertiesSet()</code>方法内初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestMappingHandlerAdapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractHandlerMethodAdapter</span><br><span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanFactoryAware</span>, InitializingBean &#123;<br><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">private</span> HandlerMethodReturnValueHandlerComposite returnValueHandlers;<br>    <br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterPropertiesSet</span><span class="hljs-params">()</span> &#123;<br><br>        ...<br>        <br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.returnValueHandlers == <span class="hljs-literal">null</span>) &#123;<br>List&lt;HandlerMethodReturnValueHandler&gt; handlers = getDefaultReturnValueHandlers();<br><span class="hljs-built_in">this</span>.returnValueHandlers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HandlerMethodReturnValueHandlerComposite</span>().addHandlers(handlers);<br>&#125;<br>&#125;<br>    <br>    <span class="hljs-comment">//初始化了一堆的实现HandlerMethodReturnValueHandler接口的</span><br>    <span class="hljs-keyword">private</span> List&lt;HandlerMethodReturnValueHandler&gt; <span class="hljs-title function_">getDefaultReturnValueHandlers</span><span class="hljs-params">()</span> &#123;<br>List&lt;HandlerMethodReturnValueHandler&gt; handlers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(<span class="hljs-number">20</span>);<br><br><span class="hljs-comment">// Single-purpose return value types</span><br>handlers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndViewMethodReturnValueHandler</span>());<br>handlers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelMethodProcessor</span>());<br>handlers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ViewMethodReturnValueHandler</span>());<br>handlers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseBodyEmitterReturnValueHandler</span>(getMessageConverters(),<br><span class="hljs-built_in">this</span>.reactiveAdapterRegistry, <span class="hljs-built_in">this</span>.taskExecutor, <span class="hljs-built_in">this</span>.contentNegotiationManager));<br>handlers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StreamingResponseBodyReturnValueHandler</span>());<br>handlers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpEntityMethodProcessor</span>(getMessageConverters(),<br><span class="hljs-built_in">this</span>.contentNegotiationManager, <span class="hljs-built_in">this</span>.requestResponseBodyAdvice));<br>handlers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpHeadersReturnValueHandler</span>());<br>handlers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CallableMethodReturnValueHandler</span>());<br>handlers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DeferredResultMethodReturnValueHandler</span>());<br>handlers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AsyncTaskMethodReturnValueHandler</span>(<span class="hljs-built_in">this</span>.beanFactory));<br><br><span class="hljs-comment">// Annotation-based return value types</span><br>handlers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletModelAttributeMethodProcessor</span>(<span class="hljs-literal">false</span>));<br>handlers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestResponseBodyMethodProcessor</span>(getMessageConverters(),<br><span class="hljs-built_in">this</span>.contentNegotiationManager, <span class="hljs-built_in">this</span>.requestResponseBodyAdvice));<br><br><span class="hljs-comment">// Multi-purpose return value types</span><br>handlers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ViewNameMethodReturnValueHandler</span>());<br>handlers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MapMethodProcessor</span>());<br><br><span class="hljs-comment">// Custom return value types</span><br><span class="hljs-keyword">if</span> (getCustomReturnValueHandlers() != <span class="hljs-literal">null</span>) &#123;<br>handlers.addAll(getCustomReturnValueHandlers());<br>&#125;<br><br><span class="hljs-comment">// Catch-all</span><br><span class="hljs-keyword">if</span> (!CollectionUtils.isEmpty(getModelAndViewResolvers())) &#123;<br>handlers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndViewResolverMethodReturnValueHandler</span>(getModelAndViewResolvers()));<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>handlers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletModelAttributeMethodProcessor</span>(<span class="hljs-literal">true</span>));<br>&#125;<br><br><span class="hljs-keyword">return</span> handlers;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>HandlerMethodReturnValueHandlerComposite</code>类如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HandlerMethodReturnValueHandlerComposite</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerMethodReturnValueHandler</span> &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> List&lt;HandlerMethodReturnValueHandler&gt; returnValueHandlers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    ...<br>    <br><span class="hljs-keyword">public</span> HandlerMethodReturnValueHandlerComposite <span class="hljs-title function_">addHandlers</span><span class="hljs-params">(</span><br><span class="hljs-params"><span class="hljs-meta">@Nullable</span> List&lt;? extends HandlerMethodReturnValueHandler&gt; handlers)</span> &#123;<br><br><span class="hljs-keyword">if</span> (handlers != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-built_in">this</span>.returnValueHandlers.addAll(handlers);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>HandlerMethodReturnValueHandler</code>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">HandlerMethodReturnValueHandler</span> &#123;<br><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">supportsReturnType</span><span class="hljs-params">(MethodParameter returnType)</span>;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">handleReturnValue</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Object returnValue, MethodParameter returnType,</span><br><span class="hljs-params">ModelAndViewContainer mavContainer, NativeWebRequest webRequest)</span> <span class="hljs-keyword">throws</span> Exception;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="回顾执行目标方法"><a href="#回顾执行目标方法" class="headerlink" title="回顾执行目标方法"></a>回顾执行目标方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DispatcherServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FrameworkServlet</span> &#123;<br>    ...<br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doDispatch</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">mv</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>...<br>        mv = ha.handle(processedRequest, response, mappedHandler.getHandler());<br></code></pre></td></tr></table></figure><p><code>RequestMappingHandlerAdapter</code>的<code>handle()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestMappingHandlerAdapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractHandlerMethodAdapter</span><br><span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanFactoryAware</span>, InitializingBean &#123;<br><br>    ...<br>    <br>    <span class="hljs-comment">//AbstractHandlerMethodAdapter类的方法，RequestMappingHandlerAdapter继承AbstractHandlerMethodAdapter</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> ModelAndView <span class="hljs-title function_">handle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span><br>        <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-keyword">return</span> handleInternal(request, response, (HandlerMethod) handler);<br>    &#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> ModelAndView <span class="hljs-title function_">handleInternal</span><span class="hljs-params">(HttpServletRequest request,</span><br><span class="hljs-params">HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    ModelAndView mav;<br>        <span class="hljs-comment">//handleInternal的核心</span><br>        mav = invokeHandlerMethod(request, response, handlerMethod);<span class="hljs-comment">//解释看下节</span><br><span class="hljs-comment">//...</span><br><span class="hljs-keyword">return</span> mav;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>RequestMappingHandlerAdapter</code>的<code>invokeHandlerMethod()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestMappingHandlerAdapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractHandlerMethodAdapter</span><br><span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanFactoryAware</span>, InitializingBean &#123;<br>    <br><span class="hljs-keyword">protected</span> ModelAndView <span class="hljs-title function_">invokeHandlerMethod</span><span class="hljs-params">(HttpServletRequest request,</span><br><span class="hljs-params">HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br><span class="hljs-type">ServletWebRequest</span> <span class="hljs-variable">webRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletWebRequest</span>(request, response);<br><span class="hljs-keyword">try</span> &#123;<br>...<br>            <br>            <span class="hljs-type">ServletInvocableHandlerMethod</span> <span class="hljs-variable">invocableMethod</span> <span class="hljs-operator">=</span> createInvocableHandlerMethod(handlerMethod);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.argumentResolvers != <span class="hljs-literal">null</span>) &#123;<br>invocableMethod.setHandlerMethodArgumentResolvers(<span class="hljs-built_in">this</span>.argumentResolvers);<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.returnValueHandlers != <span class="hljs-literal">null</span>) &#123;<br>invocableMethod.setHandlerMethodReturnValueHandlers(<span class="hljs-built_in">this</span>.returnValueHandlers);<br>&#125;<br>...<br><br>            <span class="hljs-comment">//关注点：执行目标方法</span><br>invocableMethod.invokeAndHandle(webRequest, mavContainer);<br><span class="hljs-keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-keyword">return</span> getModelAndView(mavContainer, modelFactory, webRequest);<br>&#125;<br><span class="hljs-keyword">finally</span> &#123;<br>webRequest.requestCompleted();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>invokeAndHandle()</code>方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletInvocableHandlerMethod</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">InvocableHandlerMethod</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invokeAndHandle</span><span class="hljs-params">(ServletWebRequest webRequest, ModelAndViewContainer mavContainer,</span><br><span class="hljs-params">Object... providedArgs)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br><span class="hljs-type">Object</span> <span class="hljs-variable">returnValue</span> <span class="hljs-operator">=</span> invokeForRequest(webRequest, mavContainer, providedArgs);<br><br>        ...<br>        <br><span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//returnValue存储起来</span><br><span class="hljs-built_in">this</span>.returnValueHandlers.handleReturnValue(<br>returnValue, getReturnValueType(returnValue), mavContainer, webRequest);<br>&#125;<br><span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>...<br>&#125;<br>&#125;<br>    <br>    <span class="hljs-meta">@Nullable</span><span class="hljs-comment">//InvocableHandlerMethod类的，ServletInvocableHandlerMethod类继承InvocableHandlerMethod类</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invokeForRequest</span><span class="hljs-params">(NativeWebRequest request, <span class="hljs-meta">@Nullable</span> ModelAndViewContainer mavContainer,</span><br><span class="hljs-params">Object... providedArgs)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        获取方法的参数值<br>Object[] args = getMethodArgumentValues(request, mavContainer, providedArgs);<br><br>        ...<br>       <br><span class="hljs-keyword">return</span> doInvoke(args);<br>&#125;<br><br>    <span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">doInvoke</span><span class="hljs-params">(Object... args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> getBridgedMethod();<span class="hljs-comment">//@RequestMapping的方法</span><br>ReflectionUtils.makeAccessible(method);<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">if</span> (KotlinDetector.isSuspendingFunction(method)) &#123;<br><span class="hljs-keyword">return</span> CoroutinesUtils.invokeSuspendingFunction(method, getBean(), args);<br>&#125;<br>            <span class="hljs-comment">//通过反射调用</span><br><span class="hljs-keyword">return</span> method.invoke(getBean(), args);<span class="hljs-comment">//getBean()指@RequestMapping的方法所在类的对象。</span><br>&#125;<br><span class="hljs-keyword">catch</span> (IllegalArgumentException ex) &#123;<br>...<br>&#125;<br><span class="hljs-keyword">catch</span> (InvocationTargetException ex) &#123;<br>...<br>&#125;<br>&#125;<br>    <br>&#125;   <br></code></pre></td></tr></table></figure><h3 id="如何确定目标方法每一个参数的值"><a href="#如何确定目标方法每一个参数的值" class="headerlink" title="如何确定目标方法每一个参数的值"></a>如何确定目标方法每一个参数的值</h3><p>重点分析<code>ServletInvocableHandlerMethod</code>的<code>getMethodArgumentValues</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletInvocableHandlerMethod</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">InvocableHandlerMethod</span> &#123;<br>    ...<br><br><span class="hljs-meta">@Nullable</span><span class="hljs-comment">//InvocableHandlerMethod类的，ServletInvocableHandlerMethod类继承InvocableHandlerMethod类</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invokeForRequest</span><span class="hljs-params">(NativeWebRequest request, <span class="hljs-meta">@Nullable</span> ModelAndViewContainer mavContainer,</span><br><span class="hljs-params">Object... providedArgs)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        获取方法的参数值<br>Object[] args = getMethodArgumentValues(request, mavContainer, providedArgs);<br><br>        ...<br>       <br><span class="hljs-keyword">return</span> doInvoke(args);<br>&#125;<br> <br>    <span class="hljs-comment">//本节重点，获取方法的参数值</span><br><span class="hljs-keyword">protected</span> Object[] getMethodArgumentValues(NativeWebRequest request, <span class="hljs-meta">@Nullable</span> ModelAndViewContainer mavContainer,<br>Object... providedArgs) <span class="hljs-keyword">throws</span> Exception &#123;<br><br>MethodParameter[] parameters = getMethodParameters();<br><span class="hljs-keyword">if</span> (ObjectUtils.isEmpty(parameters)) &#123;<br><span class="hljs-keyword">return</span> EMPTY_ARGS;<br>&#125;<br><br>Object[] args = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[parameters.length];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; parameters.length; i++) &#123;<br><span class="hljs-type">MethodParameter</span> <span class="hljs-variable">parameter</span> <span class="hljs-operator">=</span> parameters[i];<br>parameter.initParameterNameDiscovery(<span class="hljs-built_in">this</span>.parameterNameDiscoverer);<br>args[i] = findProvidedArgument(parameter, providedArgs);<br><span class="hljs-keyword">if</span> (args[i] != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br>            <span class="hljs-comment">//查看resolvers是否有支持</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.resolvers.supportsParameter(parameter)) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(formatArgumentError(parameter, <span class="hljs-string">&quot;No suitable resolver&quot;</span>));<br>&#125;<br><span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">//支持的话就开始解析吧</span><br>args[i] = <span class="hljs-built_in">this</span>.resolvers.resolveArgument(parameter, mavContainer, request, <span class="hljs-built_in">this</span>.dataBinderFactory);<br>&#125;<br><span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>....<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> args;<br>&#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p><code>this.resolvers</code>的类型为<code>HandlerMethodArgumentResolverComposite</code>（在<a href="https://blog.csdn.net/u011863024/article/details/113667634#">参数解析器</a>章节提及）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HandlerMethodArgumentResolverComposite</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerMethodArgumentResolver</span> &#123;<br>    <br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">supportsParameter</span><span class="hljs-params">(MethodParameter parameter)</span> &#123;<br><span class="hljs-keyword">return</span> getArgumentResolver(parameter) != <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">resolveArgument</span><span class="hljs-params">(MethodParameter parameter, <span class="hljs-meta">@Nullable</span> ModelAndViewContainer mavContainer,</span><br><span class="hljs-params">NativeWebRequest webRequest, <span class="hljs-meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br><span class="hljs-type">HandlerMethodArgumentResolver</span> <span class="hljs-variable">resolver</span> <span class="hljs-operator">=</span> getArgumentResolver(parameter);<br><span class="hljs-keyword">if</span> (resolver == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Unsupported parameter type [&quot;</span> +<br>parameter.getParameterType().getName() + <span class="hljs-string">&quot;]. supportsParameter should be called first.&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> resolver.resolveArgument(parameter, mavContainer, webRequest, binderFactory);<br>&#125;<br>    <br>    <br>    <span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">private</span> HandlerMethodArgumentResolver <span class="hljs-title function_">getArgumentResolver</span><span class="hljs-params">(MethodParameter parameter)</span> &#123;<br><span class="hljs-type">HandlerMethodArgumentResolver</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.argumentResolverCache.get(parameter);<br><span class="hljs-keyword">if</span> (result == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">//挨个判断所有参数解析器那个支持解析这个参数</span><br><span class="hljs-keyword">for</span> (HandlerMethodArgumentResolver resolver : <span class="hljs-built_in">this</span>.argumentResolvers) &#123;<br><span class="hljs-keyword">if</span> (resolver.supportsParameter(parameter)) &#123;<br>result = resolver;<br><span class="hljs-built_in">this</span>.argumentResolverCache.put(parameter, result);<span class="hljs-comment">//找到了，resolver就缓存起来，方便稍后resolveArgument()方法使用</span><br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> result;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>本节描述，一个请求发送到DispatcherServlet后的具体处理流程，也就是SpringMVC的主要原理。</p><p>本节内容较多且硬核，对日后编程很有帮助，需耐心对待。</p><p>可以运行一个示例，打断点，在Debug模式下，查看程序流程。</p><h2 id="Servlet-API参数解析原理"><a href="#Servlet-API参数解析原理" class="headerlink" title="Servlet API参数解析原理"></a>Servlet API参数解析原理</h2><ul><li>WebRequest</li><li>ServletRequest</li><li>MultipartRequest</li><li>HttpSession</li><li>javax.servlet.http.PushBuilder</li><li>Principal</li><li>InputStream</li><li>Reader</li><li>HttpMethod</li><li>Locale</li><li>TimeZone</li><li>ZoneId</li></ul><p><strong>ServletRequestMethodArgumentResolver</strong>用来处理以上的参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletRequestMethodArgumentResolver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerMethodArgumentResolver</span> &#123;<br><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Class&lt;?&gt; pushBuilder;<br><br><span class="hljs-keyword">static</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br>pushBuilder = ClassUtils.forName(<span class="hljs-string">&quot;javax.servlet.http.PushBuilder&quot;</span>,<br>ServletRequestMethodArgumentResolver.class.getClassLoader());<br>&#125;<br><span class="hljs-keyword">catch</span> (ClassNotFoundException ex) &#123;<br><span class="hljs-comment">// Servlet 4.0 PushBuilder not found - not supported for injection</span><br>pushBuilder = <span class="hljs-literal">null</span>;<br>&#125;<br>&#125;<br><br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">supportsParameter</span><span class="hljs-params">(MethodParameter parameter)</span> &#123;<br>Class&lt;?&gt; paramType = parameter.getParameterType();<br><span class="hljs-keyword">return</span> (WebRequest.class.isAssignableFrom(paramType) ||<br>ServletRequest.class.isAssignableFrom(paramType) ||<br>MultipartRequest.class.isAssignableFrom(paramType) ||<br>HttpSession.class.isAssignableFrom(paramType) ||<br>(pushBuilder != <span class="hljs-literal">null</span> &amp;&amp; pushBuilder.isAssignableFrom(paramType)) ||<br>(Principal.class.isAssignableFrom(paramType) &amp;&amp; !parameter.hasParameterAnnotations()) ||<br>InputStream.class.isAssignableFrom(paramType) ||<br>Reader.class.isAssignableFrom(paramType) ||<br>HttpMethod.class == paramType ||<br>Locale.class == paramType ||<br>TimeZone.class == paramType ||<br>ZoneId.class == paramType);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">resolveArgument</span><span class="hljs-params">(MethodParameter parameter, <span class="hljs-meta">@Nullable</span> ModelAndViewContainer mavContainer,</span><br><span class="hljs-params">NativeWebRequest webRequest, <span class="hljs-meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>Class&lt;?&gt; paramType = parameter.getParameterType();<br><br><span class="hljs-comment">// WebRequest / NativeWebRequest / ServletWebRequest</span><br><span class="hljs-keyword">if</span> (WebRequest.class.isAssignableFrom(paramType)) &#123;<br><span class="hljs-keyword">if</span> (!paramType.isInstance(webRequest)) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<br><span class="hljs-string">&quot;Current request is not of type [&quot;</span> + paramType.getName() + <span class="hljs-string">&quot;]: &quot;</span> + webRequest);<br>&#125;<br><span class="hljs-keyword">return</span> webRequest;<br>&#125;<br><br><span class="hljs-comment">// ServletRequest / HttpServletRequest / MultipartRequest / MultipartHttpServletRequest</span><br><span class="hljs-keyword">if</span> (ServletRequest.class.isAssignableFrom(paramType) || MultipartRequest.class.isAssignableFrom(paramType)) &#123;<br><span class="hljs-keyword">return</span> resolveNativeRequest(webRequest, paramType);<br>&#125;<br><br><span class="hljs-comment">// HttpServletRequest required for all further argument types</span><br><span class="hljs-keyword">return</span> resolveArgument(paramType, resolveNativeRequest(webRequest, HttpServletRequest.class));<br>&#125;<br><br><span class="hljs-keyword">private</span> &lt;T&gt; T <span class="hljs-title function_">resolveNativeRequest</span><span class="hljs-params">(NativeWebRequest webRequest, Class&lt;T&gt; requiredType)</span> &#123;<br><span class="hljs-type">T</span> <span class="hljs-variable">nativeRequest</span> <span class="hljs-operator">=</span> webRequest.getNativeRequest(requiredType);<br><span class="hljs-keyword">if</span> (nativeRequest == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<br><span class="hljs-string">&quot;Current request is not of type [&quot;</span> + requiredType.getName() + <span class="hljs-string">&quot;]: &quot;</span> + webRequest);<br>&#125;<br><span class="hljs-keyword">return</span> nativeRequest;<br>&#125;<br><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">private</span> Object <span class="hljs-title function_">resolveArgument</span><span class="hljs-params">(Class&lt;?&gt; paramType, HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-keyword">if</span> (HttpSession.class.isAssignableFrom(paramType)) &#123;<br><span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> request.getSession();<br><span class="hljs-keyword">if</span> (session != <span class="hljs-literal">null</span> &amp;&amp; !paramType.isInstance(session)) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<br><span class="hljs-string">&quot;Current session is not of type [&quot;</span> + paramType.getName() + <span class="hljs-string">&quot;]: &quot;</span> + session);<br>&#125;<br><span class="hljs-keyword">return</span> session;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pushBuilder != <span class="hljs-literal">null</span> &amp;&amp; pushBuilder.isAssignableFrom(paramType)) &#123;<br><span class="hljs-keyword">return</span> PushBuilderDelegate.resolvePushBuilder(request, paramType);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (InputStream.class.isAssignableFrom(paramType)) &#123;<br><span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> request.getInputStream();<br><span class="hljs-keyword">if</span> (inputStream != <span class="hljs-literal">null</span> &amp;&amp; !paramType.isInstance(inputStream)) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<br><span class="hljs-string">&quot;Request input stream is not of type [&quot;</span> + paramType.getName() + <span class="hljs-string">&quot;]: &quot;</span> + inputStream);<br>&#125;<br><span class="hljs-keyword">return</span> inputStream;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Reader.class.isAssignableFrom(paramType)) &#123;<br><span class="hljs-type">Reader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> request.getReader();<br><span class="hljs-keyword">if</span> (reader != <span class="hljs-literal">null</span> &amp;&amp; !paramType.isInstance(reader)) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<br><span class="hljs-string">&quot;Request body reader is not of type [&quot;</span> + paramType.getName() + <span class="hljs-string">&quot;]: &quot;</span> + reader);<br>&#125;<br><span class="hljs-keyword">return</span> reader;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Principal.class.isAssignableFrom(paramType)) &#123;<br><span class="hljs-type">Principal</span> <span class="hljs-variable">userPrincipal</span> <span class="hljs-operator">=</span> request.getUserPrincipal();<br><span class="hljs-keyword">if</span> (userPrincipal != <span class="hljs-literal">null</span> &amp;&amp; !paramType.isInstance(userPrincipal)) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<br><span class="hljs-string">&quot;Current user principal is not of type [&quot;</span> + paramType.getName() + <span class="hljs-string">&quot;]: &quot;</span> + userPrincipal);<br>&#125;<br><span class="hljs-keyword">return</span> userPrincipal;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (HttpMethod.class == paramType) &#123;<br><span class="hljs-keyword">return</span> HttpMethod.resolve(request.getMethod());<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Locale.class == paramType) &#123;<br><span class="hljs-keyword">return</span> RequestContextUtils.getLocale(request);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (TimeZone.class == paramType) &#123;<br><span class="hljs-type">TimeZone</span> <span class="hljs-variable">timeZone</span> <span class="hljs-operator">=</span> RequestContextUtils.getTimeZone(request);<br><span class="hljs-keyword">return</span> (timeZone != <span class="hljs-literal">null</span> ? timeZone : TimeZone.getDefault());<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ZoneId.class == paramType) &#123;<br><span class="hljs-type">TimeZone</span> <span class="hljs-variable">timeZone</span> <span class="hljs-operator">=</span> RequestContextUtils.getTimeZone(request);<br><span class="hljs-keyword">return</span> (timeZone != <span class="hljs-literal">null</span> ? timeZone.toZoneId() : ZoneId.systemDefault());<br>&#125;<br><br><span class="hljs-comment">// Should never happen...</span><br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>(<span class="hljs-string">&quot;Unknown parameter type: &quot;</span> + paramType.getName());<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Inner class to avoid a hard dependency on Servlet API 4.0 at runtime.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PushBuilderDelegate</span> &#123;<br><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">resolvePushBuilder</span><span class="hljs-params">(HttpServletRequest request, Class&lt;?&gt; paramType)</span> &#123;<br><span class="hljs-type">PushBuilder</span> <span class="hljs-variable">pushBuilder</span> <span class="hljs-operator">=</span> request.newPushBuilder();<br><span class="hljs-keyword">if</span> (pushBuilder != <span class="hljs-literal">null</span> &amp;&amp; !paramType.isInstance(pushBuilder)) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<br><span class="hljs-string">&quot;Current push builder is not of type [&quot;</span> + paramType.getName() + <span class="hljs-string">&quot;]: &quot;</span> + pushBuilder);<br>&#125;<br><span class="hljs-keyword">return</span> pushBuilder;<br><br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>用例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/goto&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">goToPage</span><span class="hljs-params">(HttpServletRequest request)</span>&#123;<br><br>        request.setAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;成功了...&quot;</span>);<br>        request.setAttribute(<span class="hljs-string">&quot;code&quot;</span>,<span class="hljs-number">200</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;forward:/success&quot;</span>;  <span class="hljs-comment">//转发到  /success请求</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Model、Map原理"><a href="#Model、Map原理" class="headerlink" title="Model、Map原理"></a>Model、Map原理</h2><p>复杂参数：</p><ul><li><strong>Map</strong></li><li><strong>Model（map、model里面的数据会被放在request的请求域 request.setAttribute）</strong></li><li>Errors&#x2F;BindingResult</li><li><strong>RedirectAttributes（ 重定向携带数据）</strong></li><li><strong>ServletResponse（response）</strong></li><li>SessionStatus</li><li>UriComponentsBuilder</li><li>ServletUriComponentsBuilder</li></ul><p>用例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/params&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testParam</span><span class="hljs-params">(Map&lt;String,Object&gt; map,</span><br><span class="hljs-params">                        Model model,</span><br><span class="hljs-params">                        HttpServletRequest request,</span><br><span class="hljs-params">                        HttpServletResponse response)</span>&#123;<br>    <span class="hljs-comment">//下面三位都是可以给request域中放数据</span><br>    map.put(<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-string">&quot;world666&quot;</span>);<br>    model.addAttribute(<span class="hljs-string">&quot;world&quot;</span>,<span class="hljs-string">&quot;hello666&quot;</span>);<br>    request.setAttribute(<span class="hljs-string">&quot;message&quot;</span>,<span class="hljs-string">&quot;HelloWorld&quot;</span>);<br><br>    <span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;c1&quot;</span>,<span class="hljs-string">&quot;v1&quot;</span>);<br>    response.addCookie(cookie);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;forward:/success&quot;</span>;<br>&#125;<br><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-meta">@GetMapping(&quot;/success&quot;)</span><br><span class="hljs-keyword">public</span> Map <span class="hljs-title function_">success</span><span class="hljs-params">(<span class="hljs-meta">@RequestAttribute(value = &quot;msg&quot;,required = false)</span> String msg,</span><br><span class="hljs-params">                   <span class="hljs-meta">@RequestAttribute(value = &quot;code&quot;,required = false)</span>Integer code,</span><br><span class="hljs-params">                   HttpServletRequest request)</span>&#123;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">msg1</span> <span class="hljs-operator">=</span> request.getAttribute(<span class="hljs-string">&quot;msg&quot;</span>);<br><br>    Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">hello</span> <span class="hljs-operator">=</span> request.getAttribute(<span class="hljs-string">&quot;hello&quot;</span>);<span class="hljs-comment">//得出testParam方法赋予的值 world666</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">world</span> <span class="hljs-operator">=</span> request.getAttribute(<span class="hljs-string">&quot;world&quot;</span>);<span class="hljs-comment">//得出testParam方法赋予的值 hello666</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> request.getAttribute(<span class="hljs-string">&quot;message&quot;</span>);<span class="hljs-comment">//得出testParam方法赋予的值 HelloWorld</span><br><br>    map.put(<span class="hljs-string">&quot;reqMethod_msg&quot;</span>,msg1);<br>    map.put(<span class="hljs-string">&quot;annotation_msg&quot;</span>,msg);<br>    map.put(<span class="hljs-string">&quot;hello&quot;</span>,hello);<br>    map.put(<span class="hljs-string">&quot;world&quot;</span>,world);<br>    map.put(<span class="hljs-string">&quot;message&quot;</span>,message);<br><br>    <span class="hljs-keyword">return</span> map;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>Map&lt;String,Object&gt; map</code></li><li><code>Model model</code></li><li><code>HttpServletRequest request</code></li></ul><p>上面三位都是可以给request域中放数据，用<code>request.getAttribute()</code>获取</p><p>接下来我们看看，<code>Map&lt;String,Object&gt; map</code>与<code>Model model</code>用什么参数处理器。</p><hr><p><code>Map&lt;String,Object&gt; map</code>参数用<code>MapMethodProcessor</code>处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapMethodProcessor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerMethodArgumentResolver</span>, HandlerMethodReturnValueHandler &#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">supportsParameter</span><span class="hljs-params">(MethodParameter parameter)</span> &#123;<br><span class="hljs-keyword">return</span> (Map.class.isAssignableFrom(parameter.getParameterType()) &amp;&amp;<br>parameter.getParameterAnnotations().length == <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">resolveArgument</span><span class="hljs-params">(MethodParameter parameter, <span class="hljs-meta">@Nullable</span> ModelAndViewContainer mavContainer,</span><br><span class="hljs-params">NativeWebRequest webRequest, <span class="hljs-meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>Assert.state(mavContainer != <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;ModelAndViewContainer is required for model exposure&quot;</span>);<br><span class="hljs-keyword">return</span> mavContainer.getModel();<br>&#125;<br>    <br>    ...<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p><code>mavContainer.getModel()</code>如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ModelAndViewContainer</span> &#123;<br><br>    ...<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ModelMap</span> <span class="hljs-variable">defaultModel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BindingAwareModelMap</span>();<br><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">private</span> ModelMap redirectModel;<br><br>    ...<br><br><span class="hljs-keyword">public</span> ModelMap <span class="hljs-title function_">getModel</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span> (useDefaultModel()) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.defaultModel;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.redirectModel == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-built_in">this</span>.redirectModel = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelMap</span>();<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.redirectModel;<br>&#125;<br>&#125;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">useDefaultModel</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> (!<span class="hljs-built_in">this</span>.redirectModelScenario || (<span class="hljs-built_in">this</span>.redirectModel == <span class="hljs-literal">null</span> &amp;&amp; !<span class="hljs-built_in">this</span>.ignoreDefaultModelOnRedirect));<br>&#125;<br>    ...<br>    <br>&#125;<br></code></pre></td></tr></table></figure><hr><p><code>Model model</code>用<code>ModelMethodProcessor</code>处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ModelMethodProcessor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerMethodArgumentResolver</span>, HandlerMethodReturnValueHandler &#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">supportsParameter</span><span class="hljs-params">(MethodParameter parameter)</span> &#123;<br><span class="hljs-keyword">return</span> Model.class.isAssignableFrom(parameter.getParameterType());<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">resolveArgument</span><span class="hljs-params">(MethodParameter parameter, <span class="hljs-meta">@Nullable</span> ModelAndViewContainer mavContainer,</span><br><span class="hljs-params">NativeWebRequest webRequest, <span class="hljs-meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>Assert.state(mavContainer != <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;ModelAndViewContainer is required for model exposure&quot;</span>);<br><span class="hljs-keyword">return</span> mavContainer.getModel();<br>&#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p><code>return mavContainer.getModel();</code>这跟<code>MapMethodProcessor</code>的一致</p><p><img src="https://img-blog.csdnimg.cn/20210205010247689.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE4NjMwMjQ=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><code>Model</code>也是另一种意义的<code>Map</code>。</p><hr><p><strong>接下来看看</strong><code>Map&lt;String,Object&gt; map</code>与<code>Model model</code>值是如何做到用<code>request.getAttribute()</code>获取的。</p><p>众所周知，所有的数据都放在 <strong>ModelAndView</strong>包含要去的页面地址View，还包含Model数据。</p><p>先看<strong>ModelAndView</strong>接下来是如何处理的？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DispatcherServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FrameworkServlet</span> &#123;<br>    <br>    ...<br>    <br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doDispatch</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>...<br><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">ModelAndView</span> <span class="hljs-variable">mv</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <br>            ...<br><br><span class="hljs-comment">// Actually invoke the handler.</span><br>mv = ha.handle(processedRequest, response, mappedHandler.getHandler());<br>            <br>            ...<br>            <br>&#125;<br><span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>dispatchException = ex;<br>&#125;<br><span class="hljs-keyword">catch</span> (Throwable err) &#123;<br><span class="hljs-comment">// As of 4.3, we&#x27;re processing Errors thrown from handler methods as well,</span><br><span class="hljs-comment">// making them available for @ExceptionHandler methods and other scenarios.</span><br>dispatchException = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NestedServletException</span>(<span class="hljs-string">&quot;Handler dispatch failed&quot;</span>, err);<br>&#125;<br>        <span class="hljs-comment">//处理分发结果</span><br>processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);<br>&#125;<br>        ...<br><br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processDispatchResult</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response,</span><br><span class="hljs-params"><span class="hljs-meta">@Nullable</span> HandlerExecutionChain mappedHandler, <span class="hljs-meta">@Nullable</span> ModelAndView mv,</span><br><span class="hljs-params"><span class="hljs-meta">@Nullable</span> Exception exception)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        ...<br><br><span class="hljs-comment">// Did the handler return a view to render?</span><br><span class="hljs-keyword">if</span> (mv != <span class="hljs-literal">null</span> &amp;&amp; !mv.wasCleared()) &#123;<br>render(mv, request, response);<br>...<br>&#125;<br>...<br>&#125;<br><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">render</span><span class="hljs-params">(ModelAndView mv, HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>...<br><br>View view;<br><span class="hljs-type">String</span> <span class="hljs-variable">viewName</span> <span class="hljs-operator">=</span> mv.getViewName();<br><span class="hljs-keyword">if</span> (viewName != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-comment">// We need to resolve the view name.</span><br>view = resolveViewName(viewName, mv.getModelInternal(), locale, request);<br><span class="hljs-keyword">if</span> (view == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletException</span>(<span class="hljs-string">&quot;Could not resolve view with name &#x27;&quot;</span> + mv.getViewName() +<br><span class="hljs-string">&quot;&#x27; in servlet with name &#x27;&quot;</span> + getServletName() + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// No need to lookup: the ModelAndView object contains the actual View object.</span><br>view = mv.getView();<br><span class="hljs-keyword">if</span> (view == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletException</span>(<span class="hljs-string">&quot;ModelAndView [&quot;</span> + mv + <span class="hljs-string">&quot;] neither contains a view name nor a &quot;</span> +<br><span class="hljs-string">&quot;View object in servlet with name &#x27;&quot;</span> + getServletName() + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>&#125;<br>&#125;<br>view.render(mv.getModelInternal(), request, response);<br>        <br>        ...<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>在Debug模式下，<code>view</code>属为<code>InternalResourceView</code>类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InternalResourceView</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractUrlBasedView</span> &#123;<br>    <br> <span class="hljs-meta">@Override</span><span class="hljs-comment">//该方法在AbstractView，AbstractUrlBasedView继承了AbstractView</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">render</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Map&lt;String, ?&gt; model, HttpServletRequest request,</span><br><span class="hljs-params">HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        ...<br>        <br>Map&lt;String, Object&gt; mergedModel = createMergedOutputModel(model, request, response);<br>prepareResponse(request, response);<br>        <br>        <span class="hljs-comment">//看下一个方法实现</span><br>renderMergedOutputModel(mergedModel, getRequestToExpose(request), response);<br>&#125;<br>    <br>    <span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">renderMergedOutputModel</span><span class="hljs-params">(</span><br><span class="hljs-params">Map&lt;String, Object&gt; model, HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br><span class="hljs-comment">// Expose the model object as request attributes.</span><br>        <span class="hljs-comment">// 暴露模型作为请求域属性</span><br>exposeModelAsRequestAttributes(model, request);<span class="hljs-comment">//&lt;---重点</span><br><br><span class="hljs-comment">// Expose helpers as request attributes, if any.</span><br>exposeHelpers(request);<br><br><span class="hljs-comment">// Determine the path for the request dispatcher.</span><br><span class="hljs-type">String</span> <span class="hljs-variable">dispatcherPath</span> <span class="hljs-operator">=</span> prepareForRendering(request, response);<br><br><span class="hljs-comment">// Obtain a RequestDispatcher for the target resource (typically a JSP).</span><br><span class="hljs-type">RequestDispatcher</span> <span class="hljs-variable">rd</span> <span class="hljs-operator">=</span> getRequestDispatcher(request, dispatcherPath);<br><br>        ...<br>&#125;<br>    <br>    <span class="hljs-comment">//该方法在AbstractView，AbstractUrlBasedView继承了AbstractView</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exposeModelAsRequestAttributes</span><span class="hljs-params">(Map&lt;String, Object&gt; model,</span><br><span class="hljs-params">HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>model.forEach((name, value) -&gt; &#123;<br><span class="hljs-keyword">if</span> (value != <span class="hljs-literal">null</span>) &#123;<br>request.setAttribute(name, value);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>request.removeAttribute(name);<br>&#125;<br>&#125;);<br>&#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p><code>exposeModelAsRequestAttributes</code>方法看出，<code>Map&lt;String,Object&gt; map</code>，<code>Model model</code>这两种类型数据可以给request域中放数据，用<code>request.getAttribute()</code>获取。</p><h2 id="自定义参数绑定原理"><a href="#自定义参数绑定原理" class="headerlink" title="自定义参数绑定原理"></a>自定义参数绑定原理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ParameterTestController</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 数据绑定：页面提交的请求数据（GET、POST）都可以和对象属性进行绑定</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> person</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PostMapping(&quot;/saveuser&quot;)</span><br>    <span class="hljs-keyword">public</span> Person <span class="hljs-title function_">saveuser</span><span class="hljs-params">(Person person)</span>&#123;<br>        <span class="hljs-keyword">return</span> person;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *     姓名： &lt;input name=&quot;userName&quot;/&gt; &lt;br/&gt;</span><br><span class="hljs-comment"> *     年龄： &lt;input name=&quot;age&quot;/&gt; &lt;br/&gt;</span><br><span class="hljs-comment"> *     生日： &lt;input name=&quot;birth&quot;/&gt; &lt;br/&gt;</span><br><span class="hljs-comment"> *     宠物姓名：&lt;input name=&quot;pet.name&quot;/&gt;&lt;br/&gt;</span><br><span class="hljs-comment"> *     宠物年龄：&lt;input name=&quot;pet.age&quot;/&gt;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <br>    <span class="hljs-keyword">private</span> String userName;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> Date birth;<br>    <span class="hljs-keyword">private</span> Pet pet;<br>    <br>&#125;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Pet</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String age;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>封装过程用到<code>ServletModelAttributeMethodProcessor</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletModelAttributeMethodProcessor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ModelAttributeMethodProcessor</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><span class="hljs-comment">//本方法在ModelAttributeMethodProcessor类，</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">supportsParameter</span><span class="hljs-params">(MethodParameter parameter)</span> &#123;<br><span class="hljs-keyword">return</span> (parameter.hasParameterAnnotation(ModelAttribute.class) ||<br>(<span class="hljs-built_in">this</span>.annotationNotRequired &amp;&amp; !BeanUtils.isSimpleProperty(parameter.getParameterType())));<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Nullable</span><span class="hljs-comment">//本方法在ModelAttributeMethodProcessor类，</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Object <span class="hljs-title function_">resolveArgument</span><span class="hljs-params">(MethodParameter parameter, <span class="hljs-meta">@Nullable</span> ModelAndViewContainer mavContainer,</span><br><span class="hljs-params">NativeWebRequest webRequest, <span class="hljs-meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>...<br><br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> ModelFactory.getNameForParameter(parameter);<br><span class="hljs-type">ModelAttribute</span> <span class="hljs-variable">ann</span> <span class="hljs-operator">=</span> parameter.getParameterAnnotation(ModelAttribute.class);<br><span class="hljs-keyword">if</span> (ann != <span class="hljs-literal">null</span>) &#123;<br>mavContainer.setBinding(name, ann.binding());<br>&#125;<br><br><span class="hljs-type">Object</span> <span class="hljs-variable">attribute</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">BindingResult</span> <span class="hljs-variable">bindingResult</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br><span class="hljs-keyword">if</span> (mavContainer.containsAttribute(name)) &#123;<br>attribute = mavContainer.getModel().get(name);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// Create attribute instance</span><br><span class="hljs-keyword">try</span> &#123;<br>attribute = createAttribute(name, parameter, binderFactory, webRequest);<br>&#125;<br><span class="hljs-keyword">catch</span> (BindException ex) &#123;<br>...<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (bindingResult == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-comment">// Bean property binding and validation;</span><br><span class="hljs-comment">// skipped in case of binding failure on construction.</span><br><span class="hljs-type">WebDataBinder</span> <span class="hljs-variable">binder</span> <span class="hljs-operator">=</span> binderFactory.createBinder(webRequest, attribute, name);<br><span class="hljs-keyword">if</span> (binder.getTarget() != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">if</span> (!mavContainer.isBindingDisabled(name)) &#123;<br>                    <span class="hljs-comment">//web数据绑定器，将请求参数的值绑定到指定的JavaBean里面**</span><br>bindRequestParameters(binder, webRequest);<br>&#125;<br>validateIfApplicable(binder, parameter);<br><span class="hljs-keyword">if</span> (binder.getBindingResult().hasErrors() &amp;&amp; isBindExceptionRequired(binder, parameter)) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BindException</span>(binder.getBindingResult());<br>&#125;<br>&#125;<br><span class="hljs-comment">// Value type adaptation, also covering java.util.Optional</span><br><span class="hljs-keyword">if</span> (!parameter.getParameterType().isInstance(attribute)) &#123;<br>attribute = binder.convertIfNecessary(binder.getTarget(), parameter.getParameterType(), parameter);<br>&#125;<br>bindingResult = binder.getBindingResult();<br>&#125;<br><br><span class="hljs-comment">// Add resolved attribute and BindingResult at the end of the model</span><br>Map&lt;String, Object&gt; bindingResultModel = bindingResult.getModel();<br>mavContainer.removeAttributes(bindingResultModel);<br>mavContainer.addAllAttributes(bindingResultModel);<br><br><span class="hljs-keyword">return</span> attribute;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>WebDataBinder 利用它里面的 Converters 将请求数据转成指定的数据类型。再次封装到JavaBean中</strong></p><p><strong>在过程当中，用到GenericConversionService：在设置每一个值的时候，找它里面的所有converter那个可以将这个数据类型（request带来参数的字符串）转换到指定的类型</strong></p><h2 id="自定义Converter原理"><a href="#自定义Converter原理" class="headerlink" title="自定义Converter原理"></a>自定义Converter原理</h2><p>未来我们可以给WebDataBinder里面放自己的Converter；</p><p>下面演示将字符串<code>“啊猫,3”</code>转换成<code>Pet</code>对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1、WebMvcConfigurer定制化SpringMVC的功能</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> WebMvcConfigurer <span class="hljs-title function_">webMvcConfigurer</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebMvcConfigurer</span>() &#123;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addFormatters</span><span class="hljs-params">(FormatterRegistry registry)</span> &#123;<br>            registry.addConverter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Converter</span>&lt;String, Pet&gt;() &#123;<br><br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> Pet <span class="hljs-title function_">convert</span><span class="hljs-params">(String source)</span> &#123;<br>                    <span class="hljs-comment">// 啊猫,3</span><br>                    <span class="hljs-keyword">if</span>(!StringUtils.isEmpty(source))&#123;<br>                        <span class="hljs-type">Pet</span> <span class="hljs-variable">pet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pet</span>();<br>                        String[] split = source.split(<span class="hljs-string">&quot;,&quot;</span>);<br>                        pet.setName(split[<span class="hljs-number">0</span>]);<br>                        pet.setAge(Integer.parseInt(split[<span class="hljs-number">1</span>]));<br>                        <span class="hljs-keyword">return</span> pet;<br>                    &#125;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>                &#125;<br>            &#125;);<br>        &#125;<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ReturnValueHandler原理"><a href="#ReturnValueHandler原理" class="headerlink" title="ReturnValueHandler原理"></a>ReturnValueHandler原理</h2><p><img src="https://img-blog.csdnimg.cn/20210205010403920.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE4NjMwMjQ=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>假设给前端自动返回json数据，需要引入相关的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- web场景自动引入了json场景 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-json<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>控制层代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResponseTestController</span> &#123;<br>    <br><span class="hljs-meta">@ResponseBody</span>  <span class="hljs-comment">//利用返回值处理器里面的消息转换器进行处理</span><br>    <span class="hljs-meta">@GetMapping(value = &quot;/test/person&quot;)</span><br>    <span class="hljs-keyword">public</span> Person <span class="hljs-title function_">getPerson</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        person.setAge(<span class="hljs-number">28</span>);<br>        person.setBirth(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        person.setUserName(<span class="hljs-string">&quot;zhangsan&quot;</span>);<br>        <span class="hljs-keyword">return</span> person;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>直接看看重点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestMappingHandlerAdapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractHandlerMethodAdapter</span><br><span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanFactoryAware</span>, InitializingBean &#123;<br><br>    ...<br>    <br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">protected</span> ModelAndView <span class="hljs-title function_">invokeHandlerMethod</span><span class="hljs-params">(HttpServletRequest request,</span><br><span class="hljs-params">HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br><span class="hljs-type">ServletWebRequest</span> <span class="hljs-variable">webRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletWebRequest</span>(request, response);<br><span class="hljs-keyword">try</span> &#123;<br><br>            ...<br>            <br>            <span class="hljs-type">ServletInvocableHandlerMethod</span> <span class="hljs-variable">invocableMethod</span> <span class="hljs-operator">=</span> createInvocableHandlerMethod(handlerMethod);<br>                <br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.argumentResolvers != <span class="hljs-literal">null</span>) &#123;<br>invocableMethod.setHandlerMethodArgumentResolvers(<span class="hljs-built_in">this</span>.argumentResolvers);<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.returnValueHandlers != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//&lt;----关注点</span><br>invocableMethod.setHandlerMethodReturnValueHandlers(<span class="hljs-built_in">this</span>.returnValueHandlers);<br>&#125;<br><br>            ...<br><br>invocableMethod.invokeAndHandle(webRequest, mavContainer);<span class="hljs-comment">//看下块代码</span><br><span class="hljs-keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-keyword">return</span> getModelAndView(mavContainer, modelFactory, webRequest);<br>&#125;<br><span class="hljs-keyword">finally</span> &#123;<br>webRequest.requestCompleted();<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletInvocableHandlerMethod</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">InvocableHandlerMethod</span> &#123;<br>    <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invokeAndHandle</span><span class="hljs-params">(ServletWebRequest webRequest, ModelAndViewContainer mavContainer,</span><br><span class="hljs-params">Object... providedArgs)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br><span class="hljs-type">Object</span> <span class="hljs-variable">returnValue</span> <span class="hljs-operator">=</span> invokeForRequest(webRequest, mavContainer, providedArgs);<br><br>        ...<br>        <br><span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//看下块代码</span><br><span class="hljs-built_in">this</span>.returnValueHandlers.handleReturnValue(<br>returnValue, getReturnValueType(returnValue), mavContainer, webRequest);<br>&#125;<br><span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>...<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HandlerMethodReturnValueHandlerComposite</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerMethodReturnValueHandler</span> &#123;<br>    <br>    ...<br>    <br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleReturnValue</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Object returnValue, MethodParameter returnType,</span><br><span class="hljs-params">ModelAndViewContainer mavContainer, NativeWebRequest webRequest)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-comment">//selectHandler()实现在下面</span><br><span class="hljs-type">HandlerMethodReturnValueHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> selectHandler(returnValue, returnType);<br><span class="hljs-keyword">if</span> (handler == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Unknown return value type: &quot;</span> + returnType.getParameterType().getName());<br>&#125;<br>        <span class="hljs-comment">//开始处理</span><br>handler.handleReturnValue(returnValue, returnType, mavContainer, webRequest);<br>&#125;<br>    <br>   <span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">private</span> HandlerMethodReturnValueHandler <span class="hljs-title function_">selectHandler</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Object value, MethodParameter returnType)</span> &#123;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">isAsyncValue</span> <span class="hljs-operator">=</span> isAsyncReturnValue(value, returnType);<br><span class="hljs-keyword">for</span> (HandlerMethodReturnValueHandler handler : <span class="hljs-built_in">this</span>.returnValueHandlers) &#123;<br><span class="hljs-keyword">if</span> (isAsyncValue &amp;&amp; !(handler <span class="hljs-keyword">instanceof</span> AsyncHandlerMethodReturnValueHandler)) &#123;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (handler.supportsReturnType(returnType)) &#123;<br><span class="hljs-keyword">return</span> handler;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br>    <br></code></pre></td></tr></table></figure><p><code>@ResponseBody</code> 注解，即<code>RequestResponseBodyMethodProcessor</code>，它实现<code>HandlerMethodReturnValueHandler</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestResponseBodyMethodProcessor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractMessageConverterMethodProcessor</span> &#123;<br><br>    ...<br>    <br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleReturnValue</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Object returnValue, MethodParameter returnType,</span><br><span class="hljs-params">ModelAndViewContainer mavContainer, NativeWebRequest webRequest)</span><br><span class="hljs-keyword">throws</span> IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException &#123;<br><br>mavContainer.setRequestHandled(<span class="hljs-literal">true</span>);<br><span class="hljs-type">ServletServerHttpRequest</span> <span class="hljs-variable">inputMessage</span> <span class="hljs-operator">=</span> createInputMessage(webRequest);<br><span class="hljs-type">ServletServerHttpResponse</span> <span class="hljs-variable">outputMessage</span> <span class="hljs-operator">=</span> createOutputMessage(webRequest);<br><br>        <span class="hljs-comment">// 使用消息转换器进行写出操作，本方法下一章节介绍：</span><br><span class="hljs-comment">// Try even with null return value. ResponseBodyAdvice could get involved.</span><br>writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="HTTPMessageConverter原理"><a href="#HTTPMessageConverter原理" class="headerlink" title="HTTPMessageConverter原理"></a>HTTPMessageConverter原理</h2><p>返回值处理器<code>ReturnValueHandler</code>原理：</p><ol><li><p>返回值处理器判断是否支持这种类型返回值 <code>supportsReturnType</code></p></li><li><p>返回值处理器调用 <code>handleReturnValue</code> 进行处理</p></li><li><p>&#96;&#96;&#96;<br>RequestResponseBodyMethodProcessor</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs"><br>可以处理返回值标了<br><br></code></pre></td></tr></table></figure><p>@ResponseBody</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><br>注解的。<br><br><span class="hljs-bullet">- </span>利用<br><br></code></pre></td></tr></table></figure><p>  MessageConverters</p>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br>进行处理 将数据写为json<br><br><span class="hljs-bullet">1.</span> 内容协商（浏览器默认会以请求头的方式告诉服务器他能接受什么样的内容类型）<br><br><span class="hljs-bullet">2.</span> 服务器最终根据自己自身的能力，决定服务器能生产出什么样内容类型的数据，<br><br><span class="hljs-bullet">3.</span> SpringMVC会挨个遍历所有容器底层的<br><br></code></pre></td></tr></table></figure><pre><code class="hljs"> HttpMessageConverter <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><code class="hljs java"><br>        ，看谁能处理？<br><br>        <span class="hljs-number">1.</span> 得到`MappingJackson2HttpMessageConverter`可以将对象写为json<br>        <span class="hljs-number">2.</span> 利用`MappingJackson2HttpMessageConverter`将对象转为json再写出去。<br><br>```java<br><span class="hljs-comment">//RequestResponseBodyMethodProcessor继承这类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractMessageConverterMethodProcessor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractMessageConverterMethodArgumentResolver</span><br><span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerMethodReturnValueHandler</span> &#123;<br><br>    ...<br>    <br>    <span class="hljs-comment">//承接上一节内容</span><br>    <span class="hljs-keyword">protected</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeWithMessageConverters</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> T value, MethodParameter returnType,</span><br><span class="hljs-params">                ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)</span><br>                <span class="hljs-keyword">throws</span> IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException &#123;<br><br>            Object body;<br>            Class&lt;?&gt; valueType;<br>            Type targetType;<br><br>            <span class="hljs-keyword">if</span> (value <span class="hljs-keyword">instanceof</span> CharSequence) &#123;<br>                body = value.toString();<br>                valueType = String.class;<br>                targetType = String.class;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                body = value;<br>                valueType = getReturnValueType(body, returnType);<br>                targetType = GenericTypeResolver.resolveType(getGenericType(returnType), returnType.getContainingClass());<br>            &#125;<br><br>...<br><br>            <span class="hljs-comment">//内容协商（浏览器默认会以请求头(参数Accept)的方式告诉服务器他能接受什么样的内容类型）</span><br>            <span class="hljs-type">MediaType</span> <span class="hljs-variable">selectedMediaType</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-type">MediaType</span> <span class="hljs-variable">contentType</span> <span class="hljs-operator">=</span> outputMessage.getHeaders().getContentType();<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">isContentTypePreset</span> <span class="hljs-operator">=</span> contentType != <span class="hljs-literal">null</span> &amp;&amp; contentType.isConcrete();<br>            <span class="hljs-keyword">if</span> (isContentTypePreset) &#123;<br>                <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>                    logger.debug(<span class="hljs-string">&quot;Found &#x27;Content-Type:&quot;</span> + contentType + <span class="hljs-string">&quot;&#x27; in response&quot;</span>);<br>                &#125;<br>                selectedMediaType = contentType;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> inputMessage.getServletRequest();<br>                List&lt;MediaType&gt; acceptableTypes = getAcceptableMediaTypes(request);<br>                <span class="hljs-comment">//服务器最终根据自己自身的能力，决定服务器能生产出什么样内容类型的数据</span><br>                List&lt;MediaType&gt; producibleTypes = getProducibleMediaTypes(request, valueType, targetType);<br><br>                <span class="hljs-keyword">if</span> (body != <span class="hljs-literal">null</span> &amp;&amp; producibleTypes.isEmpty()) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpMessageNotWritableException</span>(<br>                            <span class="hljs-string">&quot;No converter found for return value of type: &quot;</span> + valueType);<br>                &#125;<br>                List&lt;MediaType&gt; mediaTypesToUse = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>                <span class="hljs-keyword">for</span> (MediaType requestedType : acceptableTypes) &#123;<br>                    <span class="hljs-keyword">for</span> (MediaType producibleType : producibleTypes) &#123;<br>                        <span class="hljs-keyword">if</span> (requestedType.isCompatibleWith(producibleType)) &#123;<br>                            mediaTypesToUse.add(getMostSpecificMediaType(requestedType, producibleType));<br>                        &#125;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (mediaTypesToUse.isEmpty()) &#123;<br>                    <span class="hljs-keyword">if</span> (body != <span class="hljs-literal">null</span>) &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpMediaTypeNotAcceptableException</span>(producibleTypes);<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>                        logger.debug(<span class="hljs-string">&quot;No match for &quot;</span> + acceptableTypes + <span class="hljs-string">&quot;, supported: &quot;</span> + producibleTypes);<br>                    &#125;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br><br>                MediaType.sortBySpecificityAndQuality(mediaTypesToUse);<br><br>                <span class="hljs-comment">//选择一个MediaType</span><br>                <span class="hljs-keyword">for</span> (MediaType mediaType : mediaTypesToUse) &#123;<br>                    <span class="hljs-keyword">if</span> (mediaType.isConcrete()) &#123;<br>                        selectedMediaType = mediaType;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mediaType.isPresentIn(ALL_APPLICATION_MEDIA_TYPES)) &#123;<br>                        selectedMediaType = MediaType.APPLICATION_OCTET_STREAM;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>                    logger.debug(<span class="hljs-string">&quot;Using &#x27;&quot;</span> + selectedMediaType + <span class="hljs-string">&quot;&#x27;, given &quot;</span> +<br>                            acceptableTypes + <span class="hljs-string">&quot; and supported &quot;</span> + producibleTypes);<br>                &#125;<br>            &#125;<br><br>        <br>            <span class="hljs-keyword">if</span> (selectedMediaType != <span class="hljs-literal">null</span>) &#123;<br>                selectedMediaType = selectedMediaType.removeQualityValue();<br>                <span class="hljs-comment">//本节主角：HttpMessageConverter</span><br>                <span class="hljs-keyword">for</span> (HttpMessageConverter&lt;?&gt; converter : <span class="hljs-built_in">this</span>.messageConverters) &#123;<br>                    <span class="hljs-type">GenericHttpMessageConverter</span> <span class="hljs-variable">genericConverter</span> <span class="hljs-operator">=</span> (converter <span class="hljs-keyword">instanceof</span> GenericHttpMessageConverter ?<br>                            (GenericHttpMessageConverter&lt;?&gt;) converter : <span class="hljs-literal">null</span>);<br>                    <br>                    <span class="hljs-comment">//判断是否可写</span><br>                    <span class="hljs-keyword">if</span> (genericConverter != <span class="hljs-literal">null</span> ?<br>                            ((GenericHttpMessageConverter) converter).canWrite(targetType, valueType, selectedMediaType) :<br>                            converter.canWrite(valueType, selectedMediaType)) &#123;<br>                        body = getAdvice().beforeBodyWrite(body, returnType, selectedMediaType,<br>                                (Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpMessageConverter</span>&lt;?&gt;&gt;) converter.getClass(),<br>                                inputMessage, outputMessage);<br>                        <span class="hljs-keyword">if</span> (body != <span class="hljs-literal">null</span>) &#123;<br>                            <span class="hljs-type">Object</span> <span class="hljs-variable">theBody</span> <span class="hljs-operator">=</span> body;<br>                            LogFormatUtils.traceDebug(logger, traceOn -&gt;<br>                                    <span class="hljs-string">&quot;Writing [&quot;</span> + LogFormatUtils.formatValue(theBody, !traceOn) + <span class="hljs-string">&quot;]&quot;</span>);<br>                            addContentDispositionHeader(inputMessage, outputMessage);<br><span class="hljs-comment">//开始写入</span><br>                            <span class="hljs-keyword">if</span> (genericConverter != <span class="hljs-literal">null</span>) &#123;<br>                                genericConverter.write(body, targetType, selectedMediaType, outputMessage);<br>                            &#125;<br>                            <span class="hljs-keyword">else</span> &#123;<br>                                ((HttpMessageConverter) converter).write(body, selectedMediaType, outputMessage);<br>                            &#125;<br>                        &#125;<br>                        <span class="hljs-keyword">else</span> &#123;<br>                            <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>                                logger.debug(<span class="hljs-string">&quot;Nothing to write: null body&quot;</span>);<br>                            &#125;<br>                        &#125;<br>                        <span class="hljs-keyword">return</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>...<br>        &#125;<br></code></pre></td></tr></table></figure></code></pre></li></ol><p><code>HTTPMessageConverter</code>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Strategy interface for converting from and to HTTP requests and responses.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">HttpMessageConverter</span>&lt;T&gt; &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Indicates whether the given class can be read by this converter.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">canRead</span><span class="hljs-params">(Class&lt;?&gt; clazz, <span class="hljs-meta">@Nullable</span> MediaType mediaType)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Indicates whether the given class can be written by this converter.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">canWrite</span><span class="hljs-params">(Class&lt;?&gt; clazz, <span class="hljs-meta">@Nullable</span> MediaType mediaType)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Return the list of &#123;<span class="hljs-doctag">@link</span> MediaType&#125; objects supported by this converter.</span><br><span class="hljs-comment"> */</span><br>List&lt;MediaType&gt; <span class="hljs-title function_">getSupportedMediaTypes</span><span class="hljs-params">()</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Read an object of the given type from the given input message, and returns it.</span><br><span class="hljs-comment"> */</span><br>T <span class="hljs-title function_">read</span><span class="hljs-params">(Class&lt;? extends T&gt; clazz, HttpInputMessage inputMessage)</span><br><span class="hljs-keyword">throws</span> IOException, HttpMessageNotReadableException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Write an given object to the given output message.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(T t, <span class="hljs-meta">@Nullable</span> MediaType contentType, HttpOutputMessage outputMessage)</span><br><span class="hljs-keyword">throws</span> IOException, HttpMessageNotWritableException;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>HttpMessageConverter</code>: 看是否支持将 此 <code>Class</code>类型的对象，转为<code>MediaType</code>类型的数据。</p><p>例子：<code>Person</code>对象转为JSON，或者 JSON转为<code>Person</code>，这将用到<code>MappingJackson2HttpMessageConverter</code></p><p><img src="https://img-blog.csdnimg.cn/20210205010509984.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE4NjMwMjQ=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MappingJackson2HttpMessageConverter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractJackson2HttpMessageConverter</span> &#123;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>关于<code>MappingJackson2HttpMessageConverter</code>的实例化请看下节。</p><h3 id="关于HttpMessageConverters的初始化"><a href="#关于HttpMessageConverters的初始化" class="headerlink" title="关于HttpMessageConverters的初始化"></a>关于HttpMessageConverters的初始化</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-type">DispatcherServlet</span>`的初始化时会调用`initHandlerAdapters(<span class="hljs-type">ApplicationContext</span> context)<br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DispatcherServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">FrameworkServlet</span> </span>&#123;<br>    <br>    ...<br>    <br><span class="hljs-keyword">private</span> void initHandlerAdapters(<span class="hljs-type">ApplicationContext</span> context) &#123;<br><span class="hljs-keyword">this</span>.handlerAdapters = <span class="hljs-literal">null</span>;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.detectAllHandlerAdapters) &#123;<br><span class="hljs-comment">// Find all HandlerAdapters in the ApplicationContext, including ancestor contexts.</span><br><span class="hljs-type">Map</span>&lt;<span class="hljs-type">String</span>, <span class="hljs-type">HandlerAdapter</span>&gt; matchingBeans =<br><span class="hljs-type">BeanFactoryUtils</span>.beansOfTypeIncludingAncestors(context, <span class="hljs-type">HandlerAdapter</span>.<span class="hljs-keyword">class</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>);<br><span class="hljs-keyword">if</span> (!matchingBeans.isEmpty()) &#123;<br><span class="hljs-keyword">this</span>.handlerAdapters = <span class="hljs-keyword">new</span> <span class="hljs-type">ArrayList</span>&lt;&gt;(matchingBeans.values());<br><span class="hljs-comment">// We keep HandlerAdapters in sorted order.</span><br><span class="hljs-type">AnnotationAwareOrderComparator</span>.sort(<span class="hljs-keyword">this</span>.handlerAdapters);<br>&#125;<br>&#125;<br>      ...<br></code></pre></td></tr></table></figure><p>上述代码会加载<code>ApplicationContext</code>的所有<code>HandlerAdapter</code>，用来处理<code>@RequestMapping</code>的<code>RequestMappingHandlerAdapter</code>实现<code>HandlerAdapter</code>接口，<code>RequestMappingHandlerAdapter</code>也被实例化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestMappingHandlerAdapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractHandlerMethodAdapter</span><br><span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanFactoryAware</span>, InitializingBean &#123;<br>    <br>    ...<br><br>    <span class="hljs-keyword">private</span> List&lt;HttpMessageConverter&lt;?&gt;&gt; messageConverters;<br>    <br>    ...<br>    <br><span class="hljs-keyword">public</span> <span class="hljs-title function_">RequestMappingHandlerAdapter</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-built_in">this</span>.messageConverters = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(<span class="hljs-number">4</span>);<br><span class="hljs-built_in">this</span>.messageConverters.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayHttpMessageConverter</span>());<br><span class="hljs-built_in">this</span>.messageConverters.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringHttpMessageConverter</span>());<br><span class="hljs-keyword">if</span> (!shouldIgnoreXml) &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-built_in">this</span>.messageConverters.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SourceHttpMessageConverter</span>&lt;&gt;());<br>&#125;<br><span class="hljs-keyword">catch</span> (Error err) &#123;<br><span class="hljs-comment">// Ignore when no TransformerFactory implementation is available</span><br>&#125;<br>&#125;<br><span class="hljs-built_in">this</span>.messageConverters.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AllEncompassingFormHttpMessageConverter</span>());<br>&#125;<br></code></pre></td></tr></table></figure><p>在构造器中看到<strong>一堆</strong><code>HttpMessageConverter</code>。接着，重点查看<code>AllEncompassingFormHttpMessageConverter</code>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AllEncompassingFormHttpMessageConverter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FormHttpMessageConverter</span> &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Boolean flag controlled by a &#123;<span class="hljs-doctag">@code</span> spring.xml.ignore&#125; system property that instructs Spring to</span><br><span class="hljs-comment"> * ignore XML, i.e. to not initialize the XML-related infrastructure.</span><br><span class="hljs-comment"> * &lt;p&gt;The default is &quot;false&quot;.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">shouldIgnoreXml</span> <span class="hljs-operator">=</span> SpringProperties.getFlag(<span class="hljs-string">&quot;spring.xml.ignore&quot;</span>);<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> jaxb2Present;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> jackson2Present;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> jackson2XmlPresent;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> jackson2SmilePresent;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> gsonPresent;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> jsonbPresent;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> kotlinSerializationJsonPresent;<br><br><span class="hljs-keyword">static</span> &#123;<br><span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> AllEncompassingFormHttpMessageConverter.class.getClassLoader();<br>jaxb2Present = ClassUtils.isPresent(<span class="hljs-string">&quot;javax.xml.bind.Binder&quot;</span>, classLoader);<br>jackson2Present = ClassUtils.isPresent(<span class="hljs-string">&quot;com.fasterxml.jackson.databind.ObjectMapper&quot;</span>, classLoader) &amp;&amp;<br>ClassUtils.isPresent(<span class="hljs-string">&quot;com.fasterxml.jackson.core.JsonGenerator&quot;</span>, classLoader);<br>jackson2XmlPresent = ClassUtils.isPresent(<span class="hljs-string">&quot;com.fasterxml.jackson.dataformat.xml.XmlMapper&quot;</span>, classLoader);<br>jackson2SmilePresent = ClassUtils.isPresent(<span class="hljs-string">&quot;com.fasterxml.jackson.dataformat.smile.SmileFactory&quot;</span>, classLoader);<br>gsonPresent = ClassUtils.isPresent(<span class="hljs-string">&quot;com.google.gson.Gson&quot;</span>, classLoader);<br>jsonbPresent = ClassUtils.isPresent(<span class="hljs-string">&quot;javax.json.bind.Jsonb&quot;</span>, classLoader);<br>kotlinSerializationJsonPresent = ClassUtils.isPresent(<span class="hljs-string">&quot;kotlinx.serialization.json.Json&quot;</span>, classLoader);<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">AllEncompassingFormHttpMessageConverter</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span> (!shouldIgnoreXml) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>addPartConverter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SourceHttpMessageConverter</span>&lt;&gt;());<br>&#125;<br><span class="hljs-keyword">catch</span> (Error err) &#123;<br><span class="hljs-comment">// Ignore when no TransformerFactory implementation is available</span><br>&#125;<br><br><span class="hljs-keyword">if</span> (jaxb2Present &amp;&amp; !jackson2XmlPresent) &#123;<br>addPartConverter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Jaxb2RootElementHttpMessageConverter</span>());<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (jackson2Present) &#123;<br>addPartConverter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MappingJackson2HttpMessageConverter</span>());<span class="hljs-comment">//&lt;----重点看这里</span><br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (gsonPresent) &#123;<br>addPartConverter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GsonHttpMessageConverter</span>());<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (jsonbPresent) &#123;<br>addPartConverter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonbHttpMessageConverter</span>());<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (kotlinSerializationJsonPresent) &#123;<br>addPartConverter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">KotlinSerializationJsonHttpMessageConverter</span>());<br>&#125;<br><br><span class="hljs-keyword">if</span> (jackson2XmlPresent &amp;&amp; !shouldIgnoreXml) &#123;<br>addPartConverter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MappingJackson2XmlHttpMessageConverter</span>());<br>&#125;<br><br><span class="hljs-keyword">if</span> (jackson2SmilePresent) &#123;<br>addPartConverter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MappingJackson2SmileHttpMessageConverter</span>());<br>&#125;<br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FormHttpMessageConverter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HttpMessageConverter</span>&lt;MultiValueMap&lt;String, ?&gt;&gt; &#123;<br>    <br>    ...<br>        <br>    <span class="hljs-keyword">private</span> List&lt;HttpMessageConverter&lt;?&gt;&gt; partConverters = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <br>    ...<br>        <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addPartConverter</span><span class="hljs-params">(HttpMessageConverter&lt;?&gt; partConverter)</span> &#123;<br>Assert.notNull(partConverter, <span class="hljs-string">&quot;&#x27;partConverter&#x27; must not be null&quot;</span>);<br><span class="hljs-built_in">this</span>.partConverters.add(partConverter);<br>&#125;<br>    <br>    ...<br></code></pre></td></tr></table></figure><p>在<code>AllEncompassingFormHttpMessageConverter</code>类构造器看到<code>MappingJackson2HttpMessageConverter</code>类的实例化，<code>AllEncompassingFormHttpMessageConverter</code><strong>包含</strong><code>MappingJackson2HttpMessageConverter</code>。</p><p><code>ReturnValueHandler</code>是怎么与<code>MappingJackson2HttpMessageConverter</code>关联起来？请看下节。</p><h3 id="ReturnValueHandler与MappingJackson2HttpMessageConverter关联"><a href="#ReturnValueHandler与MappingJackson2HttpMessageConverter关联" class="headerlink" title="ReturnValueHandler与MappingJackson2HttpMessageConverter关联"></a>ReturnValueHandler与MappingJackson2HttpMessageConverter关联</h3><p>再次回顾<code>RequestMappingHandlerAdapter</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestMappingHandlerAdapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractHandlerMethodAdapter</span><br><span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanFactoryAware</span>, InitializingBean &#123;<br>    <br>    ...<br>    <span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">private</span> HandlerMethodReturnValueHandlerComposite returnValueHandlers;<span class="hljs-comment">//我们关注的returnValueHandlers</span><br>    <br>   <br>    <span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Nullable</span><span class="hljs-comment">//本方法在AbstractHandlerMethodAdapter</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> ModelAndView <span class="hljs-title function_">handle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span><br><span class="hljs-keyword">throws</span> Exception &#123;<br><br><span class="hljs-keyword">return</span> handleInternal(request, response, (HandlerMethod) handler);<br>&#125;<br>        <br>    <span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> ModelAndView <span class="hljs-title function_">handleInternal</span><span class="hljs-params">(HttpServletRequest request,</span><br><span class="hljs-params">HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>ModelAndView mav;<br>        ...<br>        mav = invokeHandlerMethod(request, response, handlerMethod);<br>        ...<br><span class="hljs-keyword">return</span> mav;<br>&#125;<br>    <br>    <span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">protected</span> ModelAndView <span class="hljs-title function_">invokeHandlerMethod</span><span class="hljs-params">(HttpServletRequest request,</span><br><span class="hljs-params">HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br><span class="hljs-type">ServletWebRequest</span> <span class="hljs-variable">webRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletWebRequest</span>(request, response);<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">WebDataBinderFactory</span> <span class="hljs-variable">binderFactory</span> <span class="hljs-operator">=</span> getDataBinderFactory(handlerMethod);<br><span class="hljs-type">ModelFactory</span> <span class="hljs-variable">modelFactory</span> <span class="hljs-operator">=</span> getModelFactory(handlerMethod, binderFactory);<br><br><span class="hljs-type">ServletInvocableHandlerMethod</span> <span class="hljs-variable">invocableMethod</span> <span class="hljs-operator">=</span> createInvocableHandlerMethod(handlerMethod);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.argumentResolvers != <span class="hljs-literal">null</span>) &#123;<br>invocableMethod.setHandlerMethodArgumentResolvers(<span class="hljs-built_in">this</span>.argumentResolvers);<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.returnValueHandlers != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//&lt;---我们关注的returnValueHandlers</span><br>invocableMethod.setHandlerMethodReturnValueHandlers(<span class="hljs-built_in">this</span>.returnValueHandlers);<br>&#125;<br>            <br>            ...<br>            <br>invocableMethod.invokeAndHandle(webRequest, mavContainer);<br><span class="hljs-keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-keyword">return</span> getModelAndView(mavContainer, modelFactory, webRequest);<br>&#125;<br><span class="hljs-keyword">finally</span> &#123;<br>webRequest.requestCompleted();<br>&#125;<br>&#125;<br>    <br>   <span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterPropertiesSet</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// Do this first, it may add ResponseBody advice beans</span><br><br>        ...<br>        <br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.returnValueHandlers == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//赋值returnValueHandlers</span><br>List&lt;HandlerMethodReturnValueHandler&gt; handlers = getDefaultReturnValueHandlers();<br><span class="hljs-built_in">this</span>.returnValueHandlers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HandlerMethodReturnValueHandlerComposite</span>().addHandlers(handlers);<br>&#125;<br>&#125;<br>    <br>    <span class="hljs-keyword">private</span> List&lt;HandlerMethodReturnValueHandler&gt; <span class="hljs-title function_">getDefaultReturnValueHandlers</span><span class="hljs-params">()</span> &#123;<br>List&lt;HandlerMethodReturnValueHandler&gt; handlers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(<span class="hljs-number">20</span>);<br><br>...<br><span class="hljs-comment">// Annotation-based return value types</span><br>        <span class="hljs-comment">//这里就是 ReturnValueHandler与 MappingJackson2HttpMessageConverter关联 的关键点</span><br>handlers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestResponseBodyMethodProcessor</span>(getMessageConverters(),<span class="hljs-comment">//&lt;---MessageConverters也就传参传进来的</span><br><span class="hljs-built_in">this</span>.contentNegotiationManager, <span class="hljs-built_in">this</span>.requestResponseBodyAdvice));<span class="hljs-comment">//</span><br>        ...<br><br><span class="hljs-keyword">return</span> handlers;<br>&#125;<br>    <br>    <span class="hljs-comment">//------</span><br>    <br>    <span class="hljs-keyword">public</span> List&lt;HttpMessageConverter&lt;?&gt;&gt; getMessageConverters() &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.messageConverters;<br>&#125;<br>    <br>    <span class="hljs-comment">//RequestMappingHandlerAdapter构造器已初始化部分messageConverters</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">RequestMappingHandlerAdapter</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-built_in">this</span>.messageConverters = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(<span class="hljs-number">4</span>);<br><span class="hljs-built_in">this</span>.messageConverters.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayHttpMessageConverter</span>());<br><span class="hljs-built_in">this</span>.messageConverters.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringHttpMessageConverter</span>());<br><span class="hljs-keyword">if</span> (!shouldIgnoreXml) &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-built_in">this</span>.messageConverters.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SourceHttpMessageConverter</span>&lt;&gt;());<br>&#125;<br><span class="hljs-keyword">catch</span> (Error err) &#123;<br><span class="hljs-comment">// Ignore when no TransformerFactory implementation is available</span><br>&#125;<br>&#125;<br><span class="hljs-built_in">this</span>.messageConverters.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AllEncompassingFormHttpMessageConverter</span>());<br>&#125;<br><br>    ...<br>              <br>&#125;<br></code></pre></td></tr></table></figure><p>应用中<code>WebMvcAutoConfiguration</code>（底层是<code>WebMvcConfigurationSupport</code>实现）传入更多<code>messageConverters</code>，其中就包含<code>MappingJackson2HttpMessageConverter</code>。</p><h2 id="内容协商原理"><a href="#内容协商原理" class="headerlink" title="内容协商原理"></a>内容协商原理</h2><p>根据客户端接收能力不同，返回不同媒体类型的数据。</p><p>引入XML依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可用Postman软件分别测试返回json和xml：只需要改变请求头中Accept字段（application&#x2F;json、application&#x2F;xml）。</p><p>Http协议中规定的，Accept字段告诉服务器本客户端可以接收的数据类型。</p><p><strong>内容协商原理</strong>：</p><ol><li>判断当前响应头中是否已经有确定的媒体类型<code>MediaType</code>。</li><li>获取客户端（PostMan、浏览器）支持接收的内容类型。（获取客户端Accept请求头字段application&#x2F;xml）（这一步在下一节有详细介绍）<ul><li><code>contentNegotiationManager</code> 内容协商管理器 默认使用基于请求头的策略</li><li><code>HeaderContentNegotiationStrategy</code> 确定客户端可以接收的内容类型</li></ul></li><li>遍历循环所有当前系统的 <code>MessageConverter</code>，看谁支持操作这个对象（Person）</li><li>找到支持操作Person的converter，把converter支持的媒体类型统计出来。</li><li>客户端需要application&#x2F;xml，服务端有10种MediaType。</li><li>进行内容协商的最佳匹配媒体类型</li><li>用 支持 将对象转为 最佳匹配媒体类型 的converter。调用它进行转化 。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//RequestResponseBodyMethodProcessor继承这类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractMessageConverterMethodProcessor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractMessageConverterMethodArgumentResolver</span><br><span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerMethodReturnValueHandler</span> &#123;<br><br>    ...<br>    <br>    <span class="hljs-comment">//跟上一节的代码一致</span><br>    <span class="hljs-keyword">protected</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeWithMessageConverters</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> T value, MethodParameter returnType,</span><br><span class="hljs-params">                ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)</span><br>                <span class="hljs-keyword">throws</span> IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException &#123;<br><br>            Object body;<br>            Class&lt;?&gt; valueType;<br>            Type targetType;<br><br>            <span class="hljs-keyword">if</span> (value <span class="hljs-keyword">instanceof</span> CharSequence) &#123;<br>                body = value.toString();<br>                valueType = String.class;<br>                targetType = String.class;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                body = value;<br>                valueType = getReturnValueType(body, returnType);<br>                targetType = GenericTypeResolver.resolveType(getGenericType(returnType), returnType.getContainingClass());<br>            &#125;<br><br>...<br><br>            <span class="hljs-comment">//本节重点</span><br>            <span class="hljs-comment">//内容协商（浏览器默认会以请求头(参数Accept)的方式告诉服务器他能接受什么样的内容类型）</span><br>            <span class="hljs-type">MediaType</span> <span class="hljs-variable">selectedMediaType</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-type">MediaType</span> <span class="hljs-variable">contentType</span> <span class="hljs-operator">=</span> outputMessage.getHeaders().getContentType();<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">isContentTypePreset</span> <span class="hljs-operator">=</span> contentType != <span class="hljs-literal">null</span> &amp;&amp; contentType.isConcrete();<br>            <span class="hljs-keyword">if</span> (isContentTypePreset) &#123;<br>                <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>                    logger.debug(<span class="hljs-string">&quot;Found &#x27;Content-Type:&quot;</span> + contentType + <span class="hljs-string">&quot;&#x27; in response&quot;</span>);<br>                &#125;<br>                selectedMediaType = contentType;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> inputMessage.getServletRequest();<br>                List&lt;MediaType&gt; acceptableTypes = getAcceptableMediaTypes(request);<br>                <span class="hljs-comment">//服务器最终根据自己自身的能力，决定服务器能生产出什么样内容类型的数据</span><br>                List&lt;MediaType&gt; producibleTypes = getProducibleMediaTypes(request, valueType, targetType);<br><br>                <span class="hljs-keyword">if</span> (body != <span class="hljs-literal">null</span> &amp;&amp; producibleTypes.isEmpty()) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpMessageNotWritableException</span>(<br>                            <span class="hljs-string">&quot;No converter found for return value of type: &quot;</span> + valueType);<br>                &#125;<br>                List&lt;MediaType&gt; mediaTypesToUse = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>                <span class="hljs-keyword">for</span> (MediaType requestedType : acceptableTypes) &#123;<br>                    <span class="hljs-keyword">for</span> (MediaType producibleType : producibleTypes) &#123;<br>                        <span class="hljs-keyword">if</span> (requestedType.isCompatibleWith(producibleType)) &#123;<br>                            mediaTypesToUse.add(getMostSpecificMediaType(requestedType, producibleType));<br>                        &#125;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (mediaTypesToUse.isEmpty()) &#123;<br>                    <span class="hljs-keyword">if</span> (body != <span class="hljs-literal">null</span>) &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpMediaTypeNotAcceptableException</span>(producibleTypes);<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>                        logger.debug(<span class="hljs-string">&quot;No match for &quot;</span> + acceptableTypes + <span class="hljs-string">&quot;, supported: &quot;</span> + producibleTypes);<br>                    &#125;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br><br>                MediaType.sortBySpecificityAndQuality(mediaTypesToUse);<br><br>                <span class="hljs-comment">//选择一个MediaType</span><br>                <span class="hljs-keyword">for</span> (MediaType mediaType : mediaTypesToUse) &#123;<br>                    <span class="hljs-keyword">if</span> (mediaType.isConcrete()) &#123;<br>                        selectedMediaType = mediaType;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mediaType.isPresentIn(ALL_APPLICATION_MEDIA_TYPES)) &#123;<br>                        selectedMediaType = MediaType.APPLICATION_OCTET_STREAM;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>                    logger.debug(<span class="hljs-string">&quot;Using &#x27;&quot;</span> + selectedMediaType + <span class="hljs-string">&quot;&#x27;, given &quot;</span> +<br>                            acceptableTypes + <span class="hljs-string">&quot; and supported &quot;</span> + producibleTypes);<br>                &#125;<br>            &#125;<br><br>        <br>            <span class="hljs-keyword">if</span> (selectedMediaType != <span class="hljs-literal">null</span>) &#123;<br>                selectedMediaType = selectedMediaType.removeQualityValue();<br>                <span class="hljs-comment">//本节主角：HttpMessageConverter</span><br>                <span class="hljs-keyword">for</span> (HttpMessageConverter&lt;?&gt; converter : <span class="hljs-built_in">this</span>.messageConverters) &#123;<br>                    <span class="hljs-type">GenericHttpMessageConverter</span> <span class="hljs-variable">genericConverter</span> <span class="hljs-operator">=</span> (converter <span class="hljs-keyword">instanceof</span> GenericHttpMessageConverter ?<br>                            (GenericHttpMessageConverter&lt;?&gt;) converter : <span class="hljs-literal">null</span>);<br>                    <br>                    <span class="hljs-comment">//判断是否可写</span><br>                    <span class="hljs-keyword">if</span> (genericConverter != <span class="hljs-literal">null</span> ?<br>                            ((GenericHttpMessageConverter) converter).canWrite(targetType, valueType, selectedMediaType) :<br>                            converter.canWrite(valueType, selectedMediaType)) &#123;<br>                        body = getAdvice().beforeBodyWrite(body, returnType, selectedMediaType,<br>                                (Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpMessageConverter</span>&lt;?&gt;&gt;) converter.getClass(),<br>                                inputMessage, outputMessage);<br>                        <span class="hljs-keyword">if</span> (body != <span class="hljs-literal">null</span>) &#123;<br>                            <span class="hljs-type">Object</span> <span class="hljs-variable">theBody</span> <span class="hljs-operator">=</span> body;<br>                            LogFormatUtils.traceDebug(logger, traceOn -&gt;<br>                                    <span class="hljs-string">&quot;Writing [&quot;</span> + LogFormatUtils.formatValue(theBody, !traceOn) + <span class="hljs-string">&quot;]&quot;</span>);<br>                            addContentDispositionHeader(inputMessage, outputMessage);<br><span class="hljs-comment">//开始写入</span><br>                            <span class="hljs-keyword">if</span> (genericConverter != <span class="hljs-literal">null</span>) &#123;<br>                                genericConverter.write(body, targetType, selectedMediaType, outputMessage);<br>                            &#125;<br>                            <span class="hljs-keyword">else</span> &#123;<br>                                ((HttpMessageConverter) converter).write(body, selectedMediaType, outputMessage);<br>                            &#125;<br>                        &#125;<br>                        <span class="hljs-keyword">else</span> &#123;<br>                            <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>                                logger.debug(<span class="hljs-string">&quot;Nothing to write: null body&quot;</span>);<br>                            &#125;<br>                        &#125;<br>                        <span class="hljs-keyword">return</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>...<br>        &#125;<br></code></pre></td></tr></table></figure><h2 id="基于请求参数的内容协商原理"><a href="#基于请求参数的内容协商原理" class="headerlink" title="基于请求参数的内容协商原理"></a>基于请求参数的内容协商原理</h2><p>上一节内容协商原理的第二步：</p><p>获取客户端（PostMan、浏览器）支持接收的内容类型。（获取客户端Accept请求头字段application&#x2F;xml）</p><ul><li><code>contentNegotiationManager</code> 内容协商管理器 默认使用基于请求头的策略</li><li><code>HeaderContentNegotiationStrategy</code> 确定客户端可以接收的内容类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//RequestResponseBodyMethodProcessor继承这类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractMessageConverterMethodProcessor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractMessageConverterMethodArgumentResolver</span><br><span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerMethodReturnValueHandler</span> &#123;<br><br>    ...<br>    <br>    <span class="hljs-comment">//跟上一节的代码一致</span><br>    <span class="hljs-keyword">protected</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeWithMessageConverters</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> T value, MethodParameter returnType,</span><br><span class="hljs-params">                ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)</span><br>                <span class="hljs-keyword">throws</span> IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException &#123;<br><br>            Object body;<br>            Class&lt;?&gt; valueType;<br>            Type targetType;<br>        <br>        ...<br>        <br>                    <span class="hljs-comment">//本节重点</span><br>            <span class="hljs-comment">//内容协商（浏览器默认会以请求头(参数Accept)的方式告诉服务器他能接受什么样的内容类型）</span><br>            <span class="hljs-type">MediaType</span> <span class="hljs-variable">selectedMediaType</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-type">MediaType</span> <span class="hljs-variable">contentType</span> <span class="hljs-operator">=</span> outputMessage.getHeaders().getContentType();<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">isContentTypePreset</span> <span class="hljs-operator">=</span> contentType != <span class="hljs-literal">null</span> &amp;&amp; contentType.isConcrete();<br>            <span class="hljs-keyword">if</span> (isContentTypePreset) &#123;<br>                <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>                    logger.debug(<span class="hljs-string">&quot;Found &#x27;Content-Type:&quot;</span> + contentType + <span class="hljs-string">&quot;&#x27; in response&quot;</span>);<br>                &#125;<br>                selectedMediaType = contentType;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> inputMessage.getServletRequest();<br>                List&lt;MediaType&gt; acceptableTypes = getAcceptableMediaTypes(request);<br>                <span class="hljs-comment">//服务器最终根据自己自身的能力，决定服务器能生产出什么样内容类型的数据</span><br>                List&lt;MediaType&gt; producibleTypes = getProducibleMediaTypes(request, valueType, targetType);<br>            ...<br>            <br>&#125;<br>    <br>    <span class="hljs-comment">//在AbstractMessageConverterMethodArgumentResolver类内</span><br>   <span class="hljs-keyword">private</span> List&lt;MediaType&gt; <span class="hljs-title function_">getAcceptableMediaTypes</span><span class="hljs-params">(HttpServletRequest request)</span><br><span class="hljs-keyword">throws</span> HttpMediaTypeNotAcceptableException &#123;<br><br>        <span class="hljs-comment">//内容协商管理器 默认使用基于请求头的策略</span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.contentNegotiationManager.resolveMediaTypes(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletWebRequest</span>(request));<br>&#125;<br>        <br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ContentNegotiationManager</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ContentNegotiationStrategy</span>, MediaTypeFileExtensionResolver &#123;<br><br>    ...<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ContentNegotiationManager</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-built_in">this</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HeaderContentNegotiationStrategy</span>());<span class="hljs-comment">//内容协商管理器 默认使用基于请求头的策略</span><br>&#125;<br>    <br>    <span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;MediaType&gt; <span class="hljs-title function_">resolveMediaTypes</span><span class="hljs-params">(NativeWebRequest request)</span> <span class="hljs-keyword">throws</span> HttpMediaTypeNotAcceptableException &#123;<br><span class="hljs-keyword">for</span> (ContentNegotiationStrategy strategy : <span class="hljs-built_in">this</span>.strategies) &#123;<br>List&lt;MediaType&gt; mediaTypes = strategy.resolveMediaTypes(request);<br><span class="hljs-keyword">if</span> (mediaTypes.equals(MEDIA_TYPE_ALL_LIST)) &#123;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-keyword">return</span> mediaTypes;<br>&#125;<br><span class="hljs-keyword">return</span> MEDIA_TYPE_ALL_LIST;<br>&#125;<br>    ...<br>    <br>&#125;<br><span class="hljs-comment">//基于请求头的策略</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HeaderContentNegotiationStrategy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ContentNegotiationStrategy</span> &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@inheritDoc</span>&#125;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> HttpMediaTypeNotAcceptableException if the &#x27;Accept&#x27; header cannot be parsed</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;MediaType&gt; <span class="hljs-title function_">resolveMediaTypes</span><span class="hljs-params">(NativeWebRequest request)</span><br><span class="hljs-keyword">throws</span> HttpMediaTypeNotAcceptableException &#123;<br><br>String[] headerValueArray = request.getHeaderValues(HttpHeaders.ACCEPT);<br><span class="hljs-keyword">if</span> (headerValueArray == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">return</span> MEDIA_TYPE_ALL_LIST;<br>&#125;<br><br>List&lt;String&gt; headerValues = Arrays.asList(headerValueArray);<br><span class="hljs-keyword">try</span> &#123;<br>List&lt;MediaType&gt; mediaTypes = MediaType.parseMediaTypes(headerValues);<br>MediaType.sortBySpecificityAndQuality(mediaTypes);<br><span class="hljs-keyword">return</span> !CollectionUtils.isEmpty(mediaTypes) ? mediaTypes : MEDIA_TYPE_ALL_LIST;<br>&#125;<br><span class="hljs-keyword">catch</span> (InvalidMediaTypeException ex) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpMediaTypeNotAcceptableException</span>(<br><span class="hljs-string">&quot;Could not parse &#x27;Accept&#x27; header &quot;</span> + headerValues + <span class="hljs-string">&quot;: &quot;</span> + ex.getMessage());<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="开启浏览器参数方式内容协商功能"><a href="#开启浏览器参数方式内容协商功能" class="headerlink" title="开启浏览器参数方式内容协商功能"></a>开启浏览器参数方式内容协商功能</h3><p>为了方便内容协商，开启基于请求参数的内容协商功能。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">mvc:</span><br>    <span class="hljs-attr">contentnegotiation:</span><br>      <span class="hljs-attr">favor-parameter:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment">#开启请求参数内容协商模式</span><br></code></pre></td></tr></table></figure><p>内容协商管理器，就会多了一个<code>ParameterContentNegotiationStrategy</code>（由Spring容器注入）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ParameterContentNegotiationStrategy</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractMappingContentNegotiationStrategy</span> &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">parameterName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;format&quot;</span>;<span class="hljs-comment">//</span><br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Create an instance with the given map of file extensions and media types.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ParameterContentNegotiationStrategy</span><span class="hljs-params">(Map&lt;String, MediaType&gt; mediaTypes)</span> &#123;<br><span class="hljs-built_in">super</span>(mediaTypes);<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Set the name of the parameter to use to determine requested media types.</span><br><span class="hljs-comment"> * &lt;p&gt;By default this is set to &#123;<span class="hljs-doctag">@code</span> &quot;format&quot;&#125;.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setParameterName</span><span class="hljs-params">(String parameterName)</span> &#123;<br>Assert.notNull(parameterName, <span class="hljs-string">&quot;&#x27;parameterName&#x27; is required&quot;</span>);<br><span class="hljs-built_in">this</span>.parameterName = parameterName;<br>&#125;<br><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getParameterName</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.parameterName;<br>&#125;<br><br><br><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">protected</span> String <span class="hljs-title function_">getMediaTypeKey</span><span class="hljs-params">(NativeWebRequest request)</span> &#123;<br><span class="hljs-keyword">return</span> request.getParameter(getParameterName());<br>&#125;<br>    <br>    <span class="hljs-comment">//---以下方法在AbstractMappingContentNegotiationStrategy类</span><br>    <br>    <span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;MediaType&gt; <span class="hljs-title function_">resolveMediaTypes</span><span class="hljs-params">(NativeWebRequest webRequest)</span><br><span class="hljs-keyword">throws</span> HttpMediaTypeNotAcceptableException &#123;<br><br><span class="hljs-keyword">return</span> resolveMediaTypeKey(webRequest, getMediaTypeKey(webRequest));<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * An alternative to &#123;<span class="hljs-doctag">@link</span> #resolveMediaTypes(NativeWebRequest)&#125; that accepts</span><br><span class="hljs-comment"> * an already extracted key.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 3.2.16</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> List&lt;MediaType&gt; <span class="hljs-title function_">resolveMediaTypeKey</span><span class="hljs-params">(NativeWebRequest webRequest, <span class="hljs-meta">@Nullable</span> String key)</span><br><span class="hljs-keyword">throws</span> HttpMediaTypeNotAcceptableException &#123;<br><br><span class="hljs-keyword">if</span> (StringUtils.hasText(key)) &#123;<br><span class="hljs-type">MediaType</span> <span class="hljs-variable">mediaType</span> <span class="hljs-operator">=</span> lookupMediaType(key);<br><span class="hljs-keyword">if</span> (mediaType != <span class="hljs-literal">null</span>) &#123;<br>handleMatch(key, mediaType);<br><span class="hljs-keyword">return</span> Collections.singletonList(mediaType);<br>&#125;<br>mediaType = handleNoMatch(webRequest, key);<br><span class="hljs-keyword">if</span> (mediaType != <span class="hljs-literal">null</span>) &#123;<br>addMapping(key, mediaType);<br><span class="hljs-keyword">return</span> Collections.singletonList(mediaType);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> MEDIA_TYPE_ALL_LIST;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后，浏览器地址输入带format参数的URL：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/test/</span>person?format=json<br>或<br>http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/test/</span>person?format=xml<br></code></pre></td></tr></table></figure><p>这样，后端会根据参数format的值，返回对应json或xml格式的数据。</p><h2 id="自定义MessageConverter"><a href="#自定义MessageConverter" class="headerlink" title="自定义MessageConverter"></a>自定义MessageConverter</h2><p><strong>实现多协议数据兼容。json、xml、x-guigu</strong>（这个是自创的）</p><ol><li><code>@ResponseBody</code> 响应数据出去 调用 <code>RequestResponseBodyMethodProcessor</code> 处理</li><li>Processor 处理方法返回值。通过 <code>MessageConverter</code>处理</li><li>所有 <code>MessageConverter</code> 合起来可以支持各种媒体类型数据的操作（读、写）</li><li>内容协商找到最终的 <code>messageConverter</code></li></ol><p>SpringMVC的什么功能，一个入口给容器中添加一个 <code>WebMvcConfigurer</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> WebMvcConfigurer <span class="hljs-title function_">webMvcConfigurer</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebMvcConfigurer</span>() &#123;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">extendMessageConverters</span><span class="hljs-params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;<br>                converters.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GuiguMessageConverter</span>());<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义的Converter</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GuiguMessageConverter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HttpMessageConverter</span>&lt;Person&gt; &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">canRead</span><span class="hljs-params">(Class&lt;?&gt; clazz, MediaType mediaType)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">canWrite</span><span class="hljs-params">(Class&lt;?&gt; clazz, MediaType mediaType)</span> &#123;<br>        <span class="hljs-keyword">return</span> clazz.isAssignableFrom(Person.class);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 服务器要统计所有MessageConverter都能写出哪些内容类型</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * application/x-guigu</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;MediaType&gt; <span class="hljs-title function_">getSupportedMediaTypes</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> MediaType.parseMediaTypes(<span class="hljs-string">&quot;application/x-guigu&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Person <span class="hljs-title function_">read</span><span class="hljs-params">(Class&lt;? extends Person&gt; clazz, HttpInputMessage inputMessage)</span> <span class="hljs-keyword">throws</span> IOException, HttpMessageNotReadableException &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(Person person, MediaType contentType, HttpOutputMessage outputMessage)</span> <span class="hljs-keyword">throws</span> IOException, HttpMessageNotWritableException &#123;<br>        <span class="hljs-comment">//自定义协议数据的写出</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> person.getUserName()+<span class="hljs-string">&quot;;&quot;</span>+person.getAge()+<span class="hljs-string">&quot;;&quot;</span>+person.getBirth();<br><br><br>        <span class="hljs-comment">//写出去</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> outputMessage.getBody();<br>        body.write(data.getBytes());<br>    &#125;<br>&#125;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResponseTestController</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 1、浏览器发请求直接返回 xml    [application/xml]        jacksonXmlConverter</span><br><span class="hljs-comment">     * 2、如果是ajax请求 返回 json   [application/json]      jacksonJsonConverter</span><br><span class="hljs-comment">     * 3、如果硅谷app发请求，返回自定义协议数据  [appliaction/x-guigu]   xxxxConverter</span><br><span class="hljs-comment">     *          属性值1;属性值2;</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 步骤：</span><br><span class="hljs-comment">     * 1、添加自定义的MessageConverter进系统底层</span><br><span class="hljs-comment">     * 2、系统底层就会统计出所有MessageConverter能操作哪些类型</span><br><span class="hljs-comment">     * 3、客户端内容协商 [guigu---&gt;guigu]</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 作业：如何以参数的方式进行内容协商</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ResponseBody</span>  <span class="hljs-comment">//利用返回值处理器里面的消息转换器进行处理</span><br>    <span class="hljs-meta">@GetMapping(value = &quot;/test/person&quot;)</span><br>    <span class="hljs-keyword">public</span> Person <span class="hljs-title function_">getPerson</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        person.setAge(<span class="hljs-number">28</span>);<br>        person.setBirth(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        person.setUserName(<span class="hljs-string">&quot;zhangsan&quot;</span>);<br>        <span class="hljs-keyword">return</span> person;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>用Postman发送<code>/test/person</code>（请求头<code>Accept:application/x-guigu</code>)，将返回自定义协议数据的写出。</p><h2 id="浏览器与PostMan内容协商完全适配"><a href="#浏览器与PostMan内容协商完全适配" class="headerlink" title="浏览器与PostMan内容协商完全适配"></a>浏览器与PostMan内容协商完全适配</h2><p>假设你想基于自定义请求参数的自定义内容协商功能。</p><p>换句话，在地址栏输入<code>http://localhost:8080/test/person?format=gg</code>返回数据，跟<code>http://localhost:8080/test/person</code>且请求头参数<code>Accept:application/x-guigu</code>的返回自定义协议数据的一致。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebConfig</span> <span class="hljs-comment">/*implements WebMvcConfigurer*/</span> &#123;<br><br>    <span class="hljs-comment">//1、WebMvcConfigurer定制化SpringMVC的功能</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> WebMvcConfigurer <span class="hljs-title function_">webMvcConfigurer</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebMvcConfigurer</span>() &#123;<br><br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * 自定义内容协商策略</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> configurer</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configureContentNegotiation</span><span class="hljs-params">(ContentNegotiationConfigurer configurer)</span> &#123;<br>                <span class="hljs-comment">//Map&lt;String, MediaType&gt; mediaTypes</span><br>                Map&lt;String, MediaType&gt; mediaTypes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>                mediaTypes.put(<span class="hljs-string">&quot;json&quot;</span>,MediaType.APPLICATION_JSON);<br>                mediaTypes.put(<span class="hljs-string">&quot;xml&quot;</span>,MediaType.APPLICATION_XML);<br>                <span class="hljs-comment">//自定义媒体类型</span><br>                mediaTypes.put(<span class="hljs-string">&quot;gg&quot;</span>,MediaType.parseMediaType(<span class="hljs-string">&quot;application/x-guigu&quot;</span>));<br>                <span class="hljs-comment">//指定支持解析哪些参数对应的哪些媒体类型</span><br>                <span class="hljs-type">ParameterContentNegotiationStrategy</span> <span class="hljs-variable">parameterStrategy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ParameterContentNegotiationStrategy</span>(mediaTypes);<br><span class="hljs-comment">//                parameterStrategy.setParameterName(&quot;ff&quot;);</span><br><br>                <span class="hljs-comment">//还需添加请求头处理策略，否则accept:application/json、application/xml则会失效</span><br>                <span class="hljs-type">HeaderContentNegotiationStrategy</span> <span class="hljs-variable">headeStrategy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeaderContentNegotiationStrategy</span>();<br><br>                configurer.strategies(Arrays.asList(parameterStrategy, headeStrategy));<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>日后开发要注意，<strong>有可能我们添加的自定义的功能会覆盖默认很多功能，导致一些默认的功能失效。</strong></p>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot学习笔记(2)</title>
    <link href="/2022/06/05/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(2)/"/>
    <url>/2022/06/05/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(2)/</url>
    
    <content type="html"><![CDATA[<h2 id="web开发简介"><a href="#web开发简介" class="headerlink" title="web开发简介"></a>web开发简介</h2><p>Spring Boot provides auto-configuration for Spring MVC that <strong>works well with most applications.(大多场景我们都无需自定义配置)</strong></p><p>The auto-configuration adds the following features on top of Spring’s defaults:</p><ul><li>Inclusion of <code>ContentNegotiatingViewResolver</code> and <code>BeanNameViewResolver</code> beans.<ul><li>内容协商视图解析器和BeanName视图解析器</li></ul></li><li>Support for serving static resources, including support for WebJars (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-static-content">later in this document</a>)).<ul><li>静态资源（包括webjars）</li></ul></li><li>Automatic registration of <code>Converter</code>, <code>GenericConverter</code>, and <code>Formatter</code> beans.<ul><li>自动注册 <code>Converter，GenericConverter，Formatter</code></li></ul></li><li>Support for <code>HttpMessageConverters</code> (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-message-converters">later in this document</a>).<ul><li>支持 <code>HttpMessageConverters</code> （后来我们配合内容协商理解原理）</li></ul></li><li>Automatic registration of <code>MessageCodesResolver</code> (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-message-codes">later in this document</a>).<ul><li>自动注册 <code>MessageCodesResolver</code> （国际化用）</li></ul></li><li>Static <code>index.html</code> support.<ul><li>静态index.html 页支持</li></ul></li><li>Custom <code>Favicon</code> support (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-favicon">later in this document</a>).<ul><li>自定义 <code>Favicon</code></li></ul></li><li>Automatic use of a <code>ConfigurableWebBindingInitializer</code> bean (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-web-binding-initializer">later in this document</a>).<ul><li>自动使用 <code>ConfigurableWebBindingInitializer</code> ，（DataBinder负责将请求数据绑定到JavaBean上）</li></ul></li></ul><blockquote><p>If you want to keep those Spring Boot MVC customizations and make more <a href="https://docs.spring.io/spring/docs/5.2.9.RELEASE/spring-framework-reference/web.html#mvc">MVC customizations</a> (interceptors, formatters, view controllers, and other features), you can add your own <code>@Configuration</code> class of type <code>WebMvcConfigurer</code> but <strong>without</strong> <code>@EnableWebMvc</code>.</p><p><strong>不用@EnableWebMvc注解。使用</strong> <strong><code>@Configuration</code></strong> <strong>+</strong> <strong><code>WebMvcConfigurer</code></strong> <strong>自定义规则</strong></p></blockquote><blockquote><p>If you want to provide custom instances of <code>RequestMappingHandlerMapping</code>, <code>RequestMappingHandlerAdapter</code>, or <code>ExceptionHandlerExceptionResolver</code>, and still keep the Spring Boot MVC customizations, you can declare a bean of type <code>WebMvcRegistrations</code> and use it to provide custom instances of those components.</p><p><strong>声明</strong> <strong><code>WebMvcRegistrations</code></strong> <strong>改变默认底层组件</strong></p></blockquote><blockquote><p>If you want to take complete control of Spring MVC, you can add your own <code>@Configuration</code> annotated with <code>@EnableWebMvc</code>, or alternatively add your own <code>@Configuration</code>-annotated <code>DelegatingWebMvcConfiguration</code> as described in the Javadoc of <code>@EnableWebMvc</code>.</p><p><strong>使用</strong> <strong><code>@EnableWebMvc+@Configuration+DelegatingWebMvcConfiguration 全面接管SpringMVC</code></strong></p></blockquote><h2 id="静态资源规则与定制化"><a href="#静态资源规则与定制化" class="headerlink" title="静态资源规则与定制化"></a>静态资源规则与定制化</h2><h3 id="静态资源目录"><a href="#静态资源目录" class="headerlink" title="静态资源目录"></a>静态资源目录</h3><p>只要静态资源放在类路径下： called <code>/static</code> (or <code>/public</code> or <code>/resources</code> or <code>/META-INF/resources</code></p><p>访问 ： 当前项目根路径&#x2F; + 静态资源名</p><p>原理： 静态映射&#x2F;**。</p><p>请求进来，先去找Controller看能不能处理。不能处理的所有请求又都交给静态资源处理器。静态资源也找不到则响应404页面。</p><p>也可以改变默认的静态资源路径，<code>/static</code>，<code>/public</code>,<code>/resources</code>, <code>/META-INF/resources</code>失效</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">resources:</span><br>  <span class="hljs-attr">static-locations:</span> [<span class="hljs-string">classpath:/haha/</span>]<br></code></pre></td></tr></table></figure><h3 id="静态资源访问前缀"><a href="#静态资源访问前缀" class="headerlink" title="静态资源访问前缀"></a>静态资源访问前缀</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">mvc:</span><br>    <span class="hljs-attr">static-path-pattern:</span> <span class="hljs-string">/res/**</span><br></code></pre></td></tr></table></figure><p>当前项目 + static-path-pattern + 静态资源名 &#x3D; 静态资源文件夹下找</p><h3 id="webjar"><a href="#webjar" class="headerlink" title="webjar"></a>webjar</h3><p>可用jar方式添加css，js等资源文件，</p><p><a href="https://www.webjars.org/">https://www.webjars.org/</a></p><p>例如，添加jquery</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.webjars<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jquery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>访问地址：<a href="http://localhost:8080/webjars/jquery/3.5.1/jquery.js">http://localhost:8080/webjars/<strong>jquery&#x2F;3.5.1&#x2F;jquery.js</strong></a> 后面地址要按照依赖里面的包路径。</p><h2 id="welcome与favicon功能"><a href="#welcome与favicon功能" class="headerlink" title="welcome与favicon功能"></a>welcome与favicon功能</h2><p><a href="https://docs.spring.io/spring-boot/docs/2.3.8.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-welcome-page">官方文档</a></p><h3 id="欢迎页支持"><a href="#欢迎页支持" class="headerlink" title="欢迎页支持"></a>欢迎页支持</h3><ul><li>静态资源路径下 index.html。<ul><li>可以配置静态资源路径</li><li>但是不可以配置静态资源的访问前缀。否则导致 index.html不能被默认访问</li></ul></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br><span class="hljs-comment">#  mvc:</span><br><span class="hljs-comment">#    static-path-pattern: /res/**   这个会导致welcome page功能失效</span><br>  <span class="hljs-attr">resources:</span><br>    <span class="hljs-attr">static-locations:</span> [<span class="hljs-string">classpath:/haha/</span>]<br></code></pre></td></tr></table></figure><ul><li>controller能处理&#x2F;index。</li></ul><h3 id="自定义Favicon"><a href="#自定义Favicon" class="headerlink" title="自定义Favicon"></a>自定义Favicon</h3><p>指网页标签上的小图标。</p><p>favicon.ico 放在静态资源目录下即可。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br><span class="hljs-comment">#  mvc:</span><br><span class="hljs-comment">#    static-path-pattern: /res/**   这个会导致 Favicon 功能失效</span><br></code></pre></td></tr></table></figure><h2 id="静态资源原理"><a href="#静态资源原理" class="headerlink" title="静态资源原理"></a>静态资源原理</h2><ul><li>SpringBoot启动默认加载 xxxAutoConfiguration 类（自动配置类）</li><li>SpringMVC功能的自动配置类<code>WebMvcAutoConfiguration</code>，生效</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span><br><span class="hljs-meta">@ConditionalOnClass(&#123; Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class &#125;)</span><br><span class="hljs-meta">@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</span><br><span class="hljs-meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)</span><br><span class="hljs-meta">@AutoConfigureAfter(&#123; DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class,</span><br><span class="hljs-meta">ValidationAutoConfiguration.class &#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMvcAutoConfiguration</span> &#123;&#125;<br></code></pre></td></tr></table></figure><ul><li>给容器中配置的内容：<ul><li>配置文件的相关属性的绑定：WebMvcProperties&#x3D;&#x3D;<strong>spring.mvc</strong>、ResourceProperties&#x3D;&#x3D;<strong>spring.resources</strong></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@Import(EnableWebMvcConfiguration.class)</span><br><span class="hljs-meta">@EnableConfigurationProperties(&#123; WebMvcProperties.class, ResourceProperties.class &#125;)</span><br><span class="hljs-meta">@Order(0)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMvcAutoConfigurationAdapter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;&#125;<br></code></pre></td></tr></table></figure><h3 id="配置类只有一个有参构造器"><a href="#配置类只有一个有参构造器" class="headerlink" title="配置类只有一个有参构造器"></a>配置类只有一个有参构造器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">有参构造器所有参数的值都会从容器中确定<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">WebMvcAutoConfigurationAdapter</span><span class="hljs-params">(WebProperties webProperties, WebMvcProperties mvcProperties,</span><br><span class="hljs-params">ListableBeanFactory beanFactory, ObjectProvider&lt;HttpMessageConverters&gt; messageConvertersProvider,</span><br><span class="hljs-params">ObjectProvider&lt;ResourceHandlerRegistrationCustomizer&gt; resourceHandlerRegistrationCustomizerProvider,</span><br><span class="hljs-params">ObjectProvider&lt;DispatcherServletPath&gt; dispatcherServletPath,</span><br><span class="hljs-params">ObjectProvider&lt;ServletRegistrationBean&lt;?&gt;&gt; servletRegistrations)</span> &#123;<br><span class="hljs-built_in">this</span>.mvcProperties = mvcProperties;<br><span class="hljs-built_in">this</span>.beanFactory = beanFactory;<br><span class="hljs-built_in">this</span>.messageConvertersProvider = messageConvertersProvider;<br><span class="hljs-built_in">this</span>.resourceHandlerRegistrationCustomizer = resourceHandlerRegistrationCustomizerProvider.getIfAvailable();<br><span class="hljs-built_in">this</span>.dispatcherServletPath = dispatcherServletPath;<br><span class="hljs-built_in">this</span>.servletRegistrations = servletRegistrations;<br><span class="hljs-built_in">this</span>.mvcProperties.checkConfiguration();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>ResourceProperties resourceProperties；获取和spring.resources绑定的所有的值的对象</li><li>WebMvcProperties mvcProperties 获取和spring.mvc绑定的所有的值的对象</li><li>ListableBeanFactory beanFactory Spring的beanFactory</li><li>HttpMessageConverters 找到所有的HttpMessageConverters</li><li>ResourceHandlerRegistrationCustomizer 找到 资源处理器的自定义器。</li><li>DispatcherServletPath</li><li>ServletRegistrationBean 给应用注册Servlet、Filter…</li></ul><h3 id="资源处理的默认规则"><a href="#资源处理的默认规则" class="headerlink" title="资源处理的默认规则"></a>资源处理的默认规则</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java">...<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMvcAutoConfiguration</span> &#123;<br>    ...<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EnableWebMvcConfiguration</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">DelegatingWebMvcConfiguration</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ResourceLoaderAware</span> &#123;<br>        ...<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> &#123;<br><span class="hljs-built_in">super</span>.addResourceHandlers(registry);<br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.resourceProperties.isAddMappings()) &#123;<br>logger.debug(<span class="hljs-string">&quot;Default resource handling disabled&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> getServletContext();<br>addResourceHandler(registry, <span class="hljs-string">&quot;/webjars/**&quot;</span>, <span class="hljs-string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);<br>addResourceHandler(registry, <span class="hljs-built_in">this</span>.mvcProperties.getStaticPathPattern(), (registration) -&gt; &#123;<br>registration.addResourceLocations(<span class="hljs-built_in">this</span>.resourceProperties.getStaticLocations());<br><span class="hljs-keyword">if</span> (servletContext != <span class="hljs-literal">null</span>) &#123;<br>registration.addResourceLocations(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletContextResource</span>(servletContext, SERVLET_LOCATION));<br>&#125;<br>&#125;);<br>&#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>根据上述代码，我们可以同过配置禁止所有静态资源规则。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">resources:</span><br>    <span class="hljs-attr">add-mappings:</span> <span class="hljs-literal">false</span>   <span class="hljs-comment">#禁用所有静态资源规则</span><br></code></pre></td></tr></table></figure><p>静态资源规则：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;spring.resources&quot;, ignoreUnknownFields = false)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResourceProperties</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS = &#123; <span class="hljs-string">&quot;classpath:/META-INF/resources/&quot;</span>,<br>            <span class="hljs-string">&quot;classpath:/resources/&quot;</span>, <span class="hljs-string">&quot;classpath:/static/&quot;</span>, <span class="hljs-string">&quot;classpath:/public/&quot;</span> &#125;;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Locations of static resources. Defaults to classpath:[/META-INF/resources/,</span><br><span class="hljs-comment">     * /resources/, /static/, /public/].</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String[] staticLocations = CLASSPATH_RESOURCE_LOCATIONS;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="欢迎页的处理规则"><a href="#欢迎页的处理规则" class="headerlink" title="欢迎页的处理规则"></a>欢迎页的处理规则</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">...<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMvcAutoConfiguration</span> &#123;<br>    ...<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EnableWebMvcConfiguration</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">DelegatingWebMvcConfiguration</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ResourceLoaderAware</span> &#123;<br>        ...<br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> WelcomePageHandlerMapping <span class="hljs-title function_">welcomePageHandlerMapping</span><span class="hljs-params">(ApplicationContext applicationContext,</span><br><span class="hljs-params">FormattingConversionService mvcConversionService, ResourceUrlProvider mvcResourceUrlProvider)</span> &#123;<br><span class="hljs-type">WelcomePageHandlerMapping</span> <span class="hljs-variable">welcomePageHandlerMapping</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WelcomePageHandlerMapping</span>(<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplateAvailabilityProviders</span>(applicationContext), applicationContext, getWelcomePage(),<br><span class="hljs-built_in">this</span>.mvcProperties.getStaticPathPattern());<br>welcomePageHandlerMapping.setInterceptors(getInterceptors(mvcConversionService, mvcResourceUrlProvider));<br>welcomePageHandlerMapping.setCorsConfigurations(getCorsConfigurations());<br><span class="hljs-keyword">return</span> welcomePageHandlerMapping;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>WelcomePageHandlerMapping</code>的构造方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">WelcomePageHandlerMapping(TemplateAvailabilityProviders templateAvailabilityProviders,<br>                          ApplicationContext applicationContext, Resource welcomePage, String staticPathPattern) &#123;<br>    <span class="hljs-keyword">if</span> (welcomePage != <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-string">&quot;/**&quot;</span>.equals(staticPathPattern)) &#123;<br>        <span class="hljs-comment">//要用欢迎页功能，必须是/**</span><br>        logger.info(<span class="hljs-string">&quot;Adding welcome page: &quot;</span> + welcomePage);<br>        setRootViewName(<span class="hljs-string">&quot;forward:index.html&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (welcomeTemplateExists(templateAvailabilityProviders, applicationContext)) &#123;<br>        <span class="hljs-comment">//调用Controller /index</span><br>        logger.info(<span class="hljs-string">&quot;Adding welcome page template: index&quot;</span>);<br>        setRootViewName(<span class="hljs-string">&quot;index&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这构造方法内的代码也解释了<a href="https://blog.csdn.net/u011863024/article/details/113667634#">web场景-welcome与favicon功能</a>中配置<code>static-path-pattern</code>了，welcome页面和小图标失效的问题。</p><h2 id="Rest映射及源码解析"><a href="#Rest映射及源码解析" class="headerlink" title="Rest映射及源码解析"></a>Rest映射及源码解析</h2><h3 id="请求映射"><a href="#请求映射" class="headerlink" title="请求映射"></a>请求映射</h3><ul><li>@xxxMapping;<ul><li>@GetMapping</li><li>@PostMapping</li><li>@PutMapping</li><li>@DeleteMapping</li></ul></li><li>Rest风格支持（使用<strong>HTTP</strong>请求方式动词来表示对资源的操作）<ul><li>以前：<ul><li>&#x2F;getUser 获取用户</li><li>&#x2F;deleteUser 删除用户</li><li>&#x2F;editUser 修改用户</li><li>&#x2F;saveUser保存用户</li></ul></li><li>现在： &#x2F;user<ul><li>GET-获取用户</li><li>DELETE-删除用户</li><li>PUT-修改用户</li><li>POST-保存用户</li></ul></li><li>核心Filter；HiddenHttpMethodFilter</li></ul></li><li><strong>用法</strong><ul><li>开启页面表单的Rest功能</li><li>页面 form的属性method&#x3D;post，隐藏域 _method&#x3D;put、delete等（如果直接get或post，无需隐藏域）</li><li>编写请求映射</li></ul></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">mvc:</span><br>    <span class="hljs-attr">hiddenmethod:</span><br>      <span class="hljs-attr">filter:</span><br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span>   <span class="hljs-comment">#开启页面表单的Rest功能</span><br><span class="hljs-number">12345</span><br><span class="hljs-string">&lt;form</span> <span class="hljs-string">action=&quot;/user&quot;</span> <span class="hljs-string">method=&quot;get&quot;&gt;</span><br>    <span class="hljs-string">&lt;input</span> <span class="hljs-string">value=&quot;REST-GET提交&quot;</span> <span class="hljs-string">type=&quot;submit&quot;</span> <span class="hljs-string">/&gt;</span><br><span class="hljs-string">&lt;/form&gt;</span><br><br><span class="hljs-string">&lt;form</span> <span class="hljs-string">action=&quot;/user&quot;</span> <span class="hljs-string">method=&quot;post&quot;&gt;</span><br>    <span class="hljs-string">&lt;input</span> <span class="hljs-string">value=&quot;REST-POST提交&quot;</span> <span class="hljs-string">type=&quot;submit&quot;</span> <span class="hljs-string">/&gt;</span><br><span class="hljs-string">&lt;/form&gt;</span><br><br><span class="hljs-string">&lt;form</span> <span class="hljs-string">action=&quot;/user&quot;</span> <span class="hljs-string">method=&quot;post&quot;&gt;</span><br>    <span class="hljs-string">&lt;input</span> <span class="hljs-string">name=&quot;_method&quot;</span> <span class="hljs-string">type=&quot;hidden&quot;</span> <span class="hljs-string">value=&quot;DELETE&quot;/&gt;</span><br>    <span class="hljs-string">&lt;input</span> <span class="hljs-string">value=&quot;REST-DELETE</span> <span class="hljs-string">提交&quot;</span> <span class="hljs-string">type=&quot;submit&quot;/&gt;</span><br><span class="hljs-string">&lt;/form&gt;</span><br><br><span class="hljs-string">&lt;form</span> <span class="hljs-string">action=&quot;/user&quot;</span> <span class="hljs-string">method=&quot;post&quot;&gt;</span><br>    <span class="hljs-string">&lt;input</span> <span class="hljs-string">name=&quot;_method&quot;</span> <span class="hljs-string">type=&quot;hidden&quot;</span> <span class="hljs-string">value=&quot;PUT&quot;</span> <span class="hljs-string">/&gt;</span><br>    <span class="hljs-string">&lt;input</span> <span class="hljs-string">value=&quot;REST-PUT提交&quot;type=&quot;submit&quot;</span> <span class="hljs-string">/&gt;</span><br><span class="hljs-string">&lt;form&gt;</span><br><span class="hljs-number">1234567891011121314151617</span><br><span class="hljs-string">@GetMapping(&quot;/user&quot;)</span><br><span class="hljs-string">//@RequestMapping(value</span> <span class="hljs-string">=</span> <span class="hljs-string">&quot;/user&quot;</span><span class="hljs-string">,method</span> <span class="hljs-string">=</span> <span class="hljs-string">RequestMethod.GET)</span><br><span class="hljs-string">public</span> <span class="hljs-string">String</span> <span class="hljs-string">getUser()&#123;</span><br>    <span class="hljs-string">return</span> <span class="hljs-string">&quot;GET-张三&quot;</span><span class="hljs-string">;</span><br><span class="hljs-string">&#125;</span><br><br><span class="hljs-string">@PostMapping(&quot;/user&quot;)</span><br><span class="hljs-string">//@RequestMapping(value</span> <span class="hljs-string">=</span> <span class="hljs-string">&quot;/user&quot;</span><span class="hljs-string">,method</span> <span class="hljs-string">=</span> <span class="hljs-string">RequestMethod.POST)</span><br><span class="hljs-string">public</span> <span class="hljs-string">String</span> <span class="hljs-string">saveUser()&#123;</span><br>    <span class="hljs-string">return</span> <span class="hljs-string">&quot;POST-张三&quot;</span><span class="hljs-string">;</span><br><span class="hljs-string">&#125;</span><br><br><span class="hljs-string">@PutMapping(&quot;/user&quot;)</span><br><span class="hljs-string">//@RequestMapping(value</span> <span class="hljs-string">=</span> <span class="hljs-string">&quot;/user&quot;</span><span class="hljs-string">,method</span> <span class="hljs-string">=</span> <span class="hljs-string">RequestMethod.PUT)</span><br><span class="hljs-string">public</span> <span class="hljs-string">String</span> <span class="hljs-string">putUser()&#123;</span><br>    <span class="hljs-string">return</span> <span class="hljs-string">&quot;PUT-张三&quot;</span><span class="hljs-string">;</span><br><span class="hljs-string">&#125;</span><br><br><span class="hljs-string">@DeleteMapping(&quot;/user&quot;)</span><br><span class="hljs-string">//@RequestMapping(value</span> <span class="hljs-string">=</span> <span class="hljs-string">&quot;/user&quot;</span><span class="hljs-string">,method</span> <span class="hljs-string">=</span> <span class="hljs-string">RequestMethod.DELETE)</span><br><span class="hljs-string">public</span> <span class="hljs-string">String</span> <span class="hljs-string">deleteUser()&#123;</span><br>    <span class="hljs-string">return</span> <span class="hljs-string">&quot;DELETE-张三&quot;</span><span class="hljs-string">;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><ul><li><p>Rest原理（表单提交要使用REST的时候）</p><ul><li><p>表单提交会带上<code>\_method=PUT</code></p></li><li><p>请求过来被</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">HiddenHttpMethodFilter</span><br></code></pre></td></tr></table></figure><p>拦截</p><ul><li>请求是否正常，并且是POST<ul><li>获取到<code>\_method</code>的值。</li><li>兼容以下请求；<strong>PUT</strong>.<strong>DELETE</strong>.<strong>PATCH</strong></li><li><strong>原生request（post），包装模式requesWrapper重写了getMethod方法，返回的是传入的值。</strong></li><li><strong>过滤器链放行的时候用wrapper。以后的方法调用getMethod是调用requesWrapper的。</strong></li></ul></li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HiddenHttpMethodFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">OncePerRequestFilter</span> &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> List&lt;String&gt; ALLOWED_METHODS =<br>Collections.unmodifiableList(Arrays.asList(HttpMethod.PUT.name(),<br>HttpMethod.DELETE.name(), HttpMethod.PATCH.name()));<br><br><span class="hljs-comment">/** Default method parameter: &#123;<span class="hljs-doctag">@code</span> _method&#125;. */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_METHOD_PARAM</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;_method&quot;</span>;<br><br><span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">methodParam</span> <span class="hljs-operator">=</span> DEFAULT_METHOD_PARAM;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Set the parameter name to look for HTTP methods.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> #DEFAULT_METHOD_PARAM</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMethodParam</span><span class="hljs-params">(String methodParam)</span> &#123;<br>Assert.hasText(methodParam, <span class="hljs-string">&quot;&#x27;methodParam&#x27; must not be empty&quot;</span>);<br><span class="hljs-built_in">this</span>.methodParam = methodParam;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilterInternal</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span><br><span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><br><span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">requestToUse</span> <span class="hljs-operator">=</span> request;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;POST&quot;</span>.equals(request.getMethod()) &amp;&amp; request.getAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE) == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">paramValue</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-built_in">this</span>.methodParam);<br><span class="hljs-keyword">if</span> (StringUtils.hasLength(paramValue)) &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> paramValue.toUpperCase(Locale.ENGLISH);<br><span class="hljs-keyword">if</span> (ALLOWED_METHODS.contains(method)) &#123;<br>requestToUse = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpMethodRequestWrapper</span>(request, method);<br>&#125;<br>&#125;<br>&#125;<br><br>filterChain.doFilter(requestToUse, response);<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Simple &#123;<span class="hljs-doctag">@link</span> HttpServletRequest&#125; wrapper that returns the supplied method for</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> HttpServletRequest#getMethod()&#125;.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HttpMethodRequestWrapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServletRequestWrapper</span> &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">HttpMethodRequestWrapper</span><span class="hljs-params">(HttpServletRequest request, String method)</span> &#123;<br><span class="hljs-built_in">super</span>(request);<br><span class="hljs-built_in">this</span>.method = method;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMethod</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.method;<br>&#125;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Rest使用客户端工具。<ul><li>如PostMan可直接发送put、delete等方式请求。</li></ul></li></ul><h2 id="怎么改变默认的-method"><a href="#怎么改变默认的-method" class="headerlink" title="怎么改变默认的_method"></a>怎么改变默认的_method</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span><br><span class="hljs-meta">@ConditionalOnClass(&#123; Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class &#125;)</span><br><span class="hljs-meta">@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</span><br><span class="hljs-meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)</span><br><span class="hljs-meta">@AutoConfigureAfter(&#123; DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class,</span><br><span class="hljs-meta">ValidationAutoConfiguration.class &#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMvcAutoConfiguration</span> &#123;<br><br>    ...<br>    <br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@ConditionalOnMissingBean(HiddenHttpMethodFilter.class)</span><br>    <span class="hljs-meta">@ConditionalOnProperty(prefix = &quot;spring.mvc.hiddenmethod.filter&quot;, name = &quot;enabled&quot;, matchIfMissing = false)</span><br>    <span class="hljs-keyword">public</span> OrderedHiddenHttpMethodFilter <span class="hljs-title function_">hiddenHttpMethodFilter</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderedHiddenHttpMethodFilter</span>();<br>    &#125;<br>    <br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p><code>@ConditionalOnMissingBean(HiddenHttpMethodFilter.class)</code>意味着在没有<code>HiddenHttpMethodFilter</code>时，才执行<code>hiddenHttpMethodFilter()</code>。因此，我们可以自定义filter，改变默认的<code>\_method</code>。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebConfig</span>&#123;<br>    <span class="hljs-comment">//自定义filter</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> HiddenHttpMethodFilter <span class="hljs-title function_">hiddenHttpMethodFilter</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">HiddenHttpMethodFilter</span> <span class="hljs-variable">methodFilter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HiddenHttpMethodFilter</span>();<br>        methodFilter.setMethodParam(<span class="hljs-string">&quot;_m&quot;</span>);<br>        <span class="hljs-keyword">return</span> methodFilter;<br>    &#125;    <br>&#125;<br></code></pre></td></tr></table></figure><p>将<code>\_method</code>改成<code>_m</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/user&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;_m&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;DELETE&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;REST-DELETE 提交&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>1234<br></code></pre></td></tr></table></figure><h2 id="请求映射原理"><a href="#请求映射原理" class="headerlink" title="请求映射原理"></a>请求映射原理</h2><p><img src="https://img-blog.csdnimg.cn/20210205005703527.png#pic_center" alt="在这里插入图片描述"><br>SpringMVC功能分析都从 <code>org.springframework.web.servlet.DispatcherServlet</code> -&gt; <code>doDispatch()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doDispatch</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">processedRequest</span> <span class="hljs-operator">=</span> request;<br>    <span class="hljs-type">HandlerExecutionChain</span> <span class="hljs-variable">mappedHandler</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">multipartRequestParsed</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-type">WebAsyncManager</span> <span class="hljs-variable">asyncManager</span> <span class="hljs-operator">=</span> WebAsyncUtils.getAsyncManager(request);<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">mv</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">Exception</span> <span class="hljs-variable">dispatchException</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            processedRequest = checkMultipart(request);<br>            multipartRequestParsed = (processedRequest != request);<br><br>            <span class="hljs-comment">// 找到当前请求使用哪个Handler（Controller的方法）处理</span><br>            mappedHandler = getHandler(processedRequest);<br><br>            <span class="hljs-comment">//HandlerMapping：处理器映射。/xxx-&gt;&gt;xxxx</span><br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p><code>getHandler()</code>方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">protected</span> HandlerExecutionChain <span class="hljs-title function_">getHandler</span><span class="hljs-params">(HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.handlerMappings != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">for</span> (HandlerMapping mapping : <span class="hljs-built_in">this</span>.handlerMappings) &#123;<br>            <span class="hljs-type">HandlerExecutionChain</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> mapping.getHandler(request);<br>            <span class="hljs-keyword">if</span> (handler != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> handler;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>this.handlerMappings</code>在Debug模式下展现的内容：</p><p><img src="https://img-blog.csdnimg.cn/20210205005802305.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE4NjMwMjQ=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>其中，保存了所有<code>@RequestMapping</code> 和<code>handler</code>的映射规则。</p><p><img src="https://img-blog.csdnimg.cn/20210205005926474.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE4NjMwMjQ=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>所有的请求映射都在HandlerMapping中：</p><ul><li>SpringBoot自动配置欢迎页的 WelcomePageHandlerMapping 。访问 &#x2F;能访问到index.html；</li><li>SpringBoot自动配置了默认 的 RequestMappingHandlerMapping</li><li>请求进来，挨个尝试所有的HandlerMapping看是否有请求信息。<ul><li>如果有就找到这个请求对应的handler</li><li>如果没有就是下一个 HandlerMapping</li></ul></li><li>我们需要一些自定义的映射处理，我们也可以自己给容器中放<strong>HandlerMapping</strong>。自定义 <strong>HandlerMapping</strong></li></ul><hr><p>IDEA快捷键：</p><ul><li>Ctrl + Alt + U : 以UML的类图展现类有哪些继承类，派生类以及实现哪些接口。</li><li>Crtl + Alt + Shift + U : 同上，区别在于上条快捷键结果在新页展现，而本条快捷键结果在弹窗展现。</li><li>Ctrl + H : 以树形方式展现类层次结构图。</li></ul><h2 id="常用参数注解使用"><a href="#常用参数注解使用" class="headerlink" title="常用参数注解使用"></a>常用参数注解使用</h2><p>注解：</p><ul><li><code>@PathVariable</code> 路径变量</li><li><code>@RequestHeader</code> 获取请求头</li><li><code>@RequestParam</code> 获取请求参数（指问号后的参数，url?a&#x3D;1&amp;b&#x3D;2）</li><li><code>@CookieValue</code> 获取Cookie值</li><li><code>@RequestAttribute</code> 获取request域属性</li><li><code>@RequestBody</code> 获取请求体[POST]</li><li><code>@MatrixVariable</code> 矩阵变量</li><li><code>@ModelAttribute</code></li></ul><p>使用用例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ParameterTestController</span> &#123;<br><br><br>    <span class="hljs-comment">//  car/2/owner/zhangsan</span><br>    <span class="hljs-meta">@GetMapping(&quot;/car/&#123;id&#125;/owner/&#123;username&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Map&lt;String,Object&gt; <span class="hljs-title function_">getCar</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id,</span><br><span class="hljs-params">                                     <span class="hljs-meta">@PathVariable(&quot;username&quot;)</span> String name,</span><br><span class="hljs-params">                                     <span class="hljs-meta">@PathVariable</span> Map&lt;String,String&gt; pv,</span><br><span class="hljs-params">                                     <span class="hljs-meta">@RequestHeader(&quot;User-Agent&quot;)</span> String userAgent,</span><br><span class="hljs-params">                                     <span class="hljs-meta">@RequestHeader</span> Map&lt;String,String&gt; header,</span><br><span class="hljs-params">                                     <span class="hljs-meta">@RequestParam(&quot;age&quot;)</span> Integer age,</span><br><span class="hljs-params">                                     <span class="hljs-meta">@RequestParam(&quot;inters&quot;)</span> List&lt;String&gt; inters,</span><br><span class="hljs-params">                                     <span class="hljs-meta">@RequestParam</span> Map&lt;String,String&gt; params,</span><br><span class="hljs-params">                                     <span class="hljs-meta">@CookieValue(&quot;_ga&quot;)</span> String _ga,</span><br><span class="hljs-params">                                     <span class="hljs-meta">@CookieValue(&quot;_ga&quot;)</span> Cookie cookie)</span>&#123;<br><br>        Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br><span class="hljs-comment">//        map.put(&quot;id&quot;,id);</span><br><span class="hljs-comment">//        map.put(&quot;name&quot;,name);</span><br><span class="hljs-comment">//        map.put(&quot;pv&quot;,pv);</span><br><span class="hljs-comment">//        map.put(&quot;userAgent&quot;,userAgent);</span><br><span class="hljs-comment">//        map.put(&quot;headers&quot;,header);</span><br>        map.put(<span class="hljs-string">&quot;age&quot;</span>,age);<br>        map.put(<span class="hljs-string">&quot;inters&quot;</span>,inters);<br>        map.put(<span class="hljs-string">&quot;params&quot;</span>,params);<br>        map.put(<span class="hljs-string">&quot;_ga&quot;</span>,_ga);<br>        System.out.println(cookie.getName()+<span class="hljs-string">&quot;===&gt;&quot;</span>+cookie.getValue());<br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br><br><br>    <span class="hljs-meta">@PostMapping(&quot;/save&quot;)</span><br>    <span class="hljs-keyword">public</span> Map <span class="hljs-title function_">postMethod</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> String content)</span>&#123;<br>        Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;content&quot;</span>,content);<br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="RequestAttribute"><a href="#RequestAttribute" class="headerlink" title="@RequestAttribute"></a>@RequestAttribute</h2><p>用例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/goto&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">goToPage</span><span class="hljs-params">(HttpServletRequest request)</span>&#123;<br><br>        request.setAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;成功了...&quot;</span>);<br>        request.setAttribute(<span class="hljs-string">&quot;code&quot;</span>,<span class="hljs-number">200</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;forward:/success&quot;</span>;  <span class="hljs-comment">//转发到  /success请求</span><br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/params&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testParam</span><span class="hljs-params">(Map&lt;String,Object&gt; map,</span><br><span class="hljs-params">                            Model model,</span><br><span class="hljs-params">                            HttpServletRequest request,</span><br><span class="hljs-params">                            HttpServletResponse response)</span>&#123;<br>        map.put(<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-string">&quot;world666&quot;</span>);<br>        model.addAttribute(<span class="hljs-string">&quot;world&quot;</span>,<span class="hljs-string">&quot;hello666&quot;</span>);<br>        request.setAttribute(<span class="hljs-string">&quot;message&quot;</span>,<span class="hljs-string">&quot;HelloWorld&quot;</span>);<br><br>        <span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;c1&quot;</span>,<span class="hljs-string">&quot;v1&quot;</span>);<br>        response.addCookie(cookie);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;forward:/success&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">///&lt;-----------------主角@RequestAttribute在这个方法</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@GetMapping(&quot;/success&quot;)</span><br>    <span class="hljs-keyword">public</span> Map <span class="hljs-title function_">success</span><span class="hljs-params">(<span class="hljs-meta">@RequestAttribute(value = &quot;msg&quot;,required = false)</span> String msg,</span><br><span class="hljs-params">                       <span class="hljs-meta">@RequestAttribute(value = &quot;code&quot;,required = false)</span>Integer code,</span><br><span class="hljs-params">                       HttpServletRequest request)</span>&#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">msg1</span> <span class="hljs-operator">=</span> request.getAttribute(<span class="hljs-string">&quot;msg&quot;</span>);<br><br>        Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">hello</span> <span class="hljs-operator">=</span> request.getAttribute(<span class="hljs-string">&quot;hello&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">world</span> <span class="hljs-operator">=</span> request.getAttribute(<span class="hljs-string">&quot;world&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> request.getAttribute(<span class="hljs-string">&quot;message&quot;</span>);<br><br>        map.put(<span class="hljs-string">&quot;reqMethod_msg&quot;</span>,msg1);<br>        map.put(<span class="hljs-string">&quot;annotation_msg&quot;</span>,msg);<br>        map.put(<span class="hljs-string">&quot;hello&quot;</span>,hello);<br>        map.put(<span class="hljs-string">&quot;world&quot;</span>,world);<br>        map.put(<span class="hljs-string">&quot;message&quot;</span>,message);<br><br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="MatrixVariable与UrlPathHelper"><a href="#MatrixVariable与UrlPathHelper" class="headerlink" title="@MatrixVariable与UrlPathHelper"></a>@MatrixVariable与UrlPathHelper</h2><ol><li>语法： 请求路径：<code>/cars/sell;low=34;brand=byd,audi,yd</code></li><li>SpringBoot默认是禁用了矩阵变量的功能<ul><li>手动开启：原理。对于路径的处理。UrlPathHelper的removeSemicolonContent设置为false，让其支持矩阵变量的。</li></ul></li><li>矩阵变量<strong>必须</strong>有url路径变量才能被解析</li></ol><p><strong>手动开启矩阵变量</strong>：</p><ul><li>实现<code>WebMvcConfigurer</code>接口：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configurePathMatch</span><span class="hljs-params">(PathMatchConfigurer configurer)</span> &#123;<br><br>        <span class="hljs-type">UrlPathHelper</span> <span class="hljs-variable">urlPathHelper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UrlPathHelper</span>();<br>        <span class="hljs-comment">// 不移除；后面的内容。矩阵变量功能就可以生效</span><br>        urlPathHelper.setRemoveSemicolonContent(<span class="hljs-literal">false</span>);<br>        configurer.setUrlPathHelper(urlPathHelper);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>创建返回<code>WebMvcConfigurer</code>Bean：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebConfig</span>&#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> WebMvcConfigurer <span class="hljs-title function_">webMvcConfigurer</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebMvcConfigurer</span>() &#123;<br>                        <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configurePathMatch</span><span class="hljs-params">(PathMatchConfigurer configurer)</span> &#123;<br>                <span class="hljs-type">UrlPathHelper</span> <span class="hljs-variable">urlPathHelper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UrlPathHelper</span>();<br>                <span class="hljs-comment">// 不移除；后面的内容。矩阵变量功能就可以生效</span><br>                urlPathHelper.setRemoveSemicolonContent(<span class="hljs-literal">false</span>);<br>                configurer.setUrlPathHelper(urlPathHelper);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong><code>@MatrixVariable</code>的用例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ParameterTestController</span> &#123;<br><br>    <span class="hljs-comment">///cars/sell;low=34;brand=byd,audi,yd</span><br>    <span class="hljs-meta">@GetMapping(&quot;/cars/&#123;path&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Map <span class="hljs-title function_">carsSell</span><span class="hljs-params">(<span class="hljs-meta">@MatrixVariable(&quot;low&quot;)</span> Integer low,</span><br><span class="hljs-params">                        <span class="hljs-meta">@MatrixVariable(&quot;brand&quot;)</span> List&lt;String&gt; brand,</span><br><span class="hljs-params">                        <span class="hljs-meta">@PathVariable(&quot;path&quot;)</span> String path)</span>&#123;<br>        Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>        map.put(<span class="hljs-string">&quot;low&quot;</span>,low);<br>        map.put(<span class="hljs-string">&quot;brand&quot;</span>,brand);<br>        map.put(<span class="hljs-string">&quot;path&quot;</span>,path);<br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br><br>    <span class="hljs-comment">// /boss/1;age=20/2;age=10</span><br><br>    <span class="hljs-meta">@GetMapping(&quot;/boss/&#123;bossId&#125;/&#123;empId&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Map <span class="hljs-title function_">boss</span><span class="hljs-params">(<span class="hljs-meta">@MatrixVariable(value = &quot;age&quot;,pathVar = &quot;bossId&quot;)</span> Integer bossAge,</span><br><span class="hljs-params">                    <span class="hljs-meta">@MatrixVariable(value = &quot;age&quot;,pathVar = &quot;empId&quot;)</span> Integer empAge)</span>&#123;<br>        Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>        map.put(<span class="hljs-string">&quot;bossAge&quot;</span>,bossAge);<br>        map.put(<span class="hljs-string">&quot;empAge&quot;</span>,empAge);<br>        <span class="hljs-keyword">return</span> map;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="各种类型参数解析原理"><a href="#各种类型参数解析原理" class="headerlink" title="各种类型参数解析原理"></a>各种类型参数解析原理</h2><p>这要从<code>DispatcherServlet</code>开始说起：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DispatcherServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FrameworkServlet</span> &#123;<br>    <br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doDispatch</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">processedRequest</span> <span class="hljs-operator">=</span> request;<br>        <span class="hljs-type">HandlerExecutionChain</span> <span class="hljs-variable">mappedHandler</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">multipartRequestParsed</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-type">WebAsyncManager</span> <span class="hljs-variable">asyncManager</span> <span class="hljs-operator">=</span> WebAsyncUtils.getAsyncManager(request);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">mv</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-type">Exception</span> <span class="hljs-variable">dispatchException</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                processedRequest = checkMultipart(request);<br>                multipartRequestParsed = (processedRequest != request);<br><br>                <span class="hljs-comment">// Determine handler for the current request.</span><br>                mappedHandler = getHandler(processedRequest);<br>                <span class="hljs-keyword">if</span> (mappedHandler == <span class="hljs-literal">null</span>) &#123;<br>                    noHandlerFound(processedRequest, response);<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br><br>                <span class="hljs-comment">// Determine handler adapter for the current request.</span><br>                <span class="hljs-type">HandlerAdapter</span> <span class="hljs-variable">ha</span> <span class="hljs-operator">=</span> getHandlerAdapter(mappedHandler.getHandler());<br>                ...<br></code></pre></td></tr></table></figure><ul><li><code>HandlerMapping</code>中找到能处理请求的<code>Handler</code>（Controller.method()）。</li><li>为当前Handler 找一个适配器 <code>HandlerAdapter</code>，用的最多的是<strong>RequestMappingHandlerAdapter</strong>。</li><li>适配器执行目标方法并确定方法参数的每一个值。</li></ul><h3 id="HandlerAdapter"><a href="#HandlerAdapter" class="headerlink" title="HandlerAdapter"></a>HandlerAdapter</h3><p>默认会加载所有<code>HandlerAdapter</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DispatcherServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FrameworkServlet</span> &#123;<br><br>    <span class="hljs-comment">/** Detect all HandlerAdapters or just expect &quot;handlerAdapter&quot; bean?. */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">detectAllHandlerAdapters</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br>    ...<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initHandlerAdapters</span><span class="hljs-params">(ApplicationContext context)</span> &#123;<br>        <span class="hljs-built_in">this</span>.handlerAdapters = <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.detectAllHandlerAdapters) &#123;<br>            <span class="hljs-comment">// Find all HandlerAdapters in the ApplicationContext, including ancestor contexts.</span><br>            Map&lt;String, HandlerAdapter&gt; matchingBeans =<br>                BeanFactoryUtils.beansOfTypeIncludingAncestors(context, HandlerAdapter.class, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>);<br>            <span class="hljs-keyword">if</span> (!matchingBeans.isEmpty()) &#123;<br>                <span class="hljs-built_in">this</span>.handlerAdapters = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(matchingBeans.values());<br>                <span class="hljs-comment">// We keep HandlerAdapters in sorted order.</span><br>                AnnotationAwareOrderComparator.sort(<span class="hljs-built_in">this</span>.handlerAdapters);<br>            &#125;<br>        &#125;<br>     ...<br></code></pre></td></tr></table></figure><p>有这些<code>HandlerAdapter</code>：</p><p><img src="https://img-blog.csdnimg.cn/20210205010047654.png#pic_center" alt="在这里插入图片描述"></p><ol><li>支持方法上标注<code>@RequestMapping</code></li><li>支持函数式编程的</li><li>…</li><li>…</li></ol><h3 id="执行目标方法"><a href="#执行目标方法" class="headerlink" title="执行目标方法"></a>执行目标方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DispatcherServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FrameworkServlet</span> &#123;<br>    <br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doDispatch</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">mv</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <br>        ...<br><br>        <span class="hljs-comment">// Determine handler for the current request.</span><br>        mappedHandler = getHandler(processedRequest);<br>        <span class="hljs-keyword">if</span> (mappedHandler == <span class="hljs-literal">null</span>) &#123;<br>            noHandlerFound(processedRequest, response);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// Determine handler adapter for the current request.</span><br>        <span class="hljs-type">HandlerAdapter</span> <span class="hljs-variable">ha</span> <span class="hljs-operator">=</span> getHandlerAdapter(mappedHandler.getHandler());<br><br>        ...<br><span class="hljs-comment">//本节重点</span><br>        <span class="hljs-comment">// Actually invoke the handler.</span><br>        mv = ha.handle(processedRequest, response, mappedHandler.getHandler());<br></code></pre></td></tr></table></figure><p><code>HandlerAdapter</code>接口实现类<code>RequestMappingHandlerAdapter</code>（主要用来处理<code>@RequestMapping</code>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestMappingHandlerAdapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractHandlerMethodAdapter</span><br><span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanFactoryAware</span>, InitializingBean &#123;<br><br>    ...<br>    <br>    <span class="hljs-comment">//AbstractHandlerMethodAdapter类的方法，RequestMappingHandlerAdapter继承AbstractHandlerMethodAdapter</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> ModelAndView <span class="hljs-title function_">handle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span><br>        <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-keyword">return</span> handleInternal(request, response, (HandlerMethod) handler);<br>    &#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> ModelAndView <span class="hljs-title function_">handleInternal</span><span class="hljs-params">(HttpServletRequest request,</span><br><span class="hljs-params">HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    ModelAndView mav;<br>        <span class="hljs-comment">//handleInternal的核心</span><br>        mav = invokeHandlerMethod(request, response, handlerMethod);<span class="hljs-comment">//解释看下节</span><br><span class="hljs-comment">//...</span><br><span class="hljs-keyword">return</span> mav;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="参数解析器"><a href="#参数解析器" class="headerlink" title="参数解析器"></a>参数解析器</h3><p>确定将要执行的目标方法的每一个参数的值是什么;</p><p>SpringMVC目标方法能写多少种参数类型。取决于<strong>参数解析器argumentResolvers</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">protected</span> ModelAndView <span class="hljs-title function_">invokeHandlerMethod</span><span class="hljs-params">(HttpServletRequest request,</span><br><span class="hljs-params">                                           HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>    <span class="hljs-type">ServletWebRequest</span> <span class="hljs-variable">webRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletWebRequest</span>(request, response);<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">WebDataBinderFactory</span> <span class="hljs-variable">binderFactory</span> <span class="hljs-operator">=</span> getDataBinderFactory(handlerMethod);<br>        <span class="hljs-type">ModelFactory</span> <span class="hljs-variable">modelFactory</span> <span class="hljs-operator">=</span> getModelFactory(handlerMethod, binderFactory);<br><br>        <span class="hljs-type">ServletInvocableHandlerMethod</span> <span class="hljs-variable">invocableMethod</span> <span class="hljs-operator">=</span> createInvocableHandlerMethod(handlerMethod);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.argumentResolvers != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//&lt;-----关注点</span><br>            invocableMethod.setHandlerMethodArgumentResolvers(<span class="hljs-built_in">this</span>.argumentResolvers);<br>        &#125;<br>        <br>        ...<br></code></pre></td></tr></table></figure><p><code>this.argumentResolvers</code>在<code>afterPropertiesSet()</code>方法内初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestMappingHandlerAdapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractHandlerMethodAdapter</span><br><span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanFactoryAware</span>, InitializingBean &#123;<br><br>    <span class="hljs-meta">@Nullable</span><br>    <span class="hljs-keyword">private</span> HandlerMethodArgumentResolverComposite argumentResolvers;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterPropertiesSet</span><span class="hljs-params">()</span> &#123;<br>        ...<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.argumentResolvers == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//初始化argumentResolvers</span><br>        List&lt;HandlerMethodArgumentResolver&gt; resolvers = getDefaultArgumentResolvers();<br>            <span class="hljs-built_in">this</span>.argumentResolvers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HandlerMethodArgumentResolverComposite</span>().addResolvers(resolvers);<br>        &#125;<br>        ...<br>    &#125;<br><br>    <span class="hljs-comment">//初始化了一堆的实现HandlerMethodArgumentResolver接口的</span><br><span class="hljs-keyword">private</span> List&lt;HandlerMethodArgumentResolver&gt; <span class="hljs-title function_">getDefaultArgumentResolvers</span><span class="hljs-params">()</span> &#123;<br>List&lt;HandlerMethodArgumentResolver&gt; resolvers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(<span class="hljs-number">30</span>);<br><br><span class="hljs-comment">// Annotation-based argument resolution</span><br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestParamMethodArgumentResolver</span>(getBeanFactory(), <span class="hljs-literal">false</span>));<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestParamMapMethodArgumentResolver</span>());<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PathVariableMethodArgumentResolver</span>());<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PathVariableMapMethodArgumentResolver</span>());<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MatrixVariableMethodArgumentResolver</span>());<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MatrixVariableMapMethodArgumentResolver</span>());<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletModelAttributeMethodProcessor</span>(<span class="hljs-literal">false</span>));<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestResponseBodyMethodProcessor</span>(getMessageConverters(), <span class="hljs-built_in">this</span>.requestResponseBodyAdvice));<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestPartMethodArgumentResolver</span>(getMessageConverters(), <span class="hljs-built_in">this</span>.requestResponseBodyAdvice));<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestHeaderMethodArgumentResolver</span>(getBeanFactory()));<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestHeaderMapMethodArgumentResolver</span>());<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletCookieValueMethodArgumentResolver</span>(getBeanFactory()));<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ExpressionValueMethodArgumentResolver</span>(getBeanFactory()));<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SessionAttributeMethodArgumentResolver</span>());<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestAttributeMethodArgumentResolver</span>());<br><br><span class="hljs-comment">// Type-based argument resolution</span><br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletRequestMethodArgumentResolver</span>());<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletResponseMethodArgumentResolver</span>());<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpEntityMethodProcessor</span>(getMessageConverters(), <span class="hljs-built_in">this</span>.requestResponseBodyAdvice));<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RedirectAttributesMethodArgumentResolver</span>());<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelMethodProcessor</span>());<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MapMethodProcessor</span>());<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ErrorsMethodArgumentResolver</span>());<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SessionStatusMethodArgumentResolver</span>());<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">UriComponentsBuilderMethodArgumentResolver</span>());<br><span class="hljs-keyword">if</span> (KotlinDetector.isKotlinPresent()) &#123;<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ContinuationHandlerMethodArgumentResolver</span>());<br>&#125;<br><br><span class="hljs-comment">// Custom arguments</span><br><span class="hljs-keyword">if</span> (getCustomArgumentResolvers() != <span class="hljs-literal">null</span>) &#123;<br>resolvers.addAll(getCustomArgumentResolvers());<br>&#125;<br><br><span class="hljs-comment">// Catch-all</span><br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PrincipalMethodArgumentResolver</span>());<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestParamMethodArgumentResolver</span>(getBeanFactory(), <span class="hljs-literal">true</span>));<br>resolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletModelAttributeMethodProcessor</span>(<span class="hljs-literal">true</span>));<br><br><span class="hljs-keyword">return</span> resolvers;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>HandlerMethodArgumentResolverComposite</code>类如下：（众多<strong>参数解析器argumentResolvers</strong>的包装类）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HandlerMethodArgumentResolverComposite</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerMethodArgumentResolver</span> &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> List&lt;HandlerMethodArgumentResolver&gt; argumentResolvers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <br>    ...<br>    <br><span class="hljs-keyword">public</span> HandlerMethodArgumentResolverComposite <span class="hljs-title function_">addResolvers</span><span class="hljs-params">(</span><br><span class="hljs-params"><span class="hljs-meta">@Nullable</span> HandlerMethodArgumentResolver... resolvers)</span> &#123;<br><br><span class="hljs-keyword">if</span> (resolvers != <span class="hljs-literal">null</span>) &#123;<br>Collections.addAll(<span class="hljs-built_in">this</span>.argumentResolvers, resolvers);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>&#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>我们看看<code>HandlerMethodArgumentResolver</code>的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">HandlerMethodArgumentResolver</span> &#123;<br><br>    <span class="hljs-comment">//当前解析器是否支持解析这种参数</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">supportsParameter</span><span class="hljs-params">(MethodParameter parameter)</span>;<br><br><span class="hljs-meta">@Nullable</span><span class="hljs-comment">//如果支持，就调用 resolveArgument</span><br>Object <span class="hljs-title function_">resolveArgument</span><span class="hljs-params">(MethodParameter parameter, <span class="hljs-meta">@Nullable</span> ModelAndViewContainer mavContainer,</span><br><span class="hljs-params">NativeWebRequest webRequest, <span class="hljs-meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="hljs-keyword">throws</span> Exception;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="返回值处理器"><a href="#返回值处理器" class="headerlink" title="返回值处理器"></a>返回值处理器</h3><p><strong>ValueHandler</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">protected</span> ModelAndView <span class="hljs-title function_">invokeHandlerMethod</span><span class="hljs-params">(HttpServletRequest request,</span><br><span class="hljs-params">                                           HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>    <span class="hljs-type">ServletWebRequest</span> <span class="hljs-variable">webRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletWebRequest</span>(request, response);<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">WebDataBinderFactory</span> <span class="hljs-variable">binderFactory</span> <span class="hljs-operator">=</span> getDataBinderFactory(handlerMethod);<br>        <span class="hljs-type">ModelFactory</span> <span class="hljs-variable">modelFactory</span> <span class="hljs-operator">=</span> getModelFactory(handlerMethod, binderFactory);<br><br>        <span class="hljs-type">ServletInvocableHandlerMethod</span> <span class="hljs-variable">invocableMethod</span> <span class="hljs-operator">=</span> createInvocableHandlerMethod(handlerMethod);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.argumentResolvers != <span class="hljs-literal">null</span>) &#123;<br>            invocableMethod.setHandlerMethodArgumentResolvers(<span class="hljs-built_in">this</span>.argumentResolvers);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.returnValueHandlers != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//&lt;---关注点</span><br>            invocableMethod.setHandlerMethodReturnValueHandlers(<span class="hljs-built_in">this</span>.returnValueHandlers);<br>        &#125;<br>     ...<br></code></pre></td></tr></table></figure><p><code>this.returnValueHandlers</code>在<code>afterPropertiesSet()</code>方法内初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestMappingHandlerAdapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractHandlerMethodAdapter</span><br><span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanFactoryAware</span>, InitializingBean &#123;<br><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">private</span> HandlerMethodReturnValueHandlerComposite returnValueHandlers;<br>    <br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterPropertiesSet</span><span class="hljs-params">()</span> &#123;<br>        ...<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.returnValueHandlers == <span class="hljs-literal">null</span>) &#123;<br>List&lt;HandlerMethodReturnValueHandler&gt; handlers = getDefaultReturnValueHandlers();<br><span class="hljs-built_in">this</span>.returnValueHandlers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HandlerMethodReturnValueHandlerComposite</span>().addHandlers(handlers);<br>&#125;<br>&#125;<br>    <br>    <span class="hljs-comment">//初始化了一堆的实现HandlerMethodReturnValueHandler接口的</span><br>    <span class="hljs-keyword">private</span> List&lt;HandlerMethodReturnValueHandler&gt; <span class="hljs-title function_">getDefaultReturnValueHandlers</span><span class="hljs-params">()</span> &#123;<br>List&lt;HandlerMethodReturnValueHandler&gt; handlers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(<span class="hljs-number">20</span>);<br><br><span class="hljs-comment">// Single-purpose return value types</span><br>handlers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndViewMethodReturnValueHandler</span>());<br>handlers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelMethodProcessor</span>());<br>handlers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ViewMethodReturnValueHandler</span>());<br>handlers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseBodyEmitterReturnValueHandler</span>(getMessageConverters(),<br><span class="hljs-built_in">this</span>.reactiveAdapterRegistry, <span class="hljs-built_in">this</span>.taskExecutor, <span class="hljs-built_in">this</span>.contentNegotiationManager));<br>handlers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StreamingResponseBodyReturnValueHandler</span>());<br>handlers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpEntityMethodProcessor</span>(getMessageConverters(),<br><span class="hljs-built_in">this</span>.contentNegotiationManager, <span class="hljs-built_in">this</span>.requestResponseBodyAdvice));<br>handlers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpHeadersReturnValueHandler</span>());<br>handlers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CallableMethodReturnValueHandler</span>());<br>handlers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DeferredResultMethodReturnValueHandler</span>());<br>handlers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AsyncTaskMethodReturnValueHandler</span>(<span class="hljs-built_in">this</span>.beanFactory));<br><br><span class="hljs-comment">// Annotation-based return value types</span><br>handlers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletModelAttributeMethodProcessor</span>(<span class="hljs-literal">false</span>));<br>handlers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestResponseBodyMethodProcessor</span>(getMessageConverters(),<br><span class="hljs-built_in">this</span>.contentNegotiationManager, <span class="hljs-built_in">this</span>.requestResponseBodyAdvice));<br><br><span class="hljs-comment">// Multi-purpose return value types</span><br>handlers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ViewNameMethodReturnValueHandler</span>());<br>handlers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MapMethodProcessor</span>());<br><br><span class="hljs-comment">// Custom return value types</span><br><span class="hljs-keyword">if</span> (getCustomReturnValueHandlers() != <span class="hljs-literal">null</span>) &#123;<br>handlers.addAll(getCustomReturnValueHandlers());<br>&#125;<br><br><span class="hljs-comment">// Catch-all</span><br><span class="hljs-keyword">if</span> (!CollectionUtils.isEmpty(getModelAndViewResolvers())) &#123;<br>handlers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndViewResolverMethodReturnValueHandler</span>(getModelAndViewResolvers()));<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>handlers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletModelAttributeMethodProcessor</span>(<span class="hljs-literal">true</span>));<br>&#125;<br><span class="hljs-keyword">return</span> handlers;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>HandlerMethodReturnValueHandlerComposite</code>类如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HandlerMethodReturnValueHandlerComposite</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerMethodReturnValueHandler</span> &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> List&lt;HandlerMethodReturnValueHandler&gt; returnValueHandlers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    ...<br>    <br><span class="hljs-keyword">public</span> HandlerMethodReturnValueHandlerComposite <span class="hljs-title function_">addHandlers</span><span class="hljs-params">(</span><br><span class="hljs-params"><span class="hljs-meta">@Nullable</span> List&lt;? extends HandlerMethodReturnValueHandler&gt; handlers)</span> &#123;<br><br><span class="hljs-keyword">if</span> (handlers != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-built_in">this</span>.returnValueHandlers.addAll(handlers);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>HandlerMethodReturnValueHandler</code>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">HandlerMethodReturnValueHandler</span> &#123;<br><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">supportsReturnType</span><span class="hljs-params">(MethodParameter returnType)</span>;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">handleReturnValue</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Object returnValue, MethodParameter returnType,</span><br><span class="hljs-params">ModelAndViewContainer mavContainer, NativeWebRequest webRequest)</span> <span class="hljs-keyword">throws</span> Exception;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="回顾执行目标方法"><a href="#回顾执行目标方法" class="headerlink" title="回顾执行目标方法"></a>回顾执行目标方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DispatcherServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FrameworkServlet</span> &#123;<br>    ...<br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doDispatch</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">mv</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>...<br>        mv = ha.handle(processedRequest, response, mappedHandler.getHandler());<br></code></pre></td></tr></table></figure><p><code>RequestMappingHandlerAdapter</code>的<code>handle()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestMappingHandlerAdapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractHandlerMethodAdapter</span><br><span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanFactoryAware</span>, InitializingBean &#123;<br>    ...<br>    <span class="hljs-comment">//AbstractHandlerMethodAdapter类的方法，RequestMappingHandlerAdapter继承AbstractHandlerMethodAdapter</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> ModelAndView <span class="hljs-title function_">handle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span><br>        <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-keyword">return</span> handleInternal(request, response, (HandlerMethod) handler);<br>    &#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> ModelAndView <span class="hljs-title function_">handleInternal</span><span class="hljs-params">(HttpServletRequest request,</span><br><span class="hljs-params">HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    ModelAndView mav;<br>        <span class="hljs-comment">//handleInternal的核心</span><br>        mav = invokeHandlerMethod(request, response, handlerMethod);<span class="hljs-comment">//解释看下节</span><br><span class="hljs-comment">//...</span><br><span class="hljs-keyword">return</span> mav;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>RequestMappingHandlerAdapter</code>的<code>invokeHandlerMethod()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestMappingHandlerAdapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractHandlerMethodAdapter</span><br><span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanFactoryAware</span>, InitializingBean &#123;<br>    <br><span class="hljs-keyword">protected</span> ModelAndView <span class="hljs-title function_">invokeHandlerMethod</span><span class="hljs-params">(HttpServletRequest request,</span><br><span class="hljs-params">HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br><span class="hljs-type">ServletWebRequest</span> <span class="hljs-variable">webRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletWebRequest</span>(request, response);<br><span class="hljs-keyword">try</span> &#123;<br>...<br>            <br>            <span class="hljs-type">ServletInvocableHandlerMethod</span> <span class="hljs-variable">invocableMethod</span> <span class="hljs-operator">=</span> createInvocableHandlerMethod(handlerMethod);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.argumentResolvers != <span class="hljs-literal">null</span>) &#123;<br>invocableMethod.setHandlerMethodArgumentResolvers(<span class="hljs-built_in">this</span>.argumentResolvers);<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.returnValueHandlers != <span class="hljs-literal">null</span>) &#123;<br>invocableMethod.setHandlerMethodReturnValueHandlers(<span class="hljs-built_in">this</span>.returnValueHandlers);<br>&#125;<br>...<br><br>            <span class="hljs-comment">//关注点：执行目标方法</span><br>invocableMethod.invokeAndHandle(webRequest, mavContainer);<br><span class="hljs-keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-keyword">return</span> getModelAndView(mavContainer, modelFactory, webRequest);<br>&#125;<br><span class="hljs-keyword">finally</span> &#123;<br>webRequest.requestCompleted();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>invokeAndHandle()</code>方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletInvocableHandlerMethod</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">InvocableHandlerMethod</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invokeAndHandle</span><span class="hljs-params">(ServletWebRequest webRequest, ModelAndViewContainer mavContainer,</span><br><span class="hljs-params">Object... providedArgs)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br><span class="hljs-type">Object</span> <span class="hljs-variable">returnValue</span> <span class="hljs-operator">=</span> invokeForRequest(webRequest, mavContainer, providedArgs);<br><br>        ...<br>        <br><span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//returnValue存储起来</span><br><span class="hljs-built_in">this</span>.returnValueHandlers.handleReturnValue(<br>returnValue, getReturnValueType(returnValue), mavContainer, webRequest);<br>&#125;<br><span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>...<br>&#125;<br>&#125;<br>    <br>    <span class="hljs-meta">@Nullable</span><span class="hljs-comment">//InvocableHandlerMethod类的，ServletInvocableHandlerMethod类继承InvocableHandlerMethod类</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invokeForRequest</span><span class="hljs-params">(NativeWebRequest request, <span class="hljs-meta">@Nullable</span> ModelAndViewContainer mavContainer,</span><br><span class="hljs-params">Object... providedArgs)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        获取方法的参数值<br>Object[] args = getMethodArgumentValues(request, mavContainer, providedArgs);<br><br>        ...<br>       <br><span class="hljs-keyword">return</span> doInvoke(args);<br>&#125;<br><br>    <span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">doInvoke</span><span class="hljs-params">(Object... args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> getBridgedMethod();<span class="hljs-comment">//@RequestMapping的方法</span><br>ReflectionUtils.makeAccessible(method);<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">if</span> (KotlinDetector.isSuspendingFunction(method)) &#123;<br><span class="hljs-keyword">return</span> CoroutinesUtils.invokeSuspendingFunction(method, getBean(), args);<br>&#125;<br>            <span class="hljs-comment">//通过反射调用</span><br><span class="hljs-keyword">return</span> method.invoke(getBean(), args);<span class="hljs-comment">//getBean()指@RequestMapping的方法所在类的对象。</span><br>&#125;<br><span class="hljs-keyword">catch</span> (IllegalArgumentException ex) &#123;<br>...<br>&#125;<br><span class="hljs-keyword">catch</span> (InvocationTargetException ex) &#123;<br>...<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="如何确定目标方法每一个参数的值"><a href="#如何确定目标方法每一个参数的值" class="headerlink" title="如何确定目标方法每一个参数的值"></a>如何确定目标方法每一个参数的值</h3><p>重点分析<code>ServletInvocableHandlerMethod</code>的<code>getMethodArgumentValues</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletInvocableHandlerMethod</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">InvocableHandlerMethod</span> &#123;<br>    ...<br><br><span class="hljs-meta">@Nullable</span><span class="hljs-comment">//InvocableHandlerMethod类的，ServletInvocableHandlerMethod类继承InvocableHandlerMethod类</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invokeForRequest</span><span class="hljs-params">(NativeWebRequest request, <span class="hljs-meta">@Nullable</span> ModelAndViewContainer mavContainer,</span><br><span class="hljs-params">Object... providedArgs)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        获取方法的参数值<br>Object[] args = getMethodArgumentValues(request, mavContainer, providedArgs);<br><br>        ...<br>       <br><span class="hljs-keyword">return</span> doInvoke(args);<br>&#125;<br> <br>    <span class="hljs-comment">//本节重点，获取方法的参数值</span><br><span class="hljs-keyword">protected</span> Object[] getMethodArgumentValues(NativeWebRequest request, <span class="hljs-meta">@Nullable</span> ModelAndViewContainer mavContainer,<br>Object... providedArgs) <span class="hljs-keyword">throws</span> Exception &#123;<br><br>MethodParameter[] parameters = getMethodParameters();<br><span class="hljs-keyword">if</span> (ObjectUtils.isEmpty(parameters)) &#123;<br><span class="hljs-keyword">return</span> EMPTY_ARGS;<br>&#125;<br><br>Object[] args = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[parameters.length];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; parameters.length; i++) &#123;<br><span class="hljs-type">MethodParameter</span> <span class="hljs-variable">parameter</span> <span class="hljs-operator">=</span> parameters[i];<br>parameter.initParameterNameDiscovery(<span class="hljs-built_in">this</span>.parameterNameDiscoverer);<br>args[i] = findProvidedArgument(parameter, providedArgs);<br><span class="hljs-keyword">if</span> (args[i] != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br>            <span class="hljs-comment">//查看resolvers是否有支持</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.resolvers.supportsParameter(parameter)) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(formatArgumentError(parameter, <span class="hljs-string">&quot;No suitable resolver&quot;</span>));<br>&#125;<br><span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">//支持的话就开始解析吧</span><br>args[i] = <span class="hljs-built_in">this</span>.resolvers.resolveArgument(parameter, mavContainer, request, <span class="hljs-built_in">this</span>.dataBinderFactory);<br>&#125;<br><span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>....<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> args;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>this.resolvers</code>的类型为<code>HandlerMethodArgumentResolverComposite</code>（在<a href="https://blog.csdn.net/u011863024/article/details/113667634#">参数解析器</a>章节提及）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HandlerMethodArgumentResolverComposite</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerMethodArgumentResolver</span> &#123;<br>    <br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">supportsParameter</span><span class="hljs-params">(MethodParameter parameter)</span> &#123;<br><span class="hljs-keyword">return</span> getArgumentResolver(parameter) != <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">resolveArgument</span><span class="hljs-params">(MethodParameter parameter, <span class="hljs-meta">@Nullable</span> ModelAndViewContainer mavContainer,</span><br><span class="hljs-params">NativeWebRequest webRequest, <span class="hljs-meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br><span class="hljs-type">HandlerMethodArgumentResolver</span> <span class="hljs-variable">resolver</span> <span class="hljs-operator">=</span> getArgumentResolver(parameter);<br><span class="hljs-keyword">if</span> (resolver == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Unsupported parameter type [&quot;</span> +<br>parameter.getParameterType().getName() + <span class="hljs-string">&quot;]. supportsParameter should be called first.&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> resolver.resolveArgument(parameter, mavContainer, webRequest, binderFactory);<br>&#125;<br>    <br>    <br>    <span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">private</span> HandlerMethodArgumentResolver <span class="hljs-title function_">getArgumentResolver</span><span class="hljs-params">(MethodParameter parameter)</span> &#123;<br><span class="hljs-type">HandlerMethodArgumentResolver</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.argumentResolverCache.get(parameter);<br><span class="hljs-keyword">if</span> (result == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">//挨个判断所有参数解析器那个支持解析这个参数</span><br><span class="hljs-keyword">for</span> (HandlerMethodArgumentResolver resolver : <span class="hljs-built_in">this</span>.argumentResolvers) &#123;<br><span class="hljs-keyword">if</span> (resolver.supportsParameter(parameter)) &#123;<br>result = resolver;<br><span class="hljs-built_in">this</span>.argumentResolverCache.put(parameter, result);<span class="hljs-comment">//找到了，resolver就缓存起来，方便稍后resolveArgument()方法使用</span><br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> result;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>本节描述，一个请求发送到DispatcherServlet后的具体处理流程，也就是SpringMVC的主要原理。</p><p>本节内容较多且硬核，对日后编程很有帮助，需耐心对待。</p><p>可以运行一个示例，打断点，在Debug模式下，查看程序流程。</p><h2 id="Servlet-API参数解析原理"><a href="#Servlet-API参数解析原理" class="headerlink" title="Servlet API参数解析原理"></a>Servlet API参数解析原理</h2><ul><li>WebRequest</li><li>ServletRequest</li><li>MultipartRequest</li><li>HttpSession</li><li>javax.servlet.http.PushBuilder</li><li>Principal</li><li>InputStream</li><li>Reader</li><li>HttpMethod</li><li>Locale</li><li>TimeZone</li><li>ZoneId</li></ul><p><strong>ServletRequestMethodArgumentResolver</strong>用来处理以上的参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletRequestMethodArgumentResolver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerMethodArgumentResolver</span> &#123;<br><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Class&lt;?&gt; pushBuilder;<br><br><span class="hljs-keyword">static</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br>pushBuilder = ClassUtils.forName(<span class="hljs-string">&quot;javax.servlet.http.PushBuilder&quot;</span>,<br>ServletRequestMethodArgumentResolver.class.getClassLoader());<br>&#125;<br><span class="hljs-keyword">catch</span> (ClassNotFoundException ex) &#123;<br><span class="hljs-comment">// Servlet 4.0 PushBuilder not found - not supported for injection</span><br>pushBuilder = <span class="hljs-literal">null</span>;<br>&#125;<br>&#125;<br><br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">supportsParameter</span><span class="hljs-params">(MethodParameter parameter)</span> &#123;<br>Class&lt;?&gt; paramType = parameter.getParameterType();<br><span class="hljs-keyword">return</span> (WebRequest.class.isAssignableFrom(paramType) ||<br>ServletRequest.class.isAssignableFrom(paramType) ||<br>MultipartRequest.class.isAssignableFrom(paramType) ||<br>HttpSession.class.isAssignableFrom(paramType) ||<br>(pushBuilder != <span class="hljs-literal">null</span> &amp;&amp; pushBuilder.isAssignableFrom(paramType)) ||<br>(Principal.class.isAssignableFrom(paramType) &amp;&amp; !parameter.hasParameterAnnotations()) ||<br>InputStream.class.isAssignableFrom(paramType) ||<br>Reader.class.isAssignableFrom(paramType) ||<br>HttpMethod.class == paramType ||<br>Locale.class == paramType ||<br>TimeZone.class == paramType ||<br>ZoneId.class == paramType);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">resolveArgument</span><span class="hljs-params">(MethodParameter parameter, <span class="hljs-meta">@Nullable</span> ModelAndViewContainer mavContainer,</span><br><span class="hljs-params">NativeWebRequest webRequest, <span class="hljs-meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>Class&lt;?&gt; paramType = parameter.getParameterType();<br><br><span class="hljs-comment">// WebRequest / NativeWebRequest / ServletWebRequest</span><br><span class="hljs-keyword">if</span> (WebRequest.class.isAssignableFrom(paramType)) &#123;<br><span class="hljs-keyword">if</span> (!paramType.isInstance(webRequest)) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<br><span class="hljs-string">&quot;Current request is not of type [&quot;</span> + paramType.getName() + <span class="hljs-string">&quot;]: &quot;</span> + webRequest);<br>&#125;<br><span class="hljs-keyword">return</span> webRequest;<br>&#125;<br><br><span class="hljs-comment">// ServletRequest / HttpServletRequest / MultipartRequest / MultipartHttpServletRequest</span><br><span class="hljs-keyword">if</span> (ServletRequest.class.isAssignableFrom(paramType) || MultipartRequest.class.isAssignableFrom(paramType)) &#123;<br><span class="hljs-keyword">return</span> resolveNativeRequest(webRequest, paramType);<br>&#125;<br><br><span class="hljs-comment">// HttpServletRequest required for all further argument types</span><br><span class="hljs-keyword">return</span> resolveArgument(paramType, resolveNativeRequest(webRequest, HttpServletRequest.class));<br>&#125;<br><br><span class="hljs-keyword">private</span> &lt;T&gt; T <span class="hljs-title function_">resolveNativeRequest</span><span class="hljs-params">(NativeWebRequest webRequest, Class&lt;T&gt; requiredType)</span> &#123;<br><span class="hljs-type">T</span> <span class="hljs-variable">nativeRequest</span> <span class="hljs-operator">=</span> webRequest.getNativeRequest(requiredType);<br><span class="hljs-keyword">if</span> (nativeRequest == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<br><span class="hljs-string">&quot;Current request is not of type [&quot;</span> + requiredType.getName() + <span class="hljs-string">&quot;]: &quot;</span> + webRequest);<br>&#125;<br><span class="hljs-keyword">return</span> nativeRequest;<br>&#125;<br><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">private</span> Object <span class="hljs-title function_">resolveArgument</span><span class="hljs-params">(Class&lt;?&gt; paramType, HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-keyword">if</span> (HttpSession.class.isAssignableFrom(paramType)) &#123;<br><span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> request.getSession();<br><span class="hljs-keyword">if</span> (session != <span class="hljs-literal">null</span> &amp;&amp; !paramType.isInstance(session)) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<br><span class="hljs-string">&quot;Current session is not of type [&quot;</span> + paramType.getName() + <span class="hljs-string">&quot;]: &quot;</span> + session);<br>&#125;<br><span class="hljs-keyword">return</span> session;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pushBuilder != <span class="hljs-literal">null</span> &amp;&amp; pushBuilder.isAssignableFrom(paramType)) &#123;<br><span class="hljs-keyword">return</span> PushBuilderDelegate.resolvePushBuilder(request, paramType);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (InputStream.class.isAssignableFrom(paramType)) &#123;<br><span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> request.getInputStream();<br><span class="hljs-keyword">if</span> (inputStream != <span class="hljs-literal">null</span> &amp;&amp; !paramType.isInstance(inputStream)) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<br><span class="hljs-string">&quot;Request input stream is not of type [&quot;</span> + paramType.getName() + <span class="hljs-string">&quot;]: &quot;</span> + inputStream);<br>&#125;<br><span class="hljs-keyword">return</span> inputStream;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Reader.class.isAssignableFrom(paramType)) &#123;<br><span class="hljs-type">Reader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> request.getReader();<br><span class="hljs-keyword">if</span> (reader != <span class="hljs-literal">null</span> &amp;&amp; !paramType.isInstance(reader)) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<br><span class="hljs-string">&quot;Request body reader is not of type [&quot;</span> + paramType.getName() + <span class="hljs-string">&quot;]: &quot;</span> + reader);<br>&#125;<br><span class="hljs-keyword">return</span> reader;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Principal.class.isAssignableFrom(paramType)) &#123;<br><span class="hljs-type">Principal</span> <span class="hljs-variable">userPrincipal</span> <span class="hljs-operator">=</span> request.getUserPrincipal();<br><span class="hljs-keyword">if</span> (userPrincipal != <span class="hljs-literal">null</span> &amp;&amp; !paramType.isInstance(userPrincipal)) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<br><span class="hljs-string">&quot;Current user principal is not of type [&quot;</span> + paramType.getName() + <span class="hljs-string">&quot;]: &quot;</span> + userPrincipal);<br>&#125;<br><span class="hljs-keyword">return</span> userPrincipal;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (HttpMethod.class == paramType) &#123;<br><span class="hljs-keyword">return</span> HttpMethod.resolve(request.getMethod());<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Locale.class == paramType) &#123;<br><span class="hljs-keyword">return</span> RequestContextUtils.getLocale(request);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (TimeZone.class == paramType) &#123;<br><span class="hljs-type">TimeZone</span> <span class="hljs-variable">timeZone</span> <span class="hljs-operator">=</span> RequestContextUtils.getTimeZone(request);<br><span class="hljs-keyword">return</span> (timeZone != <span class="hljs-literal">null</span> ? timeZone : TimeZone.getDefault());<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ZoneId.class == paramType) &#123;<br><span class="hljs-type">TimeZone</span> <span class="hljs-variable">timeZone</span> <span class="hljs-operator">=</span> RequestContextUtils.getTimeZone(request);<br><span class="hljs-keyword">return</span> (timeZone != <span class="hljs-literal">null</span> ? timeZone.toZoneId() : ZoneId.systemDefault());<br>&#125;<br><br><span class="hljs-comment">// Should never happen...</span><br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>(<span class="hljs-string">&quot;Unknown parameter type: &quot;</span> + paramType.getName());<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Inner class to avoid a hard dependency on Servlet API 4.0 at runtime.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PushBuilderDelegate</span> &#123;<br><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">resolvePushBuilder</span><span class="hljs-params">(HttpServletRequest request, Class&lt;?&gt; paramType)</span> &#123;<br><span class="hljs-type">PushBuilder</span> <span class="hljs-variable">pushBuilder</span> <span class="hljs-operator">=</span> request.newPushBuilder();<br><span class="hljs-keyword">if</span> (pushBuilder != <span class="hljs-literal">null</span> &amp;&amp; !paramType.isInstance(pushBuilder)) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<br><span class="hljs-string">&quot;Current push builder is not of type [&quot;</span> + paramType.getName() + <span class="hljs-string">&quot;]: &quot;</span> + pushBuilder);<br>&#125;<br><span class="hljs-keyword">return</span> pushBuilder;<br><br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>用例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/goto&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">goToPage</span><span class="hljs-params">(HttpServletRequest request)</span>&#123;<br><br>        request.setAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;成功了...&quot;</span>);<br>        request.setAttribute(<span class="hljs-string">&quot;code&quot;</span>,<span class="hljs-number">200</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;forward:/success&quot;</span>;  <span class="hljs-comment">//转发到  /success请求</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Model、Map原理"><a href="#Model、Map原理" class="headerlink" title="Model、Map原理"></a>Model、Map原理</h2><p>复杂参数：</p><ul><li><strong>Map</strong></li><li><strong>Model（map、model里面的数据会被放在request的请求域 request.setAttribute）</strong></li><li>Errors&#x2F;BindingResult</li><li><strong>RedirectAttributes（ 重定向携带数据）</strong></li><li><strong>ServletResponse（response）</strong></li><li>SessionStatus</li><li>UriComponentsBuilder</li><li>ServletUriComponentsBuilder</li></ul><p>用例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/params&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testParam</span><span class="hljs-params">(Map&lt;String,Object&gt; map,</span><br><span class="hljs-params">                        Model model,</span><br><span class="hljs-params">                        HttpServletRequest request,</span><br><span class="hljs-params">                        HttpServletResponse response)</span>&#123;<br>    <span class="hljs-comment">//下面三位都是可以给request域中放数据</span><br>    map.put(<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-string">&quot;world666&quot;</span>);<br>    model.addAttribute(<span class="hljs-string">&quot;world&quot;</span>,<span class="hljs-string">&quot;hello666&quot;</span>);<br>    request.setAttribute(<span class="hljs-string">&quot;message&quot;</span>,<span class="hljs-string">&quot;HelloWorld&quot;</span>);<br><br>    <span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;c1&quot;</span>,<span class="hljs-string">&quot;v1&quot;</span>);<br>    response.addCookie(cookie);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;forward:/success&quot;</span>;<br>&#125;<br><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-meta">@GetMapping(&quot;/success&quot;)</span><br><span class="hljs-keyword">public</span> Map <span class="hljs-title function_">success</span><span class="hljs-params">(<span class="hljs-meta">@RequestAttribute(value = &quot;msg&quot;,required = false)</span> String msg,</span><br><span class="hljs-params">                   <span class="hljs-meta">@RequestAttribute(value = &quot;code&quot;,required = false)</span>Integer code,</span><br><span class="hljs-params">                   HttpServletRequest request)</span>&#123;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">msg1</span> <span class="hljs-operator">=</span> request.getAttribute(<span class="hljs-string">&quot;msg&quot;</span>);<br><br>    Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">hello</span> <span class="hljs-operator">=</span> request.getAttribute(<span class="hljs-string">&quot;hello&quot;</span>);<span class="hljs-comment">//得出testParam方法赋予的值 world666</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">world</span> <span class="hljs-operator">=</span> request.getAttribute(<span class="hljs-string">&quot;world&quot;</span>);<span class="hljs-comment">//得出testParam方法赋予的值 hello666</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> request.getAttribute(<span class="hljs-string">&quot;message&quot;</span>);<span class="hljs-comment">//得出testParam方法赋予的值 HelloWorld</span><br><br>    map.put(<span class="hljs-string">&quot;reqMethod_msg&quot;</span>,msg1);<br>    map.put(<span class="hljs-string">&quot;annotation_msg&quot;</span>,msg);<br>    map.put(<span class="hljs-string">&quot;hello&quot;</span>,hello);<br>    map.put(<span class="hljs-string">&quot;world&quot;</span>,world);<br>    map.put(<span class="hljs-string">&quot;message&quot;</span>,message);<br><br>    <span class="hljs-keyword">return</span> map;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>Map&lt;String,Object&gt; map</code></li><li><code>Model model</code></li><li><code>HttpServletRequest request</code></li></ul><p>上面三位都是可以给request域中放数据，用<code>request.getAttribute()</code>获取</p><p>接下来我们看看，<code>Map&lt;String,Object&gt; map</code>与<code>Model model</code>用什么参数处理器。</p><hr><p><code>Map&lt;String,Object&gt; map</code>参数用<code>MapMethodProcessor</code>处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapMethodProcessor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerMethodArgumentResolver</span>, HandlerMethodReturnValueHandler &#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">supportsParameter</span><span class="hljs-params">(MethodParameter parameter)</span> &#123;<br><span class="hljs-keyword">return</span> (Map.class.isAssignableFrom(parameter.getParameterType()) &amp;&amp;<br>parameter.getParameterAnnotations().length == <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">resolveArgument</span><span class="hljs-params">(MethodParameter parameter, <span class="hljs-meta">@Nullable</span> ModelAndViewContainer mavContainer,</span><br><span class="hljs-params">NativeWebRequest webRequest, <span class="hljs-meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>Assert.state(mavContainer != <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;ModelAndViewContainer is required for model exposure&quot;</span>);<br><span class="hljs-keyword">return</span> mavContainer.getModel();<br>&#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p><code>mavContainer.getModel()</code>如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ModelAndViewContainer</span> &#123;<br><br>    ...<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ModelMap</span> <span class="hljs-variable">defaultModel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BindingAwareModelMap</span>();<br><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">private</span> ModelMap redirectModel;<br><br>    ...<br><br><span class="hljs-keyword">public</span> ModelMap <span class="hljs-title function_">getModel</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span> (useDefaultModel()) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.defaultModel;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.redirectModel == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-built_in">this</span>.redirectModel = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelMap</span>();<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.redirectModel;<br>&#125;<br>&#125;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">useDefaultModel</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> (!<span class="hljs-built_in">this</span>.redirectModelScenario || (<span class="hljs-built_in">this</span>.redirectModel == <span class="hljs-literal">null</span> &amp;&amp; !<span class="hljs-built_in">this</span>.ignoreDefaultModelOnRedirect));<br>&#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><hr><p><code>Model model</code>用<code>ModelMethodProcessor</code>处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ModelMethodProcessor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerMethodArgumentResolver</span>, HandlerMethodReturnValueHandler &#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">supportsParameter</span><span class="hljs-params">(MethodParameter parameter)</span> &#123;<br><span class="hljs-keyword">return</span> Model.class.isAssignableFrom(parameter.getParameterType());<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">resolveArgument</span><span class="hljs-params">(MethodParameter parameter, <span class="hljs-meta">@Nullable</span> ModelAndViewContainer mavContainer,</span><br><span class="hljs-params">NativeWebRequest webRequest, <span class="hljs-meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>Assert.state(mavContainer != <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;ModelAndViewContainer is required for model exposure&quot;</span>);<br><span class="hljs-keyword">return</span> mavContainer.getModel();<br>&#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p><code>return mavContainer.getModel();</code>这跟<code>MapMethodProcessor</code>的一致</p><p><img src="https://img-blog.csdnimg.cn/20210205010247689.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE4NjMwMjQ=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><code>Model</code>也是另一种意义的<code>Map</code>。</p><hr><p><strong>接下来看看</strong><code>Map&lt;String,Object&gt; map</code>与<code>Model model</code>值是如何做到用<code>request.getAttribute()</code>获取的。</p><p>众所周知，所有的数据都放在 <strong>ModelAndView</strong>包含要去的页面地址View，还包含Model数据。</p><p>先看<strong>ModelAndView</strong>接下来是如何处理的？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DispatcherServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FrameworkServlet</span> &#123;<br>    <br>    ...<br>    <br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doDispatch</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>...<br><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">ModelAndView</span> <span class="hljs-variable">mv</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <br>            ...<br><br><span class="hljs-comment">// Actually invoke the handler.</span><br>mv = ha.handle(processedRequest, response, mappedHandler.getHandler());<br>            <br>            ...<br>            <br>&#125;<br><span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>dispatchException = ex;<br>&#125;<br><span class="hljs-keyword">catch</span> (Throwable err) &#123;<br><span class="hljs-comment">// As of 4.3, we&#x27;re processing Errors thrown from handler methods as well,</span><br><span class="hljs-comment">// making them available for @ExceptionHandler methods and other scenarios.</span><br>dispatchException = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NestedServletException</span>(<span class="hljs-string">&quot;Handler dispatch failed&quot;</span>, err);<br>&#125;<br>        <span class="hljs-comment">//处理分发结果</span><br>processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);<br>&#125;<br>        ...<br><br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processDispatchResult</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response,</span><br><span class="hljs-params"><span class="hljs-meta">@Nullable</span> HandlerExecutionChain mappedHandler, <span class="hljs-meta">@Nullable</span> ModelAndView mv,</span><br><span class="hljs-params"><span class="hljs-meta">@Nullable</span> Exception exception)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        ...<br><br><span class="hljs-comment">// Did the handler return a view to render?</span><br><span class="hljs-keyword">if</span> (mv != <span class="hljs-literal">null</span> &amp;&amp; !mv.wasCleared()) &#123;<br>render(mv, request, response);<br>...<br>&#125;<br>...<br>&#125;<br><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">render</span><span class="hljs-params">(ModelAndView mv, HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>...<br><br>View view;<br><span class="hljs-type">String</span> <span class="hljs-variable">viewName</span> <span class="hljs-operator">=</span> mv.getViewName();<br><span class="hljs-keyword">if</span> (viewName != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-comment">// We need to resolve the view name.</span><br>view = resolveViewName(viewName, mv.getModelInternal(), locale, request);<br><span class="hljs-keyword">if</span> (view == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletException</span>(<span class="hljs-string">&quot;Could not resolve view with name &#x27;&quot;</span> + mv.getViewName() +<br><span class="hljs-string">&quot;&#x27; in servlet with name &#x27;&quot;</span> + getServletName() + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// No need to lookup: the ModelAndView object contains the actual View object.</span><br>view = mv.getView();<br><span class="hljs-keyword">if</span> (view == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletException</span>(<span class="hljs-string">&quot;ModelAndView [&quot;</span> + mv + <span class="hljs-string">&quot;] neither contains a view name nor a &quot;</span> +<br><span class="hljs-string">&quot;View object in servlet with name &#x27;&quot;</span> + getServletName() + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>&#125;<br>&#125;<br>view.render(mv.getModelInternal(), request, response);<br>        <br>        ...<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>在Debug模式下，<code>view</code>属为<code>InternalResourceView</code>类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InternalResourceView</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractUrlBasedView</span> &#123;<br>    <br> <span class="hljs-meta">@Override</span><span class="hljs-comment">//该方法在AbstractView，AbstractUrlBasedView继承了AbstractView</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">render</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Map&lt;String, ?&gt; model, HttpServletRequest request,</span><br><span class="hljs-params">HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        ...<br>        <br>Map&lt;String, Object&gt; mergedModel = createMergedOutputModel(model, request, response);<br>prepareResponse(request, response);<br>        <br>        <span class="hljs-comment">//看下一个方法实现</span><br>renderMergedOutputModel(mergedModel, getRequestToExpose(request), response);<br>&#125;<br>    <br>    <span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">renderMergedOutputModel</span><span class="hljs-params">(</span><br><span class="hljs-params">Map&lt;String, Object&gt; model, HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br><span class="hljs-comment">// Expose the model object as request attributes.</span><br>        <span class="hljs-comment">// 暴露模型作为请求域属性</span><br>exposeModelAsRequestAttributes(model, request);<span class="hljs-comment">//&lt;---重点</span><br><br><span class="hljs-comment">// Expose helpers as request attributes, if any.</span><br>exposeHelpers(request);<br><br><span class="hljs-comment">// Determine the path for the request dispatcher.</span><br><span class="hljs-type">String</span> <span class="hljs-variable">dispatcherPath</span> <span class="hljs-operator">=</span> prepareForRendering(request, response);<br><br><span class="hljs-comment">// Obtain a RequestDispatcher for the target resource (typically a JSP).</span><br><span class="hljs-type">RequestDispatcher</span> <span class="hljs-variable">rd</span> <span class="hljs-operator">=</span> getRequestDispatcher(request, dispatcherPath);<br><br>        ...<br>&#125;<br>    <br>    <span class="hljs-comment">//该方法在AbstractView，AbstractUrlBasedView继承了AbstractView</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exposeModelAsRequestAttributes</span><span class="hljs-params">(Map&lt;String, Object&gt; model,</span><br><span class="hljs-params">HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>model.forEach((name, value) -&gt; &#123;<br><span class="hljs-keyword">if</span> (value != <span class="hljs-literal">null</span>) &#123;<br>request.setAttribute(name, value);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>request.removeAttribute(name);<br>&#125;<br>&#125;);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>exposeModelAsRequestAttributes</code>方法看出，<code>Map&lt;String,Object&gt; map</code>，<code>Model model</code>这两种类型数据可以给request域中放数据，用<code>request.getAttribute()</code>获取。</p><h2 id="自定义参数绑定原理"><a href="#自定义参数绑定原理" class="headerlink" title="自定义参数绑定原理"></a>自定义参数绑定原理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ParameterTestController</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 数据绑定：页面提交的请求数据（GET、POST）都可以和对象属性进行绑定</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> person</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PostMapping(&quot;/saveuser&quot;)</span><br>    <span class="hljs-keyword">public</span> Person <span class="hljs-title function_">saveuser</span><span class="hljs-params">(Person person)</span>&#123;<br>        <span class="hljs-keyword">return</span> person;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *     姓名： &lt;input name=&quot;userName&quot;/&gt; &lt;br/&gt;</span><br><span class="hljs-comment"> *     年龄： &lt;input name=&quot;age&quot;/&gt; &lt;br/&gt;</span><br><span class="hljs-comment"> *     生日： &lt;input name=&quot;birth&quot;/&gt; &lt;br/&gt;</span><br><span class="hljs-comment"> *     宠物姓名：&lt;input name=&quot;pet.name&quot;/&gt;&lt;br/&gt;</span><br><span class="hljs-comment"> *     宠物年龄：&lt;input name=&quot;pet.age&quot;/&gt;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <br>    <span class="hljs-keyword">private</span> String userName;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> Date birth;<br>    <span class="hljs-keyword">private</span> Pet pet;<br>    <br>&#125;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Pet</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String age;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>封装过程用到<code>ServletModelAttributeMethodProcessor</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletModelAttributeMethodProcessor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ModelAttributeMethodProcessor</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><span class="hljs-comment">//本方法在ModelAttributeMethodProcessor类，</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">supportsParameter</span><span class="hljs-params">(MethodParameter parameter)</span> &#123;<br><span class="hljs-keyword">return</span> (parameter.hasParameterAnnotation(ModelAttribute.class) ||<br>(<span class="hljs-built_in">this</span>.annotationNotRequired &amp;&amp; !BeanUtils.isSimpleProperty(parameter.getParameterType())));<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Nullable</span><span class="hljs-comment">//本方法在ModelAttributeMethodProcessor类，</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Object <span class="hljs-title function_">resolveArgument</span><span class="hljs-params">(MethodParameter parameter, <span class="hljs-meta">@Nullable</span> ModelAndViewContainer mavContainer,</span><br><span class="hljs-params">NativeWebRequest webRequest, <span class="hljs-meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>...<br><br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> ModelFactory.getNameForParameter(parameter);<br><span class="hljs-type">ModelAttribute</span> <span class="hljs-variable">ann</span> <span class="hljs-operator">=</span> parameter.getParameterAnnotation(ModelAttribute.class);<br><span class="hljs-keyword">if</span> (ann != <span class="hljs-literal">null</span>) &#123;<br>mavContainer.setBinding(name, ann.binding());<br>&#125;<br><br><span class="hljs-type">Object</span> <span class="hljs-variable">attribute</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">BindingResult</span> <span class="hljs-variable">bindingResult</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br><span class="hljs-keyword">if</span> (mavContainer.containsAttribute(name)) &#123;<br>attribute = mavContainer.getModel().get(name);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// Create attribute instance</span><br><span class="hljs-keyword">try</span> &#123;<br>attribute = createAttribute(name, parameter, binderFactory, webRequest);<br>&#125;<br><span class="hljs-keyword">catch</span> (BindException ex) &#123;<br>...<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (bindingResult == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-comment">// Bean property binding and validation;</span><br><span class="hljs-comment">// skipped in case of binding failure on construction.</span><br><span class="hljs-type">WebDataBinder</span> <span class="hljs-variable">binder</span> <span class="hljs-operator">=</span> binderFactory.createBinder(webRequest, attribute, name);<br><span class="hljs-keyword">if</span> (binder.getTarget() != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">if</span> (!mavContainer.isBindingDisabled(name)) &#123;<br>                    <span class="hljs-comment">//web数据绑定器，将请求参数的值绑定到指定的JavaBean里面**</span><br>bindRequestParameters(binder, webRequest);<br>&#125;<br>validateIfApplicable(binder, parameter);<br><span class="hljs-keyword">if</span> (binder.getBindingResult().hasErrors() &amp;&amp; isBindExceptionRequired(binder, parameter)) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BindException</span>(binder.getBindingResult());<br>&#125;<br>&#125;<br><span class="hljs-comment">// Value type adaptation, also covering java.util.Optional</span><br><span class="hljs-keyword">if</span> (!parameter.getParameterType().isInstance(attribute)) &#123;<br>attribute = binder.convertIfNecessary(binder.getTarget(), parameter.getParameterType(), parameter);<br>&#125;<br>bindingResult = binder.getBindingResult();<br>&#125;<br><br><span class="hljs-comment">// Add resolved attribute and BindingResult at the end of the model</span><br>Map&lt;String, Object&gt; bindingResultModel = bindingResult.getModel();<br>mavContainer.removeAttributes(bindingResultModel);<br>mavContainer.addAllAttributes(bindingResultModel);<br><br><span class="hljs-keyword">return</span> attribute;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>WebDataBinder 利用它里面的 Converters 将请求数据转成指定的数据类型。再次封装到JavaBean中</strong></p><p><strong>在过程当中，用到GenericConversionService：在设置每一个值的时候，找它里面的所有converter那个可以将这个数据类型（request带来参数的字符串）转换到指定的类型</strong></p><h2 id="自定义Converter原理"><a href="#自定义Converter原理" class="headerlink" title="自定义Converter原理"></a>自定义Converter原理</h2><p>未来我们可以给WebDataBinder里面放自己的Converter；</p><p>下面演示将字符串<code>“啊猫,3”</code>转换成<code>Pet</code>对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1、WebMvcConfigurer定制化SpringMVC的功能</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> WebMvcConfigurer <span class="hljs-title function_">webMvcConfigurer</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebMvcConfigurer</span>() &#123;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addFormatters</span><span class="hljs-params">(FormatterRegistry registry)</span> &#123;<br>            registry.addConverter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Converter</span>&lt;String, Pet&gt;() &#123;<br><br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> Pet <span class="hljs-title function_">convert</span><span class="hljs-params">(String source)</span> &#123;<br>                    <span class="hljs-comment">// 啊猫,3</span><br>                    <span class="hljs-keyword">if</span>(!StringUtils.isEmpty(source))&#123;<br>                        <span class="hljs-type">Pet</span> <span class="hljs-variable">pet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pet</span>();<br>                        String[] split = source.split(<span class="hljs-string">&quot;,&quot;</span>);<br>                        pet.setName(split[<span class="hljs-number">0</span>]);<br>                        pet.setAge(Integer.parseInt(split[<span class="hljs-number">1</span>]));<br>                        <span class="hljs-keyword">return</span> pet;<br>                    &#125;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>                &#125;<br>            &#125;);<br>        &#125;<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ReturnValueHandler原理"><a href="#ReturnValueHandler原理" class="headerlink" title="ReturnValueHandler原理"></a>ReturnValueHandler原理</h2><p><img src="https://img-blog.csdnimg.cn/20210205010403920.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE4NjMwMjQ=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>假设给前端自动返回json数据，需要引入相关的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- web场景自动引入了json场景 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-json<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>控制层代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResponseTestController</span> &#123;<br>    <br><span class="hljs-meta">@ResponseBody</span>  <span class="hljs-comment">//利用返回值处理器里面的消息转换器进行处理</span><br>    <span class="hljs-meta">@GetMapping(value = &quot;/test/person&quot;)</span><br>    <span class="hljs-keyword">public</span> Person <span class="hljs-title function_">getPerson</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        person.setAge(<span class="hljs-number">28</span>);<br>        person.setBirth(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        person.setUserName(<span class="hljs-string">&quot;zhangsan&quot;</span>);<br>        <span class="hljs-keyword">return</span> person;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>ReturnValueHandler重点</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestMappingHandlerAdapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractHandlerMethodAdapter</span><br><span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanFactoryAware</span>, InitializingBean &#123;<br><br>    ...<br>    <br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">protected</span> ModelAndView <span class="hljs-title function_">invokeHandlerMethod</span><span class="hljs-params">(HttpServletRequest request,</span><br><span class="hljs-params">HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br><span class="hljs-type">ServletWebRequest</span> <span class="hljs-variable">webRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletWebRequest</span>(request, response);<br><span class="hljs-keyword">try</span> &#123;<br><br>            ...<br>            <br>            <span class="hljs-type">ServletInvocableHandlerMethod</span> <span class="hljs-variable">invocableMethod</span> <span class="hljs-operator">=</span> createInvocableHandlerMethod(handlerMethod);<br>                <br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.argumentResolvers != <span class="hljs-literal">null</span>) &#123;<br>invocableMethod.setHandlerMethodArgumentResolvers(<span class="hljs-built_in">this</span>.argumentResolvers);<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.returnValueHandlers != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//&lt;----关注点</span><br>invocableMethod.setHandlerMethodReturnValueHandlers(<span class="hljs-built_in">this</span>.returnValueHandlers);<br>&#125;<br><br>            ...<br><br>invocableMethod.invokeAndHandle(webRequest, mavContainer);<span class="hljs-comment">//看下块代码</span><br><span class="hljs-keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-keyword">return</span> getModelAndView(mavContainer, modelFactory, webRequest);<br>&#125;<br><span class="hljs-keyword">finally</span> &#123;<br>webRequest.requestCompleted();<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletInvocableHandlerMethod</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">InvocableHandlerMethod</span> &#123;<br>    <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invokeAndHandle</span><span class="hljs-params">(ServletWebRequest webRequest, ModelAndViewContainer mavContainer,</span><br><span class="hljs-params">Object... providedArgs)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br><span class="hljs-type">Object</span> <span class="hljs-variable">returnValue</span> <span class="hljs-operator">=</span> invokeForRequest(webRequest, mavContainer, providedArgs);<br><br>        ...<br>        <br><span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//看下块代码</span><br><span class="hljs-built_in">this</span>.returnValueHandlers.handleReturnValue(<br>returnValue, getReturnValueType(returnValue), mavContainer, webRequest);<br>&#125;<br><span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>...<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HandlerMethodReturnValueHandlerComposite</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerMethodReturnValueHandler</span> &#123;<br>    <br>    ...<br>    <br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleReturnValue</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Object returnValue, MethodParameter returnType,</span><br><span class="hljs-params">ModelAndViewContainer mavContainer, NativeWebRequest webRequest)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-comment">//selectHandler()实现在下面</span><br><span class="hljs-type">HandlerMethodReturnValueHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> selectHandler(returnValue, returnType);<br><span class="hljs-keyword">if</span> (handler == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Unknown return value type: &quot;</span> + returnType.getParameterType().getName());<br>&#125;<br>        <span class="hljs-comment">//开始处理</span><br>handler.handleReturnValue(returnValue, returnType, mavContainer, webRequest);<br>&#125;<br>    <br>   <span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">private</span> HandlerMethodReturnValueHandler <span class="hljs-title function_">selectHandler</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Object value, MethodParameter returnType)</span> &#123;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">isAsyncValue</span> <span class="hljs-operator">=</span> isAsyncReturnValue(value, returnType);<br><span class="hljs-keyword">for</span> (HandlerMethodReturnValueHandler handler : <span class="hljs-built_in">this</span>.returnValueHandlers) &#123;<br><span class="hljs-keyword">if</span> (isAsyncValue &amp;&amp; !(handler <span class="hljs-keyword">instanceof</span> AsyncHandlerMethodReturnValueHandler)) &#123;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (handler.supportsReturnType(returnType)) &#123;<br><span class="hljs-keyword">return</span> handler;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>@ResponseBody</code> 注解，即<code>RequestResponseBodyMethodProcessor</code>，它实现<code>HandlerMethodReturnValueHandler</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestResponseBodyMethodProcessor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractMessageConverterMethodProcessor</span> &#123;<br><br>    ...<br>    <br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleReturnValue</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Object returnValue, MethodParameter returnType,</span><br><span class="hljs-params">ModelAndViewContainer mavContainer, NativeWebRequest webRequest)</span><br><span class="hljs-keyword">throws</span> IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException &#123;<br><br>mavContainer.setRequestHandled(<span class="hljs-literal">true</span>);<br><span class="hljs-type">ServletServerHttpRequest</span> <span class="hljs-variable">inputMessage</span> <span class="hljs-operator">=</span> createInputMessage(webRequest);<br><span class="hljs-type">ServletServerHttpResponse</span> <span class="hljs-variable">outputMessage</span> <span class="hljs-operator">=</span> createOutputMessage(webRequest);<br><br>        <span class="hljs-comment">// 使用消息转换器进行写出操作，本方法下一章节介绍：</span><br><span class="hljs-comment">// Try even with null return value. ResponseBodyAdvice could get involved.</span><br>writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="HTTPMessageConverter原理"><a href="#HTTPMessageConverter原理" class="headerlink" title="HTTPMessageConverter原理"></a>HTTPMessageConverter原理</h2><p>返回值处理器<code>ReturnValueHandler</code>原理：</p><ol><li><p>返回值处理器判断是否支持这种类型返回值 <code>supportsReturnType</code></p></li><li><p>返回值处理器调用 <code>handleReturnValue</code> 进行处理</p></li><li><p>&#96;&#96;&#96;<br>RequestResponseBodyMethodProcessor</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs"><br>可以处理返回值标了<br><br></code></pre></td></tr></table></figure><p>@ResponseBody</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><br>注解的。<br><br><span class="hljs-bullet">- </span>利用<br><br></code></pre></td></tr></table></figure><p>  MessageConverters</p>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br>进行处理 将数据写为json<br><br><span class="hljs-bullet">1.</span> 内容协商（浏览器默认会以请求头的方式告诉服务器他能接受什么样的内容类型）<br><br><span class="hljs-bullet">2.</span> 服务器最终根据自己自身的能力，决定服务器能生产出什么样内容类型的数据，<br><br><span class="hljs-bullet">3.</span> SpringMVC会挨个遍历所有容器底层的<br><br></code></pre></td></tr></table></figure><pre><code class="hljs"> HttpMessageConverter <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><code class="hljs java"><br>        看谁能处理？<br><br>        <span class="hljs-number">1.</span> 得到`MappingJackson2HttpMessageConverter`可以将对象写为json<br>        <span class="hljs-number">2.</span> 利用`MappingJackson2HttpMessageConverter`将对象转为json再写出去。<br><br>```java<br><span class="hljs-comment">//RequestResponseBodyMethodProcessor继承这类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractMessageConverterMethodProcessor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractMessageConverterMethodArgumentResolver</span><br><span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerMethodReturnValueHandler</span> &#123;<br><br>    ...<br>    <br>    <span class="hljs-comment">//承接上一节内容</span><br>    <span class="hljs-keyword">protected</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeWithMessageConverters</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> T value, MethodParameter returnType,</span><br><span class="hljs-params">                ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)</span><br>                <span class="hljs-keyword">throws</span> IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException &#123;<br><br>            Object body;<br>            Class&lt;?&gt; valueType;<br>            Type targetType;<br><br>            <span class="hljs-keyword">if</span> (value <span class="hljs-keyword">instanceof</span> CharSequence) &#123;<br>                body = value.toString();<br>                valueType = String.class;<br>                targetType = String.class;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                body = value;<br>                valueType = getReturnValueType(body, returnType);<br>                targetType = GenericTypeResolver.resolveType(getGenericType(returnType), returnType.getContainingClass());<br>            &#125;<br><br>...<br><br>            <span class="hljs-comment">//内容协商（浏览器默认会以请求头(参数Accept)的方式告诉服务器他能接受什么样的内容类型）</span><br>            <span class="hljs-type">MediaType</span> <span class="hljs-variable">selectedMediaType</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-type">MediaType</span> <span class="hljs-variable">contentType</span> <span class="hljs-operator">=</span> outputMessage.getHeaders().getContentType();<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">isContentTypePreset</span> <span class="hljs-operator">=</span> contentType != <span class="hljs-literal">null</span> &amp;&amp; contentType.isConcrete();<br>            <span class="hljs-keyword">if</span> (isContentTypePreset) &#123;<br>                <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>                    logger.debug(<span class="hljs-string">&quot;Found &#x27;Content-Type:&quot;</span> + contentType + <span class="hljs-string">&quot;&#x27; in response&quot;</span>);<br>                &#125;<br>                selectedMediaType = contentType;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> inputMessage.getServletRequest();<br>                List&lt;MediaType&gt; acceptableTypes = getAcceptableMediaTypes(request);<br>                <span class="hljs-comment">//服务器最终根据自己自身的能力，决定服务器能生产出什么样内容类型的数据</span><br>                List&lt;MediaType&gt; producibleTypes = getProducibleMediaTypes(request, valueType, targetType);<br><br>                <span class="hljs-keyword">if</span> (body != <span class="hljs-literal">null</span> &amp;&amp; producibleTypes.isEmpty()) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpMessageNotWritableException</span>(<br>                            <span class="hljs-string">&quot;No converter found for return value of type: &quot;</span> + valueType);<br>                &#125;<br>                List&lt;MediaType&gt; mediaTypesToUse = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>                <span class="hljs-keyword">for</span> (MediaType requestedType : acceptableTypes) &#123;<br>                    <span class="hljs-keyword">for</span> (MediaType producibleType : producibleTypes) &#123;<br>                        <span class="hljs-keyword">if</span> (requestedType.isCompatibleWith(producibleType)) &#123;<br>                            mediaTypesToUse.add(getMostSpecificMediaType(requestedType, producibleType));<br>                        &#125;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (mediaTypesToUse.isEmpty()) &#123;<br>                    <span class="hljs-keyword">if</span> (body != <span class="hljs-literal">null</span>) &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpMediaTypeNotAcceptableException</span>(producibleTypes);<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>                        logger.debug(<span class="hljs-string">&quot;No match for &quot;</span> + acceptableTypes + <span class="hljs-string">&quot;, supported: &quot;</span> + producibleTypes);<br>                    &#125;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br><br>                MediaType.sortBySpecificityAndQuality(mediaTypesToUse);<br><br>                <span class="hljs-comment">//选择一个MediaType</span><br>                <span class="hljs-keyword">for</span> (MediaType mediaType : mediaTypesToUse) &#123;<br>                    <span class="hljs-keyword">if</span> (mediaType.isConcrete()) &#123;<br>                        selectedMediaType = mediaType;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mediaType.isPresentIn(ALL_APPLICATION_MEDIA_TYPES)) &#123;<br>                        selectedMediaType = MediaType.APPLICATION_OCTET_STREAM;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>                    logger.debug(<span class="hljs-string">&quot;Using &#x27;&quot;</span> + selectedMediaType + <span class="hljs-string">&quot;&#x27;, given &quot;</span> +<br>                            acceptableTypes + <span class="hljs-string">&quot; and supported &quot;</span> + producibleTypes);<br>                &#125;<br>            &#125;<br><br>        <br>            <span class="hljs-keyword">if</span> (selectedMediaType != <span class="hljs-literal">null</span>) &#123;<br>                selectedMediaType = selectedMediaType.removeQualityValue();<br>                <span class="hljs-comment">//本节主角：HttpMessageConverter</span><br>                <span class="hljs-keyword">for</span> (HttpMessageConverter&lt;?&gt; converter : <span class="hljs-built_in">this</span>.messageConverters) &#123;<br>                    <span class="hljs-type">GenericHttpMessageConverter</span> <span class="hljs-variable">genericConverter</span> <span class="hljs-operator">=</span> (converter <span class="hljs-keyword">instanceof</span> GenericHttpMessageConverter ?<br>                            (GenericHttpMessageConverter&lt;?&gt;) converter : <span class="hljs-literal">null</span>);<br>                    <br>                    <span class="hljs-comment">//判断是否可写</span><br>                    <span class="hljs-keyword">if</span> (genericConverter != <span class="hljs-literal">null</span> ?<br>                            ((GenericHttpMessageConverter) converter).canWrite(targetType, valueType, selectedMediaType) :<br>                            converter.canWrite(valueType, selectedMediaType)) &#123;<br>                        body = getAdvice().beforeBodyWrite(body, returnType, selectedMediaType,<br>                                (Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpMessageConverter</span>&lt;?&gt;&gt;) converter.getClass(),<br>                                inputMessage, outputMessage);<br>                        <span class="hljs-keyword">if</span> (body != <span class="hljs-literal">null</span>) &#123;<br>                            <span class="hljs-type">Object</span> <span class="hljs-variable">theBody</span> <span class="hljs-operator">=</span> body;<br>                            LogFormatUtils.traceDebug(logger, traceOn -&gt;<br>                                    <span class="hljs-string">&quot;Writing [&quot;</span> + LogFormatUtils.formatValue(theBody, !traceOn) + <span class="hljs-string">&quot;]&quot;</span>);<br>                            addContentDispositionHeader(inputMessage, outputMessage);<br><span class="hljs-comment">//开始写入</span><br>                            <span class="hljs-keyword">if</span> (genericConverter != <span class="hljs-literal">null</span>) &#123;<br>                                genericConverter.write(body, targetType, selectedMediaType, outputMessage);<br>                            &#125;<br>                            <span class="hljs-keyword">else</span> &#123;<br>                                ((HttpMessageConverter) converter).write(body, selectedMediaType, outputMessage);<br>                            &#125;<br>                        &#125;<br>                        <span class="hljs-keyword">else</span> &#123;<br>                            <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>                                logger.debug(<span class="hljs-string">&quot;Nothing to write: null body&quot;</span>);<br>                            &#125;<br>                        &#125;<br>                        <span class="hljs-keyword">return</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>...<br>        &#125;<br></code></pre></td></tr></table></figure></code></pre></li></ol><p><code>HTTPMessageConverter</code>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Strategy interface for converting from and to HTTP requests and responses.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">HttpMessageConverter</span>&lt;T&gt; &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Indicates whether the given class can be read by this converter.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">canRead</span><span class="hljs-params">(Class&lt;?&gt; clazz, <span class="hljs-meta">@Nullable</span> MediaType mediaType)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Indicates whether the given class can be written by this converter.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">canWrite</span><span class="hljs-params">(Class&lt;?&gt; clazz, <span class="hljs-meta">@Nullable</span> MediaType mediaType)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Return the list of &#123;<span class="hljs-doctag">@link</span> MediaType&#125; objects supported by this converter.</span><br><span class="hljs-comment"> */</span><br>List&lt;MediaType&gt; <span class="hljs-title function_">getSupportedMediaTypes</span><span class="hljs-params">()</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Read an object of the given type from the given input message, and returns it.</span><br><span class="hljs-comment"> */</span><br>T <span class="hljs-title function_">read</span><span class="hljs-params">(Class&lt;? extends T&gt; clazz, HttpInputMessage inputMessage)</span><br><span class="hljs-keyword">throws</span> IOException, HttpMessageNotReadableException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Write an given object to the given output message.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(T t, <span class="hljs-meta">@Nullable</span> MediaType contentType, HttpOutputMessage outputMessage)</span><br><span class="hljs-keyword">throws</span> IOException, HttpMessageNotWritableException;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>HttpMessageConverter</code>: 看是否支持将 此 <code>Class</code>类型的对象，转为<code>MediaType</code>类型的数据。</p><p>例子：<code>Person</code>对象转为JSON，或者 JSON转为<code>Person</code>，这将用到<code>MappingJackson2HttpMessageConverter</code></p><p><img src="https://img-blog.csdnimg.cn/20210205010509984.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE4NjMwMjQ=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MappingJackson2HttpMessageConverter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractJackson2HttpMessageConverter</span> &#123;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>关于<code>MappingJackson2HttpMessageConverter</code>的实例化请看下节。</p><h3 id="关于HttpMessageConverters的初始化"><a href="#关于HttpMessageConverters的初始化" class="headerlink" title="关于HttpMessageConverters的初始化"></a>关于HttpMessageConverters的初始化</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-type">DispatcherServlet</span>`的初始化时会调用`initHandlerAdapters(<span class="hljs-type">ApplicationContext</span> context)<br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DispatcherServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">FrameworkServlet</span> </span>&#123;<br>    <br>    ...<br>    <br><span class="hljs-keyword">private</span> void initHandlerAdapters(<span class="hljs-type">ApplicationContext</span> context) &#123;<br><span class="hljs-keyword">this</span>.handlerAdapters = <span class="hljs-literal">null</span>;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.detectAllHandlerAdapters) &#123;<br><span class="hljs-comment">// Find all HandlerAdapters in the ApplicationContext, including ancestor contexts.</span><br><span class="hljs-type">Map</span>&lt;<span class="hljs-type">String</span>, <span class="hljs-type">HandlerAdapter</span>&gt; matchingBeans =<br><span class="hljs-type">BeanFactoryUtils</span>.beansOfTypeIncludingAncestors(context, <span class="hljs-type">HandlerAdapter</span>.<span class="hljs-keyword">class</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>);<br><span class="hljs-keyword">if</span> (!matchingBeans.isEmpty()) &#123;<br><span class="hljs-keyword">this</span>.handlerAdapters = <span class="hljs-keyword">new</span> <span class="hljs-type">ArrayList</span>&lt;&gt;(matchingBeans.values());<br><span class="hljs-comment">// We keep HandlerAdapters in sorted order.</span><br><span class="hljs-type">AnnotationAwareOrderComparator</span>.sort(<span class="hljs-keyword">this</span>.handlerAdapters);<br>&#125;<br>&#125;<br>      ...<br></code></pre></td></tr></table></figure><p>上述代码会加载<code>ApplicationContext</code>的所有<code>HandlerAdapter</code>，用来处理<code>@RequestMapping</code>的<code>RequestMappingHandlerAdapter</code>实现<code>HandlerAdapter</code>接口，<code>RequestMappingHandlerAdapter</code>也被实例化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestMappingHandlerAdapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractHandlerMethodAdapter</span><br><span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanFactoryAware</span>, InitializingBean &#123;<br>    <br>    ...<br><br>    <span class="hljs-keyword">private</span> List&lt;HttpMessageConverter&lt;?&gt;&gt; messageConverters;<br>    <br>    ...<br>    <br><span class="hljs-keyword">public</span> <span class="hljs-title function_">RequestMappingHandlerAdapter</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-built_in">this</span>.messageConverters = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(<span class="hljs-number">4</span>);<br><span class="hljs-built_in">this</span>.messageConverters.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayHttpMessageConverter</span>());<br><span class="hljs-built_in">this</span>.messageConverters.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringHttpMessageConverter</span>());<br><span class="hljs-keyword">if</span> (!shouldIgnoreXml) &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-built_in">this</span>.messageConverters.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SourceHttpMessageConverter</span>&lt;&gt;());<br>&#125;<br><span class="hljs-keyword">catch</span> (Error err) &#123;<br><span class="hljs-comment">// Ignore when no TransformerFactory implementation is available</span><br>&#125;<br>&#125;<br><span class="hljs-built_in">this</span>.messageConverters.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AllEncompassingFormHttpMessageConverter</span>());<br>&#125;<br></code></pre></td></tr></table></figure><p>在构造器中看到<strong>一堆</strong><code>HttpMessageConverter</code>。接着，重点查看<code>AllEncompassingFormHttpMessageConverter</code>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AllEncompassingFormHttpMessageConverter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FormHttpMessageConverter</span> &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Boolean flag controlled by a &#123;<span class="hljs-doctag">@code</span> spring.xml.ignore&#125; system property that instructs Spring to</span><br><span class="hljs-comment"> * ignore XML, i.e. to not initialize the XML-related infrastructure.</span><br><span class="hljs-comment"> * &lt;p&gt;The default is &quot;false&quot;.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">shouldIgnoreXml</span> <span class="hljs-operator">=</span> SpringProperties.getFlag(<span class="hljs-string">&quot;spring.xml.ignore&quot;</span>);<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> jaxb2Present;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> jackson2Present;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> jackson2XmlPresent;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> jackson2SmilePresent;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> gsonPresent;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> jsonbPresent;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> kotlinSerializationJsonPresent;<br><br><span class="hljs-keyword">static</span> &#123;<br><span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> AllEncompassingFormHttpMessageConverter.class.getClassLoader();<br>jaxb2Present = ClassUtils.isPresent(<span class="hljs-string">&quot;javax.xml.bind.Binder&quot;</span>, classLoader);<br>jackson2Present = ClassUtils.isPresent(<span class="hljs-string">&quot;com.fasterxml.jackson.databind.ObjectMapper&quot;</span>, classLoader) &amp;&amp;<br>ClassUtils.isPresent(<span class="hljs-string">&quot;com.fasterxml.jackson.core.JsonGenerator&quot;</span>, classLoader);<br>jackson2XmlPresent = ClassUtils.isPresent(<span class="hljs-string">&quot;com.fasterxml.jackson.dataformat.xml.XmlMapper&quot;</span>, classLoader);<br>jackson2SmilePresent = ClassUtils.isPresent(<span class="hljs-string">&quot;com.fasterxml.jackson.dataformat.smile.SmileFactory&quot;</span>, classLoader);<br>gsonPresent = ClassUtils.isPresent(<span class="hljs-string">&quot;com.google.gson.Gson&quot;</span>, classLoader);<br>jsonbPresent = ClassUtils.isPresent(<span class="hljs-string">&quot;javax.json.bind.Jsonb&quot;</span>, classLoader);<br>kotlinSerializationJsonPresent = ClassUtils.isPresent(<span class="hljs-string">&quot;kotlinx.serialization.json.Json&quot;</span>, classLoader);<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">AllEncompassingFormHttpMessageConverter</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span> (!shouldIgnoreXml) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>addPartConverter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SourceHttpMessageConverter</span>&lt;&gt;());<br>&#125;<br><span class="hljs-keyword">catch</span> (Error err) &#123;<br><span class="hljs-comment">// Ignore when no TransformerFactory implementation is available</span><br>&#125;<br><br><span class="hljs-keyword">if</span> (jaxb2Present &amp;&amp; !jackson2XmlPresent) &#123;<br>addPartConverter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Jaxb2RootElementHttpMessageConverter</span>());<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (jackson2Present) &#123;<br>addPartConverter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MappingJackson2HttpMessageConverter</span>());<span class="hljs-comment">//&lt;----重点看这里</span><br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (gsonPresent) &#123;<br>addPartConverter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GsonHttpMessageConverter</span>());<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (jsonbPresent) &#123;<br>addPartConverter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonbHttpMessageConverter</span>());<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (kotlinSerializationJsonPresent) &#123;<br>addPartConverter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">KotlinSerializationJsonHttpMessageConverter</span>());<br>&#125;<br><br><span class="hljs-keyword">if</span> (jackson2XmlPresent &amp;&amp; !shouldIgnoreXml) &#123;<br>addPartConverter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MappingJackson2XmlHttpMessageConverter</span>());<br>&#125;<br><br><span class="hljs-keyword">if</span> (jackson2SmilePresent) &#123;<br>addPartConverter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MappingJackson2SmileHttpMessageConverter</span>());<br>&#125;<br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FormHttpMessageConverter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HttpMessageConverter</span>&lt;MultiValueMap&lt;String, ?&gt;&gt; &#123;<br>    <br>    ...<br>        <br>    <span class="hljs-keyword">private</span> List&lt;HttpMessageConverter&lt;?&gt;&gt; partConverters = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <br>    ...<br>        <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addPartConverter</span><span class="hljs-params">(HttpMessageConverter&lt;?&gt; partConverter)</span> &#123;<br>Assert.notNull(partConverter, <span class="hljs-string">&quot;&#x27;partConverter&#x27; must not be null&quot;</span>);<br><span class="hljs-built_in">this</span>.partConverters.add(partConverter);<br>&#125;<br>    <br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>AllEncompassingFormHttpMessageConverter</code>类构造器看到<code>MappingJackson2HttpMessageConverter</code>类的实例化，<code>AllEncompassingFormHttpMessageConverter</code><strong>包含</strong><code>MappingJackson2HttpMessageConverter</code>。</p><p><code>ReturnValueHandler</code>是怎么与<code>MappingJackson2HttpMessageConverter</code>关联起来？请看下节。</p><h3 id="ReturnValueHandler与MappingJackson2HttpMessageConverter关联"><a href="#ReturnValueHandler与MappingJackson2HttpMessageConverter关联" class="headerlink" title="ReturnValueHandler与MappingJackson2HttpMessageConverter关联"></a>ReturnValueHandler与MappingJackson2HttpMessageConverter关联</h3><p>再次回顾<code>RequestMappingHandlerAdapter</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestMappingHandlerAdapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractHandlerMethodAdapter</span><br><span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanFactoryAware</span>, InitializingBean &#123;<br>    <br>    ...<br>    <span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">private</span> HandlerMethodReturnValueHandlerComposite returnValueHandlers;<span class="hljs-comment">//我们关注的returnValueHandlers</span><br>    <br>   <br>    <span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Nullable</span><span class="hljs-comment">//本方法在AbstractHandlerMethodAdapter</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> ModelAndView <span class="hljs-title function_">handle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span><br><span class="hljs-keyword">throws</span> Exception &#123;<br><br><span class="hljs-keyword">return</span> handleInternal(request, response, (HandlerMethod) handler);<br>&#125;<br>        <br>    <span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> ModelAndView <span class="hljs-title function_">handleInternal</span><span class="hljs-params">(HttpServletRequest request,</span><br><span class="hljs-params">HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>ModelAndView mav;<br>        ...<br>        mav = invokeHandlerMethod(request, response, handlerMethod);<br>        ...<br><span class="hljs-keyword">return</span> mav;<br>&#125;<br>    <br>    <span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">protected</span> ModelAndView <span class="hljs-title function_">invokeHandlerMethod</span><span class="hljs-params">(HttpServletRequest request,</span><br><span class="hljs-params">HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br><span class="hljs-type">ServletWebRequest</span> <span class="hljs-variable">webRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletWebRequest</span>(request, response);<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">WebDataBinderFactory</span> <span class="hljs-variable">binderFactory</span> <span class="hljs-operator">=</span> getDataBinderFactory(handlerMethod);<br><span class="hljs-type">ModelFactory</span> <span class="hljs-variable">modelFactory</span> <span class="hljs-operator">=</span> getModelFactory(handlerMethod, binderFactory);<br><br><span class="hljs-type">ServletInvocableHandlerMethod</span> <span class="hljs-variable">invocableMethod</span> <span class="hljs-operator">=</span> createInvocableHandlerMethod(handlerMethod);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.argumentResolvers != <span class="hljs-literal">null</span>) &#123;<br>invocableMethod.setHandlerMethodArgumentResolvers(<span class="hljs-built_in">this</span>.argumentResolvers);<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.returnValueHandlers != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//&lt;---我们关注的returnValueHandlers</span><br>invocableMethod.setHandlerMethodReturnValueHandlers(<span class="hljs-built_in">this</span>.returnValueHandlers);<br>&#125;<br>            <br>            ...<br>            <br>invocableMethod.invokeAndHandle(webRequest, mavContainer);<br><span class="hljs-keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-keyword">return</span> getModelAndView(mavContainer, modelFactory, webRequest);<br>&#125;<br><span class="hljs-keyword">finally</span> &#123;<br>webRequest.requestCompleted();<br>&#125;<br>&#125;<br>    <br>   <span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterPropertiesSet</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// Do this first, it may add ResponseBody advice beans</span><br><br>        ...<br>        <br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.returnValueHandlers == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//赋值returnValueHandlers</span><br>List&lt;HandlerMethodReturnValueHandler&gt; handlers = getDefaultReturnValueHandlers();<br><span class="hljs-built_in">this</span>.returnValueHandlers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HandlerMethodReturnValueHandlerComposite</span>().addHandlers(handlers);<br>&#125;<br>&#125;<br>    <br>    <span class="hljs-keyword">private</span> List&lt;HandlerMethodReturnValueHandler&gt; <span class="hljs-title function_">getDefaultReturnValueHandlers</span><span class="hljs-params">()</span> &#123;<br>List&lt;HandlerMethodReturnValueHandler&gt; handlers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(<span class="hljs-number">20</span>);<br><br>...<br><span class="hljs-comment">// Annotation-based return value types</span><br>        <span class="hljs-comment">//这里就是 ReturnValueHandler与 MappingJackson2HttpMessageConverter关联 的关键点</span><br>handlers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestResponseBodyMethodProcessor</span>(getMessageConverters(),<span class="hljs-comment">//&lt;---MessageConverters也就传参传进来的</span><br><span class="hljs-built_in">this</span>.contentNegotiationManager, <span class="hljs-built_in">this</span>.requestResponseBodyAdvice));<span class="hljs-comment">//</span><br>        ...<br><br><span class="hljs-keyword">return</span> handlers;<br>&#125;<br>    <br>    <span class="hljs-comment">//------</span><br>    <br>    <span class="hljs-keyword">public</span> List&lt;HttpMessageConverter&lt;?&gt;&gt; getMessageConverters() &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.messageConverters;<br>&#125;<br>    <br>    <span class="hljs-comment">//RequestMappingHandlerAdapter构造器已初始化部分messageConverters</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">RequestMappingHandlerAdapter</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-built_in">this</span>.messageConverters = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(<span class="hljs-number">4</span>);<br><span class="hljs-built_in">this</span>.messageConverters.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayHttpMessageConverter</span>());<br><span class="hljs-built_in">this</span>.messageConverters.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringHttpMessageConverter</span>());<br><span class="hljs-keyword">if</span> (!shouldIgnoreXml) &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-built_in">this</span>.messageConverters.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SourceHttpMessageConverter</span>&lt;&gt;());<br>&#125;<br><span class="hljs-keyword">catch</span> (Error err) &#123;<br><span class="hljs-comment">// Ignore when no TransformerFactory implementation is available</span><br>&#125;<br>&#125;<br><span class="hljs-built_in">this</span>.messageConverters.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AllEncompassingFormHttpMessageConverter</span>());<br>&#125;<br><br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>应用中<code>WebMvcAutoConfiguration</code>（底层是<code>WebMvcConfigurationSupport</code>实现）传入更多<code>messageConverters</code>，其中就包含<code>MappingJackson2HttpMessageConverter</code>。</p><h2 id="内容协商原理"><a href="#内容协商原理" class="headerlink" title="内容协商原理"></a>内容协商原理</h2><p>根据客户端接收能力不同，返回不同媒体类型的数据。</p><p>引入XML依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可用Postman软件分别测试返回json和xml：只需要改变请求头中Accept字段（application&#x2F;json、application&#x2F;xml）。</p><p>Http协议中规定的，Accept字段告诉服务器本客户端可以接收的数据类型。</p><p><strong>内容协商原理</strong>：</p><ol><li>判断当前响应头中是否已经有确定的媒体类型<code>MediaType</code>。</li><li>获取客户端（PostMan、浏览器）支持接收的内容类型。（获取客户端Accept请求头字段application&#x2F;xml）（这一步在下一节有详细介绍）<ul><li><code>contentNegotiationManager</code> 内容协商管理器 默认使用基于请求头的策略</li><li><code>HeaderContentNegotiationStrategy</code> 确定客户端可以接收的内容类型</li></ul></li><li>遍历循环所有当前系统的 <code>MessageConverter</code>，看谁支持操作这个对象（Person）</li><li>找到支持操作Person的converter，把converter支持的媒体类型统计出来。</li><li>客户端需要application&#x2F;xml，服务端有10种MediaType。</li><li>进行内容协商的最佳匹配媒体类型</li><li>用 支持 将对象转为 最佳匹配媒体类型 的converter。调用它进行转化 。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//RequestResponseBodyMethodProcessor继承这类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractMessageConverterMethodProcessor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractMessageConverterMethodArgumentResolver</span><br><span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerMethodReturnValueHandler</span> &#123;<br><br>    ...<br>    <br>    <span class="hljs-comment">//跟上一节的代码一致</span><br>    <span class="hljs-keyword">protected</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeWithMessageConverters</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> T value, MethodParameter returnType,</span><br><span class="hljs-params">                ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)</span><br>                <span class="hljs-keyword">throws</span> IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException &#123;<br><br>            Object body;<br>            Class&lt;?&gt; valueType;<br>            Type targetType;<br><br>            <span class="hljs-keyword">if</span> (value <span class="hljs-keyword">instanceof</span> CharSequence) &#123;<br>                body = value.toString();<br>                valueType = String.class;<br>                targetType = String.class;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                body = value;<br>                valueType = getReturnValueType(body, returnType);<br>                targetType = GenericTypeResolver.resolveType(getGenericType(returnType), returnType.getContainingClass());<br>            &#125;<br><br>...<br><br>            <span class="hljs-comment">//本节重点</span><br>            <span class="hljs-comment">//内容协商（浏览器默认会以请求头(参数Accept)的方式告诉服务器他能接受什么样的内容类型）</span><br>            <span class="hljs-type">MediaType</span> <span class="hljs-variable">selectedMediaType</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-type">MediaType</span> <span class="hljs-variable">contentType</span> <span class="hljs-operator">=</span> outputMessage.getHeaders().getContentType();<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">isContentTypePreset</span> <span class="hljs-operator">=</span> contentType != <span class="hljs-literal">null</span> &amp;&amp; contentType.isConcrete();<br>            <span class="hljs-keyword">if</span> (isContentTypePreset) &#123;<br>                <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>                    logger.debug(<span class="hljs-string">&quot;Found &#x27;Content-Type:&quot;</span> + contentType + <span class="hljs-string">&quot;&#x27; in response&quot;</span>);<br>                &#125;<br>                selectedMediaType = contentType;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> inputMessage.getServletRequest();<br>                List&lt;MediaType&gt; acceptableTypes = getAcceptableMediaTypes(request);<br>                <span class="hljs-comment">//服务器最终根据自己自身的能力，决定服务器能生产出什么样内容类型的数据</span><br>                List&lt;MediaType&gt; producibleTypes = getProducibleMediaTypes(request, valueType, targetType);<br><br>                <span class="hljs-keyword">if</span> (body != <span class="hljs-literal">null</span> &amp;&amp; producibleTypes.isEmpty()) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpMessageNotWritableException</span>(<br>                            <span class="hljs-string">&quot;No converter found for return value of type: &quot;</span> + valueType);<br>                &#125;<br>                List&lt;MediaType&gt; mediaTypesToUse = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>                <span class="hljs-keyword">for</span> (MediaType requestedType : acceptableTypes) &#123;<br>                    <span class="hljs-keyword">for</span> (MediaType producibleType : producibleTypes) &#123;<br>                        <span class="hljs-keyword">if</span> (requestedType.isCompatibleWith(producibleType)) &#123;<br>                            mediaTypesToUse.add(getMostSpecificMediaType(requestedType, producibleType));<br>                        &#125;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (mediaTypesToUse.isEmpty()) &#123;<br>                    <span class="hljs-keyword">if</span> (body != <span class="hljs-literal">null</span>) &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpMediaTypeNotAcceptableException</span>(producibleTypes);<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>                        logger.debug(<span class="hljs-string">&quot;No match for &quot;</span> + acceptableTypes + <span class="hljs-string">&quot;, supported: &quot;</span> + producibleTypes);<br>                    &#125;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br><br>                MediaType.sortBySpecificityAndQuality(mediaTypesToUse);<br><br>                <span class="hljs-comment">//选择一个MediaType</span><br>                <span class="hljs-keyword">for</span> (MediaType mediaType : mediaTypesToUse) &#123;<br>                    <span class="hljs-keyword">if</span> (mediaType.isConcrete()) &#123;<br>                        selectedMediaType = mediaType;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mediaType.isPresentIn(ALL_APPLICATION_MEDIA_TYPES)) &#123;<br>                        selectedMediaType = MediaType.APPLICATION_OCTET_STREAM;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>                    logger.debug(<span class="hljs-string">&quot;Using &#x27;&quot;</span> + selectedMediaType + <span class="hljs-string">&quot;&#x27;, given &quot;</span> +<br>                            acceptableTypes + <span class="hljs-string">&quot; and supported &quot;</span> + producibleTypes);<br>                &#125;<br>            &#125;<br><br>        <br>            <span class="hljs-keyword">if</span> (selectedMediaType != <span class="hljs-literal">null</span>) &#123;<br>                selectedMediaType = selectedMediaType.removeQualityValue();<br>                <span class="hljs-comment">//本节主角：HttpMessageConverter</span><br>                <span class="hljs-keyword">for</span> (HttpMessageConverter&lt;?&gt; converter : <span class="hljs-built_in">this</span>.messageConverters) &#123;<br>                    <span class="hljs-type">GenericHttpMessageConverter</span> <span class="hljs-variable">genericConverter</span> <span class="hljs-operator">=</span> (converter <span class="hljs-keyword">instanceof</span> GenericHttpMessageConverter ?<br>                            (GenericHttpMessageConverter&lt;?&gt;) converter : <span class="hljs-literal">null</span>);<br>                    <br>                    <span class="hljs-comment">//判断是否可写</span><br>                    <span class="hljs-keyword">if</span> (genericConverter != <span class="hljs-literal">null</span> ?<br>                            ((GenericHttpMessageConverter) converter).canWrite(targetType, valueType, selectedMediaType) :<br>                            converter.canWrite(valueType, selectedMediaType)) &#123;<br>                        body = getAdvice().beforeBodyWrite(body, returnType, selectedMediaType,<br>                                (Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpMessageConverter</span>&lt;?&gt;&gt;) converter.getClass(),<br>                                inputMessage, outputMessage);<br>                        <span class="hljs-keyword">if</span> (body != <span class="hljs-literal">null</span>) &#123;<br>                            <span class="hljs-type">Object</span> <span class="hljs-variable">theBody</span> <span class="hljs-operator">=</span> body;<br>                            LogFormatUtils.traceDebug(logger, traceOn -&gt;<br>                                    <span class="hljs-string">&quot;Writing [&quot;</span> + LogFormatUtils.formatValue(theBody, !traceOn) + <span class="hljs-string">&quot;]&quot;</span>);<br>                            addContentDispositionHeader(inputMessage, outputMessage);<br><span class="hljs-comment">//开始写入</span><br>                            <span class="hljs-keyword">if</span> (genericConverter != <span class="hljs-literal">null</span>) &#123;<br>                                genericConverter.write(body, targetType, selectedMediaType, outputMessage);<br>                            &#125;<br>                            <span class="hljs-keyword">else</span> &#123;<br>                                ((HttpMessageConverter) converter).write(body, selectedMediaType, outputMessage);<br>                            &#125;<br>                        &#125;<br>                        <span class="hljs-keyword">else</span> &#123;<br>                            <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>                                logger.debug(<span class="hljs-string">&quot;Nothing to write: null body&quot;</span>);<br>                            &#125;<br>                        &#125;<br>                        <span class="hljs-keyword">return</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>...<br>        &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot学习笔记(1)</title>
    <link href="/2022/06/01/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(1)/"/>
    <url>/2022/06/01/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(1)/</url>
    
    <content type="html"><![CDATA[<h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><h4 id="Maven配置文件"><a href="#Maven配置文件" class="headerlink" title="Maven配置文件"></a>Maven配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirrors</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus-aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Nexus aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirrors</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">profiles</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>jdk-1.8<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">activation</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">activeByDefault</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">activeByDefault</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">jdk</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">jdk</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">activation</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.compilerVersion</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">profiles</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="HelloWorld项目"><a href="#HelloWorld项目" class="headerlink" title="HelloWorld项目"></a>HelloWorld项目</h3><p>需求：浏览发送&#x2F;hello请求，响应 “Hello，Spring Boot ”</p><h4 id="创建maven工程"><a href="#创建maven工程" class="headerlink" title="创建maven工程"></a>创建maven工程</h4><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="创建主程序"><a href="#创建主程序" class="headerlink" title="创建主程序"></a>创建主程序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(MainApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="编写业务"><a href="#编写业务" class="headerlink" title="编写业务"></a>编写业务</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">handle01</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello, Spring Boot!&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="运行-amp-测试"><a href="#运行-amp-测试" class="headerlink" title="运行&amp;测试"></a>运行&amp;测试</h4><ul><li>运行<code>MainApplication</code>类</li><li>浏览器输入<code>http://localhost:8888/hello</code>，将会输出<code>Hello, Spring Boot 2!</code>。</li></ul><h4 id="设置配置"><a href="#设置配置" class="headerlink" title="设置配置"></a>设置配置</h4><p>maven工程的resource文件夹中创建application.properties文件。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 设置端口号</span><br><span class="hljs-attr">server.port</span>=<span class="hljs-string">8888</span><br></code></pre></td></tr></table></figure><p><a href="https://docs.spring.io/spring-boot/docs/2.3.7.RELEASE/reference/html/appendix-application-properties.html#common-application-properties-server">更多配置信息</a></p><h4 id="打包部署"><a href="#打包部署" class="headerlink" title="打包部署"></a>打包部署</h4><p>在pom.xml添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在IDEA的Maven插件上点击运行 clean 、package，把helloworld工程项目的打包成jar包，</p><p>打包好的jar包被生成在helloworld工程项目的target文件夹内。</p><p>用cmd运行<code>java -jar boot-01-helloworld-1.0-SNAPSHOT.jar</code>，既可以运行helloworld工程项目。</p><p>将jar包直接在目标服务器执行即可。</p><h2 id="依赖管理特性"><a href="#依赖管理特性" class="headerlink" title="依赖管理特性"></a>依赖管理特性</h2><ul><li>父项目做依赖管理</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml">依赖管理<br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br>上面项目的父项目如下：<br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>它几乎声明了所有开发中常用的依赖的版本号，自动版本仲裁机制<br></code></pre></td></tr></table></figure><ul><li>开发导入starter场景启动器<ol><li>见到很多 spring-boot-starter-* ： *就某种场景</li><li>只要引入starter，这个场景的所有常规需要的依赖我们都自动引入</li><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter">更多SpringBoot所有支持的场景</a></li><li>见到的 *-spring-boot-starter： 第三方为我们提供的简化开发的场景启动器。</li></ol></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml">所有场景启动器最底层的依赖<br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>无需关注版本号，自动版本仲裁<ol><li>引入依赖默认都可以不写版本</li><li>引入非版本仲裁的jar，要写版本号。</li></ol></li><li>可以修改默认版本号<ol><li>查看spring-boot-dependencies里面规定当前依赖的版本 用的 key。</li><li>在当前项目里面重写配置，如下面的代码。</li></ol></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mysql.version</span>&gt;</span>5.1.43<span class="hljs-tag">&lt;/<span class="hljs-name">mysql.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><p>IDEA快捷键：</p><ul><li><code>ctrl + shift + alt + U</code>：以图的方式显示项目中依赖之间的关系。</li><li><code>alt + ins</code>：相当于Eclipse的 Ctrl + N，创建新类，新包等。</li></ul><h2 id="自动配置特性"><a href="#自动配置特性" class="headerlink" title="自动配置特性"></a>自动配置特性</h2><ul><li>自动配好Tomcat<ul><li>引入Tomcat依赖。</li><li>配置Tomcat</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>自动配好SpringMVC<ul><li>引入SpringMVC全套组件</li><li>自动配好SpringMVC常用组件（功能）</li></ul></li><li>自动配好Web常见功能，如：字符编码问题<ul><li>SpringBoot帮我们配置好了所有web开发的常见场景</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">//1、返回我们IOC容器</span><br>    <span class="hljs-type">ConfigurableApplicationContext</span> <span class="hljs-variable">run</span> <span class="hljs-operator">=</span> SpringApplication.run(MainApplication.class, args);<br><br>    <span class="hljs-comment">//2、查看容器里面的组件</span><br>    String[] names = run.getBeanDefinitionNames();<br>    <span class="hljs-keyword">for</span> (String name : names) &#123;<br>        System.out.println(name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>默认的包结构<ul><li>主程序所在包及其下面的所有子包里面的组件都会被默认扫描进来</li><li>无需以前的包扫描配置</li><li>想要改变扫描路径<ul><li>@SpringBootApplication(scanBasePackages&#x3D;“com.lun”)</li><li>@ComponentScan 指定扫描路径</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br>等同于<br><span class="hljs-meta">@SpringBootConfiguration</span><br><span class="hljs-meta">@EnableAutoConfiguration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.lun&quot;)</span><br></code></pre></td></tr></table></figure><ul><li>各种配置拥有默认值<ul><li>默认配置最终都是映射到某个类上，如：<code>MultipartProperties</code></li><li>配置文件的值最终会绑定每个类上，这个类会在容器中创建对象</li></ul></li><li>按需加载所有自动配置项<ul><li>非常多的starter</li><li>引入了哪些场景这个场景的自动配置才会开启</li><li>SpringBoot所有的自动配置功能都在 spring-boot-autoconfigure 包里面</li></ul></li></ul><h2 id="Configuration详解"><a href="#Configuration详解" class="headerlink" title="@Configuration详解"></a>@Configuration详解</h2><ul><li>基本使用<ul><li>Full模式与Lite模式</li><li>示例</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1、配置类里面使用<span class="hljs-doctag">@Bean</span>标注在方法上给容器注册组件，默认也是单实例的</span><br><span class="hljs-comment"> * 2、配置类本身也是组件</span><br><span class="hljs-comment"> * 3、proxyBeanMethods：代理bean的方法</span><br><span class="hljs-comment"> *      Full(proxyBeanMethods = true)（保证每个<span class="hljs-doctag">@Bean</span>方法被调用多少次返回的组件都是单实例的）（默认）</span><br><span class="hljs-comment"> *      Lite(proxyBeanMethods = false)（每个<span class="hljs-doctag">@Bean</span>方法被调用多少次返回的组件都是新创建的）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span> <span class="hljs-comment">//告诉SpringBoot这是一个配置类 == 配置文件</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConfig</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Full:外部无论对配置类中的这个组件注册方法调用多少次获取的都是之前注册容器中的单实例对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span> <span class="hljs-comment">//给容器中添加组件。以方法名作为组件的id。返回类型就是组件类型。返回的值，就是组件在容器中的实例</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">user01</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">zhangsan</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;zhangsan&quot;</span>, <span class="hljs-number">18</span>);<br>        <span class="hljs-comment">//user组件依赖了Pet组件</span><br>        zhangsan.setPet(tomcatPet());<br>        <span class="hljs-keyword">return</span> zhangsan;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean(&quot;tom&quot;)</span><br>    <span class="hljs-keyword">public</span> Pet <span class="hljs-title function_">tomcatPet</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pet</span>(<span class="hljs-string">&quot;tomcat&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>@Configuration测试代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootConfiguration</span><br><span class="hljs-meta">@EnableAutoConfiguration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.atguigu.boot&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">//1、返回我们IOC容器</span><br>        <span class="hljs-type">ConfigurableApplicationContext</span> <span class="hljs-variable">run</span> <span class="hljs-operator">=</span> SpringApplication.run(MainApplication.class, args);<br><br>    <span class="hljs-comment">//2、查看容器里面的组件</span><br>        String[] names = run.getBeanDefinitionNames();<br>        <span class="hljs-keyword">for</span> (String name : names) &#123;<br>            System.out.println(name);<br>        &#125;<br><br>    <span class="hljs-comment">//3、从容器中获取组件</span><br>        <span class="hljs-type">Pet</span> <span class="hljs-variable">tom01</span> <span class="hljs-operator">=</span> run.getBean(<span class="hljs-string">&quot;tom&quot;</span>, Pet.class);<br>        <span class="hljs-type">Pet</span> <span class="hljs-variable">tom02</span> <span class="hljs-operator">=</span> run.getBean(<span class="hljs-string">&quot;tom&quot;</span>, Pet.class);<br>        System.out.println(<span class="hljs-string">&quot;组件：&quot;</span>+(tom01 == tom02));<br><br>    <span class="hljs-comment">//4、com.atguigu.boot.config.MyConfig$$EnhancerBySpringCGLIB$$51f1e1ca@1654a892</span><br>        <span class="hljs-type">MyConfig</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> run.getBean(MyConfig.class);<br>        System.out.println(bean);<br><br>    <span class="hljs-comment">//如果@Configuration(proxyBeanMethods = true)代理对象调用方法。SpringBoot总会检查这个组件是否在容器中有。</span><br>        <span class="hljs-comment">//保持组件单实例</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> bean.user01();<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user1</span> <span class="hljs-operator">=</span> bean.user01();<br>        System.out.println(user == user1);<br><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user01</span> <span class="hljs-operator">=</span> run.getBean(<span class="hljs-string">&quot;user01&quot;</span>, User.class);<br>        <span class="hljs-type">Pet</span> <span class="hljs-variable">tom</span> <span class="hljs-operator">=</span> run.getBean(<span class="hljs-string">&quot;tom&quot;</span>, Pet.class);<br><br>        System.out.println(<span class="hljs-string">&quot;用户的宠物：&quot;</span>+(user01.getPet() == tom));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>最佳实战<ul><li>配置 类组件之间<strong>无依赖关系</strong>用Lite模式加速容器启动过程，减少判断</li><li>配置 类组件之间<strong>有依赖关系</strong>，方法会被调用得到之前单实例组件，用Full模式（默认）</li></ul></li></ul><p>IDEA快捷键：</p><ul><li><code>Alt + Ins</code>:生成getter，setter、构造器等代码。</li><li><code>Ctrl + Alt + B</code>:查看类的具体实现代码。</li></ul><h2 id="Import导入组件"><a href="#Import导入组件" class="headerlink" title="@Import导入组件"></a>@Import导入组件</h2><p>@Bean、@Component、@Controller、@Service、@Repository，它们是Spring的基本标签，在Spring Boot中并未改变它们原来的功能。</p><p>@ComponentScan </p><p>@Import({User.class, DBHelper.class})给容器中<strong>自动创建出这两个类型的组件</strong>、默认组件的名字就是全类名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Import(&#123;User.class, DBHelper.class&#125;)</span><br><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span> <span class="hljs-comment">//告诉SpringBoot这是一个配置类 == 配置文件</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConfig</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1、返回我们IOC容器</span><br><span class="hljs-type">ConfigurableApplicationContext</span> <span class="hljs-variable">run</span> <span class="hljs-operator">=</span> SpringApplication.run(MainApplication.class, args);<br><br><span class="hljs-comment">//...</span><br><br><span class="hljs-comment">//5、获取组件</span><br>String[] beanNamesForType = run.getBeanNamesForType(User.class);<br><br><span class="hljs-keyword">for</span> (String s : beanNamesForType) &#123;<br>    System.out.println(s);<br>&#125;<br><br><span class="hljs-type">DBHelper</span> <span class="hljs-variable">bean1</span> <span class="hljs-operator">=</span> run.getBean(DBHelper.class);<br>System.out.println(bean1);<br></code></pre></td></tr></table></figure><h2 id="Conditional条件装配"><a href="#Conditional条件装配" class="headerlink" title="@Conditional条件装配"></a>@Conditional条件装配</h2><p><strong>条件装配：满足Conditional指定的条件，则进行组件注入</strong></p><p><img src="https://img-blog.csdnimg.cn/20210205005453173.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE4NjMwMjQ=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>用@ConditionalOnMissingBean举例说明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@ConditionalOnMissingBean(name = &quot;tom&quot;)</span><span class="hljs-comment">//没有tom名字的Bean时，MyConfig类的Bean才能生效。</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">user01</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">zhangsan</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;zhangsan&quot;</span>, <span class="hljs-number">18</span>);<br>        zhangsan.setPet(tomcatPet());<br>        <span class="hljs-keyword">return</span> zhangsan;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean(&quot;tom22&quot;)</span><br>    <span class="hljs-keyword">public</span> Pet <span class="hljs-title function_">tomcatPet</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pet</span>(<span class="hljs-string">&quot;tomcat&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">//1、返回我们IOC容器</span><br>    <span class="hljs-type">ConfigurableApplicationContext</span> <span class="hljs-variable">run</span> <span class="hljs-operator">=</span> SpringApplication.run(MainApplication.class, args);<br><br>    <span class="hljs-comment">//2、查看容器里面的组件</span><br>    String[] names = run.getBeanDefinitionNames();<br>    <span class="hljs-keyword">for</span> (String name : names) &#123;<br>        System.out.println(name);<br>    &#125;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">tom</span> <span class="hljs-operator">=</span> run.containsBean(<span class="hljs-string">&quot;tom&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;容器中Tom组件：&quot;</span>+tom);<span class="hljs-comment">//false</span><br><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">user01</span> <span class="hljs-operator">=</span> run.containsBean(<span class="hljs-string">&quot;user01&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;容器中user01组件：&quot;</span>+user01);<span class="hljs-comment">//true</span><br><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">tom22</span> <span class="hljs-operator">=</span> run.containsBean(<span class="hljs-string">&quot;tom22&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;容器中tom22组件：&quot;</span>+tom22);<span class="hljs-comment">//true</span><br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ImportResource导入Spring配置文件"><a href="#ImportResource导入Spring配置文件" class="headerlink" title="@ImportResource导入Spring配置文件"></a>@ImportResource导入Spring配置文件</h2><p>比如，公司使用bean.xml文件生成配置bean，然而你为了省事，想继续复用bean.xml，@ImportResource粉墨登场。</p><p>bean.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">...</span>&quot;&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;haha&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.lun.boot.bean.User&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;zhangsan&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;18&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hehe&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.lun.boot.bean.Pet&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;tomcat&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ImportResource(&quot;classpath:beans.xml&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConfig</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">//1、返回我们IOC容器</span><br>    <span class="hljs-type">ConfigurableApplicationContext</span> <span class="hljs-variable">run</span> <span class="hljs-operator">=</span> SpringApplication.run(MainApplication.class, args);<br><br><span class="hljs-type">boolean</span> <span class="hljs-variable">haha</span> <span class="hljs-operator">=</span> run.containsBean(<span class="hljs-string">&quot;haha&quot;</span>);<br><span class="hljs-type">boolean</span> <span class="hljs-variable">hehe</span> <span class="hljs-operator">=</span> run.containsBean(<span class="hljs-string">&quot;hehe&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;haha：&quot;</span>+haha);<span class="hljs-comment">//true</span><br>System.out.println(<span class="hljs-string">&quot;hehe：&quot;</span>+hehe);<span class="hljs-comment">//true</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ConfigurationProperties配置绑定"><a href="#ConfigurationProperties配置绑定" class="headerlink" title="@ConfigurationProperties配置绑定"></a>@ConfigurationProperties配置绑定</h2><p>如何使用Java读取到properties文件中的内容，并且把它封装到JavaBean中，以供随时使用</p><p>传统方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">getProperties</span> &#123;<br>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> FileNotFoundException, IOException &#123;<br>         <span class="hljs-type">Properties</span> <span class="hljs-variable">pps</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>         pps.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;a.properties&quot;</span>));<br>         <span class="hljs-type">Enumeration</span> <span class="hljs-variable">enum1</span> <span class="hljs-operator">=</span> pps.propertyNames();<span class="hljs-comment">//得到配置文件的名字</span><br>         <span class="hljs-keyword">while</span>(enum1.hasMoreElements()) &#123;<br>             <span class="hljs-type">String</span> <span class="hljs-variable">strKey</span> <span class="hljs-operator">=</span> (String) enum1.nextElement();<br>             <span class="hljs-type">String</span> <span class="hljs-variable">strValue</span> <span class="hljs-operator">=</span> pps.getProperty(strKey);<br>             System.out.println(strKey + <span class="hljs-string">&quot;=&quot;</span> + strValue);<br>             <span class="hljs-comment">//封装到JavaBean。</span><br>         &#125;<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure><hr><p>Spring Boot一种配置配置绑定：</p><p>@ConfigurationProperties + @Component</p><p>假设有配置文件application.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">mycar.brand</span>=<span class="hljs-string">BYD</span><br><span class="hljs-attr">mycar.price</span>=<span class="hljs-string">100000</span><br></code></pre></td></tr></table></figure><p>只有在容器中的组件，才会拥有SpringBoot提供的强大功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;mycar&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> &#123;&#125;<br></code></pre></td></tr></table></figure><hr><p>Spring Boot另一种配置配置绑定：</p><p>@EnableConfigurationProperties + @ConfigurationProperties</p><ol><li>开启Car配置绑定功能</li><li>把这个Car这个组件自动注册到容器中</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableConfigurationProperties(Car.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConfig</span> &#123;&#125;<br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;mycar&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> &#123;&#125;<br></code></pre></td></tr></table></figure><h2 id="自动包规则原理"><a href="#自动包规则原理" class="headerlink" title="自动包规则原理"></a>自动包规则原理</h2><p>Spring Boot应用的启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(MainApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>分析下<code>@SpringBootApplication</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Inherited</span><br><span class="hljs-meta">@SpringBootConfiguration</span><br><span class="hljs-meta">@EnableAutoConfiguration</span><br><span class="hljs-meta">@ComponentScan(</span><br><span class="hljs-meta">    excludeFilters = &#123;@Filter(</span><br><span class="hljs-meta">    type = FilterType.CUSTOM,</span><br><span class="hljs-meta">    classes = &#123;TypeExcludeFilter.class&#125;</span><br><span class="hljs-meta">), @Filter(</span><br><span class="hljs-meta">    type = FilterType.CUSTOM,</span><br><span class="hljs-meta">    classes = &#123;AutoConfigurationExcludeFilter.class&#125;</span><br><span class="hljs-meta">)&#125;</span><br><span class="hljs-meta">)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> SpringBootApplication &#123;&#125;<br></code></pre></td></tr></table></figure><p>重点分析<code>@SpringBootConfiguration</code>，<code>@EnableAutoConfiguration</code>，<code>@ComponentScan</code>。</p><h3 id="SpringBootConfiguration"><a href="#SpringBootConfiguration" class="headerlink" title="@SpringBootConfiguration"></a>@SpringBootConfiguration</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> SpringBootConfiguration &#123;<br>    <span class="hljs-meta">@AliasFor(</span><br><span class="hljs-meta">        annotation = Configuration.class</span><br><span class="hljs-meta">    )</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">proxyBeanMethods</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>@Configuration</code>代表当前是一个配置类。</p><h3 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h3><p>指定扫描哪些Spring注解。</p><p>@ComponentScan</p><h3 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Inherited</span><br><span class="hljs-meta">@AutoConfigurationPackage</span><br><span class="hljs-meta">@Import(AutoConfigurationImportSelector.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EnableAutoConfiguration &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">ENABLED_OVERRIDE_PROPERTY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;spring.boot.enableautoconfiguration&quot;</span>;<br><br>    Class&lt;?&gt;[] exclude() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>    String[] excludeName() <span class="hljs-keyword">default</span> &#123;&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>重点分析<code>@AutoConfigurationPackage</code>，<code>@Import(AutoConfigurationImportSelector.class)</code>。</p><h4 id="AutoConfigurationPackage"><a href="#AutoConfigurationPackage" class="headerlink" title="@AutoConfigurationPackage"></a>@AutoConfigurationPackage</h4><p>标签名直译为：自动配置包，指定了默认的包规则。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Inherited</span><br><span class="hljs-meta">@Import(AutoConfigurationPackages.Registrar.class)</span><span class="hljs-comment">//给容器中导入一个组件</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> AutoConfigurationPackage &#123;<br>    String[] basePackages() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>    Class&lt;?&gt;[] basePackageClasses() <span class="hljs-keyword">default</span> &#123;&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>利用Registrar给容器中导入一系列组件</li><li>将指定的一个包下的所有组件导入进MainApplication所在包下。</li></ol><h2 id="初始加载自动配置类"><a href="#初始加载自动配置类" class="headerlink" title="初始加载自动配置类"></a>初始加载自动配置类</h2><h4 id="Import-AutoConfigurationImportSelector-class"><a href="#Import-AutoConfigurationImportSelector-class" class="headerlink" title="@Import(AutoConfigurationImportSelector.class)"></a>@Import(AutoConfigurationImportSelector.class)</h4><ol><li><p>利用<code>getAutoConfigurationEntry(annotationMetadata);</code>给容器中批量导入一些组件</p></li><li><p>调用<code>List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes)</code>获取到所有需要导入到容器中的配置类</p></li><li><p>利用工厂加载 <code>Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(@Nullable ClassLoader classLoader);</code>得到所有的组件</p></li><li><p>从</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">META</span>-<span class="hljs-keyword">INF</span>/spring.factories<br></code></pre></td></tr></table></figure><p>位置来加载一个文件。</p><ul><li>默认扫描我们当前系统里面所有<code>META-INF/spring.factories</code>位置的文件</li><li><code>spring-boot-autoconfigure-2.3.4.RELEASE.jar</code>包里面也有<code>META-INF/spring.factories</code></li></ul></li></ol><p><img src="https://img-blog.csdnimg.cn/20210205005536620.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 文件里面写死了spring-boot一启动就要给容器中加载的所有配置类</span><br><span class="hljs-comment"># spring-boot-autoconfigure-2.3.4.RELEASE.jar/META-INF/spring.factories</span><br><span class="hljs-comment"># Auto Configure</span><br><span class="hljs-attr">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class="hljs-string">\</span><br><span class="hljs-string">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span><br><span class="hljs-string">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span><br></code></pre></td></tr></table></figure><p>虽然我们127个场景的所有自动配置启动的时候默认全部加载，但是<code>xxxxAutoConfiguration</code>按照条件装配规则（<code>@Conditional</code>），最终会按需配置。</p><p>如<code>AopAutoConfiguration</code>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(</span><br><span class="hljs-meta">    proxyBeanMethods = false</span><br><span class="hljs-meta">)</span><br><span class="hljs-meta">@ConditionalOnProperty(</span><br><span class="hljs-meta">    prefix = &quot;spring.aop&quot;,</span><br><span class="hljs-meta">    name = &quot;auto&quot;,</span><br><span class="hljs-meta">    havingValue = &quot;true&quot;,</span><br><span class="hljs-meta">    matchIfMissing = true</span><br><span class="hljs-meta">)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AopAutoConfiguration</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AopAutoConfiguration</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="自动配置流程"><a href="#自动配置流程" class="headerlink" title="自动配置流程"></a>自动配置流程</h2><p>以<code>DispatcherServletAutoConfiguration</code>的内部类<code>DispatcherServletConfiguration</code>为例子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionalOnBean(MultipartResolver.class)</span>  <span class="hljs-comment">//容器中有这个类型组件</span><br><span class="hljs-meta">@ConditionalOnMissingBean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME)</span> <span class="hljs-comment">//容器中没有这个名字 multipartResolver 的组件</span><br><span class="hljs-keyword">public</span> MultipartResolver <span class="hljs-title function_">multipartResolver</span><span class="hljs-params">(MultipartResolver resolver)</span> &#123;<br><span class="hljs-comment">//给@Bean标注的方法传入了对象参数，这个参数的值就会从容器中找。</span><br><span class="hljs-comment">//SpringMVC multipartResolver。防止有些用户配置的文件上传解析器不符合规范</span><br><span class="hljs-comment">// Detect if the user has created a MultipartResolver but named it incorrectly</span><br><span class="hljs-keyword">return</span> resolver;<span class="hljs-comment">//给容器中加入了文件上传解析器；</span><br>&#125;<br></code></pre></td></tr></table></figure><p>SpringBoot默认会在底层配好所有的组件，但是<strong>如果用户自己配置了以用户的优先</strong>。</p><p><strong>总结</strong>：</p><ul><li>SpringBoot先加载所有的自动配置类 xxxxxAutoConfiguration</li><li>每个自动配置类按照条件进行生效，默认都会绑定配置文件指定的值。（xxxxProperties里面读取，xxxProperties和配置文件进行了绑定）</li><li>生效的配置类就会给容器中装配很多组件</li><li>只要容器中有这些组件，相当于这些功能就有了</li><li>定制化配置<ul><li>用户直接自己@Bean替换底层的组件</li><li>用户去看这个组件是获取的配置文件什么值就去修改。</li></ul></li></ul><p><strong>xxxxxAutoConfiguration —&gt; 组件 —&gt; xxxxProperties里面拿值 —-&gt; application.properties</strong></p><h2 id="SpringBoot应用如何编写"><a href="#SpringBoot应用如何编写" class="headerlink" title="SpringBoot应用如何编写"></a>SpringBoot应用如何编写</h2><ul><li>引入场景依赖<ul><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter">官方文档</a></li></ul></li><li>查看自动配置了哪些（选做）<ul><li>自己分析，引入场景对应的自动配置一般都生效了</li><li>配置文件中debug&#x3D;true开启自动配置报告。<ul><li>Negative（不生效）</li><li>Positive（生效）</li></ul></li></ul></li><li>是否需要修改<ul><li>参照文档修改配置项<ul><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html#common-application-properties">官方文档</a></li><li>自己分析。xxxxProperties绑定了配置文件的哪些。</li></ul></li><li>自定义加入或者替换组件<ul><li>@Bean、@Component…</li></ul></li><li>自定义器 XXXXXCustomizer；</li><li>…</li></ul></li></ul><h2 id="Lombok简化开发"><a href="#Lombok简化开发" class="headerlink" title="Lombok简化开发"></a>Lombok简化开发</h2><p>Lombok用标签方式代替构造器、getter&#x2F;setter、toString()等鸡肋代码。</p><p>spring boot已经管理Lombok。引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>IDEA中File-&gt;Settings-&gt;Plugins，搜索安装Lombok插件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-comment">//@AllArgsConstructor</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-meta">@EqualsAndHashCode</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br><br>    <span class="hljs-keyword">private</span> Pet pet;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String name,Integer age)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>简化日志开发</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">handle01</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;name&quot;)</span> String name)</span>&#123;<br>        log.info(<span class="hljs-string">&quot;请求进来了....&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello, Spring Boot 2!&quot;</span>+<span class="hljs-string">&quot;你好：&quot;</span>+name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="dev-tools"><a href="#dev-tools" class="headerlink" title="dev-tools"></a>dev-tools</h2><blockquote><p>Spring Boot includes an additional set of tools that can make the application development experience a little more pleasant. The <code>spring-boot-devtools</code> module can be included in any project to provide additional development-time features.——<a href="https://docs.spring.io/spring-boot/docs/2.3.8.RELEASE/reference/html/using-spring-boot.html#using-boot-devtools">link</a></p><p>Applications that use <code>spring-boot-devtools</code> automatically restart whenever files on the classpath change. This can be a useful feature when working in an IDE, as it gives a very fast feedback loop for code changes. By default, any entry on the classpath that points to a directory is monitored for changes. Note that certain resources, such as static assets and view templates, <a href="https://docs.spring.io/spring-boot/docs/2.3.8.RELEASE/reference/html/using-spring-boot.html#using-boot-devtools-restart-exclude">do not need to restart the application</a>.——<a href="https://docs.spring.io/spring-boot/docs/2.3.8.RELEASE/reference/html/using-spring-boot.html#using-boot-devtools-restart">link</a></p><p>Triggering a restart</p><p>As DevTools monitors classpath resources, the only way to trigger a restart is to update the classpath. The way in which you cause the classpath to be updated depends on the IDE that you are using:</p><ul><li>In Eclipse, saving a modified file causes the classpath to be updated and triggers a restart.</li><li>In IntelliJ IDEA, building the project (<code>Build -&gt; Build Project</code>)(shortcut: Ctrl+F9) has the same effect.</li></ul></blockquote><p>添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在IDEA中，项目或者页面修改以后：Ctrl+F9。</p><h2 id="Spring-Initailizr"><a href="#Spring-Initailizr" class="headerlink" title="Spring Initailizr"></a>Spring Initailizr</h2><p><a href="https://start.spring.io/">Spring Initailizr</a>是创建Spring Boot工程向导。</p><p>在IDEA中，菜单栏New -&gt; Project -&gt; Spring Initailizr。</p><h2 id="yaml的用法"><a href="#yaml的用法" class="headerlink" title="yaml的用法"></a>yaml的用法</h2><p>同以前的properties用法</p><p>YAML 是 “YAML Ain’t Markup Language”（YAML 不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实是：“Yet Another Markup Language”（仍是一种标记语言）。</p><p><strong>非常适合用来做以数据为中心的配置文件</strong>。</p><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><ul><li>key: value；kv之间有空格</li><li>大小写敏感</li><li>使用缩进表示层级关系</li><li>缩进不允许使用tab，只允许空格</li><li>缩进的空格数不重要，只要相同层级的元素左对齐即可</li><li>‘#’表示注释</li><li>字符串无需加引号，如果要加，单引号’’、双引号””表示字符串内容会被 转义、不转义</li></ul><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul><li>字面量：单个的、不可再分的值。date、boolean、string、number、null</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">k:</span> <span class="hljs-string">v</span><br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><ul><li>对象：键值对的集合。map、hash、set、object</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#行内写法：  </span><br><br><span class="hljs-attr">k:</span> &#123;<span class="hljs-string">k1:v1</span>,<span class="hljs-string">k2:v2</span>,<span class="hljs-string">k3:v3</span>&#125;<br><br><span class="hljs-comment">#或</span><br><br><span class="hljs-attr">k:</span> <br>  <span class="hljs-attr">k1:</span> <span class="hljs-string">v1</span><br>  <span class="hljs-attr">k2:</span> <span class="hljs-string">v2</span><br>  <span class="hljs-attr">k3:</span> <span class="hljs-string">v3</span><br><span class="hljs-number">12345678910</span><br></code></pre></td></tr></table></figure><ul><li>数组：一组按次序排列的值。array、list、queue</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#行内写法：  </span><br><br><span class="hljs-attr">k:</span> [<span class="hljs-string">v1</span>,<span class="hljs-string">v2</span>,<span class="hljs-string">v3</span>]<br><br><span class="hljs-comment">#或者</span><br><br><span class="hljs-attr">k:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">v1</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">v2</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">v3</span><br><span class="hljs-number">12345678910</span><br></code></pre></td></tr></table></figure><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String userName;<br>    <span class="hljs-keyword">private</span> Boolean boss;<br>    <span class="hljs-keyword">private</span> Date birth;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> Pet pet;<br>    <span class="hljs-keyword">private</span> String[] interests;<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; animal;<br>    <span class="hljs-keyword">private</span> Map&lt;String, Object&gt; score;<br>    <span class="hljs-keyword">private</span> Set&lt;Double&gt; salarys;<br>    <span class="hljs-keyword">private</span> Map&lt;String, List&lt;Pet&gt;&gt; allPets;<br>&#125;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Pet</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Double weight;<br>&#125;<br></code></pre></td></tr></table></figure><p>用yaml表示以上对象</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">person:</span><br>  <span class="hljs-attr">userName:</span> <span class="hljs-string">zhangsan</span><br>  <span class="hljs-attr">boss:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">birth:</span> <span class="hljs-number">2019</span><span class="hljs-string">/12/12</span> <span class="hljs-number">20</span><span class="hljs-string">:12:33</span><br>  <span class="hljs-attr">age:</span> <span class="hljs-number">18</span><br>  <span class="hljs-attr">pet:</span> <br>    <span class="hljs-attr">name:</span> <span class="hljs-string">tomcat</span><br>    <span class="hljs-attr">weight:</span> <span class="hljs-number">23.4</span><br>  <span class="hljs-attr">interests:</span> [<span class="hljs-string">篮球</span>,<span class="hljs-string">游泳</span>]<br>  <span class="hljs-attr">animal:</span> <br>    <span class="hljs-bullet">-</span> <span class="hljs-string">jerry</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">mario</span><br>  <span class="hljs-attr">score:</span><br>    <span class="hljs-attr">english:</span> <br>      <span class="hljs-attr">first:</span> <span class="hljs-number">30</span><br>      <span class="hljs-attr">second:</span> <span class="hljs-number">40</span><br>      <span class="hljs-attr">third:</span> <span class="hljs-number">50</span><br>    <span class="hljs-attr">math:</span> [<span class="hljs-number">131</span>,<span class="hljs-number">140</span>,<span class="hljs-number">148</span>]<br>    <span class="hljs-attr">chinese:</span> &#123;<span class="hljs-attr">first:</span> <span class="hljs-number">128</span>,<span class="hljs-attr">second:</span> <span class="hljs-number">136</span>&#125;<br>  <span class="hljs-attr">salarys:</span> [<span class="hljs-number">3999</span>,<span class="hljs-number">4999.98</span>,<span class="hljs-number">5999.99</span>]<br>  <span class="hljs-attr">allPets:</span><br>    <span class="hljs-attr">sick:</span><br>      <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">name:</span> <span class="hljs-string">tom</span>&#125;<br>      <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">name:</span> <span class="hljs-string">jerry</span>,<span class="hljs-attr">weight:</span> <span class="hljs-number">47</span>&#125;<br>    <span class="hljs-attr">health:</span> [&#123;<span class="hljs-attr">name:</span> <span class="hljs-string">mario</span>,<span class="hljs-attr">weight:</span> <span class="hljs-number">47</span>&#125;]<br></code></pre></td></tr></table></figure><h2 id="自定义类绑定的配置提示"><a href="#自定义类绑定的配置提示" class="headerlink" title="自定义类绑定的配置提示"></a>自定义类绑定的配置提示</h2><p>自定义的类和配置文件绑定一般没有提示。若要提示，添加如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 下面插件作用是工程打包时，不将spring-boot-configuration-processor打进包内，让其只在编码的时候有用 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">excludes</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MyBaties学习笔记(3)</title>
    <link href="/2022/05/26/MyBaties%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(3)/"/>
    <url>/2022/05/26/MyBaties%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(3)/</url>
    
    <content type="html"><![CDATA[<h1 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h1><ul><li>Mybatis框架的动态SQL技术是一种根据特定条件动态拼装SQL语句的功能，它存在的意义是为了解决拼接SQL语句字符串时的痛点问题</li></ul><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><ul><li><p>if标签可通过test属性（即传递过来的数据）的表达式进行判断，若表达式的结果为true，则标签中的内容会执行；反之标签中的内容不会执行</p></li><li><p>在where后面添加一个恒成立条件</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">1</span>=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><ul><li><p>这个恒成立条件并不会影响查询的结果</p></li><li><p>这个</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">1</span>=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>可以用来拼接</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">and</span><br></code></pre></td></tr></table></figure><p>语句，例如：当empName为null时</p><ul><li>如果不加上恒成立条件，则SQL语句为<code>select * from t_emp where and age = ? and sex = ? and email = ?</code>，此时<code>where</code>会与<code>and</code>连用，SQL语句会报错</li><li>如果加上一个恒成立条件，则SQL语句为<code>select * from t_emp where 1= 1 and age = ? and sex = ? and email = ?</code>，此时不报错</li></ul></li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--List&lt;Emp&gt; getEmpByCondition(Emp emp);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByCondition&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>select * from t_emp where 1=1<br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;empName != null and empName !=&#x27;&#x27;&quot;</span>&gt;</span><br>and emp_name = #&#123;empName&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;age != null and age !=&#x27;&#x27;&quot;</span>&gt;</span><br>and age = #&#123;age&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;sex != null and sex !=&#x27;&#x27;&quot;</span>&gt;</span><br>and sex = #&#123;sex&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;email != null and email !=&#x27;&#x27;&quot;</span>&gt;</span><br>and email = #&#123;email&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="where"><a href="#where" class="headerlink" title="where"></a>where</h2><ul><li>where和if一般结合使用：<ul><li>若where标签中的if条件都不满足，则where标签没有任何功能，即不会添加where关键字</li><li>若where标签中的if条件满足，则where标签会自动添加where关键字，并将条件最前方多余的and&#x2F;or去掉</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--List&lt;Emp&gt; getEmpByCondition(Emp emp);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByCondition&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>select * from t_emp<br><span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;empName != null and empName !=&#x27;&#x27;&quot;</span>&gt;</span><br>emp_name = #&#123;empName&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;age != null and age !=&#x27;&#x27;&quot;</span>&gt;</span><br>and age = #&#123;age&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;sex != null and sex !=&#x27;&#x27;&quot;</span>&gt;</span><br>and sex = #&#123;sex&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;email != null and email !=&#x27;&#x27;&quot;</span>&gt;</span><br>and email = #&#123;email&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>注意：where标签不能去掉条件后多余的and&#x2F;or</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--这种用法是错误的，只能去掉条件前面的and/or，条件后面的不行--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;empName != null and empName !=&#x27;&#x27;&quot;</span>&gt;</span><br>emp_name = #&#123;empName&#125; and<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;age != null and age !=&#x27;&#x27;&quot;</span>&gt;</span><br>age = #&#123;age&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h2><ul><li>trim用于去掉或添加标签中的内容</li><li>常用属性<ul><li>prefix：在trim标签中的内容的前面添加某些内容</li><li>suffix：在trim标签中的内容的后面添加某些内容</li><li>prefixOverrides：在trim标签中的内容的前面去掉某些内容</li><li>suffixOverrides：在trim标签中的内容的后面去掉某些内容</li></ul></li><li>若trim中的标签都不满足条件，则trim标签没有任何效果，也就是只剩下<code>select * from t_emp</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--List&lt;Emp&gt; getEmpByCondition(Emp emp);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByCondition&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>select * from t_emp<br><span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;where&quot;</span> <span class="hljs-attr">suffixOverrides</span>=<span class="hljs-string">&quot;and|or&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;empName != null and empName !=&#x27;&#x27;&quot;</span>&gt;</span><br>emp_name = #&#123;empName&#125; and<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;age != null and age !=&#x27;&#x27;&quot;</span>&gt;</span><br>age = #&#123;age&#125; and<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;sex != null and sex !=&#x27;&#x27;&quot;</span>&gt;</span><br>sex = #&#123;sex&#125; or<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;email != null and email !=&#x27;&#x27;&quot;</span>&gt;</span><br>email = #&#123;email&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//测试类</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getEmpByCondition</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtils.getSqlSession();<br><span class="hljs-type">DynamicSQLMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(DynamicSQLMapper.class);<br>List&lt;Emp&gt; emps= mapper.getEmpByCondition(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>));<br>System.out.println(emps);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/fcaa9f1afdfe478588231df6f663173e.png#pic_center" alt="在这里插入图片描述"></p><h2 id="choose、when、otherwise"><a href="#choose、when、otherwise" class="headerlink" title="choose、when、otherwise"></a>choose、when、otherwise</h2><ul><li><code>choose、when、otherwise</code>相当于<code>if...else if..else</code></li><li>when至少要有一个，otherwise至多只有一个</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByChoose&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>select * from t_emp<br><span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">choose</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span><br>emp_name = #&#123;empName&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span><br>age = #&#123;age&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;sex != null and sex != &#x27;&#x27;&quot;</span>&gt;</span><br>sex = #&#123;sex&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;email != null and email != &#x27;&#x27;&quot;</span>&gt;</span><br>email = #&#123;email&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">otherwise</span>&gt;</span><br>did = 1<br><span class="hljs-tag">&lt;/<span class="hljs-name">otherwise</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">choose</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getEmpByChoose</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtils.getSqlSession();<br><span class="hljs-type">DynamicSQLMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(DynamicSQLMapper.class);<br>List&lt;Emp&gt; emps = mapper.getEmpByChoose(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">23</span>, <span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-string">&quot;123@qq.com&quot;</span>, <span class="hljs-literal">null</span>));<br>System.out.println(emps);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/cec33c58da324657931742f08634c24f.png#pic_center" alt="在这里插入图片描述"></p><ul><li>相当于<code>if a else if b else if c else d</code>，只会执行其中一个</li></ul><h2 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h2><ul><li><p>属性：</p><ul><li>collection：设置要循环的数组或集合</li><li>item：表示集合或数组中的每一个数据</li><li>separator：设置循环体之间的分隔符，分隔符前后默认有一个空格，如<code>,</code></li><li>open：设置foreach标签中的内容的开始符</li><li>close：设置foreach标签中的内容的结束符</li></ul></li><li><p>批量删除</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--int deleteMoreByArray(Integer[] eids);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteMoreByArray&quot;</span>&gt;</span><br>delete from t_emp where eid in<br><span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;eids&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;eid&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span>&gt;</span><br>#&#123;eid&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteMoreByArray</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtils.getSqlSession();<br><span class="hljs-type">DynamicSQLMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(DynamicSQLMapper.class);<br><span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> mapper.deleteMoreByArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>[]&#123;<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>&#125;);<br>System.out.println(result);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/3af8a35c37e94d039bdc95dd32c65f3f.png#pic_center" alt="在这里插入图片描述"></p></li><li><p>批量添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--int insertMoreByList(@Param(&quot;emps&quot;) List&lt;Emp&gt; emps);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertMoreByList&quot;</span>&gt;</span><br>insert into t_emp values<br><span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;emps&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;emp&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span><br>(null,#&#123;emp.empName&#125;,#&#123;emp.age&#125;,#&#123;emp.sex&#125;,#&#123;emp.email&#125;,null)<br><span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertMoreByList</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtils.getSqlSession();<br><span class="hljs-type">DynamicSQLMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(DynamicSQLMapper.class);<br><span class="hljs-type">Emp</span> <span class="hljs-variable">emp1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>(<span class="hljs-literal">null</span>,<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&quot;男&quot;</span>,<span class="hljs-string">&quot;123@321.com&quot;</span>,<span class="hljs-literal">null</span>);<br><span class="hljs-type">Emp</span> <span class="hljs-variable">emp2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>(<span class="hljs-literal">null</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&quot;男&quot;</span>,<span class="hljs-string">&quot;123@321.com&quot;</span>,<span class="hljs-literal">null</span>);<br><span class="hljs-type">Emp</span> <span class="hljs-variable">emp3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>(<span class="hljs-literal">null</span>,<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&quot;男&quot;</span>,<span class="hljs-string">&quot;123@321.com&quot;</span>,<span class="hljs-literal">null</span>);<br>List&lt;Emp&gt; emps = Arrays.asList(emp1, emp2, emp3);<br><span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> mapper.insertMoreByList(emps);<br>System.out.println(result);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/47f744375e6c4b55b0cf3f4fb79e7c39.png#pic_center" alt="在这里插入图片描述"></p></li></ul><h2 id="SQL片段"><a href="#SQL片段" class="headerlink" title="SQL片段"></a>SQL片段</h2><ul><li>sql片段，可以记录一段公共sql片段，在使用的地方通过include标签进行引入</li><li>声明sql片段：<code>&lt;sql&gt;</code>标签</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empColumns&quot;</span>&gt;</span>eid,emp_name,age,sex,email<span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>引用sql片段：<code>&lt;include&gt;</code>标签</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--List&lt;Emp&gt; getEmpByCondition(Emp emp);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByCondition&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>select <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;empColumns&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span> from t_emp<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="MyBatis的缓存"><a href="#MyBatis的缓存" class="headerlink" title="MyBatis的缓存"></a>MyBatis的缓存</h1><h2 id="MyBatis的一级缓存"><a href="#MyBatis的一级缓存" class="headerlink" title="MyBatis的一级缓存"></a>MyBatis的一级缓存</h2><ul><li>一级缓存是SqlSession级别的，通过同一个SqlSession查询的数据会被缓存，下次查询相同的数据，就会从缓存中直接获取，不会从数据库重新访问</li><li>使一级缓存失效的四种情况：<ol><li>不同的SqlSession对应不同的一级缓存</li><li>同一个SqlSession但是查询条件不同</li><li>同一个SqlSession两次查询期间执行了任何一次增删改操作</li><li>同一个SqlSession两次查询期间手动清空了缓存</li></ol></li></ul><h2 id="MyBatis的二级缓存"><a href="#MyBatis的二级缓存" class="headerlink" title="MyBatis的二级缓存"></a>MyBatis的二级缓存</h2><ul><li>二级缓存是SqlSessionFactory级别，通过同一个SqlSessionFactory创建的SqlSession查询的结果会被缓存；此后若再次执行相同的查询语句，结果就会从缓存中获取</li><li>二级缓存开启的条件<ol><li>在核心配置文件中，设置全局配置属性cacheEnabled&#x3D;“true”，默认为true，不需要设置</li><li>在映射文件中设置标签</li><li>二级缓存必须在SqlSession关闭或提交之后有效</li><li>查询的数据所转换的实体类类型必须实现序列化的接口</li></ol></li><li>使二级缓存失效的情况：两次查询之间执行了任意的增删改，会使一级和二级缓存同时失效</li></ul><h2 id="二级缓存的相关配置"><a href="#二级缓存的相关配置" class="headerlink" title="二级缓存的相关配置"></a>二级缓存的相关配置</h2><ul><li>在mapper配置文件中添加的cache标签可以设置一些属性</li><li>eviction属性：缓存回收策略<ul><li>LRU（Least Recently Used） – 最近最少使用的：移除最长时间不被使用的对象。</li><li>FIFO（First in First out） – 先进先出：按对象进入缓存的顺序来移除它们。</li><li>SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。</li><li>WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。</li><li>默认的是 LRU</li></ul></li><li>flushInterval属性：刷新间隔，单位毫秒<ul><li>默认情况是不设置，也就是没有刷新间隔，缓存仅仅调用语句（增删改）时刷新</li></ul></li><li>size属性：引用数目，正整数<ul><li>代表缓存最多可以存储多少个对象，太大容易导致内存溢出</li></ul></li><li>readOnly属性：只读，true&#x2F;false<ul><li>true：只读缓存；会给所有调用者返回缓存对象的相同实例。因此这些对象不能被修改。这提供了很重要的性能优势。</li><li>false：读写缓存；会返回缓存对象的拷贝（通过序列化）。这会慢一些，但是安全，因此默认是false</li></ul></li></ul><h2 id="MyBatis缓存查询的顺序"><a href="#MyBatis缓存查询的顺序" class="headerlink" title="MyBatis缓存查询的顺序"></a>MyBatis缓存查询的顺序</h2><ul><li>先查询二级缓存，因为二级缓存中可能会有其他程序已经查出来的数据，可以拿来直接使用</li><li>如果二级缓存没有命中，再查询一级缓存</li><li>如果一级缓存也没有命中，则查询数据库</li><li>SqlSession关闭之后，一级缓存中的数据会写入二级缓存</li></ul><h2 id="整合第三方缓存EHCache（了解）"><a href="#整合第三方缓存EHCache（了解）" class="headerlink" title="整合第三方缓存EHCache（了解）"></a>整合第三方缓存EHCache（了解）</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Mybatis EHCache整合包 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.caches<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-ehcache<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- slf4j日志门面的一个具体实现 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="各个jar包的功能"><a href="#各个jar包的功能" class="headerlink" title="各个jar包的功能"></a>各个jar包的功能</h3><table><thead><tr><th>jar包名称</th><th>作用</th></tr></thead><tbody><tr><td>mybatis-ehcache</td><td>Mybatis和EHCache的整合包</td></tr><tr><td>ehcache</td><td>EHCache核心包</td></tr><tr><td>slf4j-api</td><td>SLF4J日志门面包</td></tr><tr><td>logback-classic</td><td>支持SLF4J门面接口的一个具体实现</td></tr></tbody></table><h3 id="创建EHCache的配置文件ehcache-xml"><a href="#创建EHCache的配置文件ehcache-xml" class="headerlink" title="创建EHCache的配置文件ehcache.xml"></a>创建EHCache的配置文件ehcache.xml</h3><ul><li>名字必须叫<code>ehcache.xml</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span> ?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ehcache</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:noNamespaceSchemaLocation</span>=<span class="hljs-string">&quot;../config/ehcache.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 磁盘保存路径 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">diskStore</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;D:\atguigu\ehcache&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">defaultCache</span></span><br><span class="hljs-tag">            <span class="hljs-attr">maxElementsInMemory</span>=<span class="hljs-string">&quot;1000&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">maxElementsOnDisk</span>=<span class="hljs-string">&quot;10000000&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">eternal</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">overflowToDisk</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">timeToIdleSeconds</span>=<span class="hljs-string">&quot;120&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">timeToLiveSeconds</span>=<span class="hljs-string">&quot;120&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">diskExpiryThreadIntervalSeconds</span>=<span class="hljs-string">&quot;120&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">memoryStoreEvictionPolicy</span>=<span class="hljs-string">&quot;LRU&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">defaultCache</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ehcache</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="设置二级缓存的类型"><a href="#设置二级缓存的类型" class="headerlink" title="设置二级缓存的类型"></a>设置二级缓存的类型</h3><ul><li>在xxxMapper.xml文件中设置二级缓存类型</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">cache</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h3 id="加入logback日志"><a href="#加入logback日志" class="headerlink" title="加入logback日志"></a>加入logback日志</h3><ul><li>存在SLF4J时，作为简易日志的log4j将失效，此时我们需要借助SLF4J的具体实现logback来打印日志。创建logback的配置文件<code>logback.xml</code>，名字固定，不可改变</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span> <span class="hljs-attr">debug</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 指定日志输出的位置 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;STDOUT&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 日志输出的格式 --&gt;</span><br>            <span class="hljs-comment">&lt;!-- 按照顺序分别是：时间、日志级别、线程名称、打印日志的类、日志主体内容、换行 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>[%d&#123;HH:mm:ss.SSS&#125;] [%-5level] [%thread] [%logger] [%msg]%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 设置全局日志级别。日志级别按顺序分别是：DEBUG、INFO、WARN、ERROR --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 指定任何一个日志级别都只打印当前级别和后面级别的日志。 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 指定打印日志的appender，这里通过“STDOUT”引用了前面配置的appender --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 根据特殊需求指定局部日志级别 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.atguigu.crowd.mapper&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="EHCache配置文件说明"><a href="#EHCache配置文件说明" class="headerlink" title="EHCache配置文件说明"></a>EHCache配置文件说明</h3><table><thead><tr><th>属性名</th><th>是否必须</th><th>作用</th></tr></thead><tbody><tr><td>maxElementsInMemory</td><td>是</td><td>在内存中缓存的element的最大数目</td></tr><tr><td>maxElementsOnDisk</td><td>是</td><td>在磁盘上缓存的element的最大数目，若是0表示无穷大</td></tr><tr><td>eternal</td><td>是</td><td>设定缓存的elements是否永远不过期。 如果为true，则缓存的数据始终有效， 如果为false那么还要根据timeToIdleSeconds、timeToLiveSeconds判断</td></tr><tr><td>overflowToDisk</td><td>是</td><td>设定当内存缓存溢出的时候是否将过期的element缓存到磁盘上</td></tr><tr><td>timeToIdleSeconds</td><td>否</td><td>当缓存在EhCache中的数据前后两次访问的时间超过timeToIdleSeconds的属性取值时， 这些数据便会删除，默认值是0,也就是可闲置时间无穷大</td></tr><tr><td>timeToLiveSeconds</td><td>否</td><td>缓存element的有效生命期，默认是0.,也就是element存活时间无穷大</td></tr><tr><td>diskSpoolBufferSizeMB</td><td>否</td><td>DiskStore(磁盘缓存)的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区</td></tr><tr><td>diskPersistent</td><td>否</td><td>在VM重启的时候是否启用磁盘保存EhCache中的数据，默认是false</td></tr><tr><td>diskExpiryThreadIntervalSeconds</td><td>否</td><td>磁盘缓存的清理线程运行间隔，默认是120秒。每个120s， 相应的线程会进行一次EhCache中数据的清理工作</td></tr><tr><td>memoryStoreEvictionPolicy</td><td>否</td><td>当内存缓存达到最大，有新的element加入的时候， 移除缓存中element的策略。 默认是LRU（最近最少使用），可选的有LFU（最不常使用）和FIFO（先进先出</td></tr></tbody></table><h1 id="MyBatis的逆向工程"><a href="#MyBatis的逆向工程" class="headerlink" title="MyBatis的逆向工程"></a>MyBatis的逆向工程</h1><ul><li>正向工程：先创建Java实体类，由框架负责根据实体类生成数据库表。Hibernate是支持正向工程的</li><li>逆向工程：先创建数据库表，由框架负责根据数据库表，反向生成如下资源：<ul><li>Java实体类</li><li>Mapper接口</li><li>Mapper映射文件</li></ul></li></ul><h2 id="创建逆向工程的步骤"><a href="#创建逆向工程的步骤" class="headerlink" title="创建逆向工程的步骤"></a>创建逆向工程的步骤</h2><h3 id="添加依赖和插件"><a href="#添加依赖和插件" class="headerlink" title="添加依赖和插件"></a>添加依赖和插件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-comment">&lt;!-- MyBatis核心依赖包 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- junit测试 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.13.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- MySQL驱动 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.27<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- log4j日志 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 控制Maven在构建过程中相关配置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 构建过程中用到的插件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 具体插件，逆向工程的操作是以构建过程中插件形式出现的 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 插件的依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 逆向工程的核心依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 数据库连接池 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mchange<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>c3p0<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- MySQL驱动 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.27<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="创建MyBatis的核心配置文件"><a href="#创建MyBatis的核心配置文件" class="headerlink" title="创建MyBatis的核心配置文件"></a>创建MyBatis的核心配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;jdbc.properties&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="创建逆向工程的配置文件"><a href="#创建逆向工程的配置文件" class="headerlink" title="创建逆向工程的配置文件"></a>创建逆向工程的配置文件</h3><ul><li>文件名必须是：<code>generatorConfig.xml</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">generatorConfiguration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">generatorConfiguration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    targetRuntime: 执行生成的逆向工程的版本</span><br><span class="hljs-comment">    MyBatis3Simple: 生成基本的CRUD（清新简洁版）</span><br><span class="hljs-comment">    MyBatis3: 生成带条件的CRUD（奢华尊享版）</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;DB2Tables&quot;</span> <span class="hljs-attr">targetRuntime</span>=<span class="hljs-string">&quot;MyBatis3Simple&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 数据库的连接信息 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jdbcConnection</span> <span class="hljs-attr">driverClass</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">connectionURL</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">userId</span>=<span class="hljs-string">&quot;root&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;123456&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">jdbcConnection</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- javaBean的生成策略--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaModelGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.atguigu.mybatis.pojo&quot;</span> <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;.\src\main\java&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;trimStrings&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaModelGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- SQL映射文件的生成策略 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">sqlMapGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.atguigu.mybatis.mapper&quot;</span></span><br><span class="hljs-tag">                         <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;.\src\main\resources&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">sqlMapGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- Mapper接口的生成策略 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaClientGenerator</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;XMLMAPPER&quot;</span></span><br><span class="hljs-tag">                             <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.atguigu.mybatis.mapper&quot;</span> <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;.\src\main\java&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaClientGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 逆向分析的表 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- tableName设置为*号，可以对应所有表，此时不写domainObjectName --&gt;</span><br>        <span class="hljs-comment">&lt;!-- domainObjectName属性指定生成出来的实体类的类名 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">&quot;t_emp&quot;</span> <span class="hljs-attr">domainObjectName</span>=<span class="hljs-string">&quot;Emp&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">&quot;t_dept&quot;</span> <span class="hljs-attr">domainObjectName</span>=<span class="hljs-string">&quot;Dept&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">generatorConfiguration</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="执行MBG插件的generate目标"><a href="#执行MBG插件的generate目标" class="headerlink" title="执行MBG插件的generate目标"></a>执行MBG插件的generate目标</h3><ul><li><img src="https://img-blog.csdnimg.cn/c0ef17c076024c50bb37d3495a73fc83.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IuN6IyX,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></li><li>如果出现报错：<code>Exception getting JDBC Driver</code>，可能是pom.xml中，数据库驱动配置错误<ul><li>dependency中的驱动<img src="https://img-blog.csdnimg.cn/60102b708bae431b817fae5ef4ebf4d2.png#pic_center" alt="在这里插入图片描述"></li><li>mybatis-generator-maven-plugin插件中的驱动<img src="https://img-blog.csdnimg.cn/0a2b41e9dbd141948496571c67d0c284.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IuN6IyX,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></li><li>两者的驱动版本应该相同</li></ul></li><li>执行结果<img src="https://img-blog.csdnimg.cn/fdf3e20fad3b496fab7a2a07edcc64fc.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IuN6IyX,size_18,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></li></ul><h2 id="QBC"><a href="#QBC" class="headerlink" title="QBC"></a>QBC</h2><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><ul><li><code>selectByExample</code>：按条件查询，需要传入一个example对象或者null；如果传入一个null，则表示没有条件，也就是查询所有数据</li><li><code>example.createCriteria().xxx</code>：创建条件对象，通过andXXX方法为SQL添加查询添加，每个条件之间是and关系</li><li><code>example.or().xxx</code>：将之前添加的条件通过or拼接其他条件<br><img src="https://img-blog.csdnimg.cn/a7b04132d8424a25822c32c87461f949.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IuN6IyX,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testMBG</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>);<br><span class="hljs-type">SqlSessionFactoryBuilder</span> <span class="hljs-variable">sqlSessionFactoryBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>();<br><span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> sqlSessionFactoryBuilder.build(is);<br><span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession(<span class="hljs-literal">true</span>);<br><span class="hljs-type">EmpMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(EmpMapper.class);<br><span class="hljs-type">EmpExample</span> <span class="hljs-variable">example</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EmpExample</span>();<br><span class="hljs-comment">//名字为张三，且年龄大于等于20</span><br>example.createCriteria().andEmpNameEqualTo(<span class="hljs-string">&quot;张三&quot;</span>).andAgeGreaterThanOrEqualTo(<span class="hljs-number">20</span>);<br><span class="hljs-comment">//或者did不为空</span><br>example.or().andDidIsNotNull();<br>List&lt;Emp&gt; emps = mapper.selectByExample(example);<br>emps.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/ef6e8ac5e4634725afe237c0abfcc277.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IuN6IyX,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="增改"><a href="#增改" class="headerlink" title="增改"></a>增改</h3><ul><li><code>updateByPrimaryKey</code>：通过主键进行数据修改，如果某一个值为null，也会将对应的字段改为null<ul><li><code>mapper.updateByPrimaryKey(new Emp(1,&quot;admin&quot;,22,null,&quot;456@qq.com&quot;,3));</code></li><li><img src="https://img-blog.csdnimg.cn/fe0f83eae0b64fab9486670023877fd4.png#pic_center" alt="在这里插入图片描述"></li></ul></li><li><code>updateByPrimaryKeySelective()</code>：通过主键进行选择性数据修改，如果某个值为null，则不修改这个字段<ul><li><code>mapper.updateByPrimaryKeySelective(new Emp(2,&quot;admin2&quot;,22,null,&quot;456@qq.com&quot;,3));</code></li><li><img src="https://img-blog.csdnimg.cn/16f5400fa78e4adfae90046e7f331555.png#pic_center" alt="在这里插入图片描述"></li></ul></li></ul><h1 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h1><h2 id="分页插件使用步骤"><a href="#分页插件使用步骤" class="headerlink" title="分页插件使用步骤"></a>分页插件使用步骤</h2><h3 id="添加依赖-1"><a href="#添加依赖-1" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.github.pagehelper/pagehelper --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="配置分页插件"><a href="#配置分页插件" class="headerlink" title="配置分页插件"></a>配置分页插件</h3><ul><li>在MyBatis的核心配置文件（mybatis-config.xml）中配置插件</li><li><img src="https://img-blog.csdnimg.cn/b04f3b07bfae4dbeb79dea5c2b86a2b2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IuN6IyX,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-comment">&lt;!--设置分页插件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span> <span class="hljs-attr">interceptor</span>=<span class="hljs-string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="分页插件的使用"><a href="#分页插件的使用" class="headerlink" title="分页插件的使用"></a>分页插件的使用</h2><h3 id="开启分页功能"><a href="#开启分页功能" class="headerlink" title="开启分页功能"></a>开启分页功能</h3><ul><li><p>在查询功能之前使用</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PageHelper</span>.</span></span>start<span class="hljs-constructor">Page(<span class="hljs-params">int</span> <span class="hljs-params">pageNum</span>, <span class="hljs-params">int</span> <span class="hljs-params">pageSize</span>)</span><br></code></pre></td></tr></table></figure><p>开启分页功能</p><ul><li>pageNum：当前页的页码</li><li>pageSize：每页显示的条数</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testPageHelper</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>);<br><span class="hljs-type">SqlSessionFactoryBuilder</span> <span class="hljs-variable">sqlSessionFactoryBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>();<br><span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> sqlSessionFactoryBuilder.build(is);<br><span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession(<span class="hljs-literal">true</span>);<br><span class="hljs-type">EmpMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(EmpMapper.class);<br><span class="hljs-comment">//访问第一页，每页四条数据</span><br>PageHelper.startPage(<span class="hljs-number">1</span>,<span class="hljs-number">4</span>);<br>List&lt;Emp&gt; emps = mapper.selectByExample(<span class="hljs-literal">null</span>);<br>emps.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/bcf5427857e64d00abee0526b22b7c90.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IuN6IyX,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="分页相关数据"><a href="#分页相关数据" class="headerlink" title="分页相关数据"></a>分页相关数据</h3><h4 id="方法一：直接输出"><a href="#方法一：直接输出" class="headerlink" title="方法一：直接输出"></a>方法一：直接输出</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testPageHelper</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>);<br><span class="hljs-type">SqlSessionFactoryBuilder</span> <span class="hljs-variable">sqlSessionFactoryBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>();<br><span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> sqlSessionFactoryBuilder.build(is);<br><span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession(<span class="hljs-literal">true</span>);<br><span class="hljs-type">EmpMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(EmpMapper.class);<br><span class="hljs-comment">//访问第一页，每页四条数据</span><br>Page&lt;Object&gt; page = PageHelper.startPage(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>);<br>List&lt;Emp&gt; emps = mapper.selectByExample(<span class="hljs-literal">null</span>);<br><span class="hljs-comment">//在查询到List集合后，打印分页数据</span><br>System.out.println(page);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>分页相关数据：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Page&#123;<span class="hljs-attribute">count</span>=<span class="hljs-literal">true</span>, <span class="hljs-attribute">pageNum</span>=1, <span class="hljs-attribute">pageSize</span>=4, <span class="hljs-attribute">startRow</span>=0, <span class="hljs-attribute">endRow</span>=4, <span class="hljs-attribute">total</span>=8, <span class="hljs-attribute">pages</span>=2, <span class="hljs-attribute">reasonable</span>=<span class="hljs-literal">false</span>, <span class="hljs-attribute">pageSizeZero</span>=<span class="hljs-literal">false</span>&#125;[Emp&#123;<span class="hljs-attribute">eid</span>=1, <span class="hljs-attribute">empName</span>=<span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-attribute">age</span>=22, <span class="hljs-attribute">sex</span>=<span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-attribute">email</span>=<span class="hljs-string">&#x27;456@qq.com&#x27;</span>, <span class="hljs-attribute">did</span>=3&#125;, Emp&#123;<span class="hljs-attribute">eid</span>=2, <span class="hljs-attribute">empName</span>=<span class="hljs-string">&#x27;admin2&#x27;</span>, <span class="hljs-attribute">age</span>=22, <span class="hljs-attribute">sex</span>=<span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-attribute">email</span>=<span class="hljs-string">&#x27;456@qq.com&#x27;</span>, <span class="hljs-attribute">did</span>=3&#125;, Emp&#123;<span class="hljs-attribute">eid</span>=3, <span class="hljs-attribute">empName</span>=<span class="hljs-string">&#x27;王五&#x27;</span>, <span class="hljs-attribute">age</span>=12, <span class="hljs-attribute">sex</span>=<span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-attribute">email</span>=<span class="hljs-string">&#x27;123@qq.com&#x27;</span>, <span class="hljs-attribute">did</span>=3&#125;, Emp&#123;<span class="hljs-attribute">eid</span>=4, <span class="hljs-attribute">empName</span>=<span class="hljs-string">&#x27;赵六&#x27;</span>, <span class="hljs-attribute">age</span>=32, <span class="hljs-attribute">sex</span>=<span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-attribute">email</span>=<span class="hljs-string">&#x27;123@qq.com&#x27;</span>, <span class="hljs-attribute">did</span>=1&#125;]<br></code></pre></td></tr></table></figure></li></ul><h4 id="方法二使用PageInfo"><a href="#方法二使用PageInfo" class="headerlink" title="方法二使用PageInfo"></a>方法二使用PageInfo</h4><ul><li><p>在查询获取list集合之后，使用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">PageInfo<span class="hljs-tag">&lt;<span class="hljs-name">T</span>&gt;</span> pageInfo = new PageInfo<span class="hljs-tag">&lt;&gt;</span>(List<span class="hljs-tag">&lt;<span class="hljs-name">T</span>&gt;</span> list, intnavigatePages)<br></code></pre></td></tr></table></figure><p>获取分页相关数据</p><ul><li>list：分页之后的数据</li><li>navigatePages：导航分页的页码数</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testPageHelper</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>);<br><span class="hljs-type">SqlSessionFactoryBuilder</span> <span class="hljs-variable">sqlSessionFactoryBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>();<br><span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> sqlSessionFactoryBuilder.build(is);<br><span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession(<span class="hljs-literal">true</span>);<br><span class="hljs-type">EmpMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(EmpMapper.class);<br>PageHelper.startPage(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>);<br>List&lt;Emp&gt; emps = mapper.selectByExample(<span class="hljs-literal">null</span>);<br>PageInfo&lt;Emp&gt; page = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageInfo</span>&lt;&gt;(emps,<span class="hljs-number">5</span>);<br>System.out.println(page);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>分页相关数据：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">PageInfo&#123;<br><span class="hljs-attribute">pageNum</span>=1, <span class="hljs-attribute">pageSize</span>=4, <span class="hljs-attribute">size</span>=4, <span class="hljs-attribute">startRow</span>=1, <span class="hljs-attribute">endRow</span>=4, <span class="hljs-attribute">total</span>=8, <span class="hljs-attribute">pages</span>=2, <br><span class="hljs-attribute">list</span>=Page&#123;<span class="hljs-attribute">count</span>=<span class="hljs-literal">true</span>, <span class="hljs-attribute">pageNum</span>=1, <span class="hljs-attribute">pageSize</span>=4, <span class="hljs-attribute">startRow</span>=0, <span class="hljs-attribute">endRow</span>=4, <span class="hljs-attribute">total</span>=8, <span class="hljs-attribute">pages</span>=2, <span class="hljs-attribute">reasonable</span>=<span class="hljs-literal">false</span>, <span class="hljs-attribute">pageSizeZero</span>=<span class="hljs-literal">false</span>&#125;[Emp&#123;<span class="hljs-attribute">eid</span>=1, <span class="hljs-attribute">empName</span>=<span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-attribute">age</span>=22, <span class="hljs-attribute">sex</span>=<span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-attribute">email</span>=<span class="hljs-string">&#x27;456@qq.com&#x27;</span>, <span class="hljs-attribute">did</span>=3&#125;, Emp&#123;<span class="hljs-attribute">eid</span>=2, <span class="hljs-attribute">empName</span>=<span class="hljs-string">&#x27;admin2&#x27;</span>, <span class="hljs-attribute">age</span>=22, <span class="hljs-attribute">sex</span>=<span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-attribute">email</span>=<span class="hljs-string">&#x27;456@qq.com&#x27;</span>, <span class="hljs-attribute">did</span>=3&#125;, Emp&#123;<span class="hljs-attribute">eid</span>=3, <span class="hljs-attribute">empName</span>=<span class="hljs-string">&#x27;王五&#x27;</span>, <span class="hljs-attribute">age</span>=12, <span class="hljs-attribute">sex</span>=<span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-attribute">email</span>=<span class="hljs-string">&#x27;123@qq.com&#x27;</span>, <span class="hljs-attribute">did</span>=3&#125;, Emp&#123;<span class="hljs-attribute">eid</span>=4, <span class="hljs-attribute">empName</span>=<span class="hljs-string">&#x27;赵六&#x27;</span>, <span class="hljs-attribute">age</span>=32, <span class="hljs-attribute">sex</span>=<span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-attribute">email</span>=<span class="hljs-string">&#x27;123@qq.com&#x27;</span>, <span class="hljs-attribute">did</span>=1&#125;], <br><span class="hljs-attribute">prePage</span>=0, <span class="hljs-attribute">nextPage</span>=2, <span class="hljs-attribute">isFirstPage</span>=<span class="hljs-literal">true</span>, <span class="hljs-attribute">isLastPage</span>=<span class="hljs-literal">false</span>, <span class="hljs-attribute">hasPreviousPage</span>=<span class="hljs-literal">false</span>, <span class="hljs-attribute">hasNextPage</span>=<span class="hljs-literal">true</span>, <span class="hljs-attribute">navigatePages</span>=5, <span class="hljs-attribute">navigateFirstPage</span>=1, <span class="hljs-attribute">navigateLastPage</span>=2, navigatepageNums=[1, 2]&#125;<br>1234<br></code></pre></td></tr></table></figure></li><li><p>其中list中的数据等同于方法一中直接输出的page数据</p></li></ul><h4 id="常用数据："><a href="#常用数据：" class="headerlink" title="常用数据："></a>常用数据：</h4><ul><li>pageNum：当前页的页码</li><li>pageSize：每页显示的条数</li><li>size：当前页显示的真实条数</li><li>total：总记录数</li><li>pages：总页数</li><li>prePage：上一页的页码</li><li>nextPage：下一页的页码</li><li>isFirstPage&#x2F;isLastPage：是否为第一页&#x2F;最后一页</li><li>hasPreviousPage&#x2F;hasNextPage：是否存在上一页&#x2F;下一页</li><li>navigatePages：导航分页的页码数</li><li>navigatepageNums：导航分页的页码，[1,2,3,4,5]</li></ul>]]></content>
    
    
    <categories>
      
      <category>MyBaties</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开发工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MyBaties学习笔记(2)</title>
    <link href="/2022/05/24/MyBaties%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(2)/"/>
    <url>/2022/05/24/MyBaties%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(2)/</url>
    
    <content type="html"><![CDATA[<h1 id="MyBatis的各种查询功能"><a href="#MyBatis的各种查询功能" class="headerlink" title="MyBatis的各种查询功能"></a>MyBatis的各种查询功能</h1><ol><li>如果查询出的数据只有一条，可以通过<ol><li>实体类对象接收</li><li>List集合接收</li><li>Map集合接收，结果<code>&#123;password=123456, sex=男, id=1, age=23, username=admin&#125;</code></li></ol></li><li>如果查询出的数据有多条，一定不能用实体类对象接收，会抛异常TooManyResultsException，可以通过<ol><li>实体类类型的LIst集合接收</li><li>Map类型的LIst集合接收</li><li>在mapper接口的方法上添加@MapKey注解</li></ol></li></ol><h2 id="查询一个实体类对象"><a href="#查询一个实体类对象" class="headerlink" title="查询一个实体类对象"></a>查询一个实体类对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据用户id查询用户信息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br>User <span class="hljs-title function_">getUserById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> <span class="hljs-type">int</span> id)</span>;<br>&lt;!--User <span class="hljs-title function_">getUserById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> <span class="hljs-type">int</span> id)</span>;--&gt;<br>&lt;select id=<span class="hljs-string">&quot;getUserById&quot;</span> resultType=<span class="hljs-string">&quot;User&quot;</span>&gt;<br>select * from t_user <span class="hljs-type">where</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> #&#123;id&#125;<br>&lt;/select&gt;<br></code></pre></td></tr></table></figure><h2 id="查询一个List集合"><a href="#查询一个List集合" class="headerlink" title="查询一个List集合"></a>查询一个List集合</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询所有用户信息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br>List&lt;User&gt; <span class="hljs-title function_">getUserList</span><span class="hljs-params">()</span>;<br>&lt;!--List&lt;User&gt; <span class="hljs-title function_">getUserList</span><span class="hljs-params">()</span>;--&gt;<br>&lt;select id=<span class="hljs-string">&quot;getUserList&quot;</span> resultType=<span class="hljs-string">&quot;User&quot;</span>&gt;<br>select * from t_user<br>&lt;/select&gt;<br></code></pre></td></tr></table></figure><h2 id="查询单个数据"><a href="#查询单个数据" class="headerlink" title="查询单个数据"></a>查询单个数据</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**  </span><br><span class="hljs-comment"> * 查询用户的总记录数  </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span>  </span><br><span class="hljs-comment"> * 在MyBatis中，对于Java中常用的类型都设置了类型别名  </span><br><span class="hljs-comment"> * 例如：java.lang.Integer--&gt;int|integer  </span><br><span class="hljs-comment"> * 例如：int--&gt;_int|_integer  </span><br><span class="hljs-comment"> * 例如：Map--&gt;map,List--&gt;list  </span><br><span class="hljs-comment"> */</span>  <br><span class="hljs-type">int</span> <span class="hljs-title function_">getCount</span><span class="hljs-params">()</span>;<br>&lt;!--<span class="hljs-type">int</span> <span class="hljs-title function_">getCount</span><span class="hljs-params">()</span>;--&gt;<br>&lt;select id=<span class="hljs-string">&quot;getCount&quot;</span> resultType=<span class="hljs-string">&quot;_integer&quot;</span>&gt;<br>select <span class="hljs-title function_">count</span><span class="hljs-params">(id)</span> from t_user<br>&lt;/select&gt;<br></code></pre></td></tr></table></figure><h2 id="查询一条数据为map集合"><a href="#查询一条数据为map集合" class="headerlink" title="查询一条数据为map集合"></a>查询一条数据为map集合</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**  </span><br><span class="hljs-comment"> * 根据用户id查询用户信息为map集合  </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id  </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span>  </span><br><span class="hljs-comment"> */</span>  <br>Map&lt;String, Object&gt; <span class="hljs-title function_">getUserToMap</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> <span class="hljs-type">int</span> id)</span>;<br>&lt;!--Map&lt;String, Object&gt; <span class="hljs-title function_">getUserToMap</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> <span class="hljs-type">int</span> id)</span>;--&gt;<br>&lt;select id=<span class="hljs-string">&quot;getUserToMap&quot;</span> resultType=<span class="hljs-string">&quot;map&quot;</span>&gt;<br>select * from t_user <span class="hljs-type">where</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> #&#123;id&#125;<br>&lt;/select&gt;<br>&lt;!--结果：&#123;password=<span class="hljs-number">123456</span>, sex=男, id=<span class="hljs-number">1</span>, age=<span class="hljs-number">23</span>, username=admin&#125;--&gt;<br></code></pre></td></tr></table></figure><h2 id="查询多条数据为map集合"><a href="#查询多条数据为map集合" class="headerlink" title="查询多条数据为map集合"></a>查询多条数据为map集合</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**  </span><br><span class="hljs-comment"> * 查询所有用户信息为map集合  </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span>  </span><br><span class="hljs-comment"> * 将表中的数据以map集合的方式查询，一条数据对应一个map；若有多条数据，就会产生多个map集合，此时可以将这些map放在一个list集合中获取  </span><br><span class="hljs-comment"> */</span>  <br>List&lt;Map&lt;String, Object&gt;&gt; <span class="hljs-title function_">getAllUserToMap</span><span class="hljs-params">()</span>;<br>&lt;!--Map&lt;String, Object&gt; <span class="hljs-title function_">getAllUserToMap</span><span class="hljs-params">()</span>;--&gt;  <br>&lt;select id=<span class="hljs-string">&quot;getAllUserToMap&quot;</span> resultType=<span class="hljs-string">&quot;map&quot;</span>&gt;  <br>select * from t_user  <br>&lt;/select&gt;<br>&lt;!--<br>结果：<br>[&#123;password=<span class="hljs-number">123456</span>, sex=男, id=<span class="hljs-number">1</span>, age=<span class="hljs-number">23</span>, username=admin&#125;,<br>&#123;password=<span class="hljs-number">123456</span>, sex=男, id=<span class="hljs-number">2</span>, age=<span class="hljs-number">23</span>, username=张三&#125;,<br>&#123;password=<span class="hljs-number">123456</span>, sex=男, id=<span class="hljs-number">3</span>, age=<span class="hljs-number">23</span>, username=张三&#125;]<br>--&gt;<br></code></pre></td></tr></table></figure><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询所有用户信息为map集合</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> * 将表中的数据以map集合的方式查询，一条数据对应一个map；若有多条数据，就会产生多个map集合，并且最终要以一个map的方式返回数据，此时需要通过<span class="hljs-doctag">@MapKey</span>注解设置map集合的键，值是每条数据所对应的map集合</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@MapKey(&quot;id&quot;)</span><br>Map&lt;String, Object&gt; <span class="hljs-title function_">getAllUserToMap</span><span class="hljs-params">()</span>;<br>&lt;!--Map&lt;String, Object&gt; <span class="hljs-title function_">getAllUserToMap</span><span class="hljs-params">()</span>;--&gt;<br>&lt;select id=<span class="hljs-string">&quot;getAllUserToMap&quot;</span> resultType=<span class="hljs-string">&quot;map&quot;</span>&gt;<br>select * from t_user<br>&lt;/select&gt;<br>&lt;!--<br>结果：<br>&#123;<br><span class="hljs-number">1</span>=&#123;password=<span class="hljs-number">123456</span>, sex=男, id=<span class="hljs-number">1</span>, age=<span class="hljs-number">23</span>, username=admin&#125;,<br><span class="hljs-number">2</span>=&#123;password=<span class="hljs-number">123456</span>, sex=男, id=<span class="hljs-number">2</span>, age=<span class="hljs-number">23</span>, username=张三&#125;,<br><span class="hljs-number">3</span>=&#123;password=<span class="hljs-number">123456</span>, sex=男, id=<span class="hljs-number">3</span>, age=<span class="hljs-number">23</span>, username=张三&#125;<br>&#125;<br>--&gt;<br></code></pre></td></tr></table></figure><h1 id="特殊SQL的执行"><a href="#特殊SQL的执行" class="headerlink" title="特殊SQL的执行"></a>特殊SQL的执行</h1><h2 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据用户名进行模糊查询</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> username </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> java.util.List&lt;com.atguigu.mybatis.pojo.User&gt;</span><br><span class="hljs-comment"> */</span><br>List&lt;User&gt; <span class="hljs-title function_">getUserByLike</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;username&quot;)</span> String username)</span>;<br>&lt;!--List&lt;User&gt; <span class="hljs-title function_">getUserByLike</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;username&quot;)</span> String username)</span>;--&gt;<br>&lt;select id=<span class="hljs-string">&quot;getUserByLike&quot;</span> resultType=<span class="hljs-string">&quot;User&quot;</span>&gt;<br>&lt;!--select * from t_user where username like <span class="hljs-string">&#x27;%$&#123;mohu&#125;%&#x27;</span>--&gt;  <br>&lt;!--select * from t_user where username like <span class="hljs-title function_">concat</span><span class="hljs-params">(<span class="hljs-string">&#x27;%&#x27;</span>,#&#123;mohu&#125;,<span class="hljs-string">&#x27;%&#x27;</span>)</span>--&gt;  <br>select * from t_user where username like <span class="hljs-string">&quot;%&quot;</span>#&#123;mohu&#125;<span class="hljs-string">&quot;%&quot;</span><br>&lt;/select&gt;<br></code></pre></td></tr></table></figure><ul><li>其中<code>select * from t_user where username like &quot;%&quot;#&#123;mohu&#125;&quot;%&quot;</code>是最常用的</li></ul><h2 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h2><ul><li>只能使用${}，如果使用#{}，则解析后的sql语句为<code>delete from t_user where id in (&#39;1,2,3&#39;)</code>，这样是将<code>1,2,3</code>看做是一个整体，只有id为<code>1,2,3</code>的数据会被删除。正确的语句应该是<code>delete from t_user where id in (1,2,3)</code>，或者<code>delete from t_user where id in (&#39;1&#39;,&#39;2&#39;,&#39;3&#39;)</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据id批量删除</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> ids </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> int</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">deleteMore</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;ids&quot;)</span> String ids)</span>;<br>&lt;delete id=<span class="hljs-string">&quot;deleteMore&quot;</span>&gt;<br>delete from t_user where id <span class="hljs-title function_">in</span> <span class="hljs-params">($&#123;ids&#125;)</span><br>&lt;/delete&gt;<br><span class="hljs-comment">//测试类</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteMore</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtils.getSqlSession();<br><span class="hljs-type">SQLMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(SQLMapper.class);<br><span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> mapper.deleteMore(<span class="hljs-string">&quot;1,2,3,8&quot;</span>);<br>System.out.println(result);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="动态设置表名"><a href="#动态设置表名" class="headerlink" title="动态设置表名"></a>动态设置表名</h2><ul><li>只能使用${}，因为表名不能加单引号</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询指定表中的数据</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> tableName </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> java.util.List&lt;com.atguigu.mybatis.pojo.User&gt;</span><br><span class="hljs-comment"> */</span><br>List&lt;User&gt; <span class="hljs-title function_">getUserByTable</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;tableName&quot;)</span> String tableName)</span>;<br>&lt;!--List&lt;User&gt; <span class="hljs-title function_">getUserByTable</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;tableName&quot;)</span> String tableName)</span>;--&gt;<br>&lt;select id=<span class="hljs-string">&quot;getUserByTable&quot;</span> resultType=<span class="hljs-string">&quot;User&quot;</span>&gt;<br>select * from $&#123;tableName&#125;<br>&lt;/select&gt;<br></code></pre></td></tr></table></figure><h2 id="添加功能获取自增的主键"><a href="#添加功能获取自增的主键" class="headerlink" title="添加功能获取自增的主键"></a>添加功能获取自增的主键</h2><ul><li><p>使用场景</p><ul><li>t_clazz(clazz_id,clazz_name)</li><li>t_student(student_id,student_name,clazz_id)</li></ul><ol><li>添加班级信息</li><li>获取新添加的班级的id</li><li>为班级分配学生，即将某学的班级id修改为新添加的班级的id</li></ol></li><li><p>在mapper.xml中设置两个属性</p><ul><li><p>useGeneratedKeys：设置使用自增的主键</p></li><li><p>keyProperty：因为增删改有统一的返回值是受影响的行数，因此只能将获取的自增的主键放在传输的参数user对象的某个属性中</p></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 添加用户信息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> user </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">insertUser</span><span class="hljs-params">(User user)</span>;<br>&lt;!--<span class="hljs-keyword">void</span> <span class="hljs-title function_">insertUser</span><span class="hljs-params">(User user)</span>;--&gt;<br>&lt;insert id=<span class="hljs-string">&quot;insertUser&quot;</span> useGeneratedKeys=<span class="hljs-string">&quot;true&quot;</span> keyProperty=<span class="hljs-string">&quot;id&quot;</span>&gt;<br>insert into t_user <span class="hljs-title function_">values</span> <span class="hljs-params">(<span class="hljs-literal">null</span>,#&#123;username&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;sex&#125;,#&#123;email&#125;)</span><br>&lt;/insert&gt;<br><span class="hljs-comment">//测试类</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertUser</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtils.getSqlSession();<br><span class="hljs-type">SQLMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(SQLMapper.class);<br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;ton&quot;</span>, <span class="hljs-string">&quot;123&quot;</span>, <span class="hljs-number">23</span>, <span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-string">&quot;123@321.com&quot;</span>);<br>mapper.insertUser(user);<br>System.out.println(user);<br><span class="hljs-comment">//输出：user&#123;id=10, username=&#x27;ton&#x27;, password=&#x27;123&#x27;, age=23, sex=&#x27;男&#x27;, email=&#x27;123@321.com&#x27;&#125;，自增主键存放到了user的id属性中</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="自定义映射resultMap"><a href="#自定义映射resultMap" class="headerlink" title="自定义映射resultMap"></a>自定义映射resultMap</h1><h2 id="resultMap处理字段和属性的映射关系"><a href="#resultMap处理字段和属性的映射关系" class="headerlink" title="resultMap处理字段和属性的映射关系"></a>resultMap处理字段和属性的映射关系</h2><ul><li>resultMap：设置自定义映射<ul><li>属性：<ul><li>id：表示自定义映射的唯一标识，不能重复</li><li>type：查询的数据要映射的实体类的类型</li></ul></li><li>子标签：<ul><li>id：设置主键的映射关系</li><li>result：设置普通字段的映射关系</li><li>子标签属性：<ul><li>property：设置映射关系中实体类中的属性名</li><li>column：设置映射关系中表中的字段名</li></ul></li></ul></li></ul></li><li>若字段名和实体类中的属性名不一致，则可以通过resultMap设置自定义映射，即使字段名和属性名一致的属性也要映射，也就是全部属性都要列出来</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;eid&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;eid&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-comment">&lt;!--List&lt;Emp&gt; getAllEmp();--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getAllEmp&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;empResultMap&quot;</span>&gt;</span><br>select * from t_emp<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>若字段名和实体类中的属性名不一致，但是字段名符合数据库的规则（使用_），实体类中的属性名符合Java的规则（使用驼峰）。此时也可通过以下两种方式处理字段名和实体类中的属性的映射关系</p><ol><li><p>可以通过为字段起别名的方式，保证和实体类中的属性名保持一致</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--List&lt;Emp&gt; getAllEmp();--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getAllEmp&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>select eid,emp_name empName,age,sex,email from t_emp<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>可以在MyBatis的核心配置文件中的setting标签中，设置一个全局配置信息mapUnderscoreToCamelCase，可以在查询表中数据时，自动将_类型的字段名转换为驼峰，例如：字段名user_name，设置了mapUnderscoreToCamelCase，此时字段名就会转换为userName。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol></li></ul><h2 id="多对一映射处理"><a href="#多对一映射处理" class="headerlink" title="多对一映射处理"></a>多对一映射处理</h2><blockquote><p>查询员工信息以及员工所对应的部门信息</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Emp</span> &#123;  <br><span class="hljs-keyword">private</span> Integer eid;  <br><span class="hljs-keyword">private</span> String empName;  <br><span class="hljs-keyword">private</span> Integer age;  <br><span class="hljs-keyword">private</span> String sex;  <br><span class="hljs-keyword">private</span> String email;  <br><span class="hljs-keyword">private</span> Dept dept;<br><span class="hljs-comment">//...构造器、get、set方法等</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="级联方式处理映射关系"><a href="#级联方式处理映射关系" class="headerlink" title="级联方式处理映射关系"></a>级联方式处理映射关系</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empAndDeptResultMapOne&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;eid&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;eid&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dept.did&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;did&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dept.deptName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-comment">&lt;!--Emp getEmpAndDept(@Param(&quot;eid&quot;)Integer eid);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpAndDept&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;empAndDeptResultMapOne&quot;</span>&gt;</span><br>select * from t_emp left join t_dept on t_emp.eid = t_dept.did where t_emp.eid = #&#123;eid&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="使用association处理映射关系"><a href="#使用association处理映射关系" class="headerlink" title="使用association处理映射关系"></a>使用association处理映射关系</h3><ul><li>association：处理多对一的映射关系</li><li>property：需要处理多对的映射关系的属性名</li><li>javaType：该属性的类型</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empAndDeptResultMapTwo&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;eid&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;eid&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;Dept&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;did&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;did&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deptName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-comment">&lt;!--Emp getEmpAndDept(@Param(&quot;eid&quot;)Integer eid);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpAndDept&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;empAndDeptResultMapTwo&quot;</span>&gt;</span><br>select * from t_emp left join t_dept on t_emp.did = t_dept.did where t_emp.eid = #&#123;eid&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="分步查询"><a href="#分步查询" class="headerlink" title="分步查询"></a>分步查询</h3><h4 id="1-查询员工信息"><a href="#1-查询员工信息" class="headerlink" title="1. 查询员工信息"></a>1. 查询员工信息</h4><ul><li>select：设置分布查询的sql的唯一标识（namespace.SQLId或mapper接口的全类名.方法名）</li><li>column：设置分步查询的条件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//EmpMapper里的方法</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 通过分步查询，员工及所对应的部门信息</span><br><span class="hljs-comment"> * 分步查询第一步：查询员工信息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span>  </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> com.atguigu.mybatis.pojo.Emp</span><br><span class="hljs-comment"> */</span><br>Emp <span class="hljs-title function_">getEmpAndDeptByStepOne</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;eid&quot;)</span> Integer eid)</span>;<br><span class="hljs-number">123456789</span><br>&lt;resultMap id=<span class="hljs-string">&quot;empAndDeptByStepResultMap&quot;</span> type=<span class="hljs-string">&quot;Emp&quot;</span>&gt;<br>&lt;id property=<span class="hljs-string">&quot;eid&quot;</span> column=<span class="hljs-string">&quot;eid&quot;</span>&gt;&lt;/id&gt;<br>&lt;result property=<span class="hljs-string">&quot;empName&quot;</span> column=<span class="hljs-string">&quot;emp_name&quot;</span>&gt;&lt;/result&gt;<br>&lt;result property=<span class="hljs-string">&quot;age&quot;</span> column=<span class="hljs-string">&quot;age&quot;</span>&gt;&lt;/result&gt;<br>&lt;result property=<span class="hljs-string">&quot;sex&quot;</span> column=<span class="hljs-string">&quot;sex&quot;</span>&gt;&lt;/result&gt;<br>&lt;result property=<span class="hljs-string">&quot;email&quot;</span> column=<span class="hljs-string">&quot;email&quot;</span>&gt;&lt;/result&gt;<br>&lt;association property=<span class="hljs-string">&quot;dept&quot;</span><br> select=<span class="hljs-string">&quot;com.atguigu.mybatis.mapper.DeptMapper.getEmpAndDeptByStepTwo&quot;</span><br> column=<span class="hljs-string">&quot;did&quot;</span>&gt;&lt;/association&gt;<br>&lt;/resultMap&gt;<br>&lt;!--Emp <span class="hljs-title function_">getEmpAndDeptByStepOne</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;eid&quot;)</span> Integer eid)</span>;--&gt;<br>&lt;select id=<span class="hljs-string">&quot;getEmpAndDeptByStepOne&quot;</span> resultMap=<span class="hljs-string">&quot;empAndDeptByStepResultMap&quot;</span>&gt;<br>select * from t_emp <span class="hljs-type">where</span> <span class="hljs-variable">eid</span> <span class="hljs-operator">=</span> #&#123;eid&#125;<br>&lt;/select&gt;<br></code></pre></td></tr></table></figure><h4 id="2-查询部门信息"><a href="#2-查询部门信息" class="headerlink" title="2. 查询部门信息"></a>2. 查询部门信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//DeptMapper里的方法</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 通过分步查询，员工及所对应的部门信息</span><br><span class="hljs-comment"> * 分步查询第二步：通过did查询员工对应的部门信息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> com.atguigu.mybatis.pojo.Emp</span><br><span class="hljs-comment"> */</span><br>Dept <span class="hljs-title function_">getEmpAndDeptByStepTwo</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;did&quot;)</span> Integer did)</span>;<br>&lt;!--此处的resultMap仅是处理字段和属性的映射关系--&gt;<br>&lt;resultMap id=<span class="hljs-string">&quot;EmpAndDeptByStepTwoResultMap&quot;</span> type=<span class="hljs-string">&quot;Dept&quot;</span>&gt;<br>&lt;id property=<span class="hljs-string">&quot;did&quot;</span> column=<span class="hljs-string">&quot;did&quot;</span>&gt;&lt;/id&gt;<br>&lt;result property=<span class="hljs-string">&quot;deptName&quot;</span> column=<span class="hljs-string">&quot;dept_name&quot;</span>&gt;&lt;/result&gt;<br>&lt;/resultMap&gt;<br>&lt;!--Dept <span class="hljs-title function_">getEmpAndDeptByStepTwo</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;did&quot;)</span> Integer did)</span>;--&gt;<br>&lt;select id=<span class="hljs-string">&quot;getEmpAndDeptByStepTwo&quot;</span> resultMap=<span class="hljs-string">&quot;EmpAndDeptByStepTwoResultMap&quot;</span>&gt;<br>select * from t_dept <span class="hljs-type">where</span> <span class="hljs-variable">did</span> <span class="hljs-operator">=</span> #&#123;did&#125;<br>&lt;/select&gt;<br></code></pre></td></tr></table></figure><h2 id="一对多映射处理"><a href="#一对多映射处理" class="headerlink" title="一对多映射处理"></a>一对多映射处理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dept</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer did;<br>    <span class="hljs-keyword">private</span> String deptName;<br>    <span class="hljs-keyword">private</span> List&lt;Emp&gt; emps;<br><span class="hljs-comment">//...构造器、get、set方法等</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="collection"><a href="#collection" class="headerlink" title="collection"></a>collection</h3><ul><li>collection：用来处理一对多的映射关系</li><li>ofType：表示该属性对饮的集合中存储的数据的类型</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;DeptAndEmpResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Dept&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;did&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;did&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deptName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;emps&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;eid&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;eid&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-comment">&lt;!--Dept getDeptAndEmp(@Param(&quot;did&quot;) Integer did);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getDeptAndEmp&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;DeptAndEmpResultMap&quot;</span>&gt;</span><br>select * from t_dept left join t_emp on t_dept.did = t_emp.did where t_dept.did = #&#123;did&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="分步查询-1"><a href="#分步查询-1" class="headerlink" title="分步查询"></a>分步查询</h3><h4 id="1-查询部门信息"><a href="#1-查询部门信息" class="headerlink" title="1. 查询部门信息"></a>1. 查询部门信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 通过分步查询，查询部门及对应的所有员工信息</span><br><span class="hljs-comment"> * 分步查询第一步：查询部门信息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> did </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> com.atguigu.mybatis.pojo.Dept</span><br><span class="hljs-comment"> */</span><br>Dept <span class="hljs-title function_">getDeptAndEmpByStepOne</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;did&quot;)</span> Integer did)</span>;<br>&lt;resultMap id=<span class="hljs-string">&quot;DeptAndEmpByStepOneResultMap&quot;</span> type=<span class="hljs-string">&quot;Dept&quot;</span>&gt;<br>&lt;id property=<span class="hljs-string">&quot;did&quot;</span> column=<span class="hljs-string">&quot;did&quot;</span>&gt;&lt;/id&gt;<br>&lt;result property=<span class="hljs-string">&quot;deptName&quot;</span> column=<span class="hljs-string">&quot;dept_name&quot;</span>&gt;&lt;/result&gt;<br>&lt;collection property=<span class="hljs-string">&quot;emps&quot;</span><br>select=<span class="hljs-string">&quot;com.atguigu.mybatis.mapper.EmpMapper.getDeptAndEmpByStepTwo&quot;</span><br>column=<span class="hljs-string">&quot;did&quot;</span>&gt;&lt;/collection&gt;<br>&lt;/resultMap&gt;<br>&lt;!--Dept <span class="hljs-title function_">getDeptAndEmpByStepOne</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;did&quot;)</span> Integer did)</span>;--&gt;<br>&lt;select id=<span class="hljs-string">&quot;getDeptAndEmpByStepOne&quot;</span> resultMap=<span class="hljs-string">&quot;DeptAndEmpByStepOneResultMap&quot;</span>&gt;<br>select * from t_dept <span class="hljs-type">where</span> <span class="hljs-variable">did</span> <span class="hljs-operator">=</span> #&#123;did&#125;<br>&lt;/select&gt;<br></code></pre></td></tr></table></figure><h4 id="2-根据部门id查询部门中的所有员工"><a href="#2-根据部门id查询部门中的所有员工" class="headerlink" title="2. 根据部门id查询部门中的所有员工"></a>2. 根据部门id查询部门中的所有员工</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 通过分步查询，查询部门及对应的所有员工信息</span><br><span class="hljs-comment"> * 分步查询第二步：根据部门id查询部门中的所有员工</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> did</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> java.util.List&lt;com.atguigu.mybatis.pojo.Emp&gt;</span><br><span class="hljs-comment"> */</span><br>List&lt;Emp&gt; <span class="hljs-title function_">getDeptAndEmpByStepTwo</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;did&quot;)</span> Integer did)</span>;<br>&lt;!--List&lt;Emp&gt; <span class="hljs-title function_">getDeptAndEmpByStepTwo</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;did&quot;)</span> Integer did)</span>;--&gt;<br>&lt;select id=<span class="hljs-string">&quot;getDeptAndEmpByStepTwo&quot;</span> resultType=<span class="hljs-string">&quot;Emp&quot;</span>&gt;<br>select * from t_emp <span class="hljs-type">where</span> <span class="hljs-variable">did</span> <span class="hljs-operator">=</span> #&#123;did&#125;<br>&lt;/select&gt;<br></code></pre></td></tr></table></figure><h2 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a>延迟加载</h2><ul><li>分步查询的优点：可以实现延迟加载，但是必须在核心配置文件中设置全局配置信息：<ul><li>lazyLoadingEnabled：延迟加载的全局开关。当开启时，所有关联对象都会延迟加载</li><li>aggressiveLazyLoading：当开启时，任何方法的调用都会加载该对象的所有属性。 否则，每个属性会按需加载</li></ul></li><li>此时就可以实现按需加载，获取的数据是什么，就只会执行相应的sql。此时可通过association和collection中的fetchType属性设置当前的分步查询是否使用延迟加载，fetchType&#x3D;“lazy(延迟加载)|eager(立即加载)”</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br><span class="hljs-comment">&lt;!--开启延迟加载--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lazyLoadingEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br>@Test<br>public void getEmpAndDeptByStepOne() &#123;<br>SqlSession sqlSession = SqlSessionUtils.getSqlSession();<br>EmpMapper mapper = sqlSession.getMapper(EmpMapper.class);<br>Emp emp = mapper.getEmpAndDeptByStepOne(1);<br>System.out.println(emp.getEmpName());<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>关闭延迟加载，两条SQL语句都运行了</li></ul><p><img src="https://img-blog.csdnimg.cn/9a762778911a40958afa858224393d5a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IuN6IyX,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p>开启延迟加载，只运行获取emp的SQL语句</p><p><img src="https://img-blog.csdnimg.cn/304792ec213840a49c2f12bc55d323bc.png#pic_center"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getEmpAndDeptByStepOne</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtils.getSqlSession();<br><span class="hljs-type">EmpMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(EmpMapper.class);<br><span class="hljs-type">Emp</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> mapper.getEmpAndDeptByStepOne(<span class="hljs-number">1</span>);<br>System.out.println(emp.getEmpName());<br>System.out.println(<span class="hljs-string">&quot;----------------&quot;</span>);<br>System.out.println(emp.getDept());<br>&#125;<br></code></pre></td></tr></table></figure><p>开启后，需要用到查询dept的时候才会调用相应的SQL语句</p><p><img src="https://img-blog.csdnimg.cn/1fe0b3b4a1dc40bbac9ddeac02e3e46e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IuN6IyX,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p>fetchType：当开启了全局的延迟加载之后，可以通过该属性手动控制延迟加载的效果，fetchType&#x3D;“lazy(延迟加载)|eager(立即加载)”</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empAndDeptByStepResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;eid&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;eid&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dept&quot;</span></span><br><span class="hljs-tag"> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;com.atguigu.mybatis.mapper.DeptMapper.getEmpAndDeptByStepTwo&quot;</span></span><br><span class="hljs-tag"> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;did&quot;</span></span><br><span class="hljs-tag"> <span class="hljs-attr">fetchType</span>=<span class="hljs-string">&quot;lazy&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MyBaties</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开发工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MyBaties学习笔记(1)</title>
    <link href="/2022/05/23/MyBaties%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(1)/"/>
    <url>/2022/05/23/MyBaties%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(1)/</url>
    
    <content type="html"><![CDATA[<h1 id="搭建MyBatis"><a href="#搭建MyBatis" class="headerlink" title="搭建MyBatis"></a>搭建MyBatis</h1><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><ul><li>IDE：idea </li><li>构建工具：maven</li><li>MySQL版本：MySQL </li><li>MyBatis版本：MyBatis</li></ul><h2 id="创建maven工程"><a href="#创建maven工程" class="headerlink" title="创建maven工程"></a>创建maven工程</h2><ul><li><p>打包方式：jar</p></li><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-comment">&lt;!-- Mybatis核心 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- junit测试 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- MySQL驱动 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="创建MyBatis的核心配置文件"><a href="#创建MyBatis的核心配置文件" class="headerlink" title="创建MyBatis的核心配置文件"></a>创建MyBatis的核心配置文件</h2><blockquote><p>习惯上命名为<code>mybatis-config.xml</code>，这个文件名仅仅只是建议，并非强制要求。将来整合Spring之后，这个配置文件可以省略，所以大家操作时可以直接复制、粘贴。<br>核心配置文件主要用于配置连接数据库的环境以及MyBatis的全局配置信息<br>核心配置文件存放的位置是src&#x2F;main&#x2F;resources目录下</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span>  <br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span>  </span><br><span class="hljs-meta"><span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span>  </span><br><span class="hljs-meta"><span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>  <br><span class="hljs-comment">&lt;!--设置连接数据库的环境--&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/MyBatis&quot;</span>/&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span>  <br><span class="hljs-comment">&lt;!--引入映射文件--&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;mappers/UserMapper.xml&quot;</span>/&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="创建mapper接口"><a href="#创建mapper接口" class="headerlink" title="创建mapper接口"></a>创建mapper接口</h2><blockquote><p>MyBatis中的mapper接口相当于以前的dao。但是区别在于，mapper仅仅是接口，我们不需要提供实现类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.mybatis.mapper;  <br>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;  <br><span class="hljs-comment">/**  </span><br><span class="hljs-comment">* 添加用户信息  </span><br><span class="hljs-comment">*/</span>  <br><span class="hljs-type">int</span> <span class="hljs-title function_">insertUser</span><span class="hljs-params">()</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="创建MyBatis的映射文件"><a href="#创建MyBatis的映射文件" class="headerlink" title="创建MyBatis的映射文件"></a>创建MyBatis的映射文件</h2><ul><li>相关概念：ORM（Object Relationship Mapping）对象关系映射。<ul><li>对象：Java的实体类对象</li><li>关系：关系型数据库</li><li>映射：二者之间的对应关系</li></ul></li></ul><table><thead><tr><th>Java概念</th><th>数据库概念</th></tr></thead><tbody><tr><td>类</td><td>表</td></tr><tr><td>属性</td><td>字段&#x2F;列</td></tr><tr><td>对象</td><td>记录&#x2F;行</td></tr></tbody></table><ul><li>映射文件的命名规则<ul><li>表所对应的实体类的类名+Mapper.xml</li><li>例如：表t_user，映射的实体类为User，所对应的映射文件为UserMapper.xml</li><li>因此一个映射文件对应一个实体类，对应一张表的操作</li><li>MyBatis映射文件用于编写SQL，访问以及操作表中的数据</li><li>MyBatis映射文件存放的位置是src&#x2F;main&#x2F;resources&#x2F;mappers目录下</li></ul></li><li>MyBatis中可以面向接口操作数据，要保证两个一致<ul><li>mapper接口的全类名和映射文件的命名空间（namespace）保持一致</li><li>mapper接口中方法的方法名和映射文件中编写SQL的标签的id属性保持一致</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span>  <br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span>  </span><br><span class="hljs-meta"><span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span>  </span><br><span class="hljs-meta"><span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.atguigu.mybatis.mapper.UserMapper&quot;</span>&gt;</span>  <br><span class="hljs-comment">&lt;!--int insertUser();--&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertUser&quot;</span>&gt;</span>  <br>insert into t_user values(null,&#x27;张三&#x27;,&#x27;123&#x27;,23,&#x27;女&#x27;)  <br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="通过junit测试功能"><a href="#通过junit测试功能" class="headerlink" title="通过junit测试功能"></a>通过junit测试功能</h2><ul><li>SqlSession：代表Java程序和数据库之间的会话。（HttpSession是Java程序和浏览器之间的会话）</li><li>SqlSessionFactory：是“生产”SqlSession的“工厂”</li><li>工厂模式：如果创建某一个对象，使用的过程基本固定，那么我们就可以把创建这个对象的相关代码封装到一个“工厂类”中，以后都使用这个工厂类来“生产”我们需要的对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserMapperTest</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsertUser</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//读取MyBatis的核心配置文件</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>);<br>        <span class="hljs-comment">//获取SqlSessionFactoryBuilder对象</span><br>        <span class="hljs-type">SqlSessionFactoryBuilder</span> <span class="hljs-variable">sqlSessionFactoryBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>();<br>        <span class="hljs-comment">//通过核心配置文件所对应的字节输入流创建工厂类SqlSessionFactory，生产SqlSession对象</span><br>        <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> sqlSessionFactoryBuilder.build(is);<br>        <span class="hljs-comment">//获取sqlSession，此时通过SqlSession对象所操作的sql都必须手动提交或回滚事务</span><br>        <span class="hljs-comment">//SqlSession sqlSession = sqlSessionFactory.openSession();</span><br>    <span class="hljs-comment">//创建SqlSession对象，此时通过SqlSession对象所操作的sql都会自动提交  </span><br><span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//通过代理模式创建UserMapper接口的代理实现类对象</span><br>        <span class="hljs-type">UserMapper</span> <span class="hljs-variable">userMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>        <span class="hljs-comment">//调用UserMapper接口中的方法，就可以根据UserMapper的全类名匹配元素文件，通过调用的方法名匹配映射文件中的SQL标签，并执行标签中的SQL语句</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> userMapper.insertUser();<br>        <span class="hljs-comment">//提交事务</span><br>        <span class="hljs-comment">//sqlSession.commit();</span><br>        System.out.println(<span class="hljs-string">&quot;result:&quot;</span> + result);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>此时需要手动提交事务，如果要自动提交事务，则在获取sqlSession对象时，使用<code>SqlSession sqlSession = sqlSessionFactory.openSession(true);</code>，传入一个Boolean类型的参数，值为true，这样就可以自动提交</li></ul><h2 id="加入log4j日志功能"><a href="#加入log4j日志功能" class="headerlink" title="加入log4j日志功能"></a>加入log4j日志功能</h2><ol><li><p>加入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- log4j日志 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>加入log4j的配置文件</p><ul><li>log4j的配置文件名为log4j.xml，存放的位置是src&#x2F;main&#x2F;resources目录下</li><li>日志的级别：FATAL(致命)&gt;ERROR(错误)&gt;WARN(警告)&gt;INFO(信息)&gt;DEBUG(调试) 从左到右打印的内容越来越详细</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">log4j</span>:configuration <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;log4j.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">log4j:configuration</span> <span class="hljs-attr">xmlns:log4j</span>=<span class="hljs-string">&quot;http://jakarta.apache.org/log4j/&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.log4j.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Encoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">layout</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ConversionPattern&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;%-5p %d&#123;MM-dd HH:mm:ss,SSS&#125; %m (%F:%L) \n&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">layout</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;java.sql&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">level</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;debug&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.apache.ibatis&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">level</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;info&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">level</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;debug&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">log4j:configuration</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h1 id="核心配置文件详解"><a href="#核心配置文件详解" class="headerlink" title="核心配置文件详解"></a>核心配置文件详解</h1><blockquote><p>核心配置文件中的标签必须按照固定的顺序(有的标签可以不写，但顺序一定不能乱)：<br>properties、settings、typeAliases、typeHandlers、objectFactory、objectWrapperFactory、reflectorFactory、plugins、environments、databaseIdProvider、mappers</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//MyBatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://MyBatis.org/dtd/MyBatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--引入properties文件，此时就可以$&#123;属性名&#125;的方式访问属性值--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;jdbc.properties&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--将表中字段的下划线自动转换为驼峰--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--开启延迟加载--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lazyLoadingEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        typeAlias：设置某个具体的类型的别名</span><br><span class="hljs-comment">        属性：</span><br><span class="hljs-comment">        type：需要设置别名的类型的全类名</span><br><span class="hljs-comment">        alias：设置此类型的别名，且别名不区分大小写。若不设置此属性，该类型拥有默认的别名，即类名</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;typeAlias type=&quot;com.atguigu.mybatis.bean.User&quot;&gt;&lt;/typeAlias&gt;--&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;typeAlias type=&quot;com.atguigu.mybatis.bean.User&quot; alias=&quot;user&quot;&gt;</span><br><span class="hljs-comment">        &lt;/typeAlias&gt;--&gt;</span><br>        <span class="hljs-comment">&lt;!--以包为单位，设置改包下所有的类型都拥有默认的别名，即类名且不区分大小写--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.atguigu.mybatis.bean&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    environments：设置多个连接数据库的环境</span><br><span class="hljs-comment">    属性：</span><br><span class="hljs-comment">    default：设置默认使用的环境的id</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;mysql_test&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        environment：设置具体的连接数据库的环境信息</span><br><span class="hljs-comment">        属性：</span><br><span class="hljs-comment">        id：设置环境的唯一标识，可通过environments标签中的default设置某一个环境的id，表示默认使用的环境</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mysql_test&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            transactionManager：设置事务管理方式</span><br><span class="hljs-comment">            属性：</span><br><span class="hljs-comment">            type：设置事务管理方式，type=&quot;JDBC|MANAGED&quot;</span><br><span class="hljs-comment">            type=&quot;JDBC&quot;：设置当前环境的事务管理都必须手动处理</span><br><span class="hljs-comment">            type=&quot;MANAGED&quot;：设置事务被管理，例如spring中的AOP</span><br><span class="hljs-comment">            --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            dataSource：设置数据源</span><br><span class="hljs-comment">            属性：</span><br><span class="hljs-comment">            type：设置数据源的类型，type=&quot;POOLED|UNPOOLED|JNDI&quot;</span><br><span class="hljs-comment">            type=&quot;POOLED&quot;：使用数据库连接池，即会将创建的连接进行缓存，下次使用可以从缓存中直接获取，不需要重新创建</span><br><span class="hljs-comment">            type=&quot;UNPOOLED&quot;：不使用数据库连接池，即每次使用连接都需要重新创建</span><br><span class="hljs-comment">            type=&quot;JNDI&quot;：调用上下文中的数据源</span><br><span class="hljs-comment">            --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--设置驱动类的全类名--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-comment">&lt;!--设置连接数据库的连接地址--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-comment">&lt;!--设置连接数据库的用户名--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-comment">&lt;!--设置连接数据库的密码--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--引入映射文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- &lt;mapper resource=&quot;UserMapper.xml&quot;/&gt; --&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        以包为单位，将包下所有的映射文件引入核心配置文件</span><br><span class="hljs-comment">        注意：</span><br><span class="hljs-comment">1. 此方式必须保证mapper接口和mapper映射文件必须在相同的包下</span><br><span class="hljs-comment">2. mapper接口要和mapper映射文件的名字一致</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.atguigu.mybatis.mapper&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/7b37b2015ded41e5ba4e42f84239fea3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IuN6IyX,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><h1 id="默认的类型别名"><a href="#默认的类型别名" class="headerlink" title="默认的类型别名"></a>默认的类型别名</h1><p><img src="https://img-blog.csdnimg.cn/a5042eddd8014d628fc787440925e6b7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IuN6IyX,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><h1 id="MyBatis的增删改查"><a href="#MyBatis的增删改查" class="headerlink" title="MyBatis的增删改查"></a>MyBatis的增删改查</h1><ol><li><p>添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--int insertUser();--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertUser&quot;</span>&gt;</span><br>insert into t_user values(null,&#x27;admin&#x27;,&#x27;123456&#x27;,23,&#x27;男&#x27;,&#x27;12345@qq.com&#x27;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>删除</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--int deleteUser();--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteUser&quot;</span>&gt;</span><br>    delete from t_user where id = 6<br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>修改</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--int updateUser();--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateUser&quot;</span>&gt;</span><br>    update t_user set username = &#x27;张三&#x27; where id = 5<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>查询一个实体类对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--User getUserById();--&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.atguigu.mybatis.bean.User&quot;</span>&gt;</span>  <br>select * from t_user where id = 2  <br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>查询集合</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--List&lt;User&gt; getUserList();--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserList&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.atguigu.mybatis.bean.User&quot;</span>&gt;</span><br>select * from t_user<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><ul><li>注意：<ol><li>查询的标签select必须设置属性resultType或resultMap，用于设置实体类和数据库表的映射关系<ul><li>resultType：自动映射，用于属性名和表中字段名一致的情况</li><li>resultMap：自定义映射，用于一对多或多对一或字段名和属性名不一致的情况</li></ul></li><li>当查询的数据为多条时，不能使用实体类作为返回值，只能使用集合，否则会抛出异常TooManyResultsException；但是若查询的数据只有一条，可以使用实体类或集合作为返回值</li></ol></li></ul><h1 id="MyBatis获取参数值的两种方式（重点）"><a href="#MyBatis获取参数值的两种方式（重点）" class="headerlink" title="MyBatis获取参数值的两种方式（重点）"></a>MyBatis获取参数值的两种方式（重点）</h1><ul><li>MyBatis获取参数值的两种方式：${}和#{}</li><li>${}的本质就是字符串拼接，#{}的本质就是占位符赋值</li><li>${}使用字符串拼接的方式拼接sql，若为字符串类型或日期类型的字段进行赋值时，需要手动加单引号；但是#{}使用占位符赋值的方式拼接sql，此时为字符串类型或日期类型的字段进行赋值时，可以自动添加单引号</li></ul><h2 id="单个字面量类型的参数"><a href="#单个字面量类型的参数" class="headerlink" title="单个字面量类型的参数"></a>单个字面量类型的参数</h2><ul><li>若mapper接口中的方法参数为单个的字面量类型，此时可以使用${}和#{}以任意的名称（最好见名识意）获取参数的值，注意${}需要手动加单引号</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--User getUserByUsername(String username);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserByUsername&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>select * from t_user where username = #&#123;username&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-comment">&lt;!--User getUserByUsername(String username);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserByUsername&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span>  <br>select * from t_user where username = &#x27;$&#123;username&#125;&#x27;  <br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="多个字面量类型的参数"><a href="#多个字面量类型的参数" class="headerlink" title="多个字面量类型的参数"></a>多个字面量类型的参数</h2><ul><li>若mapper接口中的方法参数为多个时，此时MyBatis会自动将这些参数放在一个map集合中<ol><li>以arg0,arg1…为键，以参数为值；</li><li>以param1,param2…为键，以参数为值；</li></ol></li><li>因此只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号。</li><li>使用arg或者param都行，要注意的是，arg是从arg0开始的，param是从param1开始的</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--User checkLogin(String username,String password);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkLogin&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span>  <br>select * from t_user where username = #&#123;arg0&#125; and password = #&#123;arg1&#125;  <br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-comment">&lt;!--User checkLogin(String username,String password);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkLogin&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>select * from t_user where username = &#x27;$&#123;param1&#125;&#x27; and password = &#x27;$&#123;param2&#125;&#x27;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="map集合类型的参数"><a href="#map集合类型的参数" class="headerlink" title="map集合类型的参数"></a>map集合类型的参数</h2><ul><li>若mapper接口中的方法需要的参数为多个时，此时可以手动创建map集合，将这些数据放在map中只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--User checkLoginByMap(Map&lt;String,Object&gt; map);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkLoginByMap&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>select * from t_user where username = #&#123;username&#125; and password = #&#123;password&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>@Test<br>public void checkLoginByMap() &#123;<br>SqlSession sqlSession = SqlSessionUtils.getSqlSession();<br>ParameterMapper mapper = sqlSession.getMapper(ParameterMapper.class);<br>Map&lt;String,Object&gt; map = new HashMap<span class="hljs-tag">&lt;&gt;</span>();<br>map.put(&quot;usermane&quot;,&quot;admin&quot;);<br>map.put(&quot;password&quot;,&quot;123456&quot;);<br>User user = mapper.checkLoginByMap(map);<br>System.out.println(user);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="实体类类型的参数"><a href="#实体类类型的参数" class="headerlink" title="实体类类型的参数"></a>实体类类型的参数</h2><ul><li>若mapper接口中的方法参数为实体类对象时此时可以使用${}和#{}，通过访问实体类对象中的属性名获取属性值，注意${}需要手动加单引号</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--int insertUser(User user);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertUser&quot;</span>&gt;</span><br>insert into t_user values(null,#&#123;username&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;sex&#125;,#&#123;email&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br>@Test<br>public void insertUser() &#123;<br>SqlSession sqlSession = SqlSessionUtils.getSqlSession();<br>ParameterMapper mapper = sqlSession.getMapper(ParameterMapper.class);<br>User user = new User(null,&quot;Tom&quot;,&quot;123456&quot;,12,&quot;男&quot;,&quot;123@321.com&quot;);<br>mapper.insertUser(user);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用-Param标识参数"><a href="#使用-Param标识参数" class="headerlink" title="使用@Param标识参数"></a>使用@Param标识参数</h2><ul><li>可以通过@Param注解标识mapper接口中的方法参数，此时，会将这些参数放在map集合中<ol><li>以@Param注解的value属性值为键，以参数为值；</li><li>以param1,param2…为键，以参数为值；</li></ol></li><li>只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--User CheckLoginByParam(@Param(&quot;username&quot;) String username, @Param(&quot;password&quot;) String password);--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;CheckLoginByParam&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>        select * from t_user where username = #&#123;username&#125; and password = #&#123;password&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>@Test<br>public void checkLoginByParam() &#123;<br>SqlSession sqlSession = SqlSessionUtils.getSqlSession();<br>ParameterMapper mapper = sqlSession.getMapper(ParameterMapper.class);<br>mapper.CheckLoginByParam(&quot;admin&quot;,&quot;123456&quot;);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>建议分成两种情况进行处理<ol><li>实体类类型的参数</li><li>使用@Param标识参数</li></ol></li></ul>]]></content>
    
    
    <categories>
      
      <category>MyBaties</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开发工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringMVC学习笔记(5)</title>
    <link href="/2022/05/20/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(5)/"/>
    <url>/2022/05/20/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(5)/</url>
    
    <content type="html"><![CDATA[<h1 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h1><h3 id="1、拦截器的配置"><a href="#1、拦截器的配置" class="headerlink" title="1、拦截器的配置"></a>1、拦截器的配置</h3><p>SpringMVC中的拦截器用于拦截控制器方法的执行</p><p>SpringMVC中的拦截器需要实现HandlerInterceptor</p><p>SpringMVC的拦截器必须在SpringMVC的配置文件中进行配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.interceptor.FirstInterceptor&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;firstInterceptor&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ref</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 以上两种配置方式都是对DispatcherServlet所处理的所有的请求进行拦截 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/**&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:exclude-mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/testRequestEntity&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;firstInterceptor&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ref</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><br><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">以上配置方式可以通过ref或bean标签设置拦截器，通过mvc:mapping设置需要拦截的请求，通过mvc:exclude-mapping设置需要排除的请求，即不需要拦截的请求</span><br><span class="hljs-comment">--&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2、拦截器的三个抽象方法"><a href="#2、拦截器的三个抽象方法" class="headerlink" title="2、拦截器的三个抽象方法"></a>2、拦截器的三个抽象方法</h3><p>SpringMVC中的拦截器有三个抽象方法：</p><p>preHandle：控制器方法执行之前执行preHandle()，其boolean类型的返回值表示是否拦截或放行，返回true为放行，即调用控制器方法；返回false表示拦截，即不调用控制器方法</p><p>postHandle：控制器方法执行之后执行postHandle()</p><p>afterComplation：处理完视图和模型数据，渲染视图完毕之后执行afterComplation()</p><h3 id="3、多个拦截器的执行顺序"><a href="#3、多个拦截器的执行顺序" class="headerlink" title="3、多个拦截器的执行顺序"></a>3、多个拦截器的执行顺序</h3><p>a&gt;若每个拦截器的preHandle()都返回true</p><p>此时多个拦截器的执行顺序和拦截器在SpringMVC的配置文件的配置顺序有关：</p><p>preHandle()会按照配置的顺序执行，而postHandle()和afterComplation()会按照配置的反序执行</p><p>b&gt;若某个拦截器的preHandle()返回了false</p><p>preHandle()返回false和它之前的拦截器的preHandle()都会执行，postHandle()都不执行，返回false的拦截器之前的拦截器的afterComplation()会执行</p><h1 id="异常处理器"><a href="#异常处理器" class="headerlink" title="异常处理器"></a>异常处理器</h1><h3 id="1、基于配置的异常处理"><a href="#1、基于配置的异常处理" class="headerlink" title="1、基于配置的异常处理"></a>1、基于配置的异常处理</h3><p>SpringMVC提供了一个处理控制器方法执行过程中所出现的异常的接口：HandlerExceptionResolver</p><p>HandlerExceptionResolver接口的实现类有：DefaultHandlerExceptionResolver和SimpleMappingExceptionResolver</p><p>SpringMVC提供了自定义的异常处理器SimpleMappingExceptionResolver，使用方式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;exceptionMappings&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        properties的键表示处理器方法执行过程中出现的异常</span><br><span class="hljs-comment">        properties的值表示若出现指定异常时，设置一个新的视图名称，跳转到指定页面</span><br><span class="hljs-comment">        --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;java.lang.ArithmeticException&quot;</span>&gt;</span>error<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    exceptionAttribute属性设置一个属性名，将出现的异常信息在请求域中进行共享</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;exceptionAttribute&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;ex&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2、基于注解的异常处理"><a href="#2、基于注解的异常处理" class="headerlink" title="2、基于注解的异常处理"></a>2、基于注解的异常处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//@ControllerAdvice将当前类标识为异常处理的组件</span><br><span class="hljs-meta">@ControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionController</span> &#123;<br><br>    <span class="hljs-comment">//@ExceptionHandler用于设置所标识方法处理的异常</span><br>    <span class="hljs-meta">@ExceptionHandler(ArithmeticException.class)</span><br>    <span class="hljs-comment">//ex表示当前请求处理中出现的异常对象</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">handleArithmeticException</span><span class="hljs-params">(Exception ex, Model model)</span>&#123;<br>        model.addAttribute(<span class="hljs-string">&quot;ex&quot;</span>, ex);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;error&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="注解配置SpringMVC"><a href="#注解配置SpringMVC" class="headerlink" title="注解配置SpringMVC"></a>注解配置SpringMVC</h1><p>使用配置类和注解代替web.xml和SpringMVC配置文件的功能</p><h3 id="1、创建初始化类，代替web-xml"><a href="#1、创建初始化类，代替web-xml" class="headerlink" title="1、创建初始化类，代替web.xml"></a>1、创建初始化类，代替web.xml</h3><p>在Servlet3.0环境中，容器会在类路径中查找实现javax.servlet.ServletContainerInitializer接口的类，如果找到的话就用它来配置Servlet容器。<br>Spring提供了这个接口的实现，名为SpringServletContainerInitializer，这个类反过来又会查找实现WebApplicationInitializer的类并将配置的任务交给它们来完成。Spring3.2引入了一个便利的WebApplicationInitializer基础实现，名为AbstractAnnotationConfigDispatcherServletInitializer，当我们的类扩展了AbstractAnnotationConfigDispatcherServletInitializer并将其部署到Servlet3.0容器的时候，容器会自动发现它，并用它来配置Servlet上下文。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebInit</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 指定spring的配置类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;SpringConfig.class&#125;;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 指定SpringMVC的配置类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;WebConfig.class&#125;;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 指定DispatcherServlet的映射规则，即url-pattern</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> String[] getServletMappings() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;/&quot;</span>&#125;;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加过滤器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Filter[] getServletFilters() &#123;<br>        <span class="hljs-type">CharacterEncodingFilter</span> <span class="hljs-variable">encodingFilter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CharacterEncodingFilter</span>();<br>        encodingFilter.setEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        encodingFilter.setForceRequestEncoding(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">HiddenHttpMethodFilter</span> <span class="hljs-variable">hiddenHttpMethodFilter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HiddenHttpMethodFilter</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Filter</span>[]&#123;encodingFilter, hiddenHttpMethodFilter&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、创建SpringConfig配置类，代替spring的配置文件"><a href="#2、创建SpringConfig配置类，代替spring的配置文件" class="headerlink" title="2、创建SpringConfig配置类，代替spring的配置文件"></a>2、创建SpringConfig配置类，代替spring的配置文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br><span class="hljs-comment">//ssm整合之后，spring的配置信息写在此类中</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、创建WebConfig配置类，代替SpringMVC的配置文件"><a href="#3、创建WebConfig配置类，代替SpringMVC的配置文件" class="headerlink" title="3、创建WebConfig配置类，代替SpringMVC的配置文件"></a>3、创建WebConfig配置类，代替SpringMVC的配置文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-comment">//扫描组件</span><br><span class="hljs-meta">@ComponentScan(&quot;com.atguigu.mvc.controller&quot;)</span><br><span class="hljs-comment">//开启MVC注解驱动</span><br><span class="hljs-meta">@EnableWebMvc</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br><br>    <span class="hljs-comment">//使用默认的servlet处理静态资源</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configureDefaultServletHandling</span><span class="hljs-params">(DefaultServletHandlerConfigurer configurer)</span> &#123;<br>        configurer.enable();<br>    &#125;<br><br>    <span class="hljs-comment">//配置文件上传解析器</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> CommonsMultipartResolver <span class="hljs-title function_">multipartResolver</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonsMultipartResolver</span>();<br>    &#125;<br><br>    <span class="hljs-comment">//配置拦截器</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>        <span class="hljs-type">FirstInterceptor</span> <span class="hljs-variable">firstInterceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FirstInterceptor</span>();<br>        registry.addInterceptor(firstInterceptor).addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-comment">//配置视图控制</span><br>    <br>    <span class="hljs-comment">/*@Override</span><br><span class="hljs-comment">    public void addViewControllers(ViewControllerRegistry registry) &#123;</span><br><span class="hljs-comment">        registry.addViewController(&quot;/&quot;).setViewName(&quot;index&quot;);</span><br><span class="hljs-comment">    &#125;*/</span><br>    <br>    <span class="hljs-comment">//配置异常映射</span><br>    <span class="hljs-comment">/*@Override</span><br><span class="hljs-comment">    public void configureHandlerExceptionResolvers(List&lt;HandlerExceptionResolver&gt; resolvers) &#123;</span><br><span class="hljs-comment">        SimpleMappingExceptionResolver exceptionResolver = new SimpleMappingExceptionResolver();</span><br><span class="hljs-comment">        Properties prop = new Properties();</span><br><span class="hljs-comment">        prop.setProperty(&quot;java.lang.ArithmeticException&quot;, &quot;error&quot;);</span><br><span class="hljs-comment">        //设置异常映射</span><br><span class="hljs-comment">        exceptionResolver.setExceptionMappings(prop);</span><br><span class="hljs-comment">        //设置共享异常信息的键</span><br><span class="hljs-comment">        exceptionResolver.setExceptionAttribute(&quot;ex&quot;);</span><br><span class="hljs-comment">        resolvers.add(exceptionResolver);</span><br><span class="hljs-comment">    &#125;*/</span><br><br>    <span class="hljs-comment">//配置生成模板解析器</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ITemplateResolver <span class="hljs-title function_">templateResolver</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">webApplicationContext</span> <span class="hljs-operator">=</span> ContextLoader.getCurrentWebApplicationContext();<br>        <span class="hljs-comment">// ServletContextTemplateResolver需要一个ServletContext作为构造参数，可通过WebApplicationContext 的方法获得</span><br>        <span class="hljs-type">ServletContextTemplateResolver</span> <span class="hljs-variable">templateResolver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletContextTemplateResolver</span>(<br>                webApplicationContext.getServletContext());<br>        templateResolver.setPrefix(<span class="hljs-string">&quot;/WEB-INF/templates/&quot;</span>);<br>        templateResolver.setSuffix(<span class="hljs-string">&quot;.html&quot;</span>);<br>        templateResolver.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        templateResolver.setTemplateMode(TemplateMode.HTML);<br>        <span class="hljs-keyword">return</span> templateResolver;<br>    &#125;<br><br>    <span class="hljs-comment">//生成模板引擎并为模板引擎注入模板解析器</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> SpringTemplateEngine <span class="hljs-title function_">templateEngine</span><span class="hljs-params">(ITemplateResolver templateResolver)</span> &#123;<br>        <span class="hljs-type">SpringTemplateEngine</span> <span class="hljs-variable">templateEngine</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringTemplateEngine</span>();<br>        templateEngine.setTemplateResolver(templateResolver);<br>        <span class="hljs-keyword">return</span> templateEngine;<br>    &#125;<br><br>    <span class="hljs-comment">//生成视图解析器并未解析器注入模板引擎</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ViewResolver <span class="hljs-title function_">viewResolver</span><span class="hljs-params">(SpringTemplateEngine templateEngine)</span> &#123;<br>        <span class="hljs-type">ThymeleafViewResolver</span> <span class="hljs-variable">viewResolver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThymeleafViewResolver</span>();<br>        viewResolver.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        viewResolver.setTemplateEngine(templateEngine);<br>        <span class="hljs-keyword">return</span> viewResolver;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4、测试功能"><a href="#4、测试功能" class="headerlink" title="4、测试功能"></a>4、测试功能</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="十三、SpringMVC执行流程"><a href="#十三、SpringMVC执行流程" class="headerlink" title="十三、SpringMVC执行流程"></a>十三、SpringMVC执行流程</h1><h3 id="1、SpringMVC常用组件"><a href="#1、SpringMVC常用组件" class="headerlink" title="1、SpringMVC常用组件"></a>1、SpringMVC常用组件</h3><ul><li>DispatcherServlet：<strong>前端控制器</strong>，不需要工程师开发，由框架提供</li></ul><p>作用：统一处理请求和响应，整个流程控制的中心，由它调用其它组件处理用户的请求</p><ul><li>HandlerMapping：<strong>处理器映射器</strong>，不需要工程师开发，由框架提供</li></ul><p>作用：根据请求的url、method等信息查找Handler，即控制器方法</p><ul><li>Handler：<strong>处理器</strong>，需要工程师开发</li></ul><p>作用：在DispatcherServlet的控制下Handler对具体的用户请求进行处理</p><ul><li>HandlerAdapter：<strong>处理器适配器</strong>，不需要工程师开发，由框架提供</li></ul><p>作用：通过HandlerAdapter对处理器（控制器方法）进行执行</p><ul><li>ViewResolver：<strong>视图解析器</strong>，不需要工程师开发，由框架提供</li></ul><p>作用：进行视图解析，得到相应的视图，例如：ThymeleafView、InternalResourceView、RedirectView</p><ul><li>View：<strong>视图</strong></li></ul><p>作用：将模型数据通过页面展示给用户</p><h3 id="2、DispatcherServlet初始化过程"><a href="#2、DispatcherServlet初始化过程" class="headerlink" title="2、DispatcherServlet初始化过程"></a>2、DispatcherServlet初始化过程</h3><p>DispatcherServlet 本质上是一个 Servlet，所以天然的遵循 Servlet 的生命周期。所以宏观上是 Servlet 生命周期来进行调度。</p><h5 id="a-gt-初始化WebApplicationContext"><a href="#a-gt-初始化WebApplicationContext" class="headerlink" title="a&gt;初始化WebApplicationContext"></a>a&gt;初始化WebApplicationContext</h5><p>所在类：org.springframework.web.servlet.FrameworkServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> WebApplicationContext <span class="hljs-title function_">initWebApplicationContext</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">rootContext</span> <span class="hljs-operator">=</span><br>        WebApplicationContextUtils.getWebApplicationContext(getServletContext());<br>    <span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">wac</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.webApplicationContext != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// A context instance was injected at construction time -&gt; use it</span><br>        wac = <span class="hljs-built_in">this</span>.webApplicationContext;<br>        <span class="hljs-keyword">if</span> (wac <span class="hljs-keyword">instanceof</span> ConfigurableWebApplicationContext) &#123;<br>            <span class="hljs-type">ConfigurableWebApplicationContext</span> <span class="hljs-variable">cwac</span> <span class="hljs-operator">=</span> (ConfigurableWebApplicationContext) wac;<br>            <span class="hljs-keyword">if</span> (!cwac.isActive()) &#123;<br>                <span class="hljs-comment">// The context has not yet been refreshed -&gt; provide services such as</span><br>                <span class="hljs-comment">// setting the parent context, setting the application context id, etc</span><br>                <span class="hljs-keyword">if</span> (cwac.getParent() == <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-comment">// The context instance was injected without an explicit parent -&gt; set</span><br>                    <span class="hljs-comment">// the root application context (if any; may be null) as the parent</span><br>                    cwac.setParent(rootContext);<br>                &#125;<br>                configureAndRefreshWebApplicationContext(cwac);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (wac == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// No context instance was injected at construction time -&gt; see if one</span><br>        <span class="hljs-comment">// has been registered in the servlet context. If one exists, it is assumed</span><br>        <span class="hljs-comment">// that the parent context (if any) has already been set and that the</span><br>        <span class="hljs-comment">// user has performed any initialization such as setting the context id</span><br>        wac = findWebApplicationContext();<br>    &#125;<br>    <span class="hljs-keyword">if</span> (wac == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// No context instance is defined for this servlet -&gt; create a local one</span><br>        <span class="hljs-comment">// 创建WebApplicationContext</span><br>        wac = createWebApplicationContext(rootContext);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.refreshEventReceived) &#123;<br>        <span class="hljs-comment">// Either the context is not a ConfigurableApplicationContext with refresh</span><br>        <span class="hljs-comment">// support or the context injected at construction time had already been</span><br>        <span class="hljs-comment">// refreshed -&gt; trigger initial onRefresh manually here.</span><br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>.onRefreshMonitor) &#123;<br>            <span class="hljs-comment">// 刷新WebApplicationContext</span><br>            onRefresh(wac);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.publishContext) &#123;<br>        <span class="hljs-comment">// Publish the context as a servlet context attribute.</span><br>        <span class="hljs-comment">// 将IOC容器在应用域共享</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">attrName</span> <span class="hljs-operator">=</span> getServletContextAttributeName();<br>        getServletContext().setAttribute(attrName, wac);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> wac;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="b-gt-创建WebApplicationContext"><a href="#b-gt-创建WebApplicationContext" class="headerlink" title="b&gt;创建WebApplicationContext"></a>b&gt;创建WebApplicationContext</h5><p>所在类：org.springframework.web.servlet.FrameworkServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> WebApplicationContext <span class="hljs-title function_">createWebApplicationContext</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> ApplicationContext parent)</span> &#123;<br>    Class&lt;?&gt; contextClass = getContextClass();<br>    <span class="hljs-keyword">if</span> (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApplicationContextException</span>(<br>            <span class="hljs-string">&quot;Fatal initialization error in servlet with name &#x27;&quot;</span> + getServletName() +<br>            <span class="hljs-string">&quot;&#x27;: custom WebApplicationContext class [&quot;</span> + contextClass.getName() +<br>            <span class="hljs-string">&quot;] is not of type ConfigurableWebApplicationContext&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 通过反射创建 IOC 容器对象</span><br>    <span class="hljs-type">ConfigurableWebApplicationContext</span> <span class="hljs-variable">wac</span> <span class="hljs-operator">=</span><br>        (ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass);<br><br>    wac.setEnvironment(getEnvironment());<br>    <span class="hljs-comment">// 设置父容器</span><br>    wac.setParent(parent);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">configLocation</span> <span class="hljs-operator">=</span> getContextConfigLocation();<br>    <span class="hljs-keyword">if</span> (configLocation != <span class="hljs-literal">null</span>) &#123;<br>        wac.setConfigLocation(configLocation);<br>    &#125;<br>    configureAndRefreshWebApplicationContext(wac);<br><br>    <span class="hljs-keyword">return</span> wac;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="c-gt-DispatcherServlet初始化策略"><a href="#c-gt-DispatcherServlet初始化策略" class="headerlink" title="c&gt;DispatcherServlet初始化策略"></a>c&gt;DispatcherServlet初始化策略</h5><p>FrameworkServlet创建WebApplicationContext后，刷新容器，调用onRefresh(wac)，此方法在DispatcherServlet中进行了重写，调用了initStrategies(context)方法，初始化策略，即初始化DispatcherServlet的各个组件</p><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initStrategies</span><span class="hljs-params">(ApplicationContext context)</span> &#123;<br>   initMultipartResolver(context);<br>   initLocaleResolver(context);<br>   initThemeResolver(context);<br>   initHandlerMappings(context);<br>   initHandlerAdapters(context);<br>   initHandlerExceptionResolvers(context);<br>   initRequestToViewNameTranslator(context);<br>   initViewResolvers(context);<br>   initFlashMapManager(context);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、DispatcherServlet调用组件处理请求"><a href="#3、DispatcherServlet调用组件处理请求" class="headerlink" title="3、DispatcherServlet调用组件处理请求"></a>3、DispatcherServlet调用组件处理请求</h3><h5 id="a-gt-processRequest"><a href="#a-gt-processRequest" class="headerlink" title="a&gt;processRequest()"></a>a&gt;processRequest()</h5><p>FrameworkServlet重写HttpServlet中的service()和doXxx()，这些方法中调用了processRequest(request, response)</p><p>所在类：org.springframework.web.servlet.FrameworkServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processRequest</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span><br>    <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><br>    <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>    <span class="hljs-type">Throwable</span> <span class="hljs-variable">failureCause</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-type">LocaleContext</span> <span class="hljs-variable">previousLocaleContext</span> <span class="hljs-operator">=</span> LocaleContextHolder.getLocaleContext();<br>    <span class="hljs-type">LocaleContext</span> <span class="hljs-variable">localeContext</span> <span class="hljs-operator">=</span> buildLocaleContext(request);<br><br>    <span class="hljs-type">RequestAttributes</span> <span class="hljs-variable">previousAttributes</span> <span class="hljs-operator">=</span> RequestContextHolder.getRequestAttributes();<br>    <span class="hljs-type">ServletRequestAttributes</span> <span class="hljs-variable">requestAttributes</span> <span class="hljs-operator">=</span> buildRequestAttributes(request, response, previousAttributes);<br><br>    <span class="hljs-type">WebAsyncManager</span> <span class="hljs-variable">asyncManager</span> <span class="hljs-operator">=</span> WebAsyncUtils.getAsyncManager(request);<br>    asyncManager.registerCallableInterceptor(FrameworkServlet.class.getName(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestBindingInterceptor</span>());<br><br>    initContextHolders(request, localeContext, requestAttributes);<br><br>    <span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// 执行服务，doService()是一个抽象方法，在DispatcherServlet中进行了重写</span><br>        doService(request, response);<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (ServletException | IOException ex) &#123;<br>        failureCause = ex;<br>        <span class="hljs-keyword">throw</span> ex;<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br>        failureCause = ex;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NestedServletException</span>(<span class="hljs-string">&quot;Request processing failed&quot;</span>, ex);<br>    &#125;<br><br>    <span class="hljs-keyword">finally</span> &#123;<br>        resetContextHolders(request, previousLocaleContext, previousAttributes);<br>        <span class="hljs-keyword">if</span> (requestAttributes != <span class="hljs-literal">null</span>) &#123;<br>            requestAttributes.requestCompleted();<br>        &#125;<br>        logResult(request, response, failureCause, asyncManager);<br>        publishRequestHandledEvent(request, response, startTime, failureCause);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="b-gt-doService"><a href="#b-gt-doService" class="headerlink" title="b&gt;doService()"></a>b&gt;doService()</h5><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doService</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    logRequest(request);<br><br>    <span class="hljs-comment">// Keep a snapshot of the request attributes in case of an include,</span><br>    <span class="hljs-comment">// to be able to restore the original attributes after the include.</span><br>    Map&lt;String, Object&gt; attributesSnapshot = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (WebUtils.isIncludeRequest(request)) &#123;<br>        attributesSnapshot = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        Enumeration&lt;?&gt; attrNames = request.getAttributeNames();<br>        <span class="hljs-keyword">while</span> (attrNames.hasMoreElements()) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">attrName</span> <span class="hljs-operator">=</span> (String) attrNames.nextElement();<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.cleanupAfterInclude || attrName.startsWith(DEFAULT_STRATEGIES_PREFIX)) &#123;<br>                attributesSnapshot.put(attrName, request.getAttribute(attrName));<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// Make framework objects available to handlers and view objects.</span><br>    request.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE, getWebApplicationContext());<br>    request.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, <span class="hljs-built_in">this</span>.localeResolver);<br>    request.setAttribute(THEME_RESOLVER_ATTRIBUTE, <span class="hljs-built_in">this</span>.themeResolver);<br>    request.setAttribute(THEME_SOURCE_ATTRIBUTE, getThemeSource());<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.flashMapManager != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-type">FlashMap</span> <span class="hljs-variable">inputFlashMap</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.flashMapManager.retrieveAndUpdate(request, response);<br>        <span class="hljs-keyword">if</span> (inputFlashMap != <span class="hljs-literal">null</span>) &#123;<br>            request.setAttribute(INPUT_FLASH_MAP_ATTRIBUTE, Collections.unmodifiableMap(inputFlashMap));<br>        &#125;<br>        request.setAttribute(OUTPUT_FLASH_MAP_ATTRIBUTE, <span class="hljs-keyword">new</span> <span class="hljs-title class_">FlashMap</span>());<br>        request.setAttribute(FLASH_MAP_MANAGER_ATTRIBUTE, <span class="hljs-built_in">this</span>.flashMapManager);<br>    &#125;<br><br>    <span class="hljs-type">RequestPath</span> <span class="hljs-variable">requestPath</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.parseRequestPath &amp;&amp; !ServletRequestPathUtils.hasParsedRequestPath(request)) &#123;<br>        requestPath = ServletRequestPathUtils.parseAndCache(request);<br>    &#125;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 处理请求和响应</span><br>        doDispatch(request, response);<br>    &#125;<br>    <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (!WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;<br>            <span class="hljs-comment">// Restore the original attribute snapshot, in case of an include.</span><br>            <span class="hljs-keyword">if</span> (attributesSnapshot != <span class="hljs-literal">null</span>) &#123;<br>                restoreAttributesAfterInclude(request, attributesSnapshot);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (requestPath != <span class="hljs-literal">null</span>) &#123;<br>            ServletRequestPathUtils.clearParsedRequestPath(request);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="c-gt-doDispatch"><a href="#c-gt-doDispatch" class="headerlink" title="c&gt;doDispatch()"></a>c&gt;doDispatch()</h5><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doDispatch</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">processedRequest</span> <span class="hljs-operator">=</span> request;<br>    <span class="hljs-type">HandlerExecutionChain</span> <span class="hljs-variable">mappedHandler</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">multipartRequestParsed</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-type">WebAsyncManager</span> <span class="hljs-variable">asyncManager</span> <span class="hljs-operator">=</span> WebAsyncUtils.getAsyncManager(request);<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">mv</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">Exception</span> <span class="hljs-variable">dispatchException</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            processedRequest = checkMultipart(request);<br>            multipartRequestParsed = (processedRequest != request);<br><br>            <span class="hljs-comment">// Determine handler for the current request.</span><br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">            mappedHandler：调用链</span><br><span class="hljs-comment">                包含handler、interceptorList、interceptorIndex</span><br><span class="hljs-comment">            handler：浏览器发送的请求所匹配的控制器方法</span><br><span class="hljs-comment">            interceptorList：处理控制器方法的所有拦截器集合</span><br><span class="hljs-comment">            interceptorIndex：拦截器索引，控制拦截器afterCompletion()的执行</span><br><span class="hljs-comment">            */</span><br>            mappedHandler = getHandler(processedRequest);<br>            <span class="hljs-keyword">if</span> (mappedHandler == <span class="hljs-literal">null</span>) &#123;<br>                noHandlerFound(processedRequest, response);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// Determine handler adapter for the current request.</span><br>           <span class="hljs-comment">// 通过控制器方法创建相应的处理器适配器，调用所对应的控制器方法</span><br>            <span class="hljs-type">HandlerAdapter</span> <span class="hljs-variable">ha</span> <span class="hljs-operator">=</span> getHandlerAdapter(mappedHandler.getHandler());<br><br>            <span class="hljs-comment">// Process last-modified header, if supported by the handler.</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> request.getMethod();<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">isGet</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;GET&quot;</span>.equals(method);<br>            <span class="hljs-keyword">if</span> (isGet || <span class="hljs-string">&quot;HEAD&quot;</span>.equals(method)) &#123;<br>                <span class="hljs-type">long</span> <span class="hljs-variable">lastModified</span> <span class="hljs-operator">=</span> ha.getLastModified(request, mappedHandler.getHandler());<br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletWebRequest</span>(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-comment">// 调用拦截器的preHandle()</span><br>            <span class="hljs-keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// Actually invoke the handler.</span><br>            <span class="hljs-comment">// 由处理器适配器调用具体的控制器方法，最终获得ModelAndView对象</span><br>            mv = ha.handle(processedRequest, response, mappedHandler.getHandler());<br><br>            <span class="hljs-keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            applyDefaultViewName(processedRequest, mv);<br>            <span class="hljs-comment">// 调用拦截器的postHandle()</span><br>            mappedHandler.applyPostHandle(processedRequest, response, mv);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>            dispatchException = ex;<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Throwable err) &#123;<br>            <span class="hljs-comment">// As of 4.3, we&#x27;re processing Errors thrown from handler methods as well,</span><br>            <span class="hljs-comment">// making them available for @ExceptionHandler methods and other scenarios.</span><br>            dispatchException = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NestedServletException</span>(<span class="hljs-string">&quot;Handler dispatch failed&quot;</span>, err);<br>        &#125;<br>        <span class="hljs-comment">// 后续处理：处理模型数据和渲染视图</span><br>        processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>        triggerAfterCompletion(processedRequest, response, mappedHandler, ex);<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (Throwable err) &#123;<br>        triggerAfterCompletion(processedRequest, response, mappedHandler,<br>                               <span class="hljs-keyword">new</span> <span class="hljs-title class_">NestedServletException</span>(<span class="hljs-string">&quot;Handler processing failed&quot;</span>, err));<br>    &#125;<br>    <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;<br>            <span class="hljs-comment">// Instead of postHandle and afterCompletion</span><br>            <span class="hljs-keyword">if</span> (mappedHandler != <span class="hljs-literal">null</span>) &#123;<br>                mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// Clean up any resources used by a multipart request.</span><br>            <span class="hljs-keyword">if</span> (multipartRequestParsed) &#123;<br>                cleanupMultipart(processedRequest);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="d-gt-processDispatchResult"><a href="#d-gt-processDispatchResult" class="headerlink" title="d&gt;processDispatchResult()"></a>d&gt;processDispatchResult()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processDispatchResult</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response,</span><br><span class="hljs-params">                                   <span class="hljs-meta">@Nullable</span> HandlerExecutionChain mappedHandler, <span class="hljs-meta">@Nullable</span> ModelAndView mv,</span><br><span class="hljs-params">                                   <span class="hljs-meta">@Nullable</span> Exception exception)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">errorView</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">if</span> (exception != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (exception <span class="hljs-keyword">instanceof</span> ModelAndViewDefiningException) &#123;<br>            logger.debug(<span class="hljs-string">&quot;ModelAndViewDefiningException encountered&quot;</span>, exception);<br>            mv = ((ModelAndViewDefiningException) exception).getModelAndView();<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> (mappedHandler != <span class="hljs-literal">null</span> ? mappedHandler.getHandler() : <span class="hljs-literal">null</span>);<br>            mv = processHandlerException(request, response, handler, exception);<br>            errorView = (mv != <span class="hljs-literal">null</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// Did the handler return a view to render?</span><br>    <span class="hljs-keyword">if</span> (mv != <span class="hljs-literal">null</span> &amp;&amp; !mv.wasCleared()) &#123;<br>        <span class="hljs-comment">// 处理模型数据和渲染视图</span><br>        render(mv, request, response);<br>        <span class="hljs-keyword">if</span> (errorView) &#123;<br>            WebUtils.clearErrorRequestAttributes(request);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;<br>            logger.trace(<span class="hljs-string">&quot;No view rendering, null ModelAndView returned.&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;<br>        <span class="hljs-comment">// Concurrent handling started during a forward</span><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (mappedHandler != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// Exception (if any) is already handled..</span><br>        <span class="hljs-comment">// 调用拦截器的afterCompletion()</span><br>        mappedHandler.triggerAfterCompletion(request, response, <span class="hljs-literal">null</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4、SpringMVC的执行流程"><a href="#4、SpringMVC的执行流程" class="headerlink" title="4、SpringMVC的执行流程"></a>4、SpringMVC的执行流程</h3><ol><li>用户向服务器发送请求，请求被SpringMVC 前端控制器 DispatcherServlet捕获。</li><li>DispatcherServlet对请求URL进行解析，得到请求资源标识符（URI），判断请求URI对应的映射：</li></ol><p>a) 不存在</p><p>i. 再判断是否配置了mvc:default-servlet-handler</p><p>ii. 如果没配置，则控制台报映射查找不到，客户端展示404错误</p><p><img src="https://img-blog.csdnimg.cn/8df6a30e77184eb0bc1547dae5838f65.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1MTQzNA==,size_16,color_FFFFFF,t_70"></p><p>iii. 如果有配置，则访问目标资源（一般为静态资源，如：JS,CSS,HTML），找不到客户端也会展示404错误</p><p><img src="https://img-blog.csdnimg.cn/67d25736b3b74dfe9145acedb0e8656d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1MTQzNA==,size_16,color_FFFFFF,t_70"></p><p>b) 存在则执行下面的流程</p><ol><li>根据该URI，调用HandlerMapping获得该Handler配置的所有相关的对象（包括Handler对象以及Handler对象对应的拦截器），最后以HandlerExecutionChain执行链对象的形式返回。</li><li>DispatcherServlet 根据获得的Handler，选择一个合适的HandlerAdapter。</li><li>如果成功获得HandlerAdapter，此时将开始执行拦截器的preHandler(…)方法【正向】</li><li>提取Request中的模型数据，填充Handler入参，开始执行Handler（Controller)方法，处理请求。在填充Handler的入参过程中，根据你的配置，Spring将帮你做一些额外的工作：</li></ol><p>a) HttpMessageConveter： 将请求消息（如Json、xml等数据）转换成一个对象，将对象转换为指定的响应信息</p><p>b) 数据转换：对请求消息进行数据转换。如String转换成Integer、Double等</p><p>c) 数据格式化：对请求消息进行数据格式化。 如将字符串转换成格式化数字或格式化日期等</p><p>d) 数据验证： 验证数据的有效性（长度、格式等），验证结果存储到BindingResult或Error中</p><ol><li>Handler执行完成后，向DispatcherServlet 返回一个ModelAndView对象。</li><li>此时将开始执行拦截器的postHandle(…)方法【逆向】。</li><li>根据返回的ModelAndView（此时会判断是否存在异常：如果存在异常，则执行HandlerExceptionResolver进行异常处理）选择一个适合的ViewResolver进行视图解析，根据Model和View，来渲染视图。</li><li>渲染视图完毕执行拦截器的afterCompletion(…)方法【逆向】。</li><li>将渲染结果返回给客户端。</li></ol><h2 id="小插曲"><a href="#小插曲" class="headerlink" title="小插曲"></a>小插曲</h2><h3 id="使用springMVC-maven-mysql-druid实现前后端数据分离，具体：前端发出请求，后端处理请求返回json数据"><a href="#使用springMVC-maven-mysql-druid实现前后端数据分离，具体：前端发出请求，后端处理请求返回json数据" class="headerlink" title="使用springMVC+maven+mysql+druid实现前后端数据分离，具体：前端发出请求，后端处理请求返回json数据"></a>使用springMVC+maven+mysql+druid实现前后端数据分离，具体：前端发出请求，后端处理请求返回json数据</h3><ol><li><h4 id="建立maven项目"><a href="#建立maven项目" class="headerlink" title="建立maven项目"></a>建立maven项目</h4></li><li><h4 id="配置pom-xlm加入会用到的依赖-需要直接在maven仓库中搜索即可"><a href="#配置pom-xlm加入会用到的依赖-需要直接在maven仓库中搜索即可" class="headerlink" title="配置pom.xlm加入会用到的依赖,需要直接在maven仓库中搜索即可"></a>配置pom.xlm加入会用到的依赖,需要直接在maven仓库中搜索即可</h4></li><li><h4 id="配置web-xml设置过滤器"><a href="#配置web-xml设置过滤器" class="headerlink" title="配置web.xml设置过滤器"></a>配置web.xml设置过滤器</h4></li><li><h4 id="编写项目主体"><a href="#编写项目主体" class="headerlink" title="编写项目主体"></a>编写项目主体</h4><p><img src="http://tva1.sinaimg.cn/large/0078cgLnly1h2gazjle93j30ai0igdih.jpg"></p></li><li><h3 id="配置springMVC-xml"><a href="#配置springMVC-xml" class="headerlink" title="配置springMVC.xml"></a>配置springMVC.xml</h3></li></ol>]]></content>
    
    
    <categories>
      
      <category>SpringMVC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringMVC学习笔记(4)</title>
    <link href="/2022/05/19/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(4)%20/"/>
    <url>/2022/05/19/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(4)%20/</url>
    
    <content type="html"><![CDATA[<h1 id="HttpMessageConverter"><a href="#HttpMessageConverter" class="headerlink" title="HttpMessageConverter"></a>HttpMessageConverter</h1><p>HttpMessageConverter，报文信息转换器，将请求报文转换为Java对象，或将Java对象转换为响应报文</p><p>HttpMessageConverter提供了两个注解和两个类型：@RequestBody，@ResponseBody，RequestEntity，</p><p>ResponseEntity</p><h3 id="1、-RequestBody"><a href="#1、-RequestBody" class="headerlink" title="1、@RequestBody"></a>1、@RequestBody</h3><p>@RequestBody可以获取请求体，需要在控制器方法设置一个形参，使用@RequestBody进行标识，当前请求的请求体就会为当前注解所标识的形参赋值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/testRequestBody&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>12345<br>@RequestMapping(&quot;/testRequestBody&quot;)<br>public String testRequestBody(@RequestBody String requestBody)&#123;<br>    System.out.println(&quot;requestBody:&quot;+requestBody);<br>    return &quot;success&quot;;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果：</p><p>requestBody:username&#x3D;admin&amp;password&#x3D;123456</p><h3 id="2、RequestEntity"><a href="#2、RequestEntity" class="headerlink" title="2、RequestEntity"></a>2、RequestEntity</h3><p>RequestEntity封装请求报文的一种类型，需要在控制器方法的形参中设置该类型的形参，当前请求的请求报文就会赋值给该形参，可以通过getHeaders()获取请求头信息，通过getBody()获取请求体信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testRequestEntity&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testRequestEntity</span><span class="hljs-params">(RequestEntity&lt;String&gt; requestEntity)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;requestHeader:&quot;</span>+requestEntity.getHeaders());<br>    System.out.println(<span class="hljs-string">&quot;requestBody:&quot;</span>+requestEntity.getBody());<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果：<br>requestHeader:[host:“localhost:8080”, connection:“keep-alive”, content-length:“27”, cache-control:“max-age&#x3D;0”, sec-ch-ua:”” Not A;Brand”;v&#x3D;“99”, “Chromium”;v&#x3D;“90”, “Google Chrome”;v&#x3D;“90””, sec-ch-ua-mobile:”?0”, upgrade-insecure-requests:“1”, origin:“<a href="http://localhost:8080”">http://localhost:8080”</a>, user-agent:“Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;90.0.4430.93 Safari&#x2F;537.36”]<br>requestBody:username&#x3D;admin&amp;password&#x3D;123</p><h3 id="3、-ResponseBody"><a href="#3、-ResponseBody" class="headerlink" title="3、@ResponseBody"></a>3、@ResponseBody</h3><p>@ResponseBody用于标识一个控制器方法，可以将该方法的返回值直接作为响应报文的响应体响应到浏览器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testResponseBody&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testResponseBody</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果：浏览器页面显示success</p><h3 id="4、SpringMVC处理json"><a href="#4、SpringMVC处理json" class="headerlink" title="4、SpringMVC处理json"></a>4、SpringMVC处理json</h3><p>@ResponseBody处理json的步骤：</p><p>a&gt;导入jackson的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.12.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>b&gt;在SpringMVC的核心配置文件中开启mvc的注解驱动，此时在HandlerAdaptor中会自动装配一个消息转换器：MappingJackson2HttpMessageConverter，可以将响应到浏览器的Java对象转换为Json格式的字符串</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal">&lt;<span class="hljs-symbol">mvc:</span><span class="hljs-keyword">annotation</span>-<span class="hljs-title">driven</span> /&gt;<br></code></pre></td></tr></table></figure><p>c&gt;在处理器方法上使用@ResponseBody注解进行标识</p><p>d&gt;将Java对象直接作为控制器方法的返回值返回，就会自动转换为Json格式的字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testResponseUser&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">testResponseUser</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">1001</span>,<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>,<span class="hljs-number">23</span>,<span class="hljs-string">&quot;男&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>浏览器的页面中展示的结果：</p><p>{“id”:1001,“username”:“admin”,“password”:“123456”,“age”:23,“sex”:“男”}</p><h3 id="5、SpringMVC处理ajax"><a href="#5、SpringMVC处理ajax" class="headerlink" title="5、SpringMVC处理ajax"></a>5、SpringMVC处理ajax</h3><p>a&gt;请求超链接：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/testAjax&#125;&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;testAjax&quot;</span>&gt;</span>testAjax<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>b&gt;通过vue和axios处理点击事件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/static/js/vue.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/static/js/axios.min.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> vue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">testAjax</span>:<span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">axios</span>(&#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">method</span>:<span class="hljs-string">&quot;post&quot;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">url</span>:event.<span class="hljs-property">target</span>.<span class="hljs-property">href</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">params</span>:&#123;</span><br><span class="language-javascript">                        <span class="hljs-attr">username</span>:<span class="hljs-string">&quot;admin&quot;</span>,</span><br><span class="language-javascript">                        <span class="hljs-attr">password</span>:<span class="hljs-string">&quot;123456&quot;</span></span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-title function_">alert</span>(response.<span class="hljs-property">data</span>);</span><br><span class="language-javascript">                &#125;);</span><br><span class="language-javascript">                event.<span class="hljs-title function_">preventDefault</span>();</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>c&gt;控制器方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testAjax&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testAjax</span><span class="hljs-params">(String username, String password)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;username:&quot;</span>+username+<span class="hljs-string">&quot;,password:&quot;</span>+password);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello,ajax&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6、-RestController注解"><a href="#6、-RestController注解" class="headerlink" title="6、@RestController注解"></a>6、@RestController注解</h3><p>@RestController注解是springMVC提供的一个复合注解，标识在控制器的类上，就相当于为类添加了@Controller注解，并且为其中的每个方法添加了@ResponseBody注解</p><h3 id="7、ResponseEntity"><a href="#7、ResponseEntity" class="headerlink" title="7、ResponseEntity"></a>7、ResponseEntity</h3><p>ResponseEntity用于控制器方法的返回值类型，该控制器方法的返回值就是响应到浏览器的响应报文</p><h1 id="文件上传和下载"><a href="#文件上传和下载" class="headerlink" title="文件上传和下载"></a>文件上传和下载</h1><h3 id="1、文件下载"><a href="#1、文件下载" class="headerlink" title="1、文件下载"></a>1、文件下载</h3><p>使用ResponseEntity实现下载文件的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testDown&quot;)</span><br><span class="hljs-keyword">public</span> ResponseEntity&lt;<span class="hljs-type">byte</span>[]&gt; testResponseEntity(HttpSession session) <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//获取ServletContext对象</span><br>    <span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> session.getServletContext();<br>    <span class="hljs-comment">//获取服务器中文件的真实路径</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">realPath</span> <span class="hljs-operator">=</span> servletContext.getRealPath(<span class="hljs-string">&quot;/static/img/1.jpg&quot;</span>);<br>    <span class="hljs-comment">//创建输入流</span><br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(realPath);<br>    <span class="hljs-comment">//创建字节数组</span><br>    <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[is.available()];<br>    <span class="hljs-comment">//将流读到字节数组中</span><br>    is.read(bytes);<br>    <span class="hljs-comment">//创建HttpHeaders对象设置响应头信息</span><br>    MultiValueMap&lt;String, String&gt; headers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpHeaders</span>();<br>    <span class="hljs-comment">//设置要下载方式以及下载文件的名字</span><br>    headers.add(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment;filename=1.jpg&quot;</span>);<br>    <span class="hljs-comment">//设置响应状态码</span><br>    <span class="hljs-type">HttpStatus</span> <span class="hljs-variable">statusCode</span> <span class="hljs-operator">=</span> HttpStatus.OK;<br>    <span class="hljs-comment">//创建ResponseEntity对象</span><br>    ResponseEntity&lt;<span class="hljs-type">byte</span>[]&gt; responseEntity = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseEntity</span>&lt;&gt;(bytes, headers, statusCode);<br>    <span class="hljs-comment">//关闭输入流</span><br>    is.close();<br>    <span class="hljs-keyword">return</span> responseEntity;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、文件上传"><a href="#2、文件上传" class="headerlink" title="2、文件上传"></a>2、文件上传</h3><p>文件上传要求form表单的请求方式必须为post，并且添加属性enctype&#x3D;“multipart&#x2F;form-data”</p><p>SpringMVC中将上传的文件封装到MultipartFile对象中，通过此对象可以获取文件相关信息</p><p>上传步骤：</p><p>a&gt;添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>b&gt;在SpringMVC的配置文件中添加配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--必须通过文件解析器的解析才能将文件转换为MultipartFile对象--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;multipartResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>c&gt;控制器方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testUp&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testUp</span><span class="hljs-params">(MultipartFile photo, HttpSession session)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//获取上传的文件的文件名</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> photo.getOriginalFilename();<br>    <span class="hljs-comment">//处理文件重名问题</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">hzName</span> <span class="hljs-operator">=</span> fileName.substring(fileName.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>));<br>    fileName = UUID.randomUUID().toString() + hzName;<br>    <span class="hljs-comment">//获取服务器中photo目录的路径</span><br>    <span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> session.getServletContext();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">photoPath</span> <span class="hljs-operator">=</span> servletContext.getRealPath(<span class="hljs-string">&quot;photo&quot;</span>);<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(photoPath);<br>    <span class="hljs-keyword">if</span>(!file.exists())&#123;<br>        file.mkdir();<br>    &#125;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">finalPath</span> <span class="hljs-operator">=</span> photoPath + File.separator + fileName;<br>    <span class="hljs-comment">//实现上传功能</span><br>    photo.transferTo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(finalPath));<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringMVC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringMVC学习笔记(3)</title>
    <link href="/2022/05/18/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(3)/"/>
    <url>/2022/05/18/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(3)/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringMVC的视图"><a href="#SpringMVC的视图" class="headerlink" title="SpringMVC的视图"></a>SpringMVC的视图</h1><p>SpringMVC中的视图是View接口，视图的作用渲染数据，将模型Model中的数据展示给用户</p><p>SpringMVC视图的种类很多，默认有转发视图和重定向视图</p><p>当工程引入jstl的依赖，转发视图会自动转换为JstlView</p><p>若使用的视图技术为Thymeleaf，在SpringMVC的配置文件中配置了Thymeleaf的视图解析器，由此视图解析器解析之后所得到的是ThymeleafView</p><h3 id="1、ThymeleafView"><a href="#1、ThymeleafView" class="headerlink" title="1、ThymeleafView"></a>1、ThymeleafView</h3><p>当控制器方法中所设置的视图名称没有任何前缀时，此时的视图名称会被SpringMVC配置文件中所配置的视图解析器解析，视图名称拼接视图前缀和视图后缀所得到的最终路径，会通过转发的方式实现跳转</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testHello&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testHello</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/781f6b299e6b41a8b006866ecbcb76ba.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1MTQzNA==,size_16,color_FFFFFF,t_70"></p><h3 id="2、转发视图"><a href="#2、转发视图" class="headerlink" title="2、转发视图"></a>2、转发视图</h3><p>SpringMVC中默认的转发视图是InternalResourceView</p><p>SpringMVC中创建转发视图的情况：</p><p>当控制器方法中所设置的视图名称以”forward:”为前缀时，创建InternalResourceView视图，此时的视图名称不会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀”forward:”去掉，剩余部分作为最终路径通过转发的方式实现跳转</p><p>例如”forward:&#x2F;“，“forward:&#x2F;employee”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testForward&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testForward</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;forward:/testHello&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/71526c269bbb447b8701d906b2859965.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1MTQzNA==,size_16,color_FFFFFF,t_70"></p><h3 id="3、重定向视图"><a href="#3、重定向视图" class="headerlink" title="3、重定向视图"></a>3、重定向视图</h3><p>SpringMVC中默认的重定向视图是RedirectView</p><p>当控制器方法中所设置的视图名称以”redirect:”为前缀时，创建RedirectView视图，此时的视图名称不会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀”redirect:”去掉，剩余部分作为最终路径通过重定向的方式实现跳转</p><p>例如”redirect:&#x2F;“，“redirect:&#x2F;employee”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testRedirect&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testRedirect</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/testHello&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/ec5b5371ea804cafb27e2751231df362.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1MTQzNA==,size_16,color_FFFFFF,t_70"></p><blockquote><p>注：</p><p>重定向视图在解析时，会先将redirect:前缀去掉，然后会判断剩余部分是否以&#x2F;开头，若是则会自动拼接上下文路径</p></blockquote><h3 id="4、视图控制器view-controller"><a href="#4、视图控制器view-controller" class="headerlink" title="4、视图控制器view-controller"></a>4、视图控制器view-controller</h3><p>当控制器方法中，仅仅用来实现页面跳转，即只需要设置视图名称时，可以将处理器方法使用view-controller标签进行表示</p><blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">path：设置处理的请求地址</span><br><span class="hljs-comment">view-name：设置请求地址所对应的视图名称</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:view-controller</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/testView&quot;</span> <span class="hljs-attr">view-name</span>=<span class="hljs-string">&quot;success&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:view-controller</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>注：当SpringMVC中设置任何一个view-controller时，其他控制器中的请求映射将全部失效，此时需要在SpringMVC的核心配置文件中设置开启mvc注解驱动的标签：&lt;mvc:annotation-driven &#x2F;&gt;</p></blockquote></blockquote><h1 id="RESTful"><a href="#RESTful" class="headerlink" title="RESTful"></a>RESTful</h1><h3 id="1、RESTful简介"><a href="#1、RESTful简介" class="headerlink" title="1、RESTful简介"></a>1、RESTful简介</h3><p>REST：<strong>Re</strong>presentational <strong>S</strong>tate <strong>T</strong>ransfer，表现层资源状态转移。</p><h5 id="a-gt-资源"><a href="#a-gt-资源" class="headerlink" title="a&gt;资源"></a>a&gt;资源</h5><p>资源是一种看待服务器的方式，即，将服务器看作是由很多离散的资源组成。每个资源是服务器上一个可命名的抽象概念。因为资源是一个抽象的概念，所以它不仅仅能代表服务器文件系统中的一个文件、数据库中的一张表等等具体的东西，可以将资源设计的要多抽象有多抽象，只要想象力允许而且客户端应用开发者能够理解。与面向对象设计类似，资源是以名词为核心来组织的，首先关注的是名词。一个资源可以由一个或多个URI来标识。URI既是资源的名称，也是资源在Web上的地址。对某个资源感兴趣的客户端应用，可以通过资源的URI与其进行交互。</p><h5 id="b-gt-资源的表述"><a href="#b-gt-资源的表述" class="headerlink" title="b&gt;资源的表述"></a>b&gt;资源的表述</h5><p>资源的表述是一段对于资源在某个特定时刻的状态的描述。可以在客户端-服务器端之间转移（交换）。资源的表述可以有多种格式，例如HTML&#x2F;XML&#x2F;JSON&#x2F;纯文本&#x2F;图片&#x2F;视频&#x2F;音频等等。资源的表述格式可以通过协商机制来确定。请求-响应方向的表述通常使用不同的格式。</p><h5 id="c-gt-状态转移"><a href="#c-gt-状态转移" class="headerlink" title="c&gt;状态转移"></a>c&gt;状态转移</h5><p>状态转移说的是：在客户端和服务器端之间转移（transfer）代表资源状态的表述。通过转移和操作资源的表述，来间接实现操作资源的目的。</p><h3 id="2、RESTful的实现"><a href="#2、RESTful的实现" class="headerlink" title="2、RESTful的实现"></a>2、RESTful的实现</h3><p>具体说，就是 HTTP 协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。</p><p>它们分别对应四种基本操作：GET 用来获取资源，POST 用来新建资源，PUT 用来更新资源，DELETE 用来删除资源。</p><p>REST 风格提倡 URL 地址使用统一的风格设计，从前到后各个单词使用斜杠分开，不使用问号键值对方式携带请求参数，而是将要发送给服务器的数据作为 URL 地址的一部分，以保证整体风格的一致性。</p><table><thead><tr><th>操作</th><th>传统方式</th><th>REST风格</th></tr></thead><tbody><tr><td>查询操作</td><td>getUserById?id&#x3D;1</td><td>user&#x2F;1–&gt;get请求方式</td></tr><tr><td>保存操作</td><td>saveUser</td><td>user–&gt;post请求方式</td></tr><tr><td>删除操作</td><td>deleteUser?id&#x3D;1</td><td>user&#x2F;1–&gt;delete请求方式</td></tr><tr><td>更新操作</td><td>updateUser</td><td>user–&gt;put请求方式</td></tr></tbody></table><h3 id="3、HiddenHttpMethodFilter"><a href="#3、HiddenHttpMethodFilter" class="headerlink" title="3、HiddenHttpMethodFilter"></a>3、HiddenHttpMethodFilter</h3><p>由于浏览器只支持发送get和post方式的请求，那么该如何发送put和delete请求呢？</p><p>SpringMVC 提供了 <strong>HiddenHttpMethodFilter</strong> 帮助我们<strong>将 POST 请求转换为 DELETE 或 PUT 请求</strong></p><p><strong>HiddenHttpMethodFilter</strong> 处理put和delete请求的条件：</p><p>a&gt;当前请求的请求方式必须为post</p><p>b&gt;当前请求必须传输请求参数_method</p><p>满足以上条件，<strong>HiddenHttpMethodFilter</strong> 过滤器就会将当前请求的请求方式转换为请求参数_method的值，因此请求参数_method的值才是最终的请求方式</p><p>在web.xml中注册<strong>HiddenHttpMethodFilter</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br>12345678<br></code></pre></td></tr></table></figure><blockquote><p>注：</p><p>目前为止，SpringMVC中提供了两个过滤器：CharacterEncodingFilter和HiddenHttpMethodFilter</p><p>在web.xml中注册时，必须先注册CharacterEncodingFilter，再注册HiddenHttpMethodFilter</p><p>原因：</p><ul><li><p>在 CharacterEncodingFilter 中通过 request.setCharacterEncoding(encoding) 方法设置字符集的</p></li><li><p>request.setCharacterEncoding(encoding) 方法要求前面不能有任何获取请求参数的操作</p></li><li><p>而 HiddenHttpMethodFilter 恰恰有一个获取请求方式的操作：</p></li><li><p>&#96;&#96;&#96;<br>String paramValue &#x3D; request.getParameter(this.methodParam);</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><br># RESTful案例<br><br>### <span class="hljs-number">1</span>、准备工作<br><br>和传统 CRUD 一样，实现对员工信息的增删改查。<br><br>- 搭建环境<br><br>- 准备实体类<br><br> ```java<br> package com.atguigu.mvc.bean;<br> <br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> &#123;<br> <br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> lastName;<br> <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> email;<br>    <span class="hljs-comment">//1 male, 0 female</span><br>    <span class="hljs-keyword">private</span> Integer gender;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>       <span class="hljs-keyword">return</span> id;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(Integer id)</span> </span>&#123;<br>       <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">String</span> <span class="hljs-title">getLastName</span><span class="hljs-params">()</span> </span>&#123;<br>       <span class="hljs-keyword">return</span> lastName;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">void</span> <span class="hljs-title">setLastName</span><span class="hljs-params">(<span class="hljs-type">String</span> lastName)</span> </span>&#123;<br>       <span class="hljs-keyword">this</span>.lastName = lastName;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">String</span> <span class="hljs-title">getEmail</span><span class="hljs-params">()</span> </span>&#123;<br>       <span class="hljs-keyword">return</span> email;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">void</span> <span class="hljs-title">setEmail</span><span class="hljs-params">(<span class="hljs-type">String</span> email)</span> </span>&#123;<br>       <span class="hljs-keyword">this</span>.email = email;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getGender</span><span class="hljs-params">()</span> </span>&#123;<br>       <span class="hljs-keyword">return</span> gender;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">void</span> <span class="hljs-title">setGender</span><span class="hljs-params">(Integer gender)</span> </span>&#123;<br>       <span class="hljs-keyword">this</span>.gender = gender;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Employee</span><span class="hljs-params">(Integer id, <span class="hljs-type">String</span> lastName, <span class="hljs-type">String</span> email, Integer gender)</span> </span>&#123;<br>       <span class="hljs-built_in">super</span>();<br>       <span class="hljs-keyword">this</span>.id = id;<br>       <span class="hljs-keyword">this</span>.lastName = lastName;<br>       <span class="hljs-keyword">this</span>.email = email;<br>       <span class="hljs-keyword">this</span>.gender = gender;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Employee</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br> &#125;<br></code></pre></td></tr></table></figure></li></ul></blockquote><ul><li><p>准备dao模拟数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.mvc.dao;<br><br><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">import</span> com.atguigu.mvc.bean.Employee;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><br><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmployeeDao</span> &#123;<br><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;Integer, Employee&gt; employees = <span class="hljs-literal">null</span>;<br>   <br>   <span class="hljs-keyword">static</span>&#123;<br>      employees = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Integer, Employee&gt;();<br><br>      employees.put(<span class="hljs-number">1001</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-number">1001</span>, <span class="hljs-string">&quot;E-AA&quot;</span>, <span class="hljs-string">&quot;aa@163.com&quot;</span>, <span class="hljs-number">1</span>));<br>      employees.put(<span class="hljs-number">1002</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-number">1002</span>, <span class="hljs-string">&quot;E-BB&quot;</span>, <span class="hljs-string">&quot;bb@163.com&quot;</span>, <span class="hljs-number">1</span>));<br>      employees.put(<span class="hljs-number">1003</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-number">1003</span>, <span class="hljs-string">&quot;E-CC&quot;</span>, <span class="hljs-string">&quot;cc@163.com&quot;</span>, <span class="hljs-number">0</span>));<br>      employees.put(<span class="hljs-number">1004</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-number">1004</span>, <span class="hljs-string">&quot;E-DD&quot;</span>, <span class="hljs-string">&quot;dd@163.com&quot;</span>, <span class="hljs-number">0</span>));<br>      employees.put(<span class="hljs-number">1005</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-number">1005</span>, <span class="hljs-string">&quot;E-EE&quot;</span>, <span class="hljs-string">&quot;ee@163.com&quot;</span>, <span class="hljs-number">1</span>));<br>   &#125;<br>   <br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">initId</span> <span class="hljs-operator">=</span> <span class="hljs-number">1006</span>;<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">(Employee employee)</span>&#123;<br>      <span class="hljs-keyword">if</span>(employee.getId() == <span class="hljs-literal">null</span>)&#123;<br>         employee.setId(initId++);<br>      &#125;<br>      employees.put(employee.getId(), employee);<br>   &#125;<br>   <br>   <span class="hljs-keyword">public</span> Collection&lt;Employee&gt; <span class="hljs-title function_">getAll</span><span class="hljs-params">()</span>&#123;<br>      <span class="hljs-keyword">return</span> employees.values();<br>   &#125;<br>   <br>   <span class="hljs-keyword">public</span> Employee <span class="hljs-title function_">get</span><span class="hljs-params">(Integer id)</span>&#123;<br>      <span class="hljs-keyword">return</span> employees.get(id);<br>   &#125;<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Integer id)</span>&#123;<br>      employees.remove(id);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="2、功能清单"><a href="#2、功能清单" class="headerlink" title="2、功能清单"></a>2、功能清单</h3><table><thead><tr><th>功能</th><th>URL 地址</th><th>请求方式</th></tr></thead><tbody><tr><td>访问首页√</td><td>&#x2F;</td><td>GET</td></tr><tr><td>查询全部数据√</td><td>&#x2F;employee</td><td>GET</td></tr><tr><td>删除√</td><td>&#x2F;employee&#x2F;2</td><td>DELETE</td></tr><tr><td>跳转到添加数据页面√</td><td>&#x2F;toAdd</td><td>GET</td></tr><tr><td>执行保存√</td><td>&#x2F;employee</td><td>POST</td></tr><tr><td>跳转到更新数据页面√</td><td>&#x2F;employee&#x2F;2</td><td>GET</td></tr><tr><td>执行更新√</td><td>&#x2F;employee</td><td>PUT</td></tr></tbody></table><h3 id="3、具体功能：访问首页"><a href="#3、具体功能：访问首页" class="headerlink" title="3、具体功能：访问首页"></a>3、具体功能：访问首页</h3><h5 id="a-gt-配置view-controller"><a href="#a-gt-配置view-controller" class="headerlink" title="a&gt;配置view-controller"></a>a&gt;配置view-controller</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:view-controller</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">view-name</span>=<span class="hljs-string">&quot;index&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h5 id="b-gt-创建页面"><a href="#b-gt-创建页面" class="headerlink" title="b&gt;创建页面"></a>b&gt;创建页面</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/employee&#125;&quot;</span>&gt;</span>访问员工信息<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4、具体功能：查询所有员工数据"><a href="#4、具体功能：查询所有员工数据" class="headerlink" title="4、具体功能：查询所有员工数据"></a>4、具体功能：查询所有员工数据</h3><h5 id="a-gt-控制器方法"><a href="#a-gt-控制器方法" class="headerlink" title="a&gt;控制器方法"></a>a&gt;控制器方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/employee&quot;, method = RequestMethod.GET)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getEmployeeList</span><span class="hljs-params">(Model model)</span>&#123;<br>    Collection&lt;Employee&gt; employeeList = employeeDao.getAll();<br>    model.addAttribute(<span class="hljs-string">&quot;employeeList&quot;</span>, employeeList);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;employee_list&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="b-gt-创建employee-list-html"><a href="#b-gt-创建employee-list-html" class="headerlink" title="b&gt;创建employee_list.html"></a>b&gt;创建employee_list.html</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Employee Info<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/static/js/vue.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">cellpadding</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataTable&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;5&quot;</span>&gt;</span>Employee Info<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>id<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>lastName<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>email<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>gender<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>options(<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/toAdd&#125;&quot;</span>&gt;</span>add<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>)<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;employee : $&#123;employeeList&#125;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;employee.id&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;employee.lastName&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;employee.email&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;deleteA&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;deleteEmployee&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>delete<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>update<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5、具体功能：删除"><a href="#5、具体功能：删除" class="headerlink" title="5、具体功能：删除"></a>5、具体功能：删除</h3><h5 id="a-gt-创建处理delete请求方式的表单"><a href="#a-gt-创建处理delete请求方式的表单" class="headerlink" title="a&gt;创建处理delete请求方式的表单"></a>a&gt;创建处理delete请求方式的表单</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 作用：通过超链接控制表单的提交，将post请求转换为delete请求 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;delete_form&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- HiddenHttpMethodFilter要求：必须传输_method请求参数，并且值为最终的请求方式 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;_method&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;delete&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="b-gt-删除超链接绑定点击事件"><a href="#b-gt-删除超链接绑定点击事件" class="headerlink" title="b&gt;删除超链接绑定点击事件"></a>b&gt;删除超链接绑定点击事件</h5><p>引入vue.js</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/static/js/vue.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>删除超链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;deleteA&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;deleteEmployee&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>delete<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>通过vue处理点击事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> vue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#dataTable&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-comment">//event表示当前事件</span></span><br><span class="language-javascript">            <span class="hljs-attr">deleteEmployee</span>:<span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">//通过id获取表单标签</span></span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> delete_form = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;delete_form&quot;</span>);</span><br><span class="language-javascript">                <span class="hljs-comment">//将触发事件的超链接的href属性为表单的action属性赋值</span></span><br><span class="language-javascript">                delete_form.<span class="hljs-property">action</span> = event.<span class="hljs-property">target</span>.<span class="hljs-property">href</span>;</span><br><span class="language-javascript">                <span class="hljs-comment">//提交表单</span></span><br><span class="language-javascript">                delete_form.<span class="hljs-title function_">submit</span>();</span><br><span class="language-javascript">                <span class="hljs-comment">//阻止超链接的默认跳转行为</span></span><br><span class="language-javascript">                event.<span class="hljs-title function_">preventDefault</span>();</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="c-gt-控制器方法"><a href="#c-gt-控制器方法" class="headerlink" title="c&gt;控制器方法"></a>c&gt;控制器方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/employee/&#123;id&#125;&quot;, method = RequestMethod.DELETE)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">deleteEmployee</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;<br>    employeeDao.delete(id);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/employee&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6、具体功能：跳转到添加数据页面"><a href="#6、具体功能：跳转到添加数据页面" class="headerlink" title="6、具体功能：跳转到添加数据页面"></a>6、具体功能：跳转到添加数据页面</h3><h5 id="a-gt-配置view-controller-1"><a href="#a-gt-配置view-controller-1" class="headerlink" title="a&gt;配置view-controller"></a>a&gt;配置view-controller</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:view-controller</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/toAdd&quot;</span> <span class="hljs-attr">view-name</span>=<span class="hljs-string">&quot;employee_add&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:view-controller</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="b-gt-创建employee-add-html"><a href="#b-gt-创建employee-add-html" class="headerlink" title="b&gt;创建employee_add.html"></a>b&gt;创建employee_add.html</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Add Employee<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/employee&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    lastName:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lastName&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    email:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    gender:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>male<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span>female<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="7、具体功能：执行保存"><a href="#7、具体功能：执行保存" class="headerlink" title="7、具体功能：执行保存"></a>7、具体功能：执行保存</h3><h5 id="a-gt-控制器方法-1"><a href="#a-gt-控制器方法-1" class="headerlink" title="a&gt;控制器方法"></a>a&gt;控制器方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/employee&quot;, method = RequestMethod.POST)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">addEmployee</span><span class="hljs-params">(Employee employee)</span>&#123;<br>    employeeDao.save(employee);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/employee&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8、具体功能：跳转到更新数据页面"><a href="#8、具体功能：跳转到更新数据页面" class="headerlink" title="8、具体功能：跳转到更新数据页面"></a>8、具体功能：跳转到更新数据页面</h3><h5 id="a-gt-修改超链接"><a href="#a-gt-修改超链接" class="headerlink" title="a&gt;修改超链接"></a>a&gt;修改超链接</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>update<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="b-gt-控制器方法"><a href="#b-gt-控制器方法" class="headerlink" title="b&gt;控制器方法"></a>b&gt;控制器方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/employee/&#123;id&#125;&quot;, method = RequestMethod.GET)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getEmployeeById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id, Model model)</span>&#123;<br>    <span class="hljs-type">Employee</span> <span class="hljs-variable">employee</span> <span class="hljs-operator">=</span> employeeDao.get(id);<br>    model.addAttribute(<span class="hljs-string">&quot;employee&quot;</span>, employee);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;employee_update&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="c-gt-创建employee-update-html"><a href="#c-gt-创建employee-update-html" class="headerlink" title="c&gt;创建employee_update.html"></a>c&gt;创建employee_update.html</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Update Employee<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/employee&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;_method&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;put&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;$&#123;employee.id&#125;&quot;</span>&gt;</span><br>    lastName:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lastName&quot;</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;$&#123;employee.lastName&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    email:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;$&#123;employee.email&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        th:field=&quot;$&#123;employee.gender&#125;&quot;可用于单选框或复选框的回显</span><br><span class="hljs-comment">        若单选框的value和employee.gender的值一致，则添加checked=&quot;checked&quot;属性</span><br><span class="hljs-comment">    --&gt;</span><br>    gender:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">th:field</span>=<span class="hljs-string">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span>male<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">th:field</span>=<span class="hljs-string">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span>female<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;update&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="9、具体功能：执行更新"><a href="#9、具体功能：执行更新" class="headerlink" title="9、具体功能：执行更新"></a>9、具体功能：执行更新</h3><h5 id="a-gt-控制器方法-2"><a href="#a-gt-控制器方法-2" class="headerlink" title="a&gt;控制器方法"></a>a&gt;控制器方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/employee&quot;, method = RequestMethod.PUT)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">updateEmployee</span><span class="hljs-params">(Employee employee)</span>&#123;<br>    employeeDao.save(employee);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/employee&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringMVC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringMVC学习笔记(2)</title>
    <link href="/2022/05/15/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(2)/"/>
    <url>/2022/05/15/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(2)/</url>
    
    <content type="html"><![CDATA[<h3 id="web项目部署"><a href="#web项目部署" class="headerlink" title="web项目部署"></a>web项目部署</h3><p>尝试了一下把之前做过的一个Javaweb的水果系统的项目上传到服务器上进行访问，花了一段时间好歹是成功了(。-ω-)zzz</p><p><a href="http://39.98.117.29:8232/Test_war/fruit.do">水果系统</a></p><h4 id="1-将做好的Javaweb项目打war包放在-x2F-usr-x2F-local-x2F-bttomcat-x2F-tomcat8-x2F-webapps的目录下-不需要解压"><a href="#1-将做好的Javaweb项目打war包放在-x2F-usr-x2F-local-x2F-bttomcat-x2F-tomcat8-x2F-webapps的目录下-不需要解压" class="headerlink" title="1.将做好的Javaweb项目打war包放在&#x2F;usr&#x2F;local&#x2F;bttomcat&#x2F;tomcat8&#x2F;webapps的目录下(不需要解压)"></a>1.将做好的Javaweb项目打war包放在&#x2F;usr&#x2F;local&#x2F;bttomcat&#x2F;tomcat8&#x2F;webapps的目录下(不需要解压)</h4><p><a href="https://blog.csdn.net/qq_34872748/article/details/100390922">IDEA打war包</a></p><h4 id="2-重启tomcat"><a href="#2-重启tomcat" class="headerlink" title="2.重启tomcat"></a>2.重启tomcat</h4><h4 id="3-以ip-端口号-x2F-项目名-x2F-index-html-x2F-fruit-do访问"><a href="#3-以ip-端口号-x2F-项目名-x2F-index-html-x2F-fruit-do访问" class="headerlink" title="3.以ip:端口号&#x2F;项目名&#x2F;index.html&#x2F;fruit.do访问"></a>3.以ip:端口号&#x2F;项目名&#x2F;index.html&#x2F;fruit.do访问</h4><h5 id="关于配置文件的修改"><a href="#关于配置文件的修改" class="headerlink" title="关于配置文件的修改"></a>关于配置文件的修改</h5><h6 id="url要改成jdbc-mysql-x2F-x2F-服务器ip-3306-x2F-数据库名-rewriteBatchedStatements-x3D-true"><a href="#url要改成jdbc-mysql-x2F-x2F-服务器ip-3306-x2F-数据库名-rewriteBatchedStatements-x3D-true" class="headerlink" title="url要改成jdbc:mysql:&#x2F;&#x2F;服务器ip:3306&#x2F;数据库名?rewriteBatchedStatements&#x3D;true"></a>url要改成jdbc:mysql:&#x2F;&#x2F;服务器ip:3306&#x2F;数据库名?rewriteBatchedStatements&#x3D;true</h6><h6 id="druid连接池的读取问题"><a href="#druid连接池的读取问题" class="headerlink" title="druid连接池的读取问题"></a>druid连接池的读取问题</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> DruTool.class.getResourceAsStream(<span class="hljs-string">&quot;/druid.properties&quot;</span>);<br><span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>properties.load(is);<br></code></pre></td></tr></table></figure><h6 id="之前使用的是绝对路径从本地E盘读取的"><a href="#之前使用的是绝对路径从本地E盘读取的" class="headerlink" title="之前使用的是绝对路径从本地E盘读取的"></a>之前使用的是绝对路径从本地E盘读取的</h6><h1 id="RequestMapping注解"><a href="#RequestMapping注解" class="headerlink" title="@RequestMapping注解"></a>@RequestMapping注解</h1><h3 id="1、-RequestMapping注解的功能"><a href="#1、-RequestMapping注解的功能" class="headerlink" title="1、@RequestMapping注解的功能"></a>1、@RequestMapping注解的功能</h3><p>从注解名称上我们可以看到，@RequestMapping注解的作用就是将请求和处理请求的控制器方法关联起来，建立映射关系。</p><p>SpringMVC 接收到指定的请求，就会来找到在映射关系中对应的控制器方法来处理这个请求。</p><h3 id="2、-RequestMapping注解的位置"><a href="#2、-RequestMapping注解的位置" class="headerlink" title="2、@RequestMapping注解的位置"></a>2、@RequestMapping注解的位置</h3><p>@RequestMapping标识一个类：设置映射请求的请求路径的初始信息</p><p>@RequestMapping标识一个方法：设置映射请求请求路径的具体信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestMappingController</span> &#123;<br><br><span class="hljs-comment">//此时请求映射所映射的请求的请求路径为：/test/testRequestMapping</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/testRequestMapping&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testRequestMapping</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>当index页中发出testRequestMapping请求就会跳转到success页中</p><h3 id="3、-RequestMapping注解的value属性"><a href="#3、-RequestMapping注解的value属性" class="headerlink" title="3、@RequestMapping注解的value属性"></a>3、@RequestMapping注解的value属性</h3><p>@RequestMapping注解的value属性通过请求的请求地址匹配请求映射</p><p>@RequestMapping注解的value属性是一个字符串类型的数组，表示该请求映射能够匹配多个请求地址所对应的请求</p><p>@RequestMapping注解的value属性必须设置，至少通过请求地址匹配请求映射</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/testRequestMapping&#125;&quot;</span>&gt;</span>测试@RequestMapping的value属性--&gt;/testRequestMapping<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/test&#125;&quot;</span>&gt;</span>测试@RequestMapping的value属性--&gt;/test<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(</span><br><span class="hljs-meta">        value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;</span><br><span class="hljs-meta">)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testRequestMapping</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4、-RequestMapping注解的method属性"><a href="#4、-RequestMapping注解的method属性" class="headerlink" title="4、@RequestMapping注解的method属性"></a>4、@RequestMapping注解的method属性</h3><p>@RequestMapping注解的method属性通过请求的请求方式（get或post）匹配请求映射</p><p>@RequestMapping注解的method属性是一个RequestMethod类型的数组，表示该请求映射能够匹配多种请求方式的请求</p><p>若当前请求的请求地址满足请求映射的value属性，但是请求方式不满足method属性，则浏览器报错405：Request method ‘POST’ not supported</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/test&#125;&quot;</span>&gt;</span>测试@RequestMapping的value属性--&gt;/test<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/test&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(</span><br><span class="hljs-meta">        value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;,</span><br><span class="hljs-meta">        method = &#123;RequestMethod.GET, RequestMethod.POST&#125;</span><br><span class="hljs-meta">)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testRequestMapping</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5、-RequestMapping注解的params属性（了解）"><a href="#5、-RequestMapping注解的params属性（了解）" class="headerlink" title="5、@RequestMapping注解的params属性（了解）"></a>5、@RequestMapping注解的params属性（了解）</h3><p>@RequestMapping注解的params属性通过请求的请求参数匹配请求映射</p><p>@RequestMapping注解的params属性是一个字符串类型的数组，可以通过四种表达式设置请求参数和请求映射的匹配关系</p><p>“param”：要求请求映射所匹配的请求必须携带param请求参数</p><p>“!param”：要求请求映射所匹配的请求必须不能携带param请求参数</p><p>“param&#x3D;value”：要求请求映射所匹配的请求必须携带param请求参数且param&#x3D;value</p><p>“param!&#x3D;value”：要求请求映射所匹配的请求必须携带param请求参数但是param!&#x3D;value</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/test(username=&#x27;admin&#x27;,password=123456)&quot;</span>&gt;</span>测试@RequestMapping的params属性--&gt;/test<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(</span><br><span class="hljs-meta">        value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;</span><br><span class="hljs-meta">        ,method = &#123;RequestMethod.GET, RequestMethod.POST&#125;</span><br><span class="hljs-meta">        ,params = &#123;&quot;username&quot;,&quot;password!=123456&quot;&#125;</span><br><span class="hljs-meta">)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testRequestMapping</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6、-RequestMapping注解的headers属性（了解）"><a href="#6、-RequestMapping注解的headers属性（了解）" class="headerlink" title="6、@RequestMapping注解的headers属性（了解）"></a>6、@RequestMapping注解的headers属性（了解）</h3><p>@RequestMapping注解的headers属性通过请求的请求头信息匹配请求映射</p><p>@RequestMapping注解的headers属性是一个字符串类型的数组，可以通过四种表达式设置请求头信息和请求映射的匹配关系</p><p>“header”：要求请求映射所匹配的请求必须携带header请求头信息</p><p>“!header”：要求请求映射所匹配的请求必须不能携带header请求头信息</p><p>“header&#x3D;value”：要求请求映射所匹配的请求必须携带header请求头信息且header&#x3D;value</p><p>“header!&#x3D;value”：要求请求映射所匹配的请求必须携带header请求头信息且header!&#x3D;value</p><p>若当前请求满足@RequestMapping注解的value和method属性，但是不满足headers属性，此时页面显示404错误，即资源未找到</p><h3 id="7、SpringMVC支持ant风格的路径"><a href="#7、SpringMVC支持ant风格的路径" class="headerlink" title="7、SpringMVC支持ant风格的路径"></a>7、SpringMVC支持ant风格的路径</h3><p>？：表示任意的单个字符</p><p>*：表示任意的0个或多个字符</p><p>**：表示任意的一层或多层目录</p><p>注意：在使用<strong>时，只能使用&#x2F;</strong>&#x2F;xxx的方式</p><h3 id="8、SpringMVC支持路径中的占位符（重点）"><a href="#8、SpringMVC支持路径中的占位符（重点）" class="headerlink" title="8、SpringMVC支持路径中的占位符（重点）"></a>8、SpringMVC支持路径中的占位符（重点）</h3><p>原始方式：&#x2F;deleteUser?id&#x3D;1</p><p>rest方式：&#x2F;deleteUser&#x2F;1</p><p>SpringMVC路径中的占位符常用于RESTful风格中，当请求路径中将某些数据通过路径的方式传输到服务器中，就可以在相应的@RequestMapping注解的value属性中通过占位符{xxx}表示传输的数据，在通过@PathVariable注解，将占位符所表示的数据赋值给控制器方法的形参</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/testRest/1/admin&#125;&quot;</span>&gt;</span>测试路径中的占位符--&gt;/testRest<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testRest/&#123;id&#125;/&#123;username&#125;&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testRest</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> String id, <span class="hljs-meta">@PathVariable(&quot;username&quot;)</span> String username)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;id:&quot;</span>+id+<span class="hljs-string">&quot;,username:&quot;</span>+username);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br><span class="hljs-comment">//最终输出的内容为--&gt;id:1,username:admin</span><br></code></pre></td></tr></table></figure><h1 id="SpringMVC获取请求参数"><a href="#SpringMVC获取请求参数" class="headerlink" title="SpringMVC获取请求参数"></a>SpringMVC获取请求参数</h1><h3 id="1、通过ServletAPI获取"><a href="#1、通过ServletAPI获取" class="headerlink" title="1、通过ServletAPI获取"></a>1、通过ServletAPI获取</h3><p>将HttpServletRequest作为控制器方法的形参，此时HttpServletRequest类型的参数表示封装了当前请求的请求报文的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testParam&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testParam</span><span class="hljs-params">(HttpServletRequest request)</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;username:&quot;</span>+username+<span class="hljs-string">&quot;,password:&quot;</span>+password);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、通过控制器方法的形参获取请求参数"><a href="#2、通过控制器方法的形参获取请求参数" class="headerlink" title="2、通过控制器方法的形参获取请求参数"></a>2、通过控制器方法的形参获取请求参数</h3><p>在控制器方法的形参位置，设置和请求参数同名的形参，当浏览器发送请求，匹配到请求映射时，在DispatcherServlet中就会将请求参数赋值给相应的形参</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/testParam(username=&#x27;admin&#x27;,password=123456)&#125;&quot;</span>&gt;</span>测试获取请求参数--&gt;/testParam<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testParam&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testParam</span><span class="hljs-params">(String username, String password)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;username:&quot;</span>+username+<span class="hljs-string">&quot;,password:&quot;</span>+password);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、-RequestParam"><a href="#3、-RequestParam" class="headerlink" title="3、@RequestParam"></a>3、@RequestParam</h3><p>@RequestParam是将请求参数和控制器方法的形参创建映射关系</p><p>@RequestParam注解一共有三个属性：</p><p>value：指定为形参赋值的请求参数的参数名</p><p>required：设置是否必须传输此请求参数，默认值为true</p><p>若设置为true时，则当前请求必须传输value所指定的请求参数，若没有传输该请求参数，且没有设置defaultValue属性，则页面报错400：Required String parameter ‘xxx’ is not present；若设置为false，则当前请求不是必须传输value所指定的请求参数，若没有传输，则注解所标识的形参的值为null</p><p>defaultValue：不管required属性值为true或false，当value所指定的请求参数没有传输或传输的值为””时，则使用默认值为形参赋值</p><h3 id="4、-RequestHeader"><a href="#4、-RequestHeader" class="headerlink" title="4、@RequestHeader"></a>4、@RequestHeader</h3><p>@RequestHeader是将请求头信息和控制器方法的形参创建映射关系</p><p>@RequestHeader注解一共有三个属性：value、required、defaultValue，用法同@RequestParam</p><h3 id="5、-CookieValue"><a href="#5、-CookieValue" class="headerlink" title="5、@CookieValue"></a>5、@CookieValue</h3><p>@CookieValue是将cookie数据和控制器方法的形参创建映射关系</p><p>@CookieValue注解一共有三个属性：value、required、defaultValue，用法同@RequestParam</p><h3 id="6、通过POJO获取请求参数"><a href="#6、通过POJO获取请求参数" class="headerlink" title="6、通过POJO获取请求参数"></a>6、通过POJO获取请求参数</h3><p>可以在控制器方法的形参位置设置一个实体类类型的形参，此时若浏览器传输的请求参数的参数名和实体类中的属性名一致，那么请求参数就会为此属性赋值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/testpojo&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    性别：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;男&quot;</span>&gt;</span>男<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span>&gt;</span>女<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    年龄：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    邮箱：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testpojo&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testPOJO</span><span class="hljs-params">(User user)</span>&#123;<br>    System.out.println(user);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br><span class="hljs-comment">//最终结果--&gt;User&#123;id=null, username=&#x27;张三&#x27;, password=&#x27;123&#x27;, age=23, sex=&#x27;男&#x27;, email=&#x27;123@qq.com&#x27;&#125;</span><br></code></pre></td></tr></table></figure><h3 id="7、解决获取请求参数的乱码问题"><a href="#7、解决获取请求参数的乱码问题" class="headerlink" title="7、解决获取请求参数的乱码问题"></a>7、解决获取请求参数的乱码问题</h3><p>解决获取请求参数的乱码问题，可以使用SpringMVC提供的编码过滤器CharacterEncodingFilter，但是必须在web.xml中进行注册</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置springMVC的编码过滤器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>forceResponseEncoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>注：</p><p>SpringMVC中处理编码的过滤器一定要配置到其他过滤器之前，否则无效</p></blockquote><h1 id="域对象共享数据"><a href="#域对象共享数据" class="headerlink" title="域对象共享数据"></a>域对象共享数据</h1><h3 id="1、使用ServletAPI向request域对象共享数据"><a href="#1、使用ServletAPI向request域对象共享数据" class="headerlink" title="1、使用ServletAPI向request域对象共享数据"></a>1、使用ServletAPI向request域对象共享数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testServletAPI&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testServletAPI</span><span class="hljs-params">(HttpServletRequest request)</span>&#123;<br>    request.setAttribute(<span class="hljs-string">&quot;testScope&quot;</span>, <span class="hljs-string">&quot;hello,servletAPI&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、使用ModelAndView向request域对象共享数据-常用"><a href="#2、使用ModelAndView向request域对象共享数据-常用" class="headerlink" title="2、使用ModelAndView向request域对象共享数据(常用)"></a>2、使用ModelAndView向request域对象共享数据(常用)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testModelAndView&quot;)</span><br><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">testModelAndView</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ModelAndView有Model和View的功能</span><br><span class="hljs-comment">     * Model主要用于向请求域共享数据</span><br><span class="hljs-comment">     * View主要用于设置视图，实现页面跳转</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">mav</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>();<br>    <span class="hljs-comment">//向请求域共享数据</span><br>    mav.addObject(<span class="hljs-string">&quot;testScope&quot;</span>, <span class="hljs-string">&quot;hello,ModelAndView&quot;</span>);<br>    <span class="hljs-comment">//设置视图，实现页面跳转</span><br>    mav.setViewName(<span class="hljs-string">&quot;success&quot;</span>);<br>    <span class="hljs-keyword">return</span> mav;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、使用Model向request域对象共享数据"><a href="#3、使用Model向request域对象共享数据" class="headerlink" title="3、使用Model向request域对象共享数据"></a>3、使用Model向request域对象共享数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testModel&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testModel</span><span class="hljs-params">(Model model)</span>&#123;<br>    model.addAttribute(<span class="hljs-string">&quot;testScope&quot;</span>, <span class="hljs-string">&quot;hello,Model&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4、使用map向request域对象共享数据"><a href="#4、使用map向request域对象共享数据" class="headerlink" title="4、使用map向request域对象共享数据"></a>4、使用map向request域对象共享数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testMap&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testMap</span><span class="hljs-params">(Map&lt;String, Object&gt; map)</span>&#123;<br>    map.put(<span class="hljs-string">&quot;testScope&quot;</span>, <span class="hljs-string">&quot;hello,Map&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5、使用ModelMap向request域对象共享数据"><a href="#5、使用ModelMap向request域对象共享数据" class="headerlink" title="5、使用ModelMap向request域对象共享数据"></a>5、使用ModelMap向request域对象共享数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testModelMap&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testModelMap</span><span class="hljs-params">(ModelMap modelMap)</span>&#123;<br>    modelMap.addAttribute(<span class="hljs-string">&quot;testScope&quot;</span>, <span class="hljs-string">&quot;hello,ModelMap&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6、Model、ModelMap、Map的关系"><a href="#6、Model、ModelMap、Map的关系" class="headerlink" title="6、Model、ModelMap、Map的关系"></a>6、Model、ModelMap、Map的关系</h3><p>Model、ModelMap、Map类型的参数其实本质上都是 BindingAwareModelMap 类型的</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scala">public interface <span class="hljs-type">Model</span>&#123;&#125;<br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ModelMap</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">LinkedHashMap&lt;String</span>, <span class="hljs-title">Object&gt;</span> </span>&#123;&#125;<br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExtendedModelMap</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ModelMap</span> <span class="hljs-title">implements</span> <span class="hljs-title">Model</span> </span>&#123;&#125;<br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BindingAwareModelMap</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ExtendedModelMap</span> </span>&#123;&#125;<br></code></pre></td></tr></table></figure><h3 id="7、向session域共享数据"><a href="#7、向session域共享数据" class="headerlink" title="7、向session域共享数据"></a>7、向session域共享数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testSession&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testSession</span><span class="hljs-params">(HttpSession session)</span>&#123;<br>    session.setAttribute(<span class="hljs-string">&quot;testSessionScope&quot;</span>, <span class="hljs-string">&quot;hello,session&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8、向application域共享数据"><a href="#8、向application域共享数据" class="headerlink" title="8、向application域共享数据"></a>8、向application域共享数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testApplication&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testApplication</span><span class="hljs-params">(HttpSession session)</span>&#123;<br><span class="hljs-type">ServletContext</span> <span class="hljs-variable">application</span> <span class="hljs-operator">=</span> session.getServletContext();<br>    application.setAttribute(<span class="hljs-string">&quot;testApplicationScope&quot;</span>, <span class="hljs-string">&quot;hello,application&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringMVC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringMVC学习笔记(1)</title>
    <link href="/2022/05/10/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(1)/"/>
    <url>/2022/05/10/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(1)/</url>
    
    <content type="html"><![CDATA[<h4 id="前导：从昨天开始了SpringMVC的学习，看到视频评论说需要Maven和thymeleaf和Vue的前置知识，thymeleaf在学Javaweb的时候有过入门学习-不过也忘得差不多了￣ω￣-x3D-，Vue说60集才能用得上就暂时不去看，昨天一天学了学Maven的使用，今天才正式开始SpringMVC的学习-刚写出来一个HelloWorldo-￣▽￣-d"><a href="#前导：从昨天开始了SpringMVC的学习，看到视频评论说需要Maven和thymeleaf和Vue的前置知识，thymeleaf在学Javaweb的时候有过入门学习-不过也忘得差不多了￣ω￣-x3D-，Vue说60集才能用得上就暂时不去看，昨天一天学了学Maven的使用，今天才正式开始SpringMVC的学习-刚写出来一个HelloWorldo-￣▽￣-d" class="headerlink" title="前导：从昨天开始了SpringMVC的学习，看到视频评论说需要Maven和thymeleaf和Vue的前置知识，thymeleaf在学Javaweb的时候有过入门学习(不过也忘得差不多了￣ω￣&#x3D;)，Vue说60集才能用得上就暂时不去看，昨天一天学了学Maven的使用，今天才正式开始SpringMVC的学习(刚写出来一个HelloWorldo(￣▽￣)ｄ )"></a>前导：从昨天开始了SpringMVC的学习，看到视频评论说需要Maven和thymeleaf和Vue的前置知识，thymeleaf在学Javaweb的时候有过入门学习(不过也忘得差不多了￣ω￣&#x3D;)，Vue说60集才能用得上就暂时不去看，昨天一天学了学Maven的使用，今天才正式开始SpringMVC的学习(刚写出来一个HelloWorldo(￣▽￣)ｄ )</h4><h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><h3 id="为什么需要Maven"><a href="#为什么需要Maven" class="headerlink" title="为什么需要Maven"></a>为什么需要Maven</h3><p>Maven是一个依赖管理工具，当开发项目的时候随着我们使用越来越多的框架，或者框架封装程度越来越高，项目中使用的jar包也越来越多。项目中，一个模块里面用到上百个jar包是非常正常的。</p><p>比如下面的例子，我们只用到 SpringBoot、SpringCloud 框架中的三个功能：</p><ul><li>Nacos 服务注册发现</li><li>Web 框架环境</li><li>图模板技术 Thymeleaf</li></ul><p>导入libs文件夹下需要106个jar包，而使用 Maven 来引入这些 jar 包只需要在MVC项目下的pom.xml中配置三个『<strong>依赖</strong>』：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Nacos 服务注册发现启动器 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!-- web启动器依赖 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!-- 视图模板技术 thymeleaf --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Maven核心程序解压与配置"><a href="#Maven核心程序解压与配置" class="headerlink" title="Maven核心程序解压与配置"></a>Maven核心程序解压与配置</h3><p><a href="http://heavy_code_industry.gitee.io/code_heavy_industry/pro002-maven/chapter02/verse01.html">代码重工 (gitee.io)</a></p><h3 id="导入说明"><a href="#导入说明" class="headerlink" title="导入说明"></a>导入说明</h3><ul><li><strong>groupId</strong>：公司或组织的 id</li><li><strong>artifactId</strong>：一个项目或者是项目中的一个模块的 id</li><li><strong>version</strong>：版本号</li></ul><h3 id="各个目录的作用"><a href="#各个目录的作用" class="headerlink" title="各个目录的作用"></a>各个目录的作用</h3><p><img src="http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img011.621b1ac3.png" alt="./images"></p><p>另外还有一个 target 目录专门存放构建操作输出的结果。</p><h3 id="主体程序"><a href="#主体程序" class="headerlink" title="主体程序"></a>主体程序</h3><p><img src="http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img012.0bcc2c5d.png" alt="./images"></p><p>主体程序指的是被测试的程序，同时也是将来在项目中真正要使用的程序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.maven;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Calculator</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span>&#123;<br><span class="hljs-keyword">return</span> i + j;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="测试程序"><a href="#测试程序" class="headerlink" title="测试程序"></a>测试程序</h3><p><img src="http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img013.8b57a581.png" alt="./images"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.maven;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> com.atguigu.maven.Calculator;<br><br><span class="hljs-comment">// 静态导入的效果是将Assert类中的静态资源导入当前类</span><br><span class="hljs-comment">// 这样一来，在当前类中就可以直接使用Assert类中的静态资源，不需要写类名</span><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.junit.Assert.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CalculatorTest</span>&#123;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSum</span><span class="hljs-params">()</span>&#123;<br><br><span class="hljs-comment">// 1.创建Calculator对象</span><br><span class="hljs-type">Calculator</span> <span class="hljs-variable">calculator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Calculator</span>();<br><br><span class="hljs-comment">// 2.调用Calculator对象的方法，获取到程序运行实际的结果</span><br><span class="hljs-type">int</span> <span class="hljs-variable">actualResult</span> <span class="hljs-operator">=</span> calculator.sum(<span class="hljs-number">5</span>, <span class="hljs-number">3</span>);<br><br><span class="hljs-comment">// 3.声明一个变量，表示程序运行期待的结果</span><br><span class="hljs-type">int</span> <span class="hljs-variable">expectedResult</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span>;<br><br><span class="hljs-comment">// 4.使用断言来判断实际结果和期待结果是否一致</span><br><span class="hljs-comment">// 如果一致：测试通过，不会抛出异常</span><br><span class="hljs-comment">// 如果不一致：抛出异常，测试失败</span><br>assertEquals(expectedResult, actualResult);<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="IDEA的界面操作"><a href="#IDEA的界面操作" class="headerlink" title="IDEA的界面操作"></a>IDEA的界面操作</h4><p><a href="http://heavy_code_industry.gitee.io/code_heavy_industry/pro002-maven/chapter04/verse01.html">代码重工 (gitee.io)</a></p><h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><h3 id="什么是MVC"><a href="#什么是MVC" class="headerlink" title="什么是MVC"></a>什么是MVC</h3><p>MVC是一种软件架构的思想，将软件按照模型、视图、控制器来划分</p><p>M：Model，模型层，指工程中的JavaBean，作用是处理数据</p><p>JavaBean分为两类：</p><ul><li>一类称为实体类Bean：专门存储业务数据的，如 Student、User 等</li><li>一类称为业务处理 Bean：指 Service 或 Dao 对象，专门用于处理业务逻辑和数据访问。</li></ul><p>V：View，视图层，指工程中的html或jsp等页面，作用是与用户进行交互，展示数据</p><p>C：Controller，控制层，指工程中的servlet，作用是接收请求和响应浏览器</p><p>MVC的工作流程：<br>用户通过视图层发送请求到服务器，在服务器中请求被Controller接收，Controller调用相应的Model层处理请求，处理完毕将结果返回到Controller，Controller再根据请求处理的结果找到相应的View视图，渲染数据后最终响应给浏览器</p><p>注：三层架构分为表述层（或表示层）、业务逻辑层、数据访问层，表述层表示前台页面和后台servlet</p><h3 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h3><h5 id="创建maven工程"><a href="#创建maven工程" class="headerlink" title="创建maven工程"></a>创建maven工程</h5><h5 id="a-gt-添加web模块"><a href="#a-gt-添加web模块" class="headerlink" title="a&gt;添加web模块"></a>a&gt;添加web模块</h5><h5 id="b-gt-打包方式：war"><a href="#b-gt-打包方式：war" class="headerlink" title="b&gt;打包方式：war"></a>b&gt;打包方式：war</h5><h5 id="c-gt-引入依赖"><a href="#c-gt-引入依赖" class="headerlink" title="c&gt;引入依赖"></a>c&gt;引入依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- SpringMVC --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 日志 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- ServletAPI --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- Spring5和Thymeleaf整合包 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.12.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="配置web-xml"><a href="#配置web-xml" class="headerlink" title="配置web.xml"></a>配置web.xml</h3><h5 id="注册SpringMVC的前端控制器DispatcherServlet"><a href="#注册SpringMVC的前端控制器DispatcherServlet" class="headerlink" title="注册SpringMVC的前端控制器DispatcherServlet"></a>注册SpringMVC的前端控制器DispatcherServlet</h5><p>SpringMVC的配置文件默认位于WEB-INF下，默认名称为<servlet-name>-servlet.xml，通过init-param标签设置SpringMVC配置文件的位置和名称，通过load-on-startup标签设置SpringMVC前端控制器DispatcherServlet的初始化时间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置SpringMVC的前端控制器，对浏览器发送的请求统一进行处理 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 通过初始化参数指定SpringMVC配置文件的位置和名称 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- contextConfigLocation为固定值 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 使用classpath:表示从类路径查找配置文件，例如maven工程中的src/main/resources --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springMVC.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment"> 作为框架的核心组件，在启动过程中有大量的初始化操作要做</span><br><span class="hljs-comment">而这些操作放在第一次请求时才执行会严重影响访问速度</span><br><span class="hljs-comment">因此需要通过此标签将启动控制DispatcherServlet的初始化时间提前到服务器启动时</span><br><span class="hljs-comment">--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        设置springMVC的核心控制器所能处理的请求的请求路径</span><br><span class="hljs-comment">        /所匹配的请求可以是/login或.html或.js或.css方式的请求路径</span><br><span class="hljs-comment">        但是/不能匹配.jsp请求路径的请求</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>注：<url-pattern>标签中使用&#x2F;和&#x2F;*的区别：</p><p>&#x2F;所匹配的请求可以是&#x2F;login或.html或.js或.css方式的请求路径，但是&#x2F;不能匹配.jsp请求路径的请求</p><h3 id="创建请求控制器"><a href="#创建请求控制器" class="headerlink" title="创建请求控制器"></a>创建请求控制器</h3><p>由于前端控制器对浏览器发送的请求进行了统一的处理，但是具体的请求有不同的处理过程，因此需要创建处理具体请求的类，即请求控制器</p><p>请求控制器中每一个处理请求的方法成为控制器方法</p><p>因为SpringMVC的控制器由一个POJO（普通的Java类）担任，因此需要通过@Controller注解将其标识为一个控制层组件，交给Spring的IoC容器管理，此时SpringMVC才能够识别控制器的存在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="创建springMVC的配置文件"><a href="#创建springMVC的配置文件" class="headerlink" title="创建springMVC的配置文件"></a>创建springMVC的配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 自动扫描包 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu.mvc.controller&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!-- 配置Thymeleaf视图解析器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;viewResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;order&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;characterEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateEngine&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateResolver&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span><br>    <br>                    <span class="hljs-comment">&lt;!-- 视图前缀 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span><br>    <br>                    <span class="hljs-comment">&lt;!-- 视图后缀 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.html&quot;</span>/&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateMode&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;HTML5&quot;</span>/&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;characterEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">   处理静态资源，例如html、js、css、jpg</span><br><span class="hljs-comment">  若只设置该标签，则只能访问静态资源，其他请求则无法访问</span><br><span class="hljs-comment">  此时必须设置&lt;mvc:annotation-driven/&gt;解决问题</span><br><span class="hljs-comment"> --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!-- 开启mvc注解驱动 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:message-converters</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 处理响应中文内容乱码 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultCharset&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;supportedMediaTypes&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>text/html<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>application/json<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:message-converters</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="测试HelloWorld"><a href="#测试HelloWorld" class="headerlink" title="测试HelloWorld"></a>测试HelloWorld</h3><h5 id="a-gt-实现对首页的访问"><a href="#a-gt-实现对首页的访问" class="headerlink" title="a&gt;实现对首页的访问"></a>a&gt;实现对首页的访问</h5><p>在请求控制器中创建处理请求的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// @RequestMapping注解：处理请求和控制器方法之间的映射关系</span><br><span class="hljs-comment">// @RequestMapping注解的value属性可以通过请求地址匹配请求，/表示的当前工程的上下文路径</span><br><span class="hljs-comment">// localhost:8080/springMVC/</span><br><span class="hljs-meta">@RequestMapping(&quot;/&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//设置视图名称</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="b-gt-通过超链接跳转到指定页面"><a href="#b-gt-通过超链接跳转到指定页面" class="headerlink" title="b&gt;通过超链接跳转到指定页面"></a>b&gt;通过超链接跳转到指定页面</h5><p>在主页index.html中设置超链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/hello&#125;&quot;</span>&gt;</span>HelloWorld<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在请求控制器中创建处理请求的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">HelloWorld</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;target&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>浏览器发送请求，若请求地址符合前端控制器的url-pattern，该请求就会被前端控制器DispatcherServlet处理。前端控制器会读取SpringMVC的核心配置文件，通过扫描组件找到控制器，将请求地址和控制器中@RequestMapping注解的value属性值进行匹配，若匹配成功，该注解所标识的控制器方法就是处理请求的方法。处理请求的方法需要返回一个字符串类型的视图名称，该视图名称会被视图解析器解析，加上前缀和后缀组成视图的路径，通过Thymeleaf对视图进行渲染，最终转发到视图所对应页面</p>]]></content>
    
    
    <categories>
      
      <category>SpringMVC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring5学习笔记(4)</title>
    <link href="/2022/05/08/Spring5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(4)/"/>
    <url>/2022/05/08/Spring5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(4)/</url>
    
    <content type="html"><![CDATA[<h2 id="Spring5-框架新功能"><a href="#Spring5-框架新功能" class="headerlink" title="Spring5 框架新功能"></a>Spring5 框架新功能</h2><p> 整个 Spring5 框架的代码基于 Java8，运行时兼容 JDK9，许多不建议使用的类和方法在代码库中删除了。</p><h3 id="1、Spring-5-0-框架自带了通用的日志封装"><a href="#1、Spring-5-0-框架自带了通用的日志封装" class="headerlink" title="1、Spring 5.0 框架自带了通用的日志封装"></a>1、Spring 5.0 框架自带了通用的日志封装</h3><p> （1）Spring5 已经移除 Log4jConfigListener，官方建议使用 Log4j2</p><p> （2）Spring5 框架整合 Log4j2</p><p> 第一步 引入 jar 包</p><p> 第二步 创建 log4j2.xml 配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-comment">&lt;!--日志级别以及优先级排序: OFF &gt; FATAL &gt; ERROR &gt; WARN &gt; INFO &gt; DEBUG &gt; TRACE &gt; ALL --&gt;</span><br><span class="hljs-comment">&lt;!--Configuration 后面的 status 用于设置 log4j2 自身内部的信息输出，可以不设置，当设置成 trace 时，可以看到 log4j2 内部各种详细输出--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span> <span class="hljs-attr">status</span>=<span class="hljs-string">&quot;INFO&quot;</span>&gt;</span><br> <span class="hljs-comment">&lt;!--先定义所有的 appender--&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">appenders</span>&gt;</span><br> <span class="hljs-comment">&lt;!--输出日志信息到控制台--&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">console</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Console&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;SYSTEM_OUT&quot;</span>&gt;</span><br> <span class="hljs-comment">&lt;!--控制日志输出的格式--&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">PatternLayout</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n&quot;</span>/&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">console</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">appenders</span>&gt;</span><br>    <br> <span class="hljs-comment">&lt;!--然后定义 logger，只有定义 logger 并引入的 appender，appender 才会生效!--&gt;</span><br> <span class="hljs-comment">&lt;!--root：用于指定项目的根日志，如果没有单独指定 Logger，则会使用 root 作为默认的日志输出--&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">loggers</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;Console&quot;</span>/&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">loggers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2、Spring5-框架核心容器支持-Nullable-注解"><a href="#2、Spring5-框架核心容器支持-Nullable-注解" class="headerlink" title="2、Spring5 框架核心容器支持@Nullable 注解"></a>2、Spring5 框架核心容器支持@Nullable 注解</h3><p> @Nullable 注解可以使用在方法、属性、参数上面，表示方法返回可以为空，属性值可以为空，参数值可以为空</p><h3 id="3、Spring5-核心容器支持函数式风格-GenericApplicationContext"><a href="#3、Spring5-核心容器支持函数式风格-GenericApplicationContext" class="headerlink" title="3、Spring5 核心容器支持函数式风格 GenericApplicationContext"></a>3、Spring5 核心容器支持函数式风格 GenericApplicationContext</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//函数式风格创建对象，交给 spring 进行管理</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGenericApplicationContext</span><span class="hljs-params">()</span> &#123;<br> <span class="hljs-comment">//1 创建 GenericApplicationContext 对象</span><br> <span class="hljs-type">GenericApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericApplicationContext</span>();<br> <span class="hljs-comment">//2 调用 context 的方法对象注册</span><br> context.refresh();<br> context.registerBean(<span class="hljs-string">&quot;user1&quot;</span>,User.class,() -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>());<br> <span class="hljs-comment">//3 获取在 spring 注册的对象</span><br> <span class="hljs-comment">// User user = (User)context.getBean(&quot;com.atguigu.spring5.test.User&quot;);</span><br> <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (User)context.getBean(<span class="hljs-string">&quot;user1&quot;</span>);<br> System.out.println(user);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4、Spring5支持整合-JUnit5"><a href="#4、Spring5支持整合-JUnit5" class="headerlink" title="4、Spring5支持整合 JUnit5"></a>4、Spring5支持整合 JUnit5</h3><p>（1）引入 JUnit5 的 jar 包</p><p>  (2) 创建测试类，使用注解完成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@ExtendWith(SpringExtension.class)</span><br><span class="hljs-meta">@ContextConfiguration(&quot;classpath:bean1.xml&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JTest5</span> &#123;<br> <span class="hljs-meta">@Autowired</span><br> <span class="hljs-keyword">private</span> UserService userService;<br> <span class="hljs-meta">@Test</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> &#123;<br> userService.accountMoney();<br> &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>（3）使用一个复合注解替代上面两个注解完成整合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringJUnitConfig(locations = &quot;classpath:bean1.xml&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JTest5</span> &#123;<br> <span class="hljs-meta">@Autowired</span><br> <span class="hljs-keyword">private</span> UserService userService;<br> <span class="hljs-meta">@Test</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> &#123;<br> userService.accountMoney();<br> &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="5、Spring5-框架新功能——Webflux（类似于springMVC）"><a href="#5、Spring5-框架新功能——Webflux（类似于springMVC）" class="headerlink" title="5、Spring5 框架新功能——Webflux（类似于springMVC）"></a>5、Spring5 框架新功能——Webflux（类似于springMVC）</h3><p> a）Webflux是 Spring5 添加新的模块，用于 web 开发的，功能和 SpringMVC 类似的，Webflux 使用 当前一种比较流行的响应式编程出现的框架。</p><p> b）使用传统 web 框架，比如 SpringMVC，这些基于 Servlet 容器，Webflux 是一种异步非阻塞的框架，异步非阻塞的框架在 Servlet3.1 以后才支持，<strong>核心是基于 Reactor</strong> 的相关 API 实现的。</p><blockquote><p>解释什么是异步非阻塞 ：</p><p>（1）异步和同步 （针对调用者）</p><p> <strong>同步：</strong> 调用者发送请求，如果等着对方回应之后才去做其他事情就是同步</p><p> <strong>异步：</strong> 调用者发送请求，如果发送请求之后不等着对方回应就去做其他事情就是异步 √</p><p>（2）非阻塞和阻塞 （针对被调用者）</p><p> <strong>阻塞：</strong> 被调用者受到请求之后，做完请求任务之后才给出反馈就是阻塞</p><p> <strong>非阻塞：</strong> 被调用者受到请求之后，受到请求之后马上给出反馈然后再去做事情就是非阻塞 √</p></blockquote><p> c）Webflux 特点</p><p> （1）第一 非阻塞式：在有限资源下，<strong>提高系统吞吐量和伸缩性</strong>，以 Reactor 为基础实现响应式编程</p><p> （2）第二 函数式编程：Spring5 框架基于 java8，Webflux 使用 Java8 函数式编程方式实现路由请求</p><p> d）SpringMVC和Webflux之间区别</p><p> 相同：两个框架都可以使用注解方式，都运行在 Tomcat 等容器中</p><p> 不同：SpringMVC 采用命令式编程，Webflux 采用异步响应式编程</p><h3 id="6、响应式编程（Java-实现）"><a href="#6、响应式编程（Java-实现）" class="headerlink" title="6、响应式编程（Java 实现）"></a>6、响应式编程（Java 实现）</h3><blockquote><p> 概念：什么是响应式编程 响应式编程是一种面向数据流和变化传播的编程范式。这意味着可以在编程语言中很方便 地表达静态或动态的数据流，而相关的计算模型会自动将变化的值通过数据流进行传播。</p><p> 例子：电子表格程序就是响应式编程的一个例子。单元格可以包含字面值或类似”&#x3D;B1+C1”的公 式，而包含公式的单元格的值会依据其他单元格的值的变化而变化。</p></blockquote><p> a）Java8 及其之前版本是提供的观察者模式两个类 Observer 和 Observable实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ObserverDemo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Observable</span> &#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br> <span class="hljs-type">ObserverDemo</span> <span class="hljs-variable">observer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObserverDemo</span>();<br> <span class="hljs-comment">//添加观察者</span><br> observer.addObserver((o,arg)-&gt;&#123;<br> System.out.println(<span class="hljs-string">&quot;发生变化&quot;</span>);<br> &#125;);<br> observer.addObserver((o,arg)-&gt;&#123;<br>  System.out.println(<span class="hljs-string">&quot;手动被观察者通知，准备改变&quot;</span>);<br> &#125;);<br>  <span class="hljs-comment">//这里必须进行两个方法调用才可以响应！！</span><br> observer.setChanged(); <span class="hljs-comment">//数据变化</span><br> observer.notifyObservers(); <span class="hljs-comment">//通知</span><br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring5</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring5学习笔记(3)</title>
    <link href="/2022/05/07/Spring5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(3)/"/>
    <url>/2022/05/07/Spring5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(3)/</url>
    
    <content type="html"><![CDATA[<h2 id="Spring——事务操作"><a href="#Spring——事务操作" class="headerlink" title="Spring——事务操作"></a>Spring——事务操作</h2><h4 id="1、事务概念"><a href="#1、事务概念" class="headerlink" title="1、事务概念"></a>1、事务概念</h4><p> <strong>a）什么是事务</strong></p><p> （1）事务是数据库操作最基本单元，逻辑上一组操作，要么都成功，如果有一个失败所有操 作都失败</p><p> （2）典型场景：银行转账 张三 转账 100 元 给 李四； 张三少 100，李四多 100</p><p> <strong>b）事务四个特性（ACID</strong>） </p><p>（1）原子性 ：事务包含要执行的所有操作要么全部成功，要么全部失败，进行回滚（回滚就是将所有操作还原）。因此事务的操作若成功了就一定对数据库做了改变，若操作失败则不能对数据库有任何影响。</p><p>（2）一致性 ：指的是事务执行操作的前后，必须保证数据的一致。如同上边转账例子，A向B转账1000元，A账户减少了1000，B账户增加了1000。但是A和B的总数在执行完事务操作前后数据之和都一定是<strong>相等的</strong>，这就是一致性。</p><p>（3）隔离性 ：隔离性是为了保证每一个用户在开启并使用事务时，不被其他事务操作所干扰，保持独立的工作不受外界干扰，主要就是防止多个用户对数据库同一张表的访问操作。例如：对于任意两个并发的事务T1和T2，在事务T1看来，T2要么在T1开始之前就已经结束，要么在T1结束之后才开始，这样每个事务都感觉不到有其他事务在并发地执行。</p><p>（4）持久性 ：比如一个事务一旦提交以后，那么对数据库表的操作改变就是永久的（比如删除了表中一条记录就永久删除了），即便是数据库系统遇到故障异常情况事务操作仍然会产生改变。</p><h4 id="2、事务操作（模拟事务操作环境）"><a href="#2、事务操作（模拟事务操作环境）" class="headerlink" title="2、事务操作（模拟事务操作环境）"></a>2、事务操作（模拟事务操作环境）</h4><p> a）创建 service，搭建 dao，完成对象创建和注入关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//（1）service 注入 dao，在 dao 注入 JdbcTemplate，在 JdbcTemplate 注入 DataSource</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br> <span class="hljs-comment">//注入 dao</span><br> <span class="hljs-meta">@Autowired</span><br> <span class="hljs-keyword">private</span> UserDao userDao;<br>&#125;<br><br><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;<br> <span class="hljs-meta">@Autowired</span><br> <span class="hljs-keyword">private</span> JdbcTemplate jdbcTemplate;<br>&#125;<br></code></pre></td></tr></table></figure><p> b）在 dao 创建两个方法：多钱和少钱的方法， 在 service 创建方法（转账的方法）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;<br> <span class="hljs-meta">@Autowired</span><br> <span class="hljs-keyword">private</span> JdbcTemplate jdbcTemplate;<br> <span class="hljs-comment">//lucy 转账 100 给 mary</span><br> <span class="hljs-comment">//少钱</span><br> <span class="hljs-meta">@Override</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reduceMoney</span><span class="hljs-params">()</span> &#123;<br> <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update t_account set money=money-? where username=?&quot;</span>;<br> jdbcTemplate.update(sql,<span class="hljs-number">100</span>,<span class="hljs-string">&quot;lucy&quot;</span>);<br> &#125;<br> <span class="hljs-comment">//多钱</span><br> <span class="hljs-meta">@Override</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addMoney</span><span class="hljs-params">()</span> &#123;<br> <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update t_account set money=money+? where username=?&quot;</span>;<br> jdbcTemplate.update(sql,<span class="hljs-number">100</span>,<span class="hljs-string">&quot;mary&quot;</span>);<br> &#125;<br>&#125;<br><br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br> <span class="hljs-comment">//注入 dao</span><br> <span class="hljs-meta">@Autowired</span><br> <span class="hljs-keyword">private</span> UserDao userDao;<br> <span class="hljs-comment">//转账的方法</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accountMoney</span><span class="hljs-params">()</span> &#123;<br> <span class="hljs-comment">//lucy 少 100</span><br> userDao.reduceMoney();<br> <span class="hljs-comment">//mary 多 100</span><br> userDao.addMoney();<br> &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">上边代码正常执行没有问题，</span><br><span class="hljs-comment">但是如果代码执行过程中出现异常，有问题，如下模拟异常！</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-comment">//这里执行后将会产生错误（异常），lucy 少 100后，mary不会多 100，这就不对了！！</span><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br>    <span class="hljs-comment">//转账方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accountMoney</span><span class="hljs-params">()</span>&#123;<br>        userDao.reduceMoney();<span class="hljs-comment">//lucy 少 100</span><br>        <span class="hljs-type">int</span> x=<span class="hljs-number">10</span>/<span class="hljs-number">0</span>;<br>        userDao.addMoney(); <span class="hljs-comment">//mary 多 100</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//解决上边的异常方法——【编程式事务（传统方法）】</span><br><span class="hljs-comment">//转账的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accountMoney</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//第一步 开启事务</span><br><br>            <span class="hljs-comment">//第二步 进行业务操作</span><br>            <span class="hljs-comment">//lucy少100</span><br>            userDao.reduceMoney();<br><br>            <span class="hljs-comment">//模拟异常</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>/<span class="hljs-number">0</span>;<br><br>            <span class="hljs-comment">//mary多100</span><br>            userDao.addMoney();<br><br>            <span class="hljs-comment">//第三步 没有发生异常，提交事务</span><br>        &#125;<span class="hljs-keyword">catch</span>(Exception e) &#123;<br>            <span class="hljs-comment">//第四步 出现异常，事务回滚</span><br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="3、事务操作（Spring-事务管理介绍）"><a href="#3、事务操作（Spring-事务管理介绍）" class="headerlink" title="3、事务操作（Spring 事务管理介绍）"></a>3、事务操作（Spring 事务管理介绍）</h4><blockquote><p>1、事务添加到 JavaEE 三层结构里面 Service 层（业务逻辑层）</p><p>2、在 Spring 进行事务管理操作 ；两种方式：编程式事务管理、<strong>声明式事务管理</strong>（推荐使用）</p><p>3、声明式事务管理 （1）<strong>基于注解方式</strong>（推荐使用） （2）基于 xml 配置文件方式</p><p>4、在 Spring 进行声明式事务管理，底层使用 AOP 原理</p><p>5、Spring 事务管理 API ：提供一个接口，代表事务管理器，这个接口针对不同的框架提供不同的实现类</p></blockquote><h4 id="4、注解声明式事务管理"><a href="#4、注解声明式事务管理" class="headerlink" title="4、注解声明式事务管理"></a>4、注解声明式事务管理</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--1、在 spring 配置文件配置事务管理器--&gt;</span><br><span class="hljs-comment">&lt;!--创建事务管理器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br> <span class="hljs-comment">&lt;!--注入数据源--&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br> <span class="hljs-comment">&lt;!--2、在 spring 配置文件，开启事务注解,引入名称空间！--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag"> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag"> <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag"> <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag"> <span class="hljs-attr">xmlns:tx</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/tx&quot;</span></span><br><span class="hljs-tag"> <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag"> http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag"> http://www.springframework.org/schema/aop</span></span><br><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/aop/spring-aop.xsd </span></span><br><span class="hljs-string"><span class="hljs-tag"> http://www.springframework.org/schema/tx</span></span><br><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--开启事务注解--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:annotation-driven</span> <span class="hljs-attr">transactionmanager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tx:annotation-driven</span>&gt;</span><br> <span class="hljs-comment">&lt;!--3、在 service 类上面（或者 service 类里面方法上面）添加事务注解--&gt;</span><br> <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    （1）@Transactional，这个注解添加到类上面，也可以添加方法上面</span><br><span class="hljs-comment">    （2）如果把这个注解添加类上面，这个类里面所有的方法都添加事务</span><br><span class="hljs-comment">    （3）如果把这个注解添加方法上面，为这个方法添加事务——@Transactional</span><br><span class="hljs-comment">--&gt;</span><br></code></pre></td></tr></table></figure><h4 id="5、事务操作（声明式事务管理参数配置）"><a href="#5、事务操作（声明式事务管理参数配置）" class="headerlink" title="5、事务操作（声明式事务管理参数配置）"></a>5、事务操作（声明式事务管理参数配置）</h4><h5 id="Transactional（事务传播行为）"><a href="#Transactional（事务传播行为）" class="headerlink" title="Transactional（事务传播行为）"></a>Transactional（事务传播行为）</h5><p> a）在 service 类上面添加注解@Transactional，在这个注解里面可以配置事务相关参数</p><p> b）propagation（事务传播行为）：多事务方法直接进行调用，这个过程中事务 是如何进行管理的</p><p> c）spring框架事务传播行为有七种：下面只介绍常用的两种传播行为</p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(propagation = Propagation.REQUIRED,)</span><span class="hljs-comment">//事务一</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//调用update方法</span><br>    update();<br>&#125;<br><br>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">//事务二</span><br>    <br>&#125;<br></code></pre></td></tr></table></figure></blockquote><p> （1）<strong>REQUIRED</strong>：如果add方法本身有事务，调用update方法后，update使用当前add方法里面的事务；</p><p> 如果add方法本身没有事务，调用update方法后，创建新的事务</p><p> （2）<strong>REQUIRED_NEW</strong>：使用add调用update方法，不论add方法是否有事务，都会创建新的事务。</p><img src="https://img-blog.csdnimg.cn/20200704233319992.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQ5NjE5MA==,size_16,color_FFFFFF,t_70" width=800px><h4 id="ioslation（事务隔离级别）"><a href="#ioslation（事务隔离级别）" class="headerlink" title="ioslation（事务隔离级别）"></a>ioslation（事务隔离级别）</h4><p> a）事务有特性成为隔离性，多事务操作之间不会产生影响。不考虑隔离性产生很多问题</p><p> b）有三个读问题：脏读、不可重复读、虚（幻）读 <a href="https://blog.csdn.net/qq_24732379/article/details/99705815">可查看这里介绍</a></p><blockquote><p><strong>脏读：</strong> 一个未提交事务读取到另一个未提交事务的数据</p><p><strong>不可重复读：</strong> 一个未提交事务读取到另一提交事务修改数据</p><p><strong>虚读：</strong> 一个未提交事务读取到另一提交事务添加数据</p></blockquote><p> c））解决：通过设置事务隔离级别，解决读问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(propagation = Propagation.REQUIRED,isolation = Isolation.REPEATABLE_READ)</span><br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="timeout：超时时间"><a href="#timeout：超时时间" class="headerlink" title="timeout：超时时间"></a>timeout：超时时间</h4><p>（1）事务需要在一定时间内进行提交，如果不提交进行回滚 （2）默认值是 -1（不超时） ，设置时间以秒单位进行计算</p><h4 id="readOnly：是否只读"><a href="#readOnly：是否只读" class="headerlink" title="readOnly：是否只读"></a>readOnly：是否只读</h4><p>（1）读：查询操作，写：添加修改删除操作</p><p>（2）readOnly 默认值 false，表示可以查询，可以添加修改删除操作</p><p>（3）设置 readOnly 值是 true，设置成 true 之后，只能查询</p><h4 id="rollbackFor：回滚"><a href="#rollbackFor：回滚" class="headerlink" title="rollbackFor：回滚"></a>rollbackFor：回滚</h4><p> 设置出现哪些异常进行事务回滚</p><h4 id="noRollbackFor：不回滚"><a href="#noRollbackFor：不回滚" class="headerlink" title="noRollbackFor：不回滚"></a>noRollbackFor：不回滚</h4><p> 设置出现哪些异常不进行事务回滚</p><h4 id="6、事务操作（XML-声明式事务管理）"><a href="#6、事务操作（XML-声明式事务管理）" class="headerlink" title="6、事务操作（XML 声明式事务管理）"></a>6、事务操作（XML 声明式事务管理）</h4><p>a）、在 spring 配置文件中进行配置 ：第一步 配置事务管理器 第二步 配置通知 第三步 配置切入点和切面</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--1 创建事务管理器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br> <span class="hljs-comment">&lt;!--注入数据源--&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-comment">&lt;!--2 配置通知--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txadvice&quot;</span>&gt;</span><br> <span class="hljs-comment">&lt;!--配置事务参数--&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span><br> <span class="hljs-comment">&lt;!--指定哪种规则的方法上面添加事务--&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;accountMoney&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span><br> <span class="hljs-comment">&lt;!--&lt;tx:method name=&quot;account*&quot;/&gt;--&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span><br><span class="hljs-comment">&lt;!--3 配置切入点和切面--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br> <span class="hljs-comment">&lt;!--配置切入点--&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pt&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(*</span></span><br><span class="hljs-string"><span class="hljs-tag">com.atguigu.spring5.service.UserService.*(..))&quot;</span>/&gt;</span><br> <span class="hljs-comment">&lt;!--配置切面--&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;txadvice&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pt&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="7、事务操作（完全注解声明式事务管理）"><a href="#7、事务操作（完全注解声明式事务管理）" class="headerlink" title="7、事务操作（完全注解声明式事务管理）"></a>7、事务操作（完全注解声明式事务管理）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1、创建配置类，使用配置类替代 xml 配置文件</span><br><span class="hljs-meta">@Configuration</span> <span class="hljs-comment">//配置类</span><br><span class="hljs-meta">@ComponentScan(basePackages = &quot;com.atguigu&quot;)</span> <span class="hljs-comment">//组件扫描</span><br><span class="hljs-meta">@EnableTransactionManagement</span> <span class="hljs-comment">//开启事务</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TxConfig</span> &#123;<br> <span class="hljs-comment">//创建数据库连接池</span><br> <span class="hljs-meta">@Bean</span><br> <span class="hljs-keyword">public</span> DruidDataSource <span class="hljs-title function_">getDruidDataSource</span><span class="hljs-params">()</span> &#123;<br> <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br> dataSource.setDriverClassName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br> dataSource.setUrl(<span class="hljs-string">&quot;jdbc:mysql:///test&quot;</span>);<br> dataSource.setUsername(<span class="hljs-string">&quot;root&quot;</span>);<br> dataSource.setPassword(<span class="hljs-string">&quot;root&quot;</span>);<br> <span class="hljs-keyword">return</span> dataSource;<br> &#125;<br> <span class="hljs-comment">//创建 JdbcTemplate 对象</span><br> <span class="hljs-meta">@Bean</span><br> <span class="hljs-keyword">public</span> JdbcTemplate <span class="hljs-title function_">getJdbcTemplate</span><span class="hljs-params">(DataSource dataSource)</span> &#123;<span class="hljs-comment">//从IOC容器中拿到配置注入的数据源</span><br> <span class="hljs-comment">//到 ioc 容器中根据类型找到 dataSource</span><br> <span class="hljs-type">JdbcTemplate</span> <span class="hljs-variable">jdbcTemplate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcTemplate</span>();<br> <span class="hljs-comment">//注入 dataSource</span><br> jdbcTemplate.setDataSource(dataSource);<br> <span class="hljs-keyword">return</span> jdbcTemplate;<br> &#125;<br> <span class="hljs-comment">//创建事务管理器</span><br> <span class="hljs-meta">@Bean</span><br> <span class="hljs-keyword">public</span> DataSourceTransactionManager<br><span class="hljs-title function_">getDataSourceTransactionManager</span><span class="hljs-params">(DataSource dataSource)</span> &#123;<br> <span class="hljs-type">DataSourceTransactionManager</span> <span class="hljs-variable">transactionManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataSourceTransactionManager</span>();<br> transactionManager.setDataSource(dataSource);<br> <span class="hljs-keyword">return</span> transactionManager;<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring5</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring5学习笔记(2)</title>
    <link href="/2022/05/06/Spring5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(2)/"/>
    <url>/2022/05/06/Spring5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(2)/</url>
    
    <content type="html"><![CDATA[<h2 id="IOC-操作-Bean-管理-基于注解方式"><a href="#IOC-操作-Bean-管理-基于注解方式" class="headerlink" title="IOC 操作 Bean 管理(基于注解方式)"></a>IOC 操作 Bean 管理(基于注解方式)</h2><h4 id="1、什么是注解"><a href="#1、什么是注解" class="headerlink" title="1、什么是注解"></a><strong>1、什么是注解</strong></h4><p> （1）注解是代码特殊标记，格式：@注解名称(属性名称&#x3D;属性值, 属性名称&#x3D;属性值…)</p><p> （2）使用注解，注解作用在类上面，方法上面，属性上面</p><p> （3）使用注解目的：简化 xml 配置</p><h4 id="2、Spring-针对-Bean-管理中创建对象提供注解"><a href="#2、Spring-针对-Bean-管理中创建对象提供注解" class="headerlink" title="2、Spring 针对 Bean 管理中创建对象提供注解"></a><strong>2、Spring 针对 Bean 管理中创建对象提供注解</strong></h4><p> 下面四个注解功能是一样的，都可以用来创建 bean 实例</p><p> （1）@Component</p><p> （2）@Service</p><p> （3）@Controller</p><p> （4）@Repository</p><h4 id="3、基于注解方式实现对象创建"><a href="#3、基于注解方式实现对象创建" class="headerlink" title="3、基于注解方式实现对象创建"></a><strong>3、基于注解方式实现对象创建</strong></h4><p> 第一步 引入依赖 （引入<strong>spring-aop jar包</strong>）</p><p> 第二步 开启组件扫描</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--开启组件扫描</span><br><span class="hljs-comment"> 1 如果扫描多个包，多个包使用逗号隔开</span><br><span class="hljs-comment"> 2 扫描包上层目录</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br></code></pre></td></tr></table></figure><p> 第三步 创建类，在类上面添加创建对象注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//在注解里面 value 属性值可以省略不写，</span><br><span class="hljs-comment">//默认值是类名称，首字母小写</span><br><span class="hljs-comment">//UserService -- userService</span><br><span class="hljs-meta">@Component(value = &quot;userService&quot;)</span> <span class="hljs-comment">//注解等同于XML配置文件：&lt;bean id=&quot;userService&quot; class=&quot;..&quot;/&gt;</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br> System.out.println(<span class="hljs-string">&quot;service add.......&quot;</span>);<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、开启组件扫描细节配置"><a href="#4、开启组件扫描细节配置" class="headerlink" title="4、开启组件扫描细节配置"></a><strong>4、开启组件扫描细节配置</strong></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--示例 1</span><br><span class="hljs-comment"> use-default-filters=&quot;false&quot; 表示现在不使用默认 filter，自己配置 filter</span><br><span class="hljs-comment"> context:include-filter ，设置扫描哪些内容</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu&quot;</span> <span class="hljs-attr">use-defaultfilters</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">context:include-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag"><span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span><span class="hljs-comment">&lt;!--代表只扫描Controller注解的类--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><span class="hljs-comment">&lt;!--示例 2</span><br><span class="hljs-comment"> 下面配置扫描包所有内容</span><br><span class="hljs-comment"> context:exclude-filter： 设置哪些内容不进行扫描</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">context:exclude-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag"><span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span><span class="hljs-comment">&lt;!--表示Controller注解的类之外一切都进行扫描--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="5、基于注解方式实现属性注入"><a href="#5、基于注解方式实现属性注入" class="headerlink" title="5、基于注解方式实现属性注入"></a><strong>5、基于注解方式实现属性注入</strong></h4><p> （1）@Autowired：根据属性类型进行自动装配</p><p> 第一步 把 service 和 dao 对象创建，在 service 和 dao 类添加创建对象注解</p><p>第二步 在 service 注入 dao 对象，在 service 类添加 dao 类型属性，在属性上面使用注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br> <span class="hljs-comment">//定义 dao 类型属性</span><br> <span class="hljs-comment">//不需要添加 set 方法</span><br> <span class="hljs-comment">//添加注入属性注解</span><br> <span class="hljs-meta">@Autowired</span><br> <span class="hljs-keyword">private</span> UserDao userDao;<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br> System.out.println(<span class="hljs-string">&quot;service add.......&quot;</span>);<br> userDao.add();<br> &#125;<br>&#125;<br><br><span class="hljs-comment">//Dao实现类</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-comment">//@Repository(value = &quot;userDaoImpl1&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;dao add.....&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> （2）@Qualifier：根据名称进行注入，这个@Qualifier 注解的使用，和上面@Autowired 一起使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义 dao 类型属性</span><br><span class="hljs-comment">//不需要添加 set 方法</span><br><span class="hljs-comment">//添加注入属性注解</span><br><span class="hljs-meta">@Autowired</span> <span class="hljs-comment">//根据类型进行注入</span><br><span class="hljs-comment">//根据名称进行注入（目的在于区别同一接口下有多个实现类，根据类型就无法选择，从而出错！）</span><br><span class="hljs-meta">@Qualifier(value = &quot;userDaoImpl1&quot;)</span> <br><span class="hljs-keyword">private</span> UserDao userDao;<br></code></pre></td></tr></table></figure><p> （3）@Resource：可以根据类型注入，也可以根据名称注入（它属于javax包下的注解，不推荐使用！）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//@Resource //根据类型进行注入</span><br><span class="hljs-meta">@Resource(name = &quot;userDaoImpl1&quot;)</span> <span class="hljs-comment">//根据名称进行注入</span><br><span class="hljs-keyword">private</span> UserDao userDao;<br></code></pre></td></tr></table></figure><p> （4）@Value：注入普通类型属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Value(value = &quot;abc&quot;)</span><br><span class="hljs-keyword">private</span> String name<br></code></pre></td></tr></table></figure><h4 id="6、完全注解开发"><a href="#6、完全注解开发" class="headerlink" title="6、完全注解开发"></a><strong>6、完全注解开发</strong></h4><p> （1）创建配置类，替代 xml 配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span> <span class="hljs-comment">//作为配置类，替代 xml 配置文件</span><br><span class="hljs-meta">@ComponentScan(basePackages = &#123;&quot;com.atguigu&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p> （2）编写测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testService2</span><span class="hljs-params">()</span> &#123;<br> <span class="hljs-comment">//加载配置类</span><br> ApplicationContext context= <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);<br> <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;userService&quot;</span>,UserService.class);<br> System.out.println(userService);<br> userService.add();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Spring-AOP"><a href="#Spring-AOP" class="headerlink" title="Spring-AOP"></a>Spring-AOP</h2><h4 id="1、AOP-基本概念"><a href="#1、AOP-基本概念" class="headerlink" title="1、AOP 基本概念"></a><strong>1、AOP 基本概念</strong></h4><p> （1）面向切面编程（方面），利用 AOP 可以对业务逻辑的各个部分进行隔离，从而使得 业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><p> （2）通俗描述：不通过修改源代码方式，在主干功能里面添加新功能</p><p> （3）使用登录例子说明 AOP</p><img src="https://img-blog.csdnimg.cn/20200702135106266.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQ5NjE5MA==,size_16,color_FFFFFF,t_70"><h4 id="2、AOP（底层原理）"><a href="#2、AOP（底层原理）" class="headerlink" title="2、AOP（底层原理）"></a><strong>2、AOP（底层原理）</strong></h4><p> a）AOP 底层使用动态代理 ，动态代理有两种情况：</p><blockquote><p>第一种 有接口情况，使用 JDK 动态代理 ；创建<strong>接口实现类代理对象</strong>，增强类的方法</p></blockquote><img src="https://img-blog.csdnimg.cn/20200702135134128.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQ5NjE5MA==,size_16,color_FFFFFF,t_70"><p>第二种 没有接口情况，使用 CGLIB 动态代理；创建<strong>子类的代理对象</strong>，增强类的方法</p><img src="https://img-blog.csdnimg.cn/2020070213514980.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQ5NjE5MA==,size_16,color_FFFFFF,t_70"><h4 id="3、AOP（JDK-动态代理）"><a href="#3、AOP（JDK-动态代理）" class="headerlink" title="3、AOP（JDK 动态代理）"></a><strong>3、AOP（JDK 动态代理）</strong></h4><p> 1）使用 JDK 动态代理，使用 Proxy 类里面的方法创建代理对象</p><blockquote><p>调用 newProxyInstance 方法，方法有三个参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">newProxyInstance</span><span class="hljs-params">(ClassLoader loader,</span><br><span class="hljs-params">                                      Class&lt;?&gt;[] interfaces,</span><br><span class="hljs-params">                                      InvocationHandler h)</span><br></code></pre></td></tr></table></figure><p> 第一参数，类加载器</p><p> 第二参数，增强方法所在的类，这个类实现的接口，<em>支持多个接口</em></p><p> 第三参数，实现这个接口 InvocationHandler，创建代理对象，写增强的部分</p></blockquote><p> 2）编写 JDK 动态代理代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//（1）创建接口，定义方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDao</span> &#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span>;<br> <span class="hljs-keyword">public</span> String <span class="hljs-title function_">update</span><span class="hljs-params">(String id)</span>;<br>&#125;<br><span class="hljs-comment">//（2）创建接口实现类，实现方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;<br> <span class="hljs-meta">@Override</span><br> <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br> <span class="hljs-keyword">return</span> a+b;<br> &#125;<br> <span class="hljs-meta">@Override</span><br> <span class="hljs-keyword">public</span> String <span class="hljs-title function_">update</span><span class="hljs-params">(String id)</span> &#123;<br> <span class="hljs-keyword">return</span> id;<br> &#125;<br>&#125;<br><span class="hljs-comment">//（3）使用 Proxy 类创建接口代理对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDKProxy</span> &#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br> <span class="hljs-comment">//创建接口实现类代理对象</span><br> Class[] interfaces = &#123;UserDao.class&#125;;<br> <span class="hljs-type">UserDaoImpl</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDaoImpl</span>(); <br><span class="hljs-comment">/** 第一参数，类加载器 </span><br><span class="hljs-comment">第二参数，增强方法所在的类，这个类实现的接口，(支持多个接口)</span><br><span class="hljs-comment">第三参数，实现这个接口 InvocationHandler，创建代理对象，写增强的部分  */</span><br> <span class="hljs-type">UserDao</span> <span class="hljs-variable">dao</span> <span class="hljs-operator">=</span>(UserDao)Proxy.newProxyInstance(JDKProxy.class.getClassLoader(), interfaces,<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDaoProxy</span>(userDao));<br> <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> dao.add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br> System.out.println(<span class="hljs-string">&quot;result:&quot;</span>+result);<br> &#125;<br>&#125;<br><br><span class="hljs-comment">//创建代理对象代码</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br> <span class="hljs-comment">//1 把创建的是谁的代理对象，把谁传递过来</span><br> <span class="hljs-comment">//有参数构造传递</span><br> <span class="hljs-keyword">private</span> Object obj;<br> <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserDaoProxy</span><span class="hljs-params">(Object obj)</span> &#123;<br> <span class="hljs-built_in">this</span>.obj = obj;<br> &#125;<br> <span class="hljs-comment">//增强的逻辑</span><br> <span class="hljs-meta">@Override</span><br> <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br> <span class="hljs-comment">//方法之前</span><br> System.out.println(<span class="hljs-string">&quot;方法之前执行....&quot;</span>+method.getName()+<span class="hljs-string">&quot; :传递的参数...&quot;</span>+ Arrays.toString(args));<br> <span class="hljs-comment">//被增强的方法执行</span><br> <span class="hljs-type">Object</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> method.invoke(obj, args);<br> <span class="hljs-comment">//方法之后</span><br> System.out.println(<span class="hljs-string">&quot;方法之后执行....&quot;</span>+obj);<br> <span class="hljs-keyword">return</span> res;<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、AOP（术语）"><a href="#4、AOP（术语）" class="headerlink" title="4、AOP（术语）"></a><strong>4、AOP（术语）</strong></h4><p> a）连接点：类里面哪些方法可以被增强，这些方法称为连接点</p><p> b）切入点：实际被真正增强的方法称为切入点</p><p> c）通知（增强）：实际增强的逻辑部分称为通知，且分为以下五种类型：</p><p> 1）前置通知:在增强方法前执行</p><p> 2）后置通知 :在增强方法后执行</p><p>3）环绕通知 :在增强方法的前后都执行</p><p>4）异常通知 :在增强方法抛出异常后执行</p><p>5）最终通知:在所有方法执行后执行</p><p> d）切面：把通知应用到切入点过程</p><h4 id="5、AOP操作"><a href="#5、AOP操作" class="headerlink" title="5、AOP操作"></a><strong>5、AOP操作</strong></h4><p> a）Spring 框架一般都是基于 AspectJ 实现 AOP 操作，AspectJ 不是 Spring 组成部分，独立 AOP 框架，一般把 AspectJ 和 Spirng 框架一起使 用，进行 AOP 操作</p><p> b）基于 AspectJ 实现 AOP 操作：1）基于 xml 配置文件实现 （2）基于注解方式实现（使用）</p><p> c）引入相关jar包</p><p> d）切入点表达式，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">（<span class="hljs-number">1</span>）切入点表达式作用：知道对哪个类里面的哪个方法进行增强 <br>（<span class="hljs-number">2</span>）语法结构： execution([权限修饰符] [返回类型] [类全路径] [方法名称]([参数列表]) )<br>（<span class="hljs-number">3</span>）例子如下：<br>    例 <span class="hljs-number">1</span>：对 com.atguigu.dao.BookDao 类里面的 add 进行增强<br>execution(* com.atguigu.dao.BookDao.add(..))<br> 例 <span class="hljs-number">2</span>：对 com.atguigu.dao.BookDao 类里面的所有的方法进行增强<br>execution(* com.atguigu.dao.BookDao.* (..))<br>    例 <span class="hljs-number">3</span>：对 com.atguigu.dao 包里面所有类，类里面所有方法进行增强<br>execution(* com.atguigu.dao.*.* (..))<br></code></pre></td></tr></table></figure><h4 id="6、AOP-操作（AspectJ-注解）"><a href="#6、AOP-操作（AspectJ-注解）" class="headerlink" title="6、AOP 操作（AspectJ 注解）"></a><strong>6、AOP 操作（AspectJ 注解）</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1、创建类，在类里面定义方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br> System.out.println(<span class="hljs-string">&quot;add.......&quot;</span>);<br> &#125;<br>&#125;<br><span class="hljs-comment">//2、创建增强类（编写增强逻辑）</span><br><span class="hljs-comment">//（1）在增强类里面，创建方法，让不同方法代表不同通知类型</span><br><span class="hljs-comment">//增强的类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserProxy</span> &#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//前置通知</span><br> System.out.println(<span class="hljs-string">&quot;before......&quot;</span>);<br> &#125;<br>&#125;<br>&lt;!--<span class="hljs-number">3</span>、进行通知的配置--&gt;<br>&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;beans xmlns=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span><br>       xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>       xmlns:context=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span><br>       xmlns:aop=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span><br>       xsi:schemaLocation=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="hljs-string">                        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span><br><span class="hljs-string">                        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;<br>    &lt;!-- 开启注解扫描 --&gt;<br>    &lt;context:component-scan base-<span class="hljs-keyword">package</span>=<span class="hljs-string">&quot;com.atguigu.spring5.aopanno&quot;</span>&gt;&lt;/context:component-scan&gt;<br><br>    &lt;!-- 开启Aspect生成代理对象--&gt;<br>    &lt;aop:aspectj-autoproxy&gt;&lt;/aop:aspectj-autoproxy&gt;<br>&lt;/beans&gt;<br><span class="hljs-comment">//增强的类</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span>  <span class="hljs-comment">//生成代理对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserProxy</span> &#123;&#125;<br><br><span class="hljs-comment">//被增强的类</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;&#125;<br></code></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//4、配置不同类型的通知</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span>  <span class="hljs-comment">//生成代理对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserProxy</span> &#123;<br>      <span class="hljs-comment">//相同切入点抽取</span><br>    <span class="hljs-meta">@Pointcut(value = &quot;execution(* com.atguigu.spring5.aopanno.User.add(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pointdemo</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-comment">//前置通知</span><br>    <span class="hljs-comment">//@Before注解表示作为前置通知</span><br>    <span class="hljs-meta">@Before(value = &quot;pointdemo()&quot;)</span><span class="hljs-comment">//相同切入点抽取使用！</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;before.........&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//后置通知（返回通知）</span><br>    <span class="hljs-meta">@AfterReturning(value = &quot;execution(* com.atguigu.spring5.aopanno.User.add(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterReturning</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;afterReturning.........&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//最终通知</span><br>    <span class="hljs-meta">@After(value = &quot;execution(* com.atguigu.spring5.aopanno.User.add(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;after.........&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//异常通知</span><br>    <span class="hljs-meta">@AfterThrowing(value = &quot;execution(* com.atguigu.spring5.aopanno.User.add(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterThrowing</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;afterThrowing.........&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//环绕通知</span><br>    <span class="hljs-meta">@Around(value = &quot;execution(* com.atguigu.spring5.aopanno.User.add(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        System.out.println(<span class="hljs-string">&quot;环绕之前.........&quot;</span>);<br><br>        <span class="hljs-comment">//被增强的方法执行</span><br>        proceedingJoinPoint.proceed();<br><br>        System.out.println(<span class="hljs-string">&quot;环绕之后.........&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7、有多个增强类对同一个方法进行增强，设置增强类优先级"><a href="#7、有多个增强类对同一个方法进行增强，设置增强类优先级" class="headerlink" title="7、有多个增强类对同一个方法进行增强，设置增强类优先级"></a><strong>7、有多个增强类对同一个方法进行增强，设置增强类优先级</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//（1）在增强类上面添加注解 @Order(数字类型值)，数字类型值越小优先级越高</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Order(1)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonProxy</span>&#123; &#125;<br></code></pre></td></tr></table></figure><h4 id="8、AOP-操作（AspectJ-配置文件）"><a href="#8、AOP-操作（AspectJ-配置文件）" class="headerlink" title="8、AOP 操作（AspectJ 配置文件）"></a><strong>8、AOP 操作（AspectJ 配置文件）</strong></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--1、创建两个类，增强类和被增强类，创建方法（同上一样）--&gt;</span><br><span class="hljs-comment">&lt;!--2、在 spring 配置文件中创建两个类对象--&gt;</span><br><span class="hljs-comment">&lt;!--创建对象--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring5.aopxml.Book&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookProxy&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring5.aopxml.BookProxy&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-comment">&lt;!--3、在 spring 配置文件中配置切入点--&gt;</span><br><span class="hljs-comment">&lt;!--配置 aop 增强--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br> <span class="hljs-comment">&lt;!--切入点--&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;p&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.atguigu.spring5.aopxml.Book.buy(..))&quot;</span>/&gt;</span><br> <span class="hljs-comment">&lt;!--配置切面--&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;bookProxy&quot;</span>&gt;</span><br> <span class="hljs-comment">&lt;!--增强作用在具体的方法上--&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;before&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;p&quot;</span>/&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="JdbcTemplate"><a href="#JdbcTemplate" class="headerlink" title="JdbcTemplate"></a>JdbcTemplate</h2><h4 id="1、概念及使用"><a href="#1、概念及使用" class="headerlink" title="1、概念及使用"></a>1、概念及使用</h4><p> a）Spring 框架对 JDBC 进行封装，使用 JdbcTemplate 方便实现对数据库操作</p><p> b）引入相关 jar 包</p><p> c）在 spring 配置文件配置数据库连接池</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span></span><br><span class="hljs-tag"> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;close&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql:///test&quot;</span> /&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span> /&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span> /&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p> d）配置 JdbcTemplate 对象，注入 DataSource</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- JdbcTemplate 对象 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jdbcTemplate&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span><br> <span class="hljs-comment">&lt;!--注入 dataSource--&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-comment">&lt;!--set方式注入--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p> e）创建 service 类，创建 dao 类，在 dao 注入 jdbcTemplate 对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 组件扫描 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br>@Service<br>public class BookService &#123;<br> //注入 dao<br> @Autowired<br> private BookDao bookDao;<br>&#125;<br><br>@Repository<br>public class BookDaoImpl implements BookDao &#123;<br> //注入 JdbcTemplate<br> @Autowired<br> private JdbcTemplate jdbcTemplate;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、操作数据库（添加）"><a href="#2、操作数据库（添加）" class="headerlink" title="2、操作数据库（添加）"></a>2、操作数据库（添加）</h4><p> a）对应数据库创建实体类</p><p> b）创建service和dao</p><p> （1）在 dao 进行数据库添加操作</p><p> （2）调用 JdbcTemplate 对象里面 update 方法实现添加操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span> &#123;<br> <span class="hljs-comment">//注入 JdbcTemplate</span><br> <span class="hljs-meta">@Autowired</span><br> <span class="hljs-keyword">private</span> JdbcTemplate jdbcTemplate;<br> <span class="hljs-comment">//添加的方法</span><br> <span class="hljs-meta">@Override</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Book book)</span> &#123;<br> <span class="hljs-comment">//1 创建 sql 语句</span><br> <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into t_book values(?,?,?)&quot;</span>;<br> <span class="hljs-comment">//2 调用方法实现</span><br> Object[] args = &#123;book.getUserId(), book.getUsername(),book.getUstatus()&#125;;<br> <span class="hljs-type">int</span> <span class="hljs-variable">update</span> <span class="hljs-operator">=</span> jdbcTemplate.update(sql,args);<br> System.out.println(update);<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、-操作数据库（修改和删除）"><a href="#3、-操作数据库（修改和删除）" class="headerlink" title="3、 操作数据库（修改和删除）"></a>3、 操作数据库（修改和删除）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1、修改</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateBook</span><span class="hljs-params">(Book book)</span> &#123;<br> <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update t_book set username=?,ustatus=? where user_id=?&quot;</span>;<br> Object[] args = &#123;book.getUsername(), book.getUstatus(),book.getUserId()&#125;;<br> <span class="hljs-type">int</span> <span class="hljs-variable">update</span> <span class="hljs-operator">=</span> jdbcTemplate.update(sql, args);<br> System.out.println(update);<br>&#125;<br><span class="hljs-comment">//2、删除</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(String id)</span> &#123;<br> <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;delete from t_book where user_id=?&quot;</span>;<br> <span class="hljs-type">int</span> <span class="hljs-variable">update</span> <span class="hljs-operator">=</span> jdbcTemplate.update(sql, id);<br> System.out.println(update);<br>&#125;<br><span class="hljs-comment">//使用JdbcTemplate 模板所实现的 “增删改” 都是调用了同一个 “update” 方法</span><br></code></pre></td></tr></table></figure><h4 id="4、操作数据库（查询返回某个值）"><a href="#4、操作数据库（查询返回某个值）" class="headerlink" title="4、操作数据库（查询返回某个值）"></a>4、操作数据库（查询返回某个值）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//查询表记录数</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">selectCount</span><span class="hljs-params">()</span> &#123;<br> <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select count(*) from t_book&quot;</span>;<br><span class="hljs-comment">//queryForObject方法中：第一个参数代表--sql语句；第二个参数代表--返回类型class  </span><br> <span class="hljs-type">Integer</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> jdbcTemplate.queryForObject(sql, Integer.class);<br> <span class="hljs-keyword">return</span> count;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5、-操作数据库（查询返回对象）"><a href="#5、-操作数据库（查询返回对象）" class="headerlink" title="5、 操作数据库（查询返回对象）"></a>5、 操作数据库（查询返回对象）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//查询返回对象</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Book <span class="hljs-title function_">findBookInfo</span><span class="hljs-params">(String id)</span> &#123;<br> <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from t_book where user_id=?&quot;</span>;<br> <span class="hljs-comment">//调用方法</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">queryForObject方法中：</span><br><span class="hljs-comment">第一个参数：sql语句</span><br><span class="hljs-comment">第二个参数：RowMapper 是接口，针对返回不同类型数据，使用这个接口里面 实现类 完成数据封装</span><br><span class="hljs-comment">第三个参数：sql 语句值</span><br><span class="hljs-comment">*/</span><br> <span class="hljs-type">Book</span> <span class="hljs-variable">book</span> <span class="hljs-operator">=</span> jdbcTemplate.queryForObject(sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanPropertyRowMapper</span>&lt;Book&gt;(Book.class), id);<br> <span class="hljs-keyword">return</span> book;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6、-操作数据库（查询返回集合）"><a href="#6、-操作数据库（查询返回集合）" class="headerlink" title="6、 操作数据库（查询返回集合）"></a>6、 操作数据库（查询返回集合）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//所用场景：查询图书列表分页、、</span><br><span class="hljs-comment">//查询返回集合</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;Book&gt; <span class="hljs-title function_">findAllBook</span><span class="hljs-params">()</span> &#123;<br> <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from t_book&quot;</span>;<br> <span class="hljs-comment">//调用方法</span><br> List&lt;Book&gt; bookList = jdbcTemplate.query(sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanPropertyRowMapper</span>&lt;Book&gt;(Book.class));<br> <span class="hljs-keyword">return</span> bookList;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7、-操作数据库（批量操作）"><a href="#7、-操作数据库（批量操作）" class="headerlink" title="7、 操作数据库（批量操作）"></a>7、 操作数据库（批量操作）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//批量添加</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">batchAddBook</span><span class="hljs-params">(List&lt;Object[]&gt; batchArgs)</span> &#123;<br> <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into t_book values(?,?,?)&quot;</span>;<br><span class="hljs-comment">//batchUpdate方法 第一个参数：sql语句第二个参数：List集合，添加多条记录数据</span><br> <span class="hljs-type">int</span>[] ints = jdbcTemplate.batchUpdate(sql, batchArgs);<br> System.out.println(Arrays.toString(ints));<br>&#125;<br><br><span class="hljs-comment">//批量添加测试</span><br>List&lt;Object[]&gt; batchArgs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>Object[] o1 = &#123;<span class="hljs-string">&quot;3&quot;</span>,<span class="hljs-string">&quot;java&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>&#125;;<br>Object[] o2 = &#123;<span class="hljs-string">&quot;4&quot;</span>,<span class="hljs-string">&quot;c++&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>&#125;;<br>Object[] o3 = &#123;<span class="hljs-string">&quot;5&quot;</span>,<span class="hljs-string">&quot;MySQL&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>&#125;;<br>batchArgs.add(o1);<br>batchArgs.add(o2);<br>batchArgs.add(o3);<br><span class="hljs-comment">//调用批量添加</span><br>bookService.batchAdd(batchArgs);<br></code></pre></td></tr></table></figure><h4 id="8、实现批量修改操作"><a href="#8、实现批量修改操作" class="headerlink" title="8、实现批量修改操作"></a>8、实现批量修改操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//批量修改(同批量添加一样，调用同一个方法)</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">batchUpdateBook</span><span class="hljs-params">(List&lt;Object[]&gt; batchArgs)</span> &#123;<br> <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update t_book set username=?,ustatus=? where user_id=?&quot;</span>;<br> <span class="hljs-type">int</span>[] ints = jdbcTemplate.batchUpdate(sql, batchArgs);<br> System.out.println(Arrays.toString(ints));<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring5</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring5学习笔记(1)</title>
    <link href="/2022/05/05/Spring5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(1)/"/>
    <url>/2022/05/05/Spring5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(1)/</url>
    
    <content type="html"><![CDATA[<h2 id="Spring5框架概述"><a href="#Spring5框架概述" class="headerlink" title="Spring5框架概述"></a>Spring5框架概述</h2><h4 id="1、Spring-是轻量级的开源的-JavaEE-框架"><a href="#1、Spring-是轻量级的开源的-JavaEE-框架" class="headerlink" title="1、Spring 是轻量级的开源的 JavaEE 框架"></a>1、Spring 是轻量级的开源的 JavaEE 框架</h4><h4 id="2、Spring-可以解决企业应用开发的复杂性"><a href="#2、Spring-可以解决企业应用开发的复杂性" class="headerlink" title="2、Spring 可以解决企业应用开发的复杂性"></a>2、Spring 可以解决企业应用开发的复杂性</h4><h4 id="3、Spring-有两个核心部分：IOC-和-Aop"><a href="#3、Spring-有两个核心部分：IOC-和-Aop" class="headerlink" title="3、Spring 有两个核心部分：IOC 和 Aop"></a>3、Spring 有两个核心部分：IOC 和 Aop</h4><p>（1）IOC：控制反转，把创建对象过程交给 Spring 进行管理 </p><p>（2）Aop：面向切面，不修改源代码进行功能增强 </p><h5 id="4、Spring-特点"><a href="#4、Spring-特点" class="headerlink" title="4、Spring 特点"></a>4、Spring 特点</h5><p>（1）方便解耦，简化开发 </p><p>（2）Aop 编程支持 </p><p>（3）方便程序测试 </p><p>（4）方便和其他框架进行整合 </p><p>（5）方便进行事务操作 </p><p>（6）降低 API 开发难度</p><h2 id="Spring——IOC（控制反转）"><a href="#Spring——IOC（控制反转）" class="headerlink" title="Spring——IOC（控制反转）"></a>Spring——IOC（控制反转）</h2><h3 id="一、IOC容器"><a href="#一、IOC容器" class="headerlink" title="一、IOC容器"></a>一、IOC容器</h3><h4 id="1、什么是IOC（控制反转"><a href="#1、什么是IOC（控制反转" class="headerlink" title="1、什么是IOC（控制反转)"></a>1、什么是IOC（控制反转)</h4><p> a）把对象创建和对象之间的调用过程，交给Spring进行管理</p><p> b）使用IOC目的：为了降低耦合度</p><h4 id="2、IOC底层"><a href="#2、IOC底层" class="headerlink" title="2、IOC底层"></a>2、IOC底层</h4><p> a）xml解析、工厂模式、反射</p><h4 id="3、Spring提供的IOC容器实现的两种方式（两个接口）"><a href="#3、Spring提供的IOC容器实现的两种方式（两个接口）" class="headerlink" title="3、Spring提供的IOC容器实现的两种方式（两个接口）"></a><strong>3、Spring提供的IOC容器实现的两种方式（两个接口）</strong></h4><p> a）BeanFactory接口：IOC容器基本实现是Spring内部接口的使用接口，不提供给开发人员进行使用（加载配置文件时候不会创建对象，在获取对象时才会创建对象。）</p><p> b）ApplicationContext接口：BeanFactory接口的子接口，提供更多更强大的功能，提供给开发人员使用（加载配置文件时候就会把在配置文件对象进行创建）推荐使用！</p><h4 id="4、ApplicationContext接口的实现类（具体根据API文档查看☺）"><a href="#4、ApplicationContext接口的实现类（具体根据API文档查看☺）" class="headerlink" title="4、ApplicationContext接口的实现类（具体根据API文档查看☺）"></a><strong>4、ApplicationContext接口的实现类（具体根据API文档查看☺）</strong></h4><h3 id="二、IOC容器-Bean管理"><a href="#二、IOC容器-Bean管理" class="headerlink" title="二、IOC容器-Bean管理"></a>二、IOC容器-Bean管理</h3><h4 id="1、IOC操作Bean管理"><a href="#1、IOC操作Bean管理" class="headerlink" title="1、IOC操作Bean管理"></a>1、IOC操作Bean管理</h4><p> a）Bean管理就是两个操作：（1）Spring创建对象；（2）Spring注入属性</p><h4 id="2、基于XML配置文件创建对象"><a href="#2、基于XML配置文件创建对象" class="headerlink" title="2、基于XML配置文件创建对象"></a><strong>2、基于XML配置文件创建对象</strong></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--1 配置User对象创建--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring5.User&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3、基于XML方式注入属性（DI：依赖注入（注入属性））"><a href="#3、基于XML方式注入属性（DI：依赖注入（注入属性））" class="headerlink" title="3、基于XML方式注入属性（DI：依赖注入（注入属性））"></a><strong>3、基于XML方式注入属性</strong>（DI：依赖注入（注入属性））</h4><p> a）set方式注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//（1）传统方式： 创建类，定义属性和对应的set方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span> &#123;<br>        <span class="hljs-comment">//创建属性</span><br>        <span class="hljs-keyword">private</span> String bname;<br><br>        <span class="hljs-comment">//创建属性对应的set方法</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBname</span><span class="hljs-params">(String bname)</span> &#123;<br>            <span class="hljs-built_in">this</span>.bname = bname;<br>        &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><hr><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--（2）spring方式： set方法注入属性--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring5.Book&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--使用property完成属性注入</span><br><span class="hljs-comment">        name：类里面属性名称</span><br><span class="hljs-comment">        value：向属性注入的值</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Hello&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bauthor&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;World&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p> b）有参构造函数注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//（1）传统方式：创建类，构建有参函数</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Orders</span> &#123;<br>    <span class="hljs-comment">//属性</span><br>    <span class="hljs-keyword">private</span> String oname;<br>    <span class="hljs-keyword">private</span> String address;<br>    <span class="hljs-comment">//有参数构造</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Orders</span><span class="hljs-params">(String oname,String address)</span> &#123;<br>        <span class="hljs-built_in">this</span>.oname = oname;<br>        <span class="hljs-built_in">this</span>.address = address;<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><hr><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--（2）spring方式：有参数构造注入属性--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;orders&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring5.Orders&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;oname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Hello&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;China！&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在a和b都存在的情况下会优先执行a方法</p><p>c）p名称空间注入（了解即可）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--1、添加p名称空间在配置文件头部--&gt;</span><br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/p&quot;</span>&lt;!<span class="hljs-attr">--</span>在这里添加一行<span class="hljs-attr">p--</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--2、在bean标签进行属性注入（算是set方式注入的简化操作）--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring5.Book&quot;</span> <span class="hljs-attr">p:bname</span>=<span class="hljs-string">&quot;very&quot;</span> <span class="hljs-attr">p:bauthor</span>=<span class="hljs-string">&quot;good&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="4、注入空值和特殊符号"><a href="#4、注入空值和特殊符号" class="headerlink" title="4、注入空值和特殊符号"></a><strong>4、注入空值和特殊符号</strong></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring5.Book&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--（1）null值--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">null</span>/&gt;</span><span class="hljs-comment">&lt;!--属性里边添加一个null标签--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--（2）特殊符号赋值--&gt;</span><br>     <span class="hljs-comment">&lt;!--属性值包含特殊符号</span><br><span class="hljs-comment">       a 把&lt;&gt;进行转义 &amp;lt; &amp;gt;</span><br><span class="hljs-comment">       b 把带特殊符号内容写到CDATA</span><br><span class="hljs-comment">      --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>&lt;![CDATA[&lt;&lt;南京&gt;&gt;]]&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><h4 id="5、注入属性-外部bean"><a href="#5、注入属性-外部bean" class="headerlink" title="5、注入属性-外部bean"></a><strong>5、注入属性-外部bean</strong></h4><p> a）创建两个类service和dao类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<span class="hljs-comment">//service类</span><br><br>    <span class="hljs-comment">//创建UserDao类型属性，生成set方法</span><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserDao</span><span class="hljs-params">(UserDao userDao)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userDao = userDao;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;service add...............&quot;</span>);<br>        userDao.update();<span class="hljs-comment">//调用dao方法</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;<span class="hljs-comment">//dao类</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;dao update...........&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> b）在spring配置文件中进行配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--1 service和dao对象创建--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring5.service.UserService&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--注入userDao对象</span><br><span class="hljs-comment">        name属性：类里面属性名称</span><br><span class="hljs-comment">        ref属性：创建userDao对象bean标签id值</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userDaoImpl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDaoImpl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring5.dao.UserDaoImpl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="6、基于XML方式注入内部bean和级联赋值"><a href="#6、基于XML方式注入内部bean和级联赋值" class="headerlink" title="6、基于XML方式注入内部bean和级联赋值"></a><strong>6、基于XML方式注入内部bean和级联赋值</strong></h4><p> a）注入属性-内部bean</p><blockquote><p>（1）一对多关系：部门和员工<br>一个部门有多个员工，一个员工属于一个部门（部门是一，员工是多）<br>（2）在实体类之间表示一对多关系，员工表示所属部门，使用对象类型属性进行表示</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//部门类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dept</span> &#123;<br>    <span class="hljs-keyword">private</span> String dname;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDname</span><span class="hljs-params">(String dname)</span> &#123;<br>        <span class="hljs-built_in">this</span>.dname = dname;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//员工类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Emp</span> &#123;<br>    <span class="hljs-keyword">private</span> String ename;<br>    <span class="hljs-keyword">private</span> String gender;<br>    <span class="hljs-comment">//员工属于某一个部门，使用对象形式表示</span><br>    <span class="hljs-keyword">private</span> Dept dept;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDept</span><span class="hljs-params">(Dept dept)</span> &#123;<br>        <span class="hljs-built_in">this</span>.dept = dept;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEname</span><span class="hljs-params">(String ename)</span> &#123;<br>        <span class="hljs-built_in">this</span>.ename = ename;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setGender</span><span class="hljs-params">(String gender)</span> &#123;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>（3）在spring配置文件中配置</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--内部bean--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;emp&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring5.bean.Emp&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--设置两个普通属性--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ename&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Andy&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--设置对象类型属性--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dept&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring5.bean.Dept&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--内部bean赋值--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;宣传部门&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><p> b）注入属性-级联赋值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--方式一：级联赋值--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;emp&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring5.bean.Emp&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--设置两个普通属性--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ename&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Andy&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--级联赋值--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dept&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring5.bean.Dept&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;公关部门&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br> //方式二：生成dept的get方法（get方法必须有！！）<br>    public Dept getDept() &#123;<br>        return dept;<br>    &#125;<br> <span class="hljs-comment">&lt;!--级联赋值--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;emp&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring5.bean.Emp&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--设置两个普通属性--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ename&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jams&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;男&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--级联赋值--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dept&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dept.dname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;技术部门&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring5.bean.Dept&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="7、IOC-操作-Bean-管理——xml-注入集合属性"><a href="#7、IOC-操作-Bean-管理——xml-注入集合属性" class="headerlink" title="7、IOC 操作 Bean 管理——xml 注入集合属性"></a><strong>7、IOC 操作 Bean 管理——xml 注入集合属性</strong></h4><blockquote><p>1、注入数组类型属性 2、注入 List 集合类型属性 3、注入 Map 集合类型属性</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//（1）创建类，定义数组、list、map、set 类型属性，生成对应 set 方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Stu</span> &#123;<br>    <span class="hljs-comment">//1 数组类型属性</span><br>    <span class="hljs-keyword">private</span> String[] courses;<br>    <span class="hljs-comment">//2 list集合类型属性</span><br>    <span class="hljs-keyword">private</span> List&lt;String&gt; list;<br>    <span class="hljs-comment">//3 map集合类型属性</span><br>    <span class="hljs-keyword">private</span> Map&lt;String,String&gt; maps;<br>    <span class="hljs-comment">//4 set集合类型属性</span><br>    <span class="hljs-keyword">private</span> Set&lt;String&gt; sets;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSets</span><span class="hljs-params">(Set&lt;String&gt; sets)</span> &#123;<br>        <span class="hljs-built_in">this</span>.sets = sets;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCourses</span><span class="hljs-params">(String[] courses)</span> &#123;<br>        <span class="hljs-built_in">this</span>.courses = courses;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setList</span><span class="hljs-params">(List&lt;String&gt; list)</span> &#123;<br>        <span class="hljs-built_in">this</span>.list = list;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMaps</span><span class="hljs-params">(Map&lt;String, String&gt; maps)</span> &#123;<br>        <span class="hljs-built_in">this</span>.maps = maps;<br>    &#125;<br>&lt;!--（<span class="hljs-number">2</span>）在 spring 配置文件进行配置--&gt;<br>    &lt;bean id=<span class="hljs-string">&quot;stu&quot;</span> class=<span class="hljs-string">&quot;com.atguigu.spring5.collectiontype.Stu&quot;</span>&gt;<br>        &lt;!--数组类型属性注入--&gt;<br>        &lt;property name=<span class="hljs-string">&quot;courses&quot;</span>&gt;<br>            &lt;array&gt;<br>                &lt;value&gt;java课程&lt;/value&gt;<br>                &lt;value&gt;数据库课程&lt;/value&gt;<br>            &lt;/array&gt;<br>        &lt;/property&gt;<br>        &lt;!--list类型属性注入--&gt;<br>        &lt;property name=<span class="hljs-string">&quot;list&quot;</span>&gt;<br>            &lt;list&gt;<br>                &lt;value&gt;张三&lt;/value&gt;<br>                &lt;value&gt;小三&lt;/value&gt;<br>            &lt;/list&gt;<br>        &lt;/property&gt;<br>        &lt;!--map类型属性注入--&gt;<br>        &lt;property name=<span class="hljs-string">&quot;maps&quot;</span>&gt;<br>            &lt;map&gt;<br>                &lt;entry key=<span class="hljs-string">&quot;JAVA&quot;</span> value=<span class="hljs-string">&quot;java&quot;</span>&gt;&lt;/entry&gt;<br>                &lt;entry key=<span class="hljs-string">&quot;PHP&quot;</span> value=<span class="hljs-string">&quot;php&quot;</span>&gt;&lt;/entry&gt;<br>            &lt;/map&gt;<br>        &lt;/property&gt;<br>        &lt;!--set类型属性注入--&gt;<br>        &lt;property name=<span class="hljs-string">&quot;sets&quot;</span>&gt;<br>            &lt;set&gt;<br>                &lt;value&gt;MySQL&lt;/value&gt;<br>                &lt;value&gt;Redis&lt;/value&gt;<br>            &lt;/set&gt;<br>        &lt;/property&gt;<br>&lt;/bean&gt;<br></code></pre></td></tr></table></figure><h4 id="8、在集合里面设置对象类型值"><a href="#8、在集合里面设置对象类型值" class="headerlink" title="8、在集合里面设置对象类型值"></a><strong>8、在集合里面设置对象类型值</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//学生所学多门课程</span><br>  <span class="hljs-keyword">private</span> List&lt;Course&gt; courseList;<span class="hljs-comment">//创建集合</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCourseList</span><span class="hljs-params">(List&lt;Course&gt; courseList)</span> &#123;<br>      <span class="hljs-built_in">this</span>.courseList = courseList;<br>  &#125;<br>  &lt;!--创建多个course对象--&gt;<br>  &lt;bean id=<span class="hljs-string">&quot;course1&quot;</span> class=<span class="hljs-string">&quot;com.atguigu.spring5.collectiontype.Course&quot;</span>&gt;<br>      &lt;property name=<span class="hljs-string">&quot;cname&quot;</span> value=<span class="hljs-string">&quot;Spring5框架&quot;</span>&gt;&lt;/property&gt;<br>  &lt;/bean&gt;<br>  &lt;bean id=<span class="hljs-string">&quot;course2&quot;</span> class=<span class="hljs-string">&quot;com.atguigu.spring5.collectiontype.Course&quot;</span>&gt;<br>      &lt;property name=<span class="hljs-string">&quot;cname&quot;</span> value=<span class="hljs-string">&quot;MyBatis框架&quot;</span>&gt;&lt;/property&gt;<br>  &lt;/bean&gt;<br>  <br> &lt;!--注入list集合类型，值是对象--&gt;<br>     &lt;property name=<span class="hljs-string">&quot;courseList&quot;</span>&gt;<br>         &lt;list&gt;<br>             &lt;ref bean=<span class="hljs-string">&quot;course1&quot;</span>&gt;&lt;/ref&gt;<br>             &lt;ref bean=<span class="hljs-string">&quot;course2&quot;</span>&gt;&lt;/ref&gt;<br>         &lt;/list&gt;<br>     &lt;/property&gt;<br></code></pre></td></tr></table></figure><hr><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--第一步：在 spring 配置文件中引入名称空间 util--&gt;</span><br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:util</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/util&quot;</span> &lt;!<span class="hljs-attr">--</span>添加<span class="hljs-attr">util</span>名称空间<span class="hljs-attr">--</span>&gt;</span><br>       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<br>                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd&quot;&gt;  <span class="hljs-comment">&lt;!--添加util名称空间--&gt;</span><br>    <br><span class="hljs-comment">&lt;!--第二步：使用 util 标签完成 list 集合注入提取--&gt;</span><br><span class="hljs-comment">&lt;!--把集合注入部分提取出来--&gt;</span><br> <span class="hljs-comment">&lt;!--1 提取list集合类型属性注入--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">util:list</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookList&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>易筋经<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>九阴真经<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>九阳神功<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">util:list</span>&gt;</span><br><br> <span class="hljs-comment">&lt;!--2 提取list集合类型属性注入使用--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring5.collectiontype.Book&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;prototype&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;bookList&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="9、IOC-操作-Bean-管理（FactoryBean）"><a href="#9、IOC-操作-Bean-管理（FactoryBean）" class="headerlink" title="9、IOC 操作 Bean 管理（FactoryBean）"></a><strong>9、IOC 操作 Bean 管理（FactoryBean）</strong></h4><blockquote><p> 1、Spring 有两种类型 bean，一种普通 bean，另外一种工厂 bean（FactoryBean）</p><p> 2、普通 bean：在配置文件中定义 bean 类型就是返回类型</p><p> 3、工厂 bean：在配置文件定义 bean 类型可以和<strong>返回类型不一样</strong> 第一步 创建类，让这个类作为工厂 bean，实现接口 FactoryBean 第二步 实现接口里面的方法，在实现的方法中定义返回的 bean 类型</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBean</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FactoryBean</span>&lt;Course&gt; &#123;<br><br>    <span class="hljs-comment">//定义返回bean</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Course <span class="hljs-title function_">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Course</span> <span class="hljs-variable">course</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Course</span>();<br>        course.setCname(<span class="hljs-string">&quot;abc&quot;</span>);<br>        <span class="hljs-keyword">return</span> course;<br>    &#125;<br>&#125;<br>&lt;bean id=<span class="hljs-string">&quot;myBean&quot;</span> class=<span class="hljs-string">&quot;com.atguigu.spring5.factorybean.MyBean&quot;</span>&gt;<br>&lt;/bean&gt;<br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span> &#123;<br> <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span><br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean3.xml&quot;</span>);<br> <span class="hljs-type">Course</span> <span class="hljs-variable">course</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;myBean&quot;</span>, Course.class);<span class="hljs-comment">//返回值类型可以不是定义的bean类型！</span><br> System.out.println(course);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="10、IOC-操作-Bean-管理（bean-作用域）"><a href="#10、IOC-操作-Bean-管理（bean-作用域）" class="headerlink" title="10、IOC 操作 Bean 管理（bean 作用域）"></a><strong>10、IOC 操作 Bean 管理（bean 作用域）</strong></h4><p> 在 Spring 里面，默认情况下，bean 是单实例对象，下面进行作用域设置：</p><blockquote><p>（1）在 spring 配置文件 bean 标签里面有属性（scope）用于设置单实例还是多实例</p><p>（2）scope 属性值 第一个值 默认值，singleton，表示是单实例对象 第二个值 prototype，表示是多实例对象</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring5.collectiontype.Book&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;prototype&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--设置为多实例--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;bookList&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>（3）singleton 和 prototype 区别</p><p> a）singleton 单实例，prototype 多实例</p><p> b）设置 scope 值是 singleton 时候，<strong>加载 spring 配置文件时候就会创建单实例对象</strong> ；设置 scope 值是 prototype 时候，不是在加载 spring 配置文件时候创建对象，在<strong>调用 getBean 方法时候创建多实例对象</strong></p></blockquote><h4 id="11、IOC-操作-Bean-管理（bean-生命周期）"><a href="#11、IOC-操作-Bean-管理（bean-生命周期）" class="headerlink" title="11、IOC 操作 Bean 管理（bean 生命周期）"></a><strong>11、IOC 操作 Bean 管理（bean 生命周期）</strong></h4><blockquote><p>1、生命周期 ：从对象创建到对象销毁的过程</p><p>2、bean 生命周期</p><p> （1）通过构造器创建 bean 实例（无参数构造）</p><p> （2）为 bean 的属性设置值和对其他 bean 引用（调用 set 方法）</p><p> （3）调用 bean 的初始化的方法（需要进行配置初始化的方法）</p><p> （4）bean 可以使用了（对象获取到了）</p><p> （5）当容器关闭时候，调用 bean 的销毁的方法（需要进行配置销毁的方法）</p><p>3、演示 bean 生命周期 ：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Orders</span> &#123;<br> <span class="hljs-comment">//无参数构造</span><br> <span class="hljs-keyword">public</span> <span class="hljs-title function_">Orders</span><span class="hljs-params">()</span> &#123;<br> System.out.println(<span class="hljs-string">&quot;第一步 执行无参数构造创建 bean 实例&quot;</span>);<br> &#125;<br> <span class="hljs-keyword">private</span> String oname;<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setOname</span><span class="hljs-params">(String oname)</span> &#123;<br> <span class="hljs-built_in">this</span>.oname = oname;<br> System.out.println(<span class="hljs-string">&quot;第二步 调用 set 方法设置属性值&quot;</span>);<br> &#125;<br> <span class="hljs-comment">//创建执行的初始化的方法</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initMethod</span><span class="hljs-params">()</span> &#123;<br> System.out.println(<span class="hljs-string">&quot;第三步 执行初始化的方法&quot;</span>);<br> &#125;<br> <span class="hljs-comment">//创建执行的销毁的方法</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroyMethod</span><span class="hljs-params">()</span> &#123;<br> System.out.println(<span class="hljs-string">&quot;第五步 执行销毁的方法&quot;</span>);<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBeanPost</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanPostProcessor</span> &#123;<span class="hljs-comment">//创建后置处理器实现类</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">postProcessBeforeInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        System.out.println(<span class="hljs-string">&quot;在初始化之前执行的方法&quot;</span>);<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">postProcessAfterInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        System.out.println(<span class="hljs-string">&quot;在初始化之后执行的方法&quot;</span>);<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br>&#125;<br>&lt;!--配置文件的bean参数配置--&gt;<br>&lt;bean id=<span class="hljs-string">&quot;orders&quot;</span> class=<span class="hljs-string">&quot;com.atguigu.spring5.bean.Orders&quot;</span> init-method=<span class="hljs-string">&quot;initMethod&quot;</span> destroy-method=<span class="hljs-string">&quot;destroyMethod&quot;</span>&gt;&lt;!--配置初始化方法和销毁方法--&gt;<br>    &lt;property name=<span class="hljs-string">&quot;oname&quot;</span> value=<span class="hljs-string">&quot;手机&quot;</span>&gt;&lt;/property&gt;&lt;!--这里就是通过set方式（注入属性）赋值--&gt;<br>&lt;/bean&gt;<br><br>&lt;!--配置后置处理器--&gt;<br>&lt;bean id=<span class="hljs-string">&quot;myBeanPost&quot;</span> class=<span class="hljs-string">&quot;com.atguigu.spring5.bean.MyBeanPost&quot;</span>&gt;&lt;/bean&gt;<br> <span class="hljs-meta">@Test</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testBean3</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// ApplicationContext context =</span><br><span class="hljs-comment">// new ClassPathXmlApplicationContext(&quot;bean4.xml&quot;);</span><br> <span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span><br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean4.xml&quot;</span>);<br> <span class="hljs-type">Orders</span> <span class="hljs-variable">orders</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;orders&quot;</span>, Orders.class);<br> System.out.println(<span class="hljs-string">&quot;第四步 获取创建 bean 实例对象&quot;</span>);<br> System.out.println(orders);<br> <span class="hljs-comment">//手动让 bean 实例销毁</span><br> context.close();<br> &#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>4、bean 的后置处理器，bean 生命周期有七步</strong> （正常生命周期为五步，而配置后置处理器后为七步）</p><p> （1）通过构造器创建 bean 实例（无参数构造）</p><p> （2）为 bean 的属性设置值和对其他 bean 引用（调用 set 方法）</p><p> （3）把 bean 实例传递 bean 后置处理器的方法 postProcessBeforeInitialization</p><p> （4）调用 bean 的初始化的方法（需要进行配置初始化的方法）</p><p> （5）把 bean 实例传递 bean 后置处理器的方法 postProcessAfterInitialization</p><p> （6）bean 可以使用了（对象获取到了）</p><p> （7）当容器关闭时候，调用 bean 的销毁的方法（需要进行配置销毁的方法）</p></blockquote><h4 id="12-IOC-操作-Bean-管理（xml-自动装配）"><a href="#12-IOC-操作-Bean-管理（xml-自动装配）" class="headerlink" title="12.IOC 操作 Bean 管理（xml 自动装配）"></a>12.IOC 操作 Bean 管理（xml 自动装配）</h4><p>1、什么是自动装配 </p><p>（1）根据指定装配规则（属性名称或者属性类型），Spring 自动将匹配的属性值进行注入</p><p>实现自动装配 </p><p>bean 标签属性 autowire，配置自动装配 </p><p>autowire 属性常用两个值： byName 根据属性名称注入 ，注入值 bean 的 id 值和类属性名称一样</p><p>​ byType 根据属性类型注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;emp&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring5.autowire.Emp&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byName&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring5.autowire.Dept&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="13、IOC-操作-Bean-管理-外部属性文件"><a href="#13、IOC-操作-Bean-管理-外部属性文件" class="headerlink" title="13、IOC 操作 Bean 管理(外部属性文件)"></a><strong>13、IOC 操作 Bean 管理(外部属性文件)</strong></h4><blockquote><p><strong>方式一：直接配置数据库信息</strong> ：（1）配置Druid（德鲁伊）连接池 （2）引入Druid（德鲁伊）连接池依赖 jar 包</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--直接配置连接池--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/userDb&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>方式二：引入外部属性文件配置数据库连接池</strong></p><p>（1）创建外部属性文件，properties 格式文件，写数据库信息（<strong>jdbc.properties</strong>）</p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">prop.driverClass</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">prop.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/userDb</span><br><span class="hljs-attr">prop.userName</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">prop.password</span>=<span class="hljs-string">root</span><br></code></pre></td></tr></table></figure><blockquote><p>（2）把外部 properties 属性文件引入到 spring 配置文件中 —— 引入 context 名称空间</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--引入context名称空间--&gt;</span><br>    <br>        <span class="hljs-comment">&lt;!--引入外部属性文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!--配置连接池--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;prop.driverClass&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;prop.url&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;prop.userName&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;prop.password&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring5</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于Hexo的个人博客网站</title>
    <link href="/2022/05/02/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E6%9C%89%E8%BF%99%E4%B8%AA%E7%BD%91%E7%AB%99/"/>
    <url>/2022/05/02/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E6%9C%89%E8%BF%99%E4%B8%AA%E7%BD%91%E7%AB%99/</url>
    
    <content type="html"><![CDATA[<h2 id="为什么会有这个网站？"><a href="#为什么会有这个网站？" class="headerlink" title="为什么会有这个网站？"></a>为什么会有这个网站？</h2><p>我是一名大二在校生，刚刚自学完JavaWeb，看到别人做的各种各样好看的网站，就也有了做一个网站的想法。</p><p>没想到做这个网站用到技术几乎都是我没有接触过的ε(┬┬_┬┬)3。不过域名也买了服务器也买了与其放着不如拿来用用，我从五一做到今天花了整整两天时间才搭好现在的框架，还有很多功能没有实现。希望这个学期放假前能够完善(flag已立)(..•˘_˘•..)。</p><p>以后也会慢慢在这个网站上分享自己学到的知识╭(●&#96;∀′●)╯</p><h2 id="用到的技术"><a href="#用到的技术" class="headerlink" title="用到的技术"></a>用到的技术</h2><ol><li><h4 id="node-js-git的底层"><a href="#node-js-git的底层" class="headerlink" title="node.js+git的底层"></a>node.js+git的底层</h4><p>bug：在安装完git后打算把Bolg文件夹建在E盘，建了半天也没成功，只好默认在C盘</p><p>原因：现在看来可能是当时没用管理员权限启动git导致</p></li><li><h4 id="hexo初始化"><a href="#hexo初始化" class="headerlink" title="hexo初始化"></a>hexo初始化</h4><p>bug：在初始化hexo的时候，一直初始化失败</p><p>原因：不会使用git切换目录，其实也是使用cd+路径的方法，不过路径有些不同：&#x2F;c&#x2F;Windows&#x2F;System32&#x2F;myblog，进入博客路径进行初始化</p></li><li><h4 id="GitHub的仓库部署-ssh验证"><a href="#GitHub的仓库部署-ssh验证" class="headerlink" title="GitHub的仓库部署+ssh验证"></a>GitHub的仓库部署+ssh验证</h4><p>bug：在本地实现主题后，部署到GitHub上没有显示css和js</p><p>原因：在博客路径下的_config.yml中的url中没有设置好链接，应该是：URL：访问网站的链接</p></li><li><h4 id="Fluid主题设置"><a href="#Fluid主题设置" class="headerlink" title="Fluid主题设置"></a>Fluid主题设置</h4><p>没有理解官方的操作手册上的步骤，应该是把thems目录下的 _config.yml复制到博客目录下并改名为 _config_fluid.yml，此后的操作便可以直接在该文件中操作，实现平滑升级，不过我没有配置，我的所有操作还是在thems中_config.yml中进行的</p></li><li><h4 id="微博图床-LeanCloud的评论系统"><a href="#微博图床-LeanCloud的评论系统" class="headerlink" title="微博图床+LeanCloud的评论系统"></a>微博图床+LeanCloud的评论系统</h4><p>将页面顶部的大图放到微博上生成url链接，而不是从本地目录下导入</p><p>bug：配置好相应的参数后没有显示评论模块</p><p>原因：不理解博客目录下各个文件夹的意思，可能是配置错了文件或位置，也可能引入文件错误</p></li><li><h4 id="关于页的生成和自定义社交图标"><a href="#关于页的生成和自定义社交图标" class="headerlink" title="关于页的生成和自定义社交图标"></a>关于页的生成和自定义社交图标</h4><p>其实关于页应该在安装号主题后就立刻初始化生成的，我直到设置完了前面的一切才发现，关于页还没初始化。我只好把主题删了重新初始化，现在看来或许不用删。</p><p>自定义图标用的是阿里的矢量图标</p></li><li><h4 id="页脚增加网站运行时长和版权声明优化"><a href="#页脚增加网站运行时长和版权声明优化" class="headerlink" title="页脚增加网站运行时长和版权声明优化"></a>页脚增加网站运行时长和版权声明优化</h4><p>增加网站运行时长的时候也是设置好了但没有效果，应该也是引入文件错误</p></li><li><h4 id="网页标题栏设置"><a href="#网页标题栏设置" class="headerlink" title="网页标题栏设置"></a>网页标题栏设置</h4><p>离开网站和返回网站的标题变化</p></li><li><h4 id="阿里云服务器-DNS解析-SSL证书"><a href="#阿里云服务器-DNS解析-SSL证书" class="headerlink" title="阿里云服务器+DNS解析+SSL证书"></a>阿里云服务器+DNS解析+SSL证书</h4><p>我的服务器是去年双十一的时候白嫖当时也不知道服务器能干啥，也不会用，后来又在阿里云上买了个域名。具备了搭建博客的基本条件</p><p>建立映射关系：将GitHub和阿里云链接到同一页面</p><p>备案：提交上各种证明材料然后等</p></li><li><h4 id="nginx实现https"><a href="#nginx实现https" class="headerlink" title="nginx实现https"></a>nginx实现https</h4><p>首先在阿里云上申请免费的ssl证书，然后下载证书文件上传到nginx中进行相应的配置</p><p>我是在宝塔上安装的nginx，路径和网上教程的路径不同，我一直以为改个路径就好了结果卡在这3个小时</p><p>其实直接按照教程上的路径按照配置就行，不过这样来说我的服务器上就会有两个nginx，好像也没什么影响</p></li><li><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><p>hexo-neat：提高网站的响应速度</p><p>hexo-browsersync：改动js，css，md等文件时会实时同步网页</p></li><li><h4 id="自动化部署"><a href="#自动化部署" class="headerlink" title="自动化部署"></a>自动化部署</h4><p>简而言之，就是远端部署不在本地执行，在 GitHub 上进行。</p><p>本地预览命令：hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</p><p>远端部署命令：hexo cl &amp;&amp; hexo g -d</p><p>将这两条指令设置到quicker中</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>起源</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
